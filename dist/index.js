var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { useLayoutEffect, useEffect, useMemo, useContext, useDebugValue, useReducer, useRef, StrictMode } from "react";
import ReactDOM, { unstable_batchedUpdates } from "react-dom";
import { BrowserRouter, Routes, Route } from "react-router-dom";
export { Link, NavLink, Navigate, Outlet, Route, Router, Routes, useLocation, useMatch, useNavigate, useParams, useResolvedPath, useSearchParams } from "react-router-dom";
import { AppLabLightTheme, AppLabDarkTheme } from "@srclaunch/themes";
export { matchPath, matchRoutes } from "react-router";
function n$6(n2) {
  for (var r2 = arguments.length, t2 = Array(r2 > 1 ? r2 - 1 : 0), e2 = 1; e2 < r2; e2++)
    t2[e2 - 1] = arguments[e2];
  throw Error("[Immer] minified error nr: " + n2 + (t2.length ? " " + t2.map(function(n3) {
    return "'" + n3 + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function r$6(n2) {
  return !!n2 && !!n2[Q$1];
}
function t$4(n2) {
  return !!n2 && (function(n3) {
    if (!n3 || typeof n3 != "object")
      return false;
    var r2 = Object.getPrototypeOf(n3);
    if (r2 === null)
      return true;
    var t2 = Object.hasOwnProperty.call(r2, "constructor") && r2.constructor;
    return t2 === Object || typeof t2 == "function" && Function.toString.call(t2) === Z$1;
  }(n2) || Array.isArray(n2) || !!n2[L$1] || !!n2.constructor[L$1] || s$4(n2) || v$3(n2));
}
function i$5(n2, r2, t2) {
  t2 === void 0 && (t2 = false), o$2(n2) === 0 ? (t2 ? Object.keys : nn)(n2).forEach(function(e2) {
    t2 && typeof e2 == "symbol" || r2(e2, n2[e2], n2);
  }) : n2.forEach(function(t3, e2) {
    return r2(e2, t3, n2);
  });
}
function o$2(n2) {
  var r2 = n2[Q$1];
  return r2 ? r2.i > 3 ? r2.i - 4 : r2.i : Array.isArray(n2) ? 1 : s$4(n2) ? 2 : v$3(n2) ? 3 : 0;
}
function u$2(n2, r2) {
  return o$2(n2) === 2 ? n2.has(r2) : Object.prototype.hasOwnProperty.call(n2, r2);
}
function a(n2, r2) {
  return o$2(n2) === 2 ? n2.get(r2) : n2[r2];
}
function f$3(n2, r2, t2) {
  var e2 = o$2(n2);
  e2 === 2 ? n2.set(r2, t2) : e2 === 3 ? (n2.delete(r2), n2.add(t2)) : n2[r2] = t2;
}
function c$3(n2, r2) {
  return n2 === r2 ? n2 !== 0 || 1 / n2 == 1 / r2 : n2 != n2 && r2 != r2;
}
function s$4(n2) {
  return X$1 && n2 instanceof Map;
}
function v$3(n2) {
  return q$4 && n2 instanceof Set;
}
function p$6(n2) {
  return n2.o || n2.t;
}
function l$4(n2) {
  if (Array.isArray(n2))
    return Array.prototype.slice.call(n2);
  var r2 = rn(n2);
  delete r2[Q$1];
  for (var t2 = nn(r2), e2 = 0; e2 < t2.length; e2++) {
    var i = t2[e2], o2 = r2[i];
    o2.writable === false && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (r2[i] = { configurable: true, writable: true, enumerable: o2.enumerable, value: n2[i] });
  }
  return Object.create(Object.getPrototypeOf(n2), r2);
}
function d$3(n2, e2) {
  return e2 === void 0 && (e2 = false), y$3(n2) || r$6(n2) || !t$4(n2) ? n2 : (o$2(n2) > 1 && (n2.set = n2.add = n2.clear = n2.delete = h$4), Object.freeze(n2), e2 && i$5(n2, function(n3, r2) {
    return d$3(r2, true);
  }, true), n2);
}
function h$4() {
  n$6(2);
}
function y$3(n2) {
  return n2 == null || typeof n2 != "object" || Object.isFrozen(n2);
}
function b$3(r2) {
  var t2 = tn[r2];
  return t2 || n$6(18, r2), t2;
}
function m$4(n2, r2) {
  tn[n2] || (tn[n2] = r2);
}
function _() {
  return U$1;
}
function j$1(n2, r2) {
  r2 && (b$3("Patches"), n2.u = [], n2.s = [], n2.v = r2);
}
function O$1(n2) {
  g$4(n2), n2.p.forEach(S), n2.p = null;
}
function g$4(n2) {
  n2 === U$1 && (U$1 = n2.l);
}
function w$3(n2) {
  return U$1 = { p: [], l: U$1, h: n2, m: true, _: 0 };
}
function S(n2) {
  var r2 = n2[Q$1];
  r2.i === 0 || r2.i === 1 ? r2.j() : r2.O = true;
}
function P$1(r2, e2) {
  e2._ = e2.p.length;
  var i = e2.p[0], o2 = r2 !== void 0 && r2 !== i;
  return e2.h.g || b$3("ES5").S(e2, r2, o2), o2 ? (i[Q$1].P && (O$1(e2), n$6(4)), t$4(r2) && (r2 = M(e2, r2), e2.l || x$4(e2, r2)), e2.u && b$3("Patches").M(i[Q$1].t, r2, e2.u, e2.s)) : r2 = M(e2, i, []), O$1(e2), e2.u && e2.v(e2.u, e2.s), r2 !== H$3 ? r2 : void 0;
}
function M(n2, r2, t2) {
  if (y$3(r2))
    return r2;
  var e2 = r2[Q$1];
  if (!e2)
    return i$5(r2, function(i, o3) {
      return A$2(n2, e2, r2, i, o3, t2);
    }, true), r2;
  if (e2.A !== n2)
    return r2;
  if (!e2.P)
    return x$4(n2, e2.t, true), e2.t;
  if (!e2.I) {
    e2.I = true, e2.A._--;
    var o2 = e2.i === 4 || e2.i === 5 ? e2.o = l$4(e2.k) : e2.o;
    i$5(e2.i === 3 ? new Set(o2) : o2, function(r3, i) {
      return A$2(n2, e2, o2, r3, i, t2);
    }), x$4(n2, o2, false), t2 && n2.u && b$3("Patches").R(e2, t2, n2.u, n2.s);
  }
  return e2.o;
}
function A$2(e2, i, o2, a2, c2, s2) {
  if (r$6(c2)) {
    var v2 = M(e2, c2, s2 && i && i.i !== 3 && !u$2(i.D, a2) ? s2.concat(a2) : void 0);
    if (f$3(o2, a2, v2), !r$6(v2))
      return;
    e2.m = false;
  }
  if (t$4(c2) && !y$3(c2)) {
    if (!e2.h.F && e2._ < 1)
      return;
    M(e2, c2), i && i.A.l || x$4(e2, c2);
  }
}
function x$4(n2, r2, t2) {
  t2 === void 0 && (t2 = false), n2.h.F && n2.m && d$3(r2, t2);
}
function z$4(n2, r2) {
  var t2 = n2[Q$1];
  return (t2 ? p$6(t2) : n2)[r2];
}
function I$3(n2, r2) {
  if (r2 in n2)
    for (var t2 = Object.getPrototypeOf(n2); t2; ) {
      var e2 = Object.getOwnPropertyDescriptor(t2, r2);
      if (e2)
        return e2;
      t2 = Object.getPrototypeOf(t2);
    }
}
function k$3(n2) {
  n2.P || (n2.P = true, n2.l && k$3(n2.l));
}
function E$2(n2) {
  n2.o || (n2.o = l$4(n2.t));
}
function R$1(n2, r2, t2) {
  var e2 = s$4(r2) ? b$3("MapSet").N(r2, t2) : v$3(r2) ? b$3("MapSet").T(r2, t2) : n2.g ? function(n3, r3) {
    var t3 = Array.isArray(n3), e3 = { i: t3 ? 1 : 0, A: r3 ? r3.A : _(), P: false, I: false, D: {}, l: r3, t: n3, k: null, o: null, j: null, C: false }, i = e3, o2 = en;
    t3 && (i = [e3], o2 = on);
    var u2 = Proxy.revocable(i, o2), a2 = u2.revoke, f2 = u2.proxy;
    return e3.k = f2, e3.j = a2, f2;
  }(r2, t2) : b$3("ES5").J(r2, t2);
  return (t2 ? t2.A : _()).p.push(e2), e2;
}
function D$2(e2) {
  return r$6(e2) || n$6(22, e2), function n2(r2) {
    if (!t$4(r2))
      return r2;
    var e3, u2 = r2[Q$1], c2 = o$2(r2);
    if (u2) {
      if (!u2.P && (u2.i < 4 || !b$3("ES5").K(u2)))
        return u2.t;
      u2.I = true, e3 = F$3(r2, c2), u2.I = false;
    } else
      e3 = F$3(r2, c2);
    return i$5(e3, function(r3, t2) {
      u2 && a(u2.t, r3) === t2 || f$3(e3, r3, n2(t2));
    }), c2 === 3 ? new Set(e3) : e3;
  }(e2);
}
function F$3(n2, r2) {
  switch (r2) {
    case 2:
      return new Map(n2);
    case 3:
      return Array.from(n2);
  }
  return l$4(n2);
}
function N$1() {
  function t2(n2, r2) {
    var t3 = s2[n2];
    return t3 ? t3.enumerable = r2 : s2[n2] = t3 = { configurable: true, enumerable: r2, get: function() {
      var r3 = this[Q$1];
      return en.get(r3, n2);
    }, set: function(r3) {
      var t4 = this[Q$1];
      en.set(t4, n2, r3);
    } }, t3;
  }
  function e2(n2) {
    for (var r2 = n2.length - 1; r2 >= 0; r2--) {
      var t3 = n2[r2][Q$1];
      if (!t3.P)
        switch (t3.i) {
          case 5:
            a2(t3) && k$3(t3);
            break;
          case 4:
            o2(t3) && k$3(t3);
        }
    }
  }
  function o2(n2) {
    for (var r2 = n2.t, t3 = n2.k, e3 = nn(t3), i = e3.length - 1; i >= 0; i--) {
      var o3 = e3[i];
      if (o3 !== Q$1) {
        var a3 = r2[o3];
        if (a3 === void 0 && !u$2(r2, o3))
          return true;
        var f2 = t3[o3], s4 = f2 && f2[Q$1];
        if (s4 ? s4.t !== a3 : !c$3(f2, a3))
          return true;
      }
    }
    var v2 = !!r2[Q$1];
    return e3.length !== nn(r2).length + (v2 ? 0 : 1);
  }
  function a2(n2) {
    var r2 = n2.k;
    if (r2.length !== n2.t.length)
      return true;
    var t3 = Object.getOwnPropertyDescriptor(r2, r2.length - 1);
    if (t3 && !t3.get)
      return true;
    for (var e3 = 0; e3 < r2.length; e3++)
      if (!r2.hasOwnProperty(e3))
        return true;
    return false;
  }
  var s2 = {};
  m$4("ES5", { J: function(n2, r2) {
    var e3 = Array.isArray(n2), i = function(n3, r3) {
      if (n3) {
        for (var e4 = Array(r3.length), i2 = 0; i2 < r3.length; i2++)
          Object.defineProperty(e4, "" + i2, t2(i2, true));
        return e4;
      }
      var o4 = rn(r3);
      delete o4[Q$1];
      for (var u2 = nn(o4), a3 = 0; a3 < u2.length; a3++) {
        var f2 = u2[a3];
        o4[f2] = t2(f2, n3 || !!o4[f2].enumerable);
      }
      return Object.create(Object.getPrototypeOf(r3), o4);
    }(e3, n2), o3 = { i: e3 ? 5 : 4, A: r2 ? r2.A : _(), P: false, I: false, D: {}, l: r2, t: n2, k: i, o: null, O: false, C: false };
    return Object.defineProperty(i, Q$1, { value: o3, writable: true }), i;
  }, S: function(n2, t3, o3) {
    o3 ? r$6(t3) && t3[Q$1].A === n2 && e2(n2.p) : (n2.u && function n3(r2) {
      if (r2 && typeof r2 == "object") {
        var t4 = r2[Q$1];
        if (t4) {
          var e3 = t4.t, o4 = t4.k, f2 = t4.D, c2 = t4.i;
          if (c2 === 4)
            i$5(o4, function(r3) {
              r3 !== Q$1 && (e3[r3] !== void 0 || u$2(e3, r3) ? f2[r3] || n3(o4[r3]) : (f2[r3] = true, k$3(t4)));
            }), i$5(e3, function(n4) {
              o4[n4] !== void 0 || u$2(o4, n4) || (f2[n4] = false, k$3(t4));
            });
          else if (c2 === 5) {
            if (a2(t4) && (k$3(t4), f2.length = true), o4.length < e3.length)
              for (var s4 = o4.length; s4 < e3.length; s4++)
                f2[s4] = false;
            else
              for (var v2 = e3.length; v2 < o4.length; v2++)
                f2[v2] = true;
            for (var p2 = Math.min(o4.length, e3.length), l2 = 0; l2 < p2; l2++)
              o4.hasOwnProperty(l2) || (f2[l2] = true), f2[l2] === void 0 && n3(o4[l2]);
          }
        }
      }
    }(n2.p[0]), e2(n2.p));
  }, K: function(n2) {
    return n2.i === 4 ? o2(n2) : a2(n2);
  } });
}
var G$3, U$1, W$1 = typeof Symbol != "undefined" && typeof Symbol("x") == "symbol", X$1 = typeof Map != "undefined", q$4 = typeof Set != "undefined", B$2 = typeof Proxy != "undefined" && Proxy.revocable !== void 0 && typeof Reflect != "undefined", H$3 = W$1 ? Symbol.for("immer-nothing") : ((G$3 = {})["immer-nothing"] = true, G$3), L$1 = W$1 ? Symbol.for("immer-draftable") : "__$immer_draftable", Q$1 = W$1 ? Symbol.for("immer-state") : "__$immer_state", Z$1 = "" + Object.prototype.constructor, nn = typeof Reflect != "undefined" && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols !== void 0 ? function(n2) {
  return Object.getOwnPropertyNames(n2).concat(Object.getOwnPropertySymbols(n2));
} : Object.getOwnPropertyNames, rn = Object.getOwnPropertyDescriptors || function(n2) {
  var r2 = {};
  return nn(n2).forEach(function(t2) {
    r2[t2] = Object.getOwnPropertyDescriptor(n2, t2);
  }), r2;
}, tn = {}, en = { get: function(n2, r2) {
  if (r2 === Q$1)
    return n2;
  var e2 = p$6(n2);
  if (!u$2(e2, r2))
    return function(n3, r3, t2) {
      var e3, i2 = I$3(r3, t2);
      return i2 ? "value" in i2 ? i2.value : (e3 = i2.get) === null || e3 === void 0 ? void 0 : e3.call(n3.k) : void 0;
    }(n2, e2, r2);
  var i = e2[r2];
  return n2.I || !t$4(i) ? i : i === z$4(n2.t, r2) ? (E$2(n2), n2.o[r2] = R$1(n2.A.h, i, n2)) : i;
}, has: function(n2, r2) {
  return r2 in p$6(n2);
}, ownKeys: function(n2) {
  return Reflect.ownKeys(p$6(n2));
}, set: function(n2, r2, t2) {
  var e2 = I$3(p$6(n2), r2);
  if (e2 == null ? void 0 : e2.set)
    return e2.set.call(n2.k, t2), true;
  if (!n2.P) {
    var i = z$4(p$6(n2), r2), o2 = i == null ? void 0 : i[Q$1];
    if (o2 && o2.t === t2)
      return n2.o[r2] = t2, n2.D[r2] = false, true;
    if (c$3(t2, i) && (t2 !== void 0 || u$2(n2.t, r2)))
      return true;
    E$2(n2), k$3(n2);
  }
  return n2.o[r2] === t2 && typeof t2 != "number" && (t2 !== void 0 || r2 in n2.o) || (n2.o[r2] = t2, n2.D[r2] = true, true);
}, deleteProperty: function(n2, r2) {
  return z$4(n2.t, r2) !== void 0 || r2 in n2.t ? (n2.D[r2] = false, E$2(n2), k$3(n2)) : delete n2.D[r2], n2.o && delete n2.o[r2], true;
}, getOwnPropertyDescriptor: function(n2, r2) {
  var t2 = p$6(n2), e2 = Reflect.getOwnPropertyDescriptor(t2, r2);
  return e2 ? { writable: true, configurable: n2.i !== 1 || r2 !== "length", enumerable: e2.enumerable, value: t2[r2] } : e2;
}, defineProperty: function() {
  n$6(11);
}, getPrototypeOf: function(n2) {
  return Object.getPrototypeOf(n2.t);
}, setPrototypeOf: function() {
  n$6(12);
} }, on = {};
i$5(en, function(n2, r2) {
  on[n2] = function() {
    return arguments[0] = arguments[0][0], r2.apply(this, arguments);
  };
}), on.deleteProperty = function(r2, t2) {
  return on.set.call(this, r2, t2, void 0);
}, on.set = function(r2, t2, e2) {
  return en.set.call(this, r2[0], t2, e2, r2[0]);
};
var un$1 = function() {
  function e2(r2) {
    var e3 = this;
    this.g = B$2, this.F = true, this.produce = function(r3, i2, o2) {
      if (typeof r3 == "function" && typeof i2 != "function") {
        var u2 = i2;
        i2 = r3;
        var a2 = e3;
        return function(n2) {
          var r4 = this;
          n2 === void 0 && (n2 = u2);
          for (var t2 = arguments.length, e4 = Array(t2 > 1 ? t2 - 1 : 0), o3 = 1; o3 < t2; o3++)
            e4[o3 - 1] = arguments[o3];
          return a2.produce(n2, function(n3) {
            var t3;
            return (t3 = i2).call.apply(t3, [r4, n3].concat(e4));
          });
        };
      }
      var f2;
      if (typeof i2 != "function" && n$6(6), o2 !== void 0 && typeof o2 != "function" && n$6(7), t$4(r3)) {
        var c2 = w$3(e3), s2 = R$1(e3, r3, void 0), v2 = true;
        try {
          f2 = i2(s2), v2 = false;
        } finally {
          v2 ? O$1(c2) : g$4(c2);
        }
        return typeof Promise != "undefined" && f2 instanceof Promise ? f2.then(function(n2) {
          return j$1(c2, o2), P$1(n2, c2);
        }, function(n2) {
          throw O$1(c2), n2;
        }) : (j$1(c2, o2), P$1(f2, c2));
      }
      if (!r3 || typeof r3 != "object") {
        if ((f2 = i2(r3)) === void 0 && (f2 = r3), f2 === H$3 && (f2 = void 0), e3.F && d$3(f2, true), o2) {
          var p2 = [], l2 = [];
          b$3("Patches").M(r3, f2, p2, l2), o2(p2, l2);
        }
        return f2;
      }
      n$6(21, r3);
    }, this.produceWithPatches = function(n2, r3) {
      if (typeof n2 == "function")
        return function(r4) {
          for (var t3 = arguments.length, i3 = Array(t3 > 1 ? t3 - 1 : 0), o3 = 1; o3 < t3; o3++)
            i3[o3 - 1] = arguments[o3];
          return e3.produceWithPatches(r4, function(r5) {
            return n2.apply(void 0, [r5].concat(i3));
          });
        };
      var t2, i2, o2 = e3.produce(n2, r3, function(n3, r4) {
        t2 = n3, i2 = r4;
      });
      return typeof Promise != "undefined" && o2 instanceof Promise ? o2.then(function(n3) {
        return [n3, t2, i2];
      }) : [o2, t2, i2];
    }, typeof (r2 == null ? void 0 : r2.useProxies) == "boolean" && this.setUseProxies(r2.useProxies), typeof (r2 == null ? void 0 : r2.autoFreeze) == "boolean" && this.setAutoFreeze(r2.autoFreeze);
  }
  var i = e2.prototype;
  return i.createDraft = function(e3) {
    t$4(e3) || n$6(8), r$6(e3) && (e3 = D$2(e3));
    var i2 = w$3(this), o2 = R$1(this, e3, void 0);
    return o2[Q$1].C = true, g$4(i2), o2;
  }, i.finishDraft = function(r2, t2) {
    var e3 = r2 && r2[Q$1];
    var i2 = e3.A;
    return j$1(i2, t2), P$1(void 0, i2);
  }, i.setAutoFreeze = function(n2) {
    this.F = n2;
  }, i.setUseProxies = function(r2) {
    r2 && !B$2 && n$6(20), this.g = r2;
  }, i.applyPatches = function(n2, t2) {
    var e3;
    for (e3 = t2.length - 1; e3 >= 0; e3--) {
      var i2 = t2[e3];
      if (i2.path.length === 0 && i2.op === "replace") {
        n2 = i2.value;
        break;
      }
    }
    e3 > -1 && (t2 = t2.slice(e3 + 1));
    var o2 = b$3("Patches").$;
    return r$6(n2) ? o2(n2, t2) : this.produce(n2, function(n3) {
      return o2(n3, t2);
    });
  }, e2;
}(), an = new un$1(), fn$1 = an.produce;
an.produceWithPatches.bind(an);
an.setAutoFreeze.bind(an);
an.setUseProxies.bind(an);
an.applyPatches.bind(an);
an.createDraft.bind(an);
an.finishDraft.bind(an);
var createNextState2 = fn$1;
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function formatProdErrorMessage(code2) {
  return "Minified Redux error #" + code2 + "; visit https://redux.js.org/Errors?code=" + code2 + " for the full message or use the non-minified dev environment for full errors. ";
}
var $$observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
var randomString = function randomString2() {
  return Math.random().toString(36).substring(7).split("").join(".");
};
var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};
function isPlainObject$1(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(obj) === proto;
}
function createStore$1(reducer, preloadedState, enhancer) {
  var _ref2;
  if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
    throw new Error(formatProdErrorMessage(0));
  }
  if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== "undefined") {
    if (typeof enhancer !== "function") {
      throw new Error(formatProdErrorMessage(1));
    }
    return enhancer(createStore$1)(reducer, preloadedState);
  }
  if (typeof reducer !== "function") {
    throw new Error(formatProdErrorMessage(2));
  }
  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  function getState() {
    if (isDispatching) {
      throw new Error(formatProdErrorMessage(3));
    }
    return currentState;
  }
  function subscribe(listener) {
    if (typeof listener !== "function") {
      throw new Error(formatProdErrorMessage(4));
    }
    if (isDispatching) {
      throw new Error(formatProdErrorMessage(5));
    }
    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error(formatProdErrorMessage(6));
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
      currentListeners = null;
    };
  }
  function dispatch(action) {
    if (!isPlainObject$1(action)) {
      throw new Error(formatProdErrorMessage(7));
    }
    if (typeof action.type === "undefined") {
      throw new Error(formatProdErrorMessage(8));
    }
    if (isDispatching) {
      throw new Error(formatProdErrorMessage(9));
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    var listeners2 = currentListeners = nextListeners;
    for (var i = 0; i < listeners2.length; i++) {
      var listener = listeners2[i];
      listener();
    }
    return action;
  }
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== "function") {
      throw new Error(formatProdErrorMessage(10));
    }
    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  function observable() {
    var _ref;
    var outerSubscribe = subscribe;
    return _ref = {
      subscribe: function subscribe2(observer) {
        if (typeof observer !== "object" || observer === null) {
          throw new Error(formatProdErrorMessage(11));
        }
        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }
        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe
        };
      }
    }, _ref[$$observable] = function() {
      return this;
    }, _ref;
  }
  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch,
    subscribe,
    getState,
    replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}
function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function(key) {
    var reducer = reducers[key];
    var initialState2 = reducer(void 0, {
      type: ActionTypes.INIT
    });
    if (typeof initialState2 === "undefined") {
      throw new Error(formatProdErrorMessage(12));
    }
    if (typeof reducer(void 0, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === "undefined") {
      throw new Error(formatProdErrorMessage(13));
    }
  });
}
function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};
  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];
    if (typeof reducers[key] === "function") {
      finalReducers[key] = reducers[key];
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);
  var shapeAssertionError;
  try {
    assertReducerShape(finalReducers);
  } catch (e2) {
    shapeAssertionError = e2;
  }
  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }
    if (shapeAssertionError) {
      throw shapeAssertionError;
    }
    var hasChanged = false;
    var nextState = {};
    for (var _i2 = 0; _i2 < finalReducerKeys.length; _i2++) {
      var _key = finalReducerKeys[_i2];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === "undefined") {
        action && action.type;
        throw new Error(formatProdErrorMessage(14));
      }
      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}
function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  if (funcs.length === 0) {
    return function(arg) {
      return arg;
    };
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce(function(a2, b2) {
    return function() {
      return a2(b2.apply(void 0, arguments));
    };
  });
}
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }
  return function(createStore2) {
    return function() {
      var store = createStore2.apply(void 0, arguments);
      var _dispatch = function dispatch() {
        throw new Error(formatProdErrorMessage(15));
      };
      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function(middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread2(_objectSpread2({}, store), {}, {
        dispatch: _dispatch
      });
    };
  };
}
var NOT_FOUND = "NOT_FOUND";
function createSingletonCache(equals) {
  var entry;
  return {
    get: function get5(key) {
      if (entry && equals(entry.key, key)) {
        return entry.value;
      }
      return NOT_FOUND;
    },
    put: function put(key, value) {
      entry = {
        key,
        value
      };
    },
    getEntries: function getEntries() {
      return entry ? [entry] : [];
    },
    clear: function clear2() {
      entry = void 0;
    }
  };
}
function createLruCache(maxSize, equals) {
  var entries = [];
  function get5(key) {
    var cacheIndex = entries.findIndex(function(entry2) {
      return equals(key, entry2.key);
    });
    if (cacheIndex > -1) {
      var entry = entries[cacheIndex];
      if (cacheIndex > 0) {
        entries.splice(cacheIndex, 1);
        entries.unshift(entry);
      }
      return entry.value;
    }
    return NOT_FOUND;
  }
  function put(key, value) {
    if (get5(key) === NOT_FOUND) {
      entries.unshift({
        key,
        value
      });
      if (entries.length > maxSize) {
        entries.pop();
      }
    }
  }
  function getEntries() {
    return entries;
  }
  function clear2() {
    entries = [];
  }
  return {
    get: get5,
    put,
    getEntries,
    clear: clear2
  };
}
var defaultEqualityCheck = function defaultEqualityCheck2(a2, b2) {
  return a2 === b2;
};
function createCacheKeyComparator(equalityCheck) {
  return function areArgumentsShallowlyEqual(prev, next) {
    if (prev === null || next === null || prev.length !== next.length) {
      return false;
    }
    var length = prev.length;
    for (var i = 0; i < length; i++) {
      if (!equalityCheck(prev[i], next[i])) {
        return false;
      }
    }
    return true;
  };
}
function defaultMemoize(func, equalityCheckOrOptions) {
  var providedOptions = typeof equalityCheckOrOptions === "object" ? equalityCheckOrOptions : {
    equalityCheck: equalityCheckOrOptions
  };
  var _providedOptions$equa = providedOptions.equalityCheck, equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa, _providedOptions$maxS = providedOptions.maxSize, maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS, resultEqualityCheck = providedOptions.resultEqualityCheck;
  var comparator = createCacheKeyComparator(equalityCheck);
  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);
  function memoized() {
    var value = cache.get(arguments);
    if (value === NOT_FOUND) {
      value = func.apply(null, arguments);
      if (resultEqualityCheck) {
        var entries = cache.getEntries();
        var matchingEntry = entries.find(function(entry) {
          return resultEqualityCheck(entry.value, value);
        });
        if (matchingEntry) {
          value = matchingEntry.value;
        }
      }
      cache.put(arguments, value);
    }
    return value;
  }
  memoized.clearCache = function() {
    return cache.clear();
  };
  return memoized;
}
function getDependencies(funcs) {
  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
  if (!dependencies.every(function(dep) {
    return typeof dep === "function";
  })) {
    var dependencyTypes = dependencies.map(function(dep) {
      return typeof dep === "function" ? "function " + (dep.name || "unnamed") + "()" : typeof dep;
    }).join(", ");
    throw new Error("createSelector expects all input-selectors to be functions, but received the following types: [" + dependencyTypes + "]");
  }
  return dependencies;
}
function createSelectorCreator(memoize2) {
  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    memoizeOptionsFromArgs[_key - 1] = arguments[_key];
  }
  var createSelector2 = function createSelector3() {
    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      funcs[_key2] = arguments[_key2];
    }
    var _recomputations = 0;
    var _lastResult;
    var directlyPassedOptions = {
      memoizeOptions: void 0
    };
    var resultFunc = funcs.pop();
    if (typeof resultFunc === "object") {
      directlyPassedOptions = resultFunc;
      resultFunc = funcs.pop();
    }
    if (typeof resultFunc !== "function") {
      throw new Error("createSelector expects an output function after the inputs, but received: [" + typeof resultFunc + "]");
    }
    var _directlyPassedOption = directlyPassedOptions, _directlyPassedOption2 = _directlyPassedOption.memoizeOptions, memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2;
    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];
    var dependencies = getDependencies(funcs);
    var memoizedResultFunc = memoize2.apply(void 0, [function() {
      _recomputations++;
      return resultFunc.apply(null, arguments);
    }].concat(finalMemoizeOptions));
    var selector = memoize2(function() {
      var params = [];
      var length = dependencies.length;
      for (var i = 0; i < length; i++) {
        params.push(dependencies[i].apply(null, arguments));
      }
      _lastResult = memoizedResultFunc.apply(null, params);
      return _lastResult;
    });
    Object.assign(selector, {
      resultFunc,
      memoizedResultFunc,
      dependencies,
      lastResult: function lastResult() {
        return _lastResult;
      },
      recomputations: function recomputations() {
        return _recomputations;
      },
      resetRecomputations: function resetRecomputations() {
        return _recomputations = 0;
      }
    });
    return selector;
  };
  return createSelector2;
}
var createSelector = /* @__PURE__ */ createSelectorCreator(defaultMemoize);
function createThunkMiddleware(extraArgument) {
  var middleware = function middleware2(_ref) {
    var dispatch = _ref.dispatch, getState = _ref.getState;
    return function(next) {
      return function(action) {
        if (typeof action === "function") {
          return action(dispatch, getState, extraArgument);
        }
        return next(action);
      };
    };
  };
  return middleware;
}
var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;
var thunkMiddleware = thunk;
var __extends = globalThis && globalThis.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d3[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
globalThis && globalThis.__generator || function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e2) {
        op = [6, e2];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __spreadArray = globalThis && globalThis.__spreadArray || function(to, from) {
  for (var i = 0, il = from.length, j2 = to.length; i < il; i++, j2++)
    to[j2] = from[i];
  return to;
};
var __defProp2 = Object.defineProperty;
var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp2 = function(obj, key, value) {
  return key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
};
var __spreadValues2 = function(a2, b2) {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp2.call(b2, prop))
      __defNormalProp2(a2, prop, b2[prop]);
  if (__getOwnPropSymbols2)
    for (var _i2 = 0, _c = __getOwnPropSymbols2(b2); _i2 < _c.length; _i2++) {
      var prop = _c[_i2];
      if (__propIsEnum2.call(b2, prop))
        __defNormalProp2(a2, prop, b2[prop]);
    }
  return a2;
};
var createDraftSafeSelector = function() {
  var args = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    args[_i2] = arguments[_i2];
  }
  var selector = createSelector.apply(void 0, args);
  var wrappedSelector = function(value) {
    var rest2 = [];
    for (var _i3 = 1; _i3 < arguments.length; _i3++) {
      rest2[_i3 - 1] = arguments[_i3];
    }
    return selector.apply(void 0, __spreadArray([r$6(value) ? D$2(value) : value], rest2));
  };
  return wrappedSelector;
};
var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
  if (arguments.length === 0)
    return void 0;
  if (typeof arguments[0] === "object")
    return compose;
  return compose.apply(null, arguments);
};
function isPlainObject(value) {
  if (typeof value !== "object" || value === null)
    return false;
  var proto = Object.getPrototypeOf(value);
  if (proto === null)
    return true;
  var baseProto = proto;
  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }
  return proto === baseProto;
}
var MiddlewareArray = function(_super) {
  __extends(MiddlewareArray2, _super);
  function MiddlewareArray2() {
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    var _this = _super.apply(this, args) || this;
    Object.setPrototypeOf(_this, MiddlewareArray2.prototype);
    return _this;
  }
  Object.defineProperty(MiddlewareArray2, Symbol.species, {
    get: function() {
      return MiddlewareArray2;
    },
    enumerable: false,
    configurable: true
  });
  MiddlewareArray2.prototype.concat = function() {
    var arr = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      arr[_i2] = arguments[_i2];
    }
    return _super.prototype.concat.apply(this, arr);
  };
  MiddlewareArray2.prototype.prepend = function() {
    var arr = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      arr[_i2] = arguments[_i2];
    }
    if (arr.length === 1 && Array.isArray(arr[0])) {
      return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr[0].concat(this))))();
    }
    return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr.concat(this))))();
  };
  return MiddlewareArray2;
}(Array);
function isBoolean(x2) {
  return typeof x2 === "boolean";
}
function curryGetDefaultMiddleware() {
  return function curriedGetDefaultMiddleware(options) {
    return getDefaultMiddleware(options);
  };
}
function getDefaultMiddleware(options) {
  if (options === void 0) {
    options = {};
  }
  var _c = options.thunk, thunk2 = _c === void 0 ? true : _c;
  options.immutableCheck;
  options.serializableCheck;
  var middlewareArray = new MiddlewareArray();
  if (thunk2) {
    if (isBoolean(thunk2)) {
      middlewareArray.push(thunkMiddleware);
    } else {
      middlewareArray.push(thunkMiddleware.withExtraArgument(thunk2.extraArgument));
    }
  }
  return middlewareArray;
}
var IS_PRODUCTION = true;
function configureStore(options) {
  var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();
  var _c = options || {}, _d = _c.reducer, reducer = _d === void 0 ? void 0 : _d, _e2 = _c.middleware, middleware = _e2 === void 0 ? curriedGetDefaultMiddleware() : _e2, _f = _c.devTools, devTools = _f === void 0 ? true : _f, _g = _c.preloadedState, preloadedState = _g === void 0 ? void 0 : _g, _h = _c.enhancers, enhancers = _h === void 0 ? void 0 : _h;
  var rootReducer;
  if (typeof reducer === "function") {
    rootReducer = reducer;
  } else if (isPlainObject(reducer)) {
    rootReducer = combineReducers(reducer);
  } else {
    throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
  }
  var finalMiddleware = middleware;
  if (typeof finalMiddleware === "function") {
    finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
  }
  var middlewareEnhancer = applyMiddleware.apply(void 0, finalMiddleware);
  var finalCompose = compose;
  if (devTools) {
    finalCompose = composeWithDevTools(__spreadValues2({
      trace: !IS_PRODUCTION
    }, typeof devTools === "object" && devTools));
  }
  var storeEnhancers = [middlewareEnhancer];
  if (Array.isArray(enhancers)) {
    storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);
  } else if (typeof enhancers === "function") {
    storeEnhancers = enhancers(storeEnhancers);
  }
  var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
  return createStore$1(rootReducer, preloadedState, composedEnhancer);
}
function createAction(type, prepareAction) {
  function actionCreator() {
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    if (prepareAction) {
      var prepared = prepareAction.apply(void 0, args);
      if (!prepared) {
        throw new Error("prepareAction did not return an object");
      }
      return __spreadValues2(__spreadValues2({
        type,
        payload: prepared.payload
      }, "meta" in prepared && { meta: prepared.meta }), "error" in prepared && { error: prepared.error });
    }
    return { type, payload: args[0] };
  }
  actionCreator.toString = function() {
    return "" + type;
  };
  actionCreator.type = type;
  actionCreator.match = function(action) {
    return action.type === type;
  };
  return actionCreator;
}
function isFSA(action) {
  return isPlainObject(action) && typeof action.type === "string" && Object.keys(action).every(isValidKey);
}
function isValidKey(key) {
  return ["type", "payload", "error", "meta"].indexOf(key) > -1;
}
function executeReducerBuilderCallback(builderCallback) {
  var actionsMap = {};
  var actionMatchers = [];
  var defaultCaseReducer;
  var builder2 = {
    addCase: function(typeOrActionCreator, reducer) {
      var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
      if (type in actionsMap) {
        throw new Error("addCase cannot be called with two reducers for the same action type");
      }
      actionsMap[type] = reducer;
      return builder2;
    },
    addMatcher: function(matcher, reducer) {
      actionMatchers.push({ matcher, reducer });
      return builder2;
    },
    addDefaultCase: function(reducer) {
      defaultCaseReducer = reducer;
      return builder2;
    }
  };
  builderCallback(builder2);
  return [actionsMap, actionMatchers, defaultCaseReducer];
}
function isStateFunction(x2) {
  return typeof x2 === "function";
}
function createReducer(initialState2, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
  if (actionMatchers === void 0) {
    actionMatchers = [];
  }
  var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];
  var getInitialState;
  if (isStateFunction(initialState2)) {
    getInitialState = function() {
      return createNextState2(initialState2(), function() {
      });
    };
  } else {
    var frozenInitialState_1 = createNextState2(initialState2, function() {
    });
    getInitialState = function() {
      return frozenInitialState_1;
    };
  }
  function reducer(state, action) {
    if (state === void 0) {
      state = getInitialState();
    }
    var caseReducers = __spreadArray([
      actionsMap[action.type]
    ], finalActionMatchers.filter(function(_c2) {
      var matcher = _c2.matcher;
      return matcher(action);
    }).map(function(_c2) {
      var reducer2 = _c2.reducer;
      return reducer2;
    }));
    if (caseReducers.filter(function(cr) {
      return !!cr;
    }).length === 0) {
      caseReducers = [finalDefaultCaseReducer];
    }
    return caseReducers.reduce(function(previousState, caseReducer) {
      if (caseReducer) {
        if (r$6(previousState)) {
          var draft = previousState;
          var result = caseReducer(draft, action);
          if (typeof result === "undefined") {
            return previousState;
          }
          return result;
        } else if (!t$4(previousState)) {
          var result = caseReducer(previousState, action);
          if (typeof result === "undefined") {
            if (previousState === null) {
              return previousState;
            }
            throw Error("A case reducer on a non-draftable value must not return undefined");
          }
          return result;
        } else {
          return createNextState2(previousState, function(draft2) {
            return caseReducer(draft2, action);
          });
        }
      }
      return previousState;
    }, state);
  }
  reducer.getInitialState = getInitialState;
  return reducer;
}
function getType2(slice2, actionKey) {
  return slice2 + "/" + actionKey;
}
function createSlice(options) {
  var name = options.name;
  if (!name) {
    throw new Error("`name` is a required option for createSlice");
  }
  var initialState2 = typeof options.initialState == "function" ? options.initialState : createNextState2(options.initialState, function() {
  });
  var reducers = options.reducers || {};
  var reducerNames = Object.keys(reducers);
  var sliceCaseReducersByName = {};
  var sliceCaseReducersByType = {};
  var actionCreators = {};
  reducerNames.forEach(function(reducerName) {
    var maybeReducerWithPrepare = reducers[reducerName];
    var type = getType2(name, reducerName);
    var caseReducer;
    var prepareCallback;
    if ("reducer" in maybeReducerWithPrepare) {
      caseReducer = maybeReducerWithPrepare.reducer;
      prepareCallback = maybeReducerWithPrepare.prepare;
    } else {
      caseReducer = maybeReducerWithPrepare;
    }
    sliceCaseReducersByName[reducerName] = caseReducer;
    sliceCaseReducersByType[type] = caseReducer;
    actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
  });
  function buildReducer() {
    var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e2 = _c[1], actionMatchers = _e2 === void 0 ? [] : _e2, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;
    var finalCaseReducers = __spreadValues2(__spreadValues2({}, extraReducers), sliceCaseReducersByType);
    return createReducer(initialState2, finalCaseReducers, actionMatchers, defaultCaseReducer);
  }
  var _reducer;
  return {
    name,
    reducer: function(state, action) {
      if (!_reducer)
        _reducer = buildReducer();
      return _reducer(state, action);
    },
    actions: actionCreators,
    caseReducers: sliceCaseReducersByName,
    getInitialState: function() {
      if (!_reducer)
        _reducer = buildReducer();
      return _reducer.getInitialState();
    }
  };
}
function getInitialEntityState() {
  return {
    ids: [],
    entities: {}
  };
}
function createInitialStateFactory() {
  function getInitialState(additionalState) {
    if (additionalState === void 0) {
      additionalState = {};
    }
    return Object.assign(getInitialEntityState(), additionalState);
  }
  return { getInitialState };
}
function createSelectorsFactory() {
  function getSelectors(selectState) {
    var selectIds = function(state) {
      return state.ids;
    };
    var selectEntities = function(state) {
      return state.entities;
    };
    var selectAll = createDraftSafeSelector(selectIds, selectEntities, function(ids, entities) {
      return ids.map(function(id) {
        return entities[id];
      });
    });
    var selectId = function(_2, id) {
      return id;
    };
    var selectById = function(entities, id) {
      return entities[id];
    };
    var selectTotal = createDraftSafeSelector(selectIds, function(ids) {
      return ids.length;
    });
    if (!selectState) {
      return {
        selectIds,
        selectEntities,
        selectAll,
        selectTotal,
        selectById: createDraftSafeSelector(selectEntities, selectId, selectById)
      };
    }
    var selectGlobalizedEntities = createDraftSafeSelector(selectState, selectEntities);
    return {
      selectIds: createDraftSafeSelector(selectState, selectIds),
      selectEntities: selectGlobalizedEntities,
      selectAll: createDraftSafeSelector(selectState, selectAll),
      selectTotal: createDraftSafeSelector(selectState, selectTotal),
      selectById: createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById)
    };
  }
  return { getSelectors };
}
function createSingleArgumentStateOperator(mutator) {
  var operator = createStateOperator(function(_2, state) {
    return mutator(state);
  });
  return function operation2(state) {
    return operator(state, void 0);
  };
}
function createStateOperator(mutator) {
  return function operation2(state, arg) {
    function isPayloadActionArgument(arg2) {
      return isFSA(arg2);
    }
    var runMutator = function(draft) {
      if (isPayloadActionArgument(arg)) {
        mutator(arg.payload, draft);
      } else {
        mutator(arg, draft);
      }
    };
    if (r$6(state)) {
      runMutator(state);
      return state;
    } else {
      return createNextState2(state, runMutator);
    }
  };
}
function selectIdValue(entity, selectId) {
  var key = selectId(entity);
  return key;
}
function ensureEntitiesArray(entities) {
  if (!Array.isArray(entities)) {
    entities = Object.values(entities);
  }
  return entities;
}
function splitAddedUpdatedEntities(newEntities, selectId, state) {
  newEntities = ensureEntitiesArray(newEntities);
  var added = [];
  var updated = [];
  for (var _i2 = 0, newEntities_1 = newEntities; _i2 < newEntities_1.length; _i2++) {
    var entity = newEntities_1[_i2];
    var id = selectIdValue(entity, selectId);
    if (id in state.entities) {
      updated.push({ id, changes: entity });
    } else {
      added.push(entity);
    }
  }
  return [added, updated];
}
function createUnsortedStateAdapter(selectId) {
  function addOneMutably(entity, state) {
    var key = selectIdValue(entity, selectId);
    if (key in state.entities) {
      return;
    }
    state.ids.push(key);
    state.entities[key] = entity;
  }
  function addManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    for (var _i2 = 0, newEntities_2 = newEntities; _i2 < newEntities_2.length; _i2++) {
      var entity = newEntities_2[_i2];
      addOneMutably(entity, state);
    }
  }
  function setOneMutably(entity, state) {
    var key = selectIdValue(entity, selectId);
    if (!(key in state.entities)) {
      state.ids.push(key);
    }
    state.entities[key] = entity;
  }
  function setManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    for (var _i2 = 0, newEntities_3 = newEntities; _i2 < newEntities_3.length; _i2++) {
      var entity = newEntities_3[_i2];
      setOneMutably(entity, state);
    }
  }
  function setAllMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    state.ids = [];
    state.entities = {};
    addManyMutably(newEntities, state);
  }
  function removeOneMutably(key, state) {
    return removeManyMutably([key], state);
  }
  function removeManyMutably(keys, state) {
    var didMutate = false;
    keys.forEach(function(key) {
      if (key in state.entities) {
        delete state.entities[key];
        didMutate = true;
      }
    });
    if (didMutate) {
      state.ids = state.ids.filter(function(id) {
        return id in state.entities;
      });
    }
  }
  function removeAllMutably(state) {
    Object.assign(state, {
      ids: [],
      entities: {}
    });
  }
  function takeNewKey(keys, update3, state) {
    var original2 = state.entities[update3.id];
    var updated = Object.assign({}, original2, update3.changes);
    var newKey = selectIdValue(updated, selectId);
    var hasNewKey = newKey !== update3.id;
    if (hasNewKey) {
      keys[update3.id] = newKey;
      delete state.entities[update3.id];
    }
    state.entities[newKey] = updated;
    return hasNewKey;
  }
  function updateOneMutably(update3, state) {
    return updateManyMutably([update3], state);
  }
  function updateManyMutably(updates, state) {
    var newKeys = {};
    var updatesPerEntity = {};
    updates.forEach(function(update3) {
      if (update3.id in state.entities) {
        updatesPerEntity[update3.id] = {
          id: update3.id,
          changes: __spreadValues2(__spreadValues2({}, updatesPerEntity[update3.id] ? updatesPerEntity[update3.id].changes : null), update3.changes)
        };
      }
    });
    updates = Object.values(updatesPerEntity);
    var didMutateEntities = updates.length > 0;
    if (didMutateEntities) {
      var didMutateIds = updates.filter(function(update3) {
        return takeNewKey(newKeys, update3, state);
      }).length > 0;
      if (didMutateIds) {
        state.ids = state.ids.map(function(id) {
          return newKeys[id] || id;
        });
      }
    }
  }
  function upsertOneMutably(entity, state) {
    return upsertManyMutably([entity], state);
  }
  function upsertManyMutably(newEntities, state) {
    var _c = splitAddedUpdatedEntities(newEntities, selectId, state), added = _c[0], updated = _c[1];
    updateManyMutably(updated, state);
    addManyMutably(added, state);
  }
  return {
    removeAll: createSingleArgumentStateOperator(removeAllMutably),
    addOne: createStateOperator(addOneMutably),
    addMany: createStateOperator(addManyMutably),
    setOne: createStateOperator(setOneMutably),
    setMany: createStateOperator(setManyMutably),
    setAll: createStateOperator(setAllMutably),
    updateOne: createStateOperator(updateOneMutably),
    updateMany: createStateOperator(updateManyMutably),
    upsertOne: createStateOperator(upsertOneMutably),
    upsertMany: createStateOperator(upsertManyMutably),
    removeOne: createStateOperator(removeOneMutably),
    removeMany: createStateOperator(removeManyMutably)
  };
}
function createSortedStateAdapter(selectId, sort) {
  var _c = createUnsortedStateAdapter(selectId), removeOne = _c.removeOne, removeMany = _c.removeMany, removeAll = _c.removeAll;
  function addOneMutably(entity, state) {
    return addManyMutably([entity], state);
  }
  function addManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    var models = newEntities.filter(function(model) {
      return !(selectIdValue(model, selectId) in state.entities);
    });
    if (models.length !== 0) {
      merge2(models, state);
    }
  }
  function setOneMutably(entity, state) {
    return setManyMutably([entity], state);
  }
  function setManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    if (newEntities.length !== 0) {
      merge2(newEntities, state);
    }
  }
  function setAllMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    state.entities = {};
    state.ids = [];
    addManyMutably(newEntities, state);
  }
  function updateOneMutably(update3, state) {
    return updateManyMutably([update3], state);
  }
  function takeUpdatedModel(models, update3, state) {
    if (!(update3.id in state.entities)) {
      return false;
    }
    var original2 = state.entities[update3.id];
    var updated = Object.assign({}, original2, update3.changes);
    var newKey = selectIdValue(updated, selectId);
    delete state.entities[update3.id];
    models.push(updated);
    return newKey !== update3.id;
  }
  function updateManyMutably(updates, state) {
    var models = [];
    updates.forEach(function(update3) {
      return takeUpdatedModel(models, update3, state);
    });
    if (models.length !== 0) {
      merge2(models, state);
    }
  }
  function upsertOneMutably(entity, state) {
    return upsertManyMutably([entity], state);
  }
  function upsertManyMutably(newEntities, state) {
    var _c2 = splitAddedUpdatedEntities(newEntities, selectId, state), added = _c2[0], updated = _c2[1];
    updateManyMutably(updated, state);
    addManyMutably(added, state);
  }
  function areArraysEqual(a2, b2) {
    if (a2.length !== b2.length) {
      return false;
    }
    for (var i = 0; i < a2.length && i < b2.length; i++) {
      if (a2[i] === b2[i]) {
        continue;
      }
      return false;
    }
    return true;
  }
  function merge2(models, state) {
    models.forEach(function(model) {
      state.entities[selectId(model)] = model;
    });
    var allEntities = Object.values(state.entities);
    allEntities.sort(sort);
    var newSortedIds = allEntities.map(selectId);
    var ids = state.ids;
    if (!areArraysEqual(ids, newSortedIds)) {
      state.ids = newSortedIds;
    }
  }
  return {
    removeOne,
    removeMany,
    removeAll,
    addOne: createStateOperator(addOneMutably),
    updateOne: createStateOperator(updateOneMutably),
    upsertOne: createStateOperator(upsertOneMutably),
    setOne: createStateOperator(setOneMutably),
    setMany: createStateOperator(setManyMutably),
    setAll: createStateOperator(setAllMutably),
    addMany: createStateOperator(addManyMutably),
    updateMany: createStateOperator(updateManyMutably),
    upsertMany: createStateOperator(upsertManyMutably)
  };
}
function createEntityAdapter(options) {
  if (options === void 0) {
    options = {};
  }
  var _c = __spreadValues2({
    sortComparer: false,
    selectId: function(instance) {
      return instance.id;
    }
  }, options), selectId = _c.selectId, sortComparer = _c.sortComparer;
  var stateFactory = createInitialStateFactory();
  var selectorsFactory = createSelectorsFactory();
  var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);
  return __spreadValues2(__spreadValues2(__spreadValues2({
    selectId,
    sortComparer
  }, stateFactory), selectorsFactory), stateAdapter);
}
var alm = "listenerMiddleware";
createAction(alm + "/add");
createAction(alm + "/removeAll");
createAction(alm + "/remove");
N$1();
var Activities;
(function(Activities2) {
  Activities2["Comment"] = "comment";
  Activities2["Create"] = "create";
  Activities2["Delete"] = "delete";
  Activities2["Edit"] = "edit";
  Activities2["Invoice"] = "invoice";
  Activities2["Message"] = "message";
  Activities2["PageView"] = "pageView";
  Activities2["Paid"] = "paid";
  Activities2["Payment"] = "payment";
  Activities2["Purchase"] = "purchase";
  Activities2["Referral"] = "referral";
  Activities2["Renewal"] = "renewal";
  Activities2["Signup"] = "signup";
  Activities2["Subscription"] = "subscription";
  Activities2["Upgrade"] = "upgrade";
})(Activities || (Activities = {}));
var Analytics;
(function(Analytics2) {
  Analytics2["Business"] = "business";
  Analytics2["Engineering"] = "engineering";
  Analytics2["Exception"] = "exception";
  Analytics2["LogMessage"] = "log-message";
  Analytics2["Marketing"] = "marketing";
  Analytics2["PageLeave"] = "page-leave";
  Analytics2["PageView"] = "page-view";
  Analytics2["Product"] = "product";
  Analytics2["QualityManagement"] = "quality-management";
  Analytics2["UserAccess"] = "user-access";
  Analytics2["UserLogin"] = "user-login";
  Analytics2["UserLogout"] = "user-logout";
  Analytics2["UserSignup"] = "user-signup";
  Analytics2["UserPreferencesChanged"] = "user-preferences-changed";
  Analytics2["WebsiteVisit"] = "website-visit";
})(Analytics || (Analytics = {}));
var PageLeaveMethod;
(function(PageLeaveMethod2) {
  PageLeaveMethod2["CloseTab"] = "close-tab";
  PageLeaveMethod2["ExternalLink"] = "external-link";
  PageLeaveMethod2["NavigateAway"] = "navigate-away";
  PageLeaveMethod2["Unknown"] = "unknown";
})(PageLeaveMethod || (PageLeaveMethod = {}));
var DeploymentTarget;
(function(DeploymentTarget2) {
  DeploymentTarget2["Ecs"] = "Ecs";
})(DeploymentTarget || (DeploymentTarget = {}));
var DeploymentStatus;
(function(DeploymentStatus2) {
  DeploymentStatus2["Finished"] = "Finished";
  DeploymentStatus2["Queued"] = "Queued";
  DeploymentStatus2["Running"] = "Running";
  DeploymentStatus2["Started"] = "Started";
})(DeploymentStatus || (DeploymentStatus = {}));
var DeviceType;
(function(DeviceType2) {
  DeviceType2["Mobile"] = "mobile";
  DeviceType2["TV"] = "tv";
  DeviceType2["Watch"] = "watch";
  DeviceType2["Web"] = "web";
})(DeviceType || (DeviceType = {}));
var EnvironmentType;
(function(EnvironmentType2) {
  EnvironmentType2["Development"] = "Development";
  EnvironmentType2["NonProduction"] = "NonProduction";
  EnvironmentType2["Production"] = "Production";
})(EnvironmentType || (EnvironmentType = {}));
var OnboardingStatus;
(function(OnboardingStatus2) {
  OnboardingStatus2["Completed"] = "completed";
  OnboardingStatus2["Started"] = "started";
  OnboardingStatus2["Uncompleted"] = "uncompleted";
})(OnboardingStatus || (OnboardingStatus = {}));
var PipelineType;
(function(PipelineType2) {
  PipelineType2["Build"] = "Build";
  PipelineType2["Deployment"] = "Deployment";
  PipelineType2["Test"] = "Test";
})(PipelineType || (PipelineType = {}));
var PipelineWorkflowStatus;
(function(PipelineWorkflowStatus2) {
  PipelineWorkflowStatus2["Canceled"] = "Canceled";
  PipelineWorkflowStatus2["Completed"] = "Completed";
  PipelineWorkflowStatus2["Failed"] = "Failed";
  PipelineWorkflowStatus2["Running"] = "Running";
  PipelineWorkflowStatus2["Queued"] = "Queued";
  PipelineWorkflowStatus2["Waiting"] = "Waiting";
})(PipelineWorkflowStatus || (PipelineWorkflowStatus = {}));
var PipelineStepStatus;
(function(PipelineStepStatus2) {
  PipelineStepStatus2["Canceled"] = "Canceled";
  PipelineStepStatus2["Completed"] = "Completed";
  PipelineStepStatus2["Failed"] = "Failed";
  PipelineStepStatus2["Running"] = "Running";
  PipelineStepStatus2["Queued"] = "Queued";
  PipelineStepStatus2["Waiting"] = "Waiting";
})(PipelineStepStatus || (PipelineStepStatus = {}));
var PageRole;
(function(PageRole2) {
  PageRole2["ForgotPassword"] = "forgot_password";
  PageRole2["Index"] = "index";
  PageRole2["Login"] = "login";
  PageRole2["PageNotFound"] = "404";
  PageRole2["Signup"] = "signup";
  PageRole2["VerifyCode"] = "verify_code";
})(PageRole || (PageRole = {}));
var AlertLevel;
(function(AlertLevel2) {
  AlertLevel2["Info"] = "info";
  AlertLevel2["Warning"] = "warning";
  AlertLevel2["Error"] = "error";
  AlertLevel2["Success"] = "success";
})(AlertLevel || (AlertLevel = {}));
var ModalType;
(function(ModalType2) {
  ModalType2["Details"] = "details";
  ModalType2["Dialog"] = "dialog";
})(ModalType || (ModalType = {}));
var NotificationType;
(function(NotificationType2) {
  NotificationType2["Info"] = "info";
  NotificationType2["Warning"] = "warning";
  NotificationType2["Error"] = "error";
  NotificationType2["Success"] = "success";
})(NotificationType || (NotificationType = {}));
var DataPointMetric;
(function(DataPointMetric2) {
  DataPointMetric2["AccountBalance"] = "AccountBalance";
  DataPointMetric2["UserAssets"] = "UserAssets";
  DataPointMetric2["UserCreditCardDebt"] = "UserCreditCardDebt";
  DataPointMetric2["UserCreditLimit"] = "UserCreditLimit";
  DataPointMetric2["UserCreditUtilization"] = "UserCreditUtilization";
  DataPointMetric2["UserDebt"] = "UserDebt";
  DataPointMetric2["UserInvestments"] = "UserInvestments";
  DataPointMetric2["UserRetirement"] = "UserRetirement";
  DataPointMetric2["UserSavings"] = "UserSavings";
})(DataPointMetric || (DataPointMetric = {}));
var DefaultValue;
(function(DefaultValue2) {
  DefaultValue2["DateTime"] = "date_time";
  DefaultValue2["True"] = "true";
  DefaultValue2["False"] = "false";
  DefaultValue2["UniqueId"] = "unique_id";
})(DefaultValue || (DefaultValue = {}));
var ModelType;
(function(ModelType2) {
  ModelType2["DomainModel"] = "domain_entity";
  ModelType2["GenericModel"] = "generic_entity";
})(ModelType || (ModelType = {}));
var Primitives;
(function(Primitives2) {
  Primitives2["AirportCode"] = "airport-code";
  Primitives2["BankIDCode"] = "bank-id-code";
  Primitives2["BitcoinAddress"] = "bitcoin-address";
  Primitives2["Boolean"] = "boolean";
  Primitives2["City"] = "city";
  Primitives2["Color"] = "color";
  Primitives2["CountryCode"] = "country-code";
  Primitives2["CreditCard"] = "credit-card";
  Primitives2["CurrencyAmount"] = "currency-amount";
  Primitives2["CurrencyCode"] = "currency-code";
  Primitives2["DataURI"] = "data-uri";
  Primitives2["Date"] = "date";
  Primitives2["DateRange"] = "date-range";
  Primitives2["DateTime"] = "date-time";
  Primitives2["DayOfMonth"] = "day-of-month";
  Primitives2["DomainName"] = "domain-name";
  Primitives2["EmailAddress"] = "email-address";
  Primitives2["EthereumAddress"] = "ethereum-address";
  Primitives2["EAN"] = "european-article-number";
  Primitives2["EIN"] = "employer-identification-number";
  Primitives2["Float"] = "float";
  Primitives2["GeographicCoordinate"] = "geographic-coordinate";
  Primitives2["GeographicCoordinates"] = "geographic-coordinates";
  Primitives2["GitRepositoryURL"] = "git-repository-url";
  Primitives2["HSLColor"] = "hsl-color";
  Primitives2["HexColor"] = "hex-color";
  Primitives2["Hexadecimal"] = "hexadecimal";
  Primitives2["IBAN"] = "international-bank-account-number";
  Primitives2["IMEI"] = "international-mobile-equipment-identifier";
  Primitives2["IPAddress"] = "ip-address";
  Primitives2["IPAddressRange"] = "ip-address-range";
  Primitives2["ISBN"] = "international-standard-book-number";
  Primitives2["ISIN"] = "international-stock-number";
  Primitives2["ISMN"] = "international-standard-music-number";
  Primitives2["ISSN"] = "international-standard-serial-number";
  Primitives2["ISO8601"] = "iso-8601";
  Primitives2["ISO31661Alpha2"] = "iso-31661-alpha-2";
  Primitives2["ISO31661Alpha3"] = "iso-31661-alpha-3";
  Primitives2["ISO4217"] = "iso-4217";
  Primitives2["Image"] = "image";
  Primitives2["Integer"] = "integer";
  Primitives2["JSON"] = "json";
  Primitives2["LanguageCode"] = "language-code";
  Primitives2["LicensePlateNumber"] = "license-plate-number";
  Primitives2["LongText"] = "long-text";
  Primitives2["MD5"] = "md5";
  Primitives2["Markdown"] = "markdown";
  Primitives2["Menu"] = "menu";
  Primitives2["Number"] = "number";
  Primitives2["MACAddress"] = "mac-address";
  Primitives2["MagnetURI"] = "magnet-uri";
  Primitives2["MimeType"] = "mime-type";
  Primitives2["Month"] = "month";
  Primitives2["Password"] = "password";
  Primitives2["PassportNumber"] = "passport-number";
  Primitives2["Percent"] = "percent";
  Primitives2["PhoneNumber"] = "phone-number";
  Primitives2["Port"] = "port";
  Primitives2["PostalCode"] = "postal-code";
  Primitives2["Province"] = "province";
  Primitives2["RFC3339"] = "rfc-3339";
  Primitives2["RGBColor"] = "rgb-color";
  Primitives2["SemanticVersion"] = "semantic-version";
  Primitives2["SSN"] = "social-security-number";
  Primitives2["State"] = "state";
  Primitives2["StreetAddress"] = "street-address";
  Primitives2["String"] = "string";
  Primitives2["Tags"] = "tags";
  Primitives2["TaxIDNumber"] = "tax-id-number";
  Primitives2["Time"] = "time";
  Primitives2["TimeOfDay"] = "time-of-day";
  Primitives2["TimeRange"] = "time-range";
  Primitives2["TimezoneRegion"] = "timezone-region";
  Primitives2["URL"] = "url";
  Primitives2["URLPath"] = "url-path";
  Primitives2["UUID"] = "uuid";
  Primitives2["VATIDNumber"] = "value-added-tax-id-number";
  Primitives2["VerificationCode"] = "verification-code";
  Primitives2["Video"] = "video";
  Primitives2["Weekday"] = "weekday";
  Primitives2["Year"] = "year";
})(Primitives || (Primitives = {}));
var Severity;
(function(Severity2) {
  Severity2["Critical"] = "Critical";
  Severity2["Error"] = "Error";
  Severity2["Fatal"] = "Fatal";
  Severity2["Warning"] = "Warning";
})(Severity || (Severity = {}));
var Condition;
(function(Condition2) {
  Condition2["Contains"] = "contains";
  Condition2["HasCharacterCount"] = "has-character-count";
  Condition2["HasNumberCount"] = "has-number-count";
  Condition2["HasLetterCount"] = "has-letter-count";
  Condition2["HasLowercaseCount"] = "has-lowercase-count";
  Condition2["HasSpacesCount"] = "has-spaces-count";
  Condition2["HasSymbolCount"] = "has-symbol-count";
  Condition2["HasUppercaseCount"] = "has-uppercase-count";
  Condition2["IsAfter"] = "is-after";
  Condition2["IsAfterOrEqual"] = "is-after-or-equal";
  Condition2["IsAirport"] = "is-airport";
  Condition2["IsAlpha"] = "is-alpha";
  Condition2["IsAlphanumeric"] = "is-alphanumeric";
  Condition2["IsAlgorithmHash"] = "is-algorithm-hash";
  Condition2["IsAscii"] = "is-ascii";
  Condition2["IsBase64"] = "is-base-64";
  Condition2["IsBefore"] = "is-before";
  Condition2["IsBeforeOrAfter"] = "is-before-or-after";
  Condition2["IsBeforeOrEqual"] = "is-before-or-equal";
  Condition2["IsBetween"] = "is-between";
  Condition2["IsBIC"] = "is-bic";
  Condition2["IsBitcoinAddress"] = "is-bitcoin-address";
  Condition2["IsBoolean"] = "is-boolean";
  Condition2["IsColor"] = "is-color";
  Condition2["IsComplexEnough"] = "is-complex-enough";
  Condition2["IsCountry"] = "is-country";
  Condition2["IsCreditCard"] = "is-credit-card";
  Condition2["IsCurrency"] = "is-currency";
  Condition2["IsDataURI"] = "is-data-uri";
  Condition2["IsDate"] = "is-date";
  Condition2["IsDateRange"] = "is-date-range";
  Condition2["IsDateTime"] = "is-date-time";
  Condition2["IsDayOfMonth"] = "is-day-of-month";
  Condition2["IsDecimal"] = "is-decimal";
  Condition2["IsDivisibleBy"] = "is-divisible-by";
  Condition2["IsDomainName"] = "is-domain-name";
  Condition2["IsEmailAddress"] = "is-email-address";
  Condition2["IsEthereumAddress"] = "is-ethereum-address";
  Condition2["IsEAN"] = "is-ean";
  Condition2["IsEIN"] = "is-ein";
  Condition2["IsEqual"] = "is-equal";
  Condition2["IsEvenNumber"] = "is-even-number";
  Condition2["IsFloat"] = "is-float";
  Condition2["IsIBAN"] = "is-iban";
  Condition2["IsGreaterThan"] = "greater-than";
  Condition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  Condition2["IsHSLColor"] = "is-hsl-color";
  Condition2["IsHexColor"] = "is-hex-color";
  Condition2["IsHexadecimal"] = "is-hexadecimal";
  Condition2["IsIdentityCardCode"] = "is-identity-card-code";
  Condition2["IsIMEI"] = "is-imei";
  Condition2["IsInIPAddressRange"] = "is-in-ip-address-range";
  Condition2["IsInList"] = "is-in-list";
  Condition2["IsInTheLast"] = "is-in-the-last";
  Condition2["IsInteger"] = "is-integer";
  Condition2["IsIPAddress"] = "is-ip-address";
  Condition2["IsIPAddressRange"] = "is-ip-address-range";
  Condition2["IsISBN"] = "is-isbn";
  Condition2["IsISIN"] = "is-isin";
  Condition2["IsISMN"] = "is-ismn";
  Condition2["IsISRC"] = "is-isrc";
  Condition2["IsISSN"] = "is-issn";
  Condition2["IsISO4217"] = "is-iso-4217";
  Condition2["IsISO8601"] = "is-iso-8601";
  Condition2["IsISO31661Alpha2"] = "is-iso-31661-alpha-2";
  Condition2["IsISO31661Alpha3"] = "is-iso-31661-alpha-3";
  Condition2["IsJSON"] = "is-json";
  Condition2["IsLanguage"] = "is-language";
  Condition2["IsLatitude"] = "is-latitude";
  Condition2["IsLongitude"] = "is-longitude";
  Condition2["IsLengthEqual"] = "is-length-equal";
  Condition2["IsLengthGreaterThan"] = "is-length-greater-than";
  Condition2["IsLengthGreaterThanOrEqual"] = "is-length-great-than-or-equal";
  Condition2["IsLengthLessThan"] = "is-length-less-than";
  Condition2["IsLengthLessThanOrEqual"] = "is-length-less-than-or-equal";
  Condition2["IsLessThan"] = "less-than";
  Condition2["IsLessThanOrEqual"] = "less-than-or-equal";
  Condition2["IsLicensePlateNumber"] = "is-license-plate-number";
  Condition2["IsLowercase"] = "is-lowercase";
  Condition2["IsOctal"] = "is-octal";
  Condition2["IsMACAddress"] = "is-mac-address";
  Condition2["IsMD5"] = "is-md5";
  Condition2["IsMagnetURI"] = "is-magnet-uri";
  Condition2["IsMarkdown"] = "is-markdown";
  Condition2["IsMimeType"] = "is-mime-type";
  Condition2["IsMonth"] = "is-month";
  Condition2["IsNegativeNumber"] = "is-negative-number";
  Condition2["IsNotDate"] = "is-not-date";
  Condition2["IsNotEqual"] = "is-not-equal";
  Condition2["IsNotInIPAddressRange"] = "is-not-in-ip-address-range";
  Condition2["IsNotInList"] = "is-not-in-list";
  Condition2["IsNotNull"] = "is-not-null";
  Condition2["IsNotRegexMatch"] = "is-not-regex-match";
  Condition2["IsNotToday"] = "is-not-today";
  Condition2["IsNumber"] = "is-number";
  Condition2["IsNumeric"] = "is-numeric";
  Condition2["IsOddNumber"] = "is-odd-number";
  Condition2["IsPassportNumber"] = "is-passport-number";
  Condition2["IsPhoneNumber"] = "is-phone-number";
  Condition2["IsPort"] = "is-port";
  Condition2["IsPositiveNumber"] = "is-positive-number";
  Condition2["IsPostalCode"] = "is-postal-code";
  Condition2["IsProvince"] = "is-province";
  Condition2["IsRGBColor"] = "is-rgb-color";
  Condition2["IsRegexMatch"] = "is-regex-match";
  Condition2["IsRequired"] = "is-required";
  Condition2["IsSemanticVersion"] = "is-semantic-version";
  Condition2["IsSlug"] = "is-slug";
  Condition2["IsSSN"] = "is-ssn";
  Condition2["IsState"] = "is-state";
  Condition2["IsStreetAddress"] = "is-street-address";
  Condition2["IsString"] = "is-string";
  Condition2["IsStrongPassword"] = "is-strong-password";
  Condition2["IsTags"] = "is-tags";
  Condition2["IsTaxIDNumber"] = "is-tax-id-number";
  Condition2["IsThisMonth"] = "is-this-month";
  Condition2["IsThisQuarter"] = "is-this-quarter";
  Condition2["IsThisWeek"] = "is-this-week";
  Condition2["IsThisWeekend"] = "is-this-weekend";
  Condition2["IsThisYear"] = "is-this-year";
  Condition2["IsTime"] = "is-time";
  Condition2["IsTimeOfDay"] = "is-time-of-day";
  Condition2["IsTimeRange"] = "is-time-range";
  Condition2["IsToday"] = "is-today";
  Condition2["IsURL"] = "is-url";
  Condition2["IsUUID"] = "is-uuid";
  Condition2["IsUppercase"] = "is-uppercase";
  Condition2["IsUsernameAvailable"] = "is-username-available";
  Condition2["IsValidStreetAddress"] = "is-valid-street-address";
  Condition2["IsVATIDNumber"] = "is-vat-id-number";
  Condition2["IsWeekday"] = "is-weekday";
  Condition2["IsWeekend"] = "is-weekend";
  Condition2["IsYear"] = "is-year";
})(Condition || (Condition = {}));
var AuthenticationCondition;
(function(AuthenticationCondition2) {
  AuthenticationCondition2["IsAuthenticated"] = "is-authenticated";
  AuthenticationCondition2["IsNotAuthenticated"] = "is-not-authenticated";
  AuthenticationCondition2["IsUsernameAvailable"] = "is-username-available";
  AuthenticationCondition2["PasswordMismatch"] = "password-mismatch";
})(AuthenticationCondition || (AuthenticationCondition = {}));
var ColorCondition;
(function(ColorCondition2) {
  ColorCondition2["IsHSLColor"] = "is-hsl-color";
  ColorCondition2["IsHexColor"] = "is-hex-color";
  ColorCondition2["IsNotNull"] = "is-not-null";
  ColorCondition2["IsRGBColor"] = "is-rgb-color";
  ColorCondition2["IsString"] = "is-string";
})(ColorCondition || (ColorCondition = {}));
var CurrencyCondition;
(function(CurrencyCondition2) {
  CurrencyCondition2["IsBetween"] = "is-between";
  CurrencyCondition2["IsCurrency"] = "is-currency";
  CurrencyCondition2["IsDecimal"] = "is-decimal";
  CurrencyCondition2["IsDivisibleBy"] = "is-divisible-by";
  CurrencyCondition2["IsEvenNumber"] = "is-even-number";
  CurrencyCondition2["IsFloat"] = "is-float";
  CurrencyCondition2["IsGreaterThan"] = "greater-than";
  CurrencyCondition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  CurrencyCondition2["IsInteger"] = "is-integer";
  CurrencyCondition2["IsISO8601"] = "is-iso-8601";
  CurrencyCondition2["IsLessThan"] = "less-than";
  CurrencyCondition2["IsLessThanOrEqual"] = "less-than-or-equal";
  CurrencyCondition2["IsNegativeNumber"] = "is-negative-number";
  CurrencyCondition2["IsNotEqual"] = "is-not-equal";
  CurrencyCondition2["IsNotNull"] = "is-not-null";
  CurrencyCondition2["IsNumber"] = "is-number";
  CurrencyCondition2["IsOddNumber"] = "is-odd-number";
  CurrencyCondition2["IsPositiveNumber"] = "is-positive-number";
})(CurrencyCondition || (CurrencyCondition = {}));
var BitcoinAddressCondition;
(function(BitcoinAddressCondition2) {
  BitcoinAddressCondition2["IsBitcoinAddress"] = "is-bitcoin-address";
  BitcoinAddressCondition2["IsEqual"] = "is-equal";
  BitcoinAddressCondition2["IsNotEqual"] = "is-not-equal";
  BitcoinAddressCondition2["IsNotNull"] = "is-not-null";
})(BitcoinAddressCondition || (BitcoinAddressCondition = {}));
var EthereumAddressCondition;
(function(EthereumAddressCondition2) {
  EthereumAddressCondition2["IsEthereumAddress"] = "is-ethereum-address";
  EthereumAddressCondition2["IsEqual"] = "is-equal";
  EthereumAddressCondition2["IsNotEqual"] = "is-not-equal";
  EthereumAddressCondition2["IsNotNull"] = "is-not-null";
})(EthereumAddressCondition || (EthereumAddressCondition = {}));
var LanguageCondition;
(function(LanguageCondition2) {
  LanguageCondition2["IsEqual"] = "is-equal";
  LanguageCondition2["IsJSON"] = "is-json";
  LanguageCondition2["IsLanguage"] = "is-language";
  LanguageCondition2["IsNotEqual"] = "is-not-equal";
  LanguageCondition2["IsNotNull"] = "is-not-null";
})(LanguageCondition || (LanguageCondition = {}));
var CityCondition;
(function(CityCondition2) {
  CityCondition2["IsAlpha"] = "is-alpha";
  CityCondition2["IsEqual"] = "is-equal";
  CityCondition2["IsInList"] = "is-in-list";
  CityCondition2["IsNotEqual"] = "is-not-equal";
  CityCondition2["IsNotInList"] = "is-not-in-list";
  CityCondition2["IsNotNull"] = "is-not-null";
  CityCondition2["IsString"] = "is-string";
})(CityCondition || (CityCondition = {}));
var CountryCondition;
(function(CountryCondition2) {
  CountryCondition2["IsAlpha"] = "is-alpha";
  CountryCondition2["IsCountry"] = "is-country";
  CountryCondition2["IsEqual"] = "is-equal";
  CountryCondition2["IsInList"] = "is-in-list";
  CountryCondition2["IsNotEqual"] = "is-not-equal";
  CountryCondition2["IsNotInList"] = "is-not-in-list";
  CountryCondition2["IsNotNull"] = "is-not-null";
  CountryCondition2["IsString"] = "is-string";
})(CountryCondition || (CountryCondition = {}));
var LatitudeCondition;
(function(LatitudeCondition2) {
  LatitudeCondition2["IsEqual"] = "is-equal";
  LatitudeCondition2["IsFloat"] = "is-float";
  LatitudeCondition2["IsNotEqual"] = "is-not-equal";
  LatitudeCondition2["IsNotNull"] = "is-not-null";
  LatitudeCondition2["IsNumeric"] = "is-numeric";
})(LatitudeCondition || (LatitudeCondition = {}));
var LongitudeCondition;
(function(LongitudeCondition2) {
  LongitudeCondition2["IsEqual"] = "is-equal";
  LongitudeCondition2["IsFloat"] = "is-float";
  LongitudeCondition2["IsNotEqual"] = "is-not-equal";
  LongitudeCondition2["IsNotNull"] = "is-not-null";
  LongitudeCondition2["IsNumeric"] = "is-numeric";
})(LongitudeCondition || (LongitudeCondition = {}));
var PostalCodeCondition;
(function(PostalCodeCondition2) {
  PostalCodeCondition2["IsEqual"] = "is-equal";
  PostalCodeCondition2["IsNotEqual"] = "is-not-equal";
  PostalCodeCondition2["IsPostalCode"] = "is-postal-code";
  PostalCodeCondition2["IsNotNull"] = "is-not-null";
})(PostalCodeCondition || (PostalCodeCondition = {}));
var ProvinceCondition;
(function(ProvinceCondition2) {
  ProvinceCondition2["IsAlpha"] = "is-alpha";
  ProvinceCondition2["IsEqual"] = "is-equal";
  ProvinceCondition2["IsInList"] = "is-in-list";
  ProvinceCondition2["IsNotEqual"] = "is-not-equal";
  ProvinceCondition2["IsNotInList"] = "is-not-in-list";
  ProvinceCondition2["IsNotNull"] = "is-not-null";
  ProvinceCondition2["IsProvince"] = "is-province";
  ProvinceCondition2["IsString"] = "is-string";
})(ProvinceCondition || (ProvinceCondition = {}));
var StateCondition;
(function(StateCondition2) {
  StateCondition2["IsAlpha"] = "is-alpha";
  StateCondition2["IsEqual"] = "is-equal";
  StateCondition2["IsInList"] = "is-in-list";
  StateCondition2["IsNotEqual"] = "is-not-equal";
  StateCondition2["IsNotInList"] = "is-not-in-list";
  StateCondition2["IsNotNull"] = "is-not-null";
  StateCondition2["IsState"] = "is-state";
  StateCondition2["IsString"] = "is-string";
})(StateCondition || (StateCondition = {}));
var StreetAddressCondition;
(function(StreetAddressCondition2) {
  StreetAddressCondition2["IsAlphanumeric"] = "is-alphanumeric";
  StreetAddressCondition2["IsEqual"] = "is-equal";
  StreetAddressCondition2["IsNotEqual"] = "is-not-equal";
  StreetAddressCondition2["IsNotNull"] = "is-not-null";
  StreetAddressCondition2["IsString"] = "is-string";
  StreetAddressCondition2["IsStreetAddress"] = "is-street-address";
})(StreetAddressCondition || (StreetAddressCondition = {}));
var AirportCondition;
(function(AirportCondition2) {
  AirportCondition2["IsAirport"] = "is-airport";
  AirportCondition2["IsAlpha"] = "is-alpha";
  AirportCondition2["IsEqual"] = "is-equal";
  AirportCondition2["IsInList"] = "is-in-list";
  AirportCondition2["IsNotEqual"] = "is-not-equal";
  AirportCondition2["IsNotInList"] = "is-not-in-list";
  AirportCondition2["IsNotNull"] = "is-not-null";
  AirportCondition2["IsString"] = "is-string";
})(AirportCondition || (AirportCondition = {}));
var AlgorithmHashCondition;
(function(AlgorithmHashCondition2) {
  AlgorithmHashCondition2["IsAlgorithmHash"] = "is-algorithm-hash";
  AlgorithmHashCondition2["IsEqual"] = "is-equal";
  AlgorithmHashCondition2["IsInList"] = "is-in-list";
  AlgorithmHashCondition2["IsNotEqual"] = "is-not-equal";
  AlgorithmHashCondition2["IsNotInList"] = "is-not-in-list";
  AlgorithmHashCondition2["IsNotNull"] = "is-not-null";
  AlgorithmHashCondition2["IsString"] = "is-string";
})(AlgorithmHashCondition || (AlgorithmHashCondition = {}));
var SemanticVersionCondition;
(function(SemanticVersionCondition2) {
  SemanticVersionCondition2["IsEqual"] = "is-equal";
  SemanticVersionCondition2["IsInList"] = "is-in-list";
  SemanticVersionCondition2["IsNotEqual"] = "is-not-equal";
  SemanticVersionCondition2["IsNotInList"] = "is-not-in-list";
  SemanticVersionCondition2["IsNotNull"] = "is-not-null";
  SemanticVersionCondition2["IsSemanticVersion"] = "is-semantic-version";
  SemanticVersionCondition2["IsString"] = "is-string";
})(SemanticVersionCondition || (SemanticVersionCondition = {}));
var UUIDCondition;
(function(UUIDCondition2) {
  UUIDCondition2["IsEqual"] = "is-equal";
  UUIDCondition2["IsInList"] = "is-in-list";
  UUIDCondition2["IsNotEqual"] = "is-not-equal";
  UUIDCondition2["IsNotInList"] = "is-not-in-list";
  UUIDCondition2["IsNotNull"] = "is-not-null";
  UUIDCondition2["IsString"] = "is-string";
  UUIDCondition2["IsUUID"] = "is-uuid";
})(UUIDCondition || (UUIDCondition = {}));
var MD5Condition;
(function(MD5Condition2) {
  MD5Condition2["IsEqual"] = "is-equal";
  MD5Condition2["IsInList"] = "is-in-list";
  MD5Condition2["IsMD5"] = "is-md5";
  MD5Condition2["IsNotEqual"] = "is-not-equal";
  MD5Condition2["IsNotInList"] = "is-not-in-list";
  MD5Condition2["IsNotNull"] = "is-not-null";
  MD5Condition2["IsString"] = "is-string";
})(MD5Condition || (MD5Condition = {}));
var BooleanCondition;
(function(BooleanCondition2) {
  BooleanCondition2["IsBoolean"] = "is-boolean";
  BooleanCondition2["IsEqual"] = "is-equal";
  BooleanCondition2["IsNotEqual"] = "is-not-equal";
  BooleanCondition2["IsNotNull"] = "is-not-null";
})(BooleanCondition || (BooleanCondition = {}));
var DateCondition;
(function(DateCondition2) {
  DateCondition2["IsAfter"] = "is-after";
  DateCondition2["IsAfterOrEqual"] = "is-after-or-equal";
  DateCondition2["IsBefore"] = "is-before";
  DateCondition2["IsBeforeOrEqual"] = "is-before-or-equal";
  DateCondition2["IsBetween"] = "is-between";
  DateCondition2["IsDate"] = "is-date";
  DateCondition2["IsEqual"] = "is-equal";
  DateCondition2["IsNotDate"] = "is-not-date";
  DateCondition2["IsNotEqual"] = "is-not-equal";
  DateCondition2["IsNotNull"] = "is-not-null";
  DateCondition2["IsNotToday"] = "is-not-today";
  DateCondition2["IsThisWeek"] = "is-this-week";
  DateCondition2["IsThisMonth"] = "is-this-month";
  DateCondition2["IsThisQuarter"] = "is-this-quarter";
  DateCondition2["IsThisYear"] = "is-this-year";
  DateCondition2["IsToday"] = "is-today";
  DateCondition2["IsWeekend"] = "is-weekend";
})(DateCondition || (DateCondition = {}));
var DateRangeCondition;
(function(DateRangeCondition2) {
  DateRangeCondition2["IsAfter"] = "is-after";
  DateRangeCondition2["IsBefore"] = "is-before";
  DateRangeCondition2["IsBeforeOrAfter"] = "is-before-or-after";
  DateRangeCondition2["IsBetween"] = "is-between";
  DateRangeCondition2["IsDate"] = "is-date";
  DateRangeCondition2["IsDateRange"] = "is-date-range";
  DateRangeCondition2["IsEqual"] = "is-equal";
  DateRangeCondition2["IsNotEqual"] = "is-not-equal";
  DateRangeCondition2["IsNotNull"] = "is-not-null";
})(DateRangeCondition || (DateRangeCondition = {}));
var DateTimeCondition;
(function(DateTimeCondition2) {
  DateTimeCondition2["IsAfter"] = "is-after";
  DateTimeCondition2["IsAfterOrEqual"] = "is-after-or-equal";
  DateTimeCondition2["IsBefore"] = "is-before";
  DateTimeCondition2["IsBeforeOrEqual"] = "is-before-or-equal";
  DateTimeCondition2["IsBetween"] = "is-between";
  DateTimeCondition2["IsDate"] = "is-date";
  DateTimeCondition2["IsEqual"] = "is-equal";
  DateTimeCondition2["IsNotDate"] = "is-not-date";
  DateTimeCondition2["IsNotEqual"] = "is-not-equal";
  DateTimeCondition2["IsNotNull"] = "is-not-null";
  DateTimeCondition2["IsNotToday"] = "is-not-today";
  DateTimeCondition2["IsThisWeek"] = "is-this-week";
  DateTimeCondition2["IsThisMonth"] = "is-this-month";
  DateTimeCondition2["IsThisQuarter"] = "is-this-quarter";
  DateTimeCondition2["IsThisYear"] = "is-this-year";
  DateTimeCondition2["IsToday"] = "is-today";
  DateTimeCondition2["IsWeekend"] = "is-weekend";
})(DateTimeCondition || (DateTimeCondition = {}));
var DayOfMonthCondition;
(function(DayOfMonthCondition2) {
  DayOfMonthCondition2["IsAfter"] = "is-after";
  DayOfMonthCondition2["IsAfterOrEqual"] = "is-after-or-equal";
  DayOfMonthCondition2["IsBefore"] = "is-before";
  DayOfMonthCondition2["IsBeforeOrEqual"] = "is-before-or-equal";
  DayOfMonthCondition2["IsBetween"] = "is-between";
  DayOfMonthCondition2["IsDayOfMonth"] = "is-day-of-month";
  DayOfMonthCondition2["IsEvenNumber"] = "is-even-number";
  DayOfMonthCondition2["IsEqual"] = "is-equal";
  DayOfMonthCondition2["IsGreaterThan"] = "greater-than";
  DayOfMonthCondition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  DayOfMonthCondition2["IsInteger"] = "is-integer";
  DayOfMonthCondition2["IsLessThan"] = "less-than";
  DayOfMonthCondition2["IsLessThanOrEqual"] = "less-than-or-equal";
  DayOfMonthCondition2["IsNotEqual"] = "is-not-equal";
  DayOfMonthCondition2["IsNotNull"] = "is-not-null";
  DayOfMonthCondition2["IsNumber"] = "is-number";
  DayOfMonthCondition2["IsOddNumber"] = "is-odd-number";
  DayOfMonthCondition2["IsToday"] = "is-today";
  DayOfMonthCondition2["IsWeekday"] = "is-weekday";
  DayOfMonthCondition2["IsWeekend"] = "is-weekend";
})(DayOfMonthCondition || (DayOfMonthCondition = {}));
var MonthCondition;
(function(MonthCondition2) {
  MonthCondition2["IsAfter"] = "is-after";
  MonthCondition2["IsAfterOrEqual"] = "is-after-or-equal";
  MonthCondition2["IsBefore"] = "is-before";
  MonthCondition2["IsBeforeOrEqual"] = "is-before-or-equal";
  MonthCondition2["IsBetween"] = "is-between";
  MonthCondition2["IsEvenNumber"] = "is-even-number";
  MonthCondition2["IsEqual"] = "is-equal";
  MonthCondition2["IsGreaterThan"] = "greater-than";
  MonthCondition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  MonthCondition2["IsInteger"] = "is-integer";
  MonthCondition2["IsLessThan"] = "less-than";
  MonthCondition2["IsLessThanOrEqual"] = "less-than-or-equal";
  MonthCondition2["IsMonth"] = "is-month";
  MonthCondition2["IsNotEqual"] = "is-not-equal";
  MonthCondition2["IsNotNull"] = "is-not-null";
  MonthCondition2["IsNumber"] = "is-number";
  MonthCondition2["IsOddNumber"] = "is-odd-number";
  MonthCondition2["IsThisMonth"] = "is-this-month";
})(MonthCondition || (MonthCondition = {}));
var TimeCondition;
(function(TimeCondition2) {
  TimeCondition2["IsAfter"] = "is-after";
  TimeCondition2["IsAfterOrEqual"] = "is-after-or-equal";
  TimeCondition2["IsBefore"] = "is-before";
  TimeCondition2["IsBeforeOrEqual"] = "is-before-or-equal";
  TimeCondition2["IsBetween"] = "is-between";
  TimeCondition2["IsEqual"] = "is-equal";
  TimeCondition2["IsNotEqual"] = "is-not-equal";
  TimeCondition2["IsNotNull"] = "is-not-null";
  TimeCondition2["IsTime"] = "is-time";
})(TimeCondition || (TimeCondition = {}));
var TimeRangeCondition;
(function(TimeRangeCondition2) {
  TimeRangeCondition2["IsAfter"] = "is-after";
  TimeRangeCondition2["IsBefore"] = "is-before";
  TimeRangeCondition2["IsBeforeOrAfter"] = "is-before-or-after";
  TimeRangeCondition2["IsBetween"] = "is-between";
  TimeRangeCondition2["IsTime"] = "is-time";
  TimeRangeCondition2["IsEqual"] = "is-equal";
  TimeRangeCondition2["IsNotEqual"] = "is-not-equal";
  TimeRangeCondition2["IsNotNull"] = "is-not-null";
  TimeRangeCondition2["IsTimeRange"] = "is-time-range";
})(TimeRangeCondition || (TimeRangeCondition = {}));
var TimeOfDayCondition;
(function(TimeOfDayCondition2) {
  TimeOfDayCondition2["IsAfter"] = "is-after";
  TimeOfDayCondition2["IsBefore"] = "is-before";
  TimeOfDayCondition2["IsBeforeOrAfter"] = "is-before-or-after";
  TimeOfDayCondition2["IsBetween"] = "is-between";
  TimeOfDayCondition2["IsEqual"] = "is-equal";
  TimeOfDayCondition2["IsInList"] = "is-in-list";
  TimeOfDayCondition2["IsNotEqual"] = "is-not-equal";
  TimeOfDayCondition2["IsNotInList"] = "is-not-in-list";
  TimeOfDayCondition2["IsNotNull"] = "is-not-null";
  TimeOfDayCondition2["IsTimeOfDay"] = "is-time-of-day";
  TimeOfDayCondition2["IsTimeRange"] = "is-time-range";
})(TimeOfDayCondition || (TimeOfDayCondition = {}));
var WeekdayCondition;
(function(WeekdayCondition2) {
  WeekdayCondition2["IsAfter"] = "is-after";
  WeekdayCondition2["IsAfterOrEqual"] = "is-after-or-equal";
  WeekdayCondition2["IsBefore"] = "is-before";
  WeekdayCondition2["IsBeforeOrEqual"] = "is-before-or-equal";
  WeekdayCondition2["IsBetween"] = "is-between";
  WeekdayCondition2["IsEvenNumber"] = "is-even-number";
  WeekdayCondition2["IsEqual"] = "is-equal";
  WeekdayCondition2["IsGreaterThan"] = "greater-than";
  WeekdayCondition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  WeekdayCondition2["IsLessThan"] = "less-than";
  WeekdayCondition2["IsLessThanOrEqual"] = "less-than-or-equal";
  WeekdayCondition2["IsNotEqual"] = "is-not-equal";
  WeekdayCondition2["IsNotNull"] = "is-not-null";
  WeekdayCondition2["IsNumber"] = "is-number";
  WeekdayCondition2["IsOddNumber"] = "is-odd-number";
  WeekdayCondition2["IsWeekday"] = "is-weekday";
  WeekdayCondition2["IsWeekend"] = "is-weekend";
})(WeekdayCondition || (WeekdayCondition = {}));
var YearCondition;
(function(YearCondition2) {
  YearCondition2["IsAfter"] = "is-after";
  YearCondition2["IsAfterOrEqual"] = "is-after-or-equal";
  YearCondition2["IsBefore"] = "is-before";
  YearCondition2["IsBeforeOrEqual"] = "is-before-or-equal";
  YearCondition2["IsBetween"] = "is-between";
  YearCondition2["IsEvenNumber"] = "is-even-number";
  YearCondition2["IsEqual"] = "is-equal";
  YearCondition2["IsGreaterThan"] = "greater-than";
  YearCondition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  YearCondition2["IsInteger"] = "is-integer";
  YearCondition2["IsLessThan"] = "less-than";
  YearCondition2["IsLessThanOrEqual"] = "less-than-or-equal";
  YearCondition2["IsNotEqual"] = "is-not-equal";
  YearCondition2["IsNotNull"] = "is-not-null";
  YearCondition2["IsNumber"] = "is-number";
  YearCondition2["IsOddNumber"] = "is-odd-number";
  YearCondition2["IsThisYear"] = "is-this-year";
  YearCondition2["IsYear"] = "is-year";
})(YearCondition || (YearCondition = {}));
var HexadecimalCondition;
(function(HexadecimalCondition2) {
  HexadecimalCondition2["IsEqual"] = "is-equal";
  HexadecimalCondition2["IsHexadecimal"] = "is-hexadecimal";
  HexadecimalCondition2["IsLengthEqual"] = "is-length-equal";
  HexadecimalCondition2["IsLengthGreaterThan"] = "is-length-greater-than";
  HexadecimalCondition2["IsLengthGreaterThanOrEqual"] = "is-length-great-than-or-equal";
  HexadecimalCondition2["IsLengthLessThan"] = "is-length-less-than";
  HexadecimalCondition2["IsLengthLessThanOrEqual"] = "is-length-less-than-or-equal";
  HexadecimalCondition2["IsNotEqual"] = "is-not-equal";
  HexadecimalCondition2["IsNotNull"] = "is-not-null";
  HexadecimalCondition2["IsString"] = "is-string";
})(HexadecimalCondition || (HexadecimalCondition = {}));
var JSONCondition;
(function(JSONCondition2) {
  JSONCondition2["IsEqual"] = "is-equal";
  JSONCondition2["IsJSON"] = "is-json";
  JSONCondition2["IsNotEqual"] = "is-not-equal";
  JSONCondition2["IsNotNull"] = "is-not-null";
})(JSONCondition || (JSONCondition = {}));
var MarkdownCondition;
(function(MarkdownCondition2) {
  MarkdownCondition2["IsEqual"] = "is-equal";
  MarkdownCondition2["IsNotEqual"] = "is-not-equal";
  MarkdownCondition2["IsNotNull"] = "is-not-null";
  MarkdownCondition2["IsMarkdown"] = "is-markdown";
  MarkdownCondition2["IsString"] = "is-string";
})(MarkdownCondition || (MarkdownCondition = {}));
var MenuCondition;
(function(MenuCondition2) {
  MenuCondition2["Contains"] = "contains";
  MenuCondition2["IsEqual"] = "is-equal";
  MenuCondition2["IsNotEqual"] = "is-not-equal";
  MenuCondition2["IsNotNull"] = "is-not-null";
})(MenuCondition || (MenuCondition = {}));
var TagsCondition;
(function(TagsCondition2) {
  TagsCondition2["Contains"] = "contains";
  TagsCondition2["IsEqual"] = "is-equal";
  TagsCondition2["IsNotEqual"] = "is-not-equal";
  TagsCondition2["IsNotNull"] = "is-not-null";
})(TagsCondition || (TagsCondition = {}));
var DataURICondition;
(function(DataURICondition2) {
  DataURICondition2["Contains"] = "contains";
  DataURICondition2["IsDataURI"] = "is-data-uri";
  DataURICondition2["IsEqual"] = "is-equal";
  DataURICondition2["IsNotEqual"] = "is-not-equal";
  DataURICondition2["IsNotNull"] = "is-not-null";
  DataURICondition2["IsString"] = "is-string";
})(DataURICondition || (DataURICondition = {}));
var DomainNameCondition;
(function(DomainNameCondition2) {
  DomainNameCondition2["Contains"] = "contains";
  DomainNameCondition2["IsDomainName"] = "is-domain-name";
  DomainNameCondition2["IsEqual"] = "is-equal";
  DomainNameCondition2["IsNotEqual"] = "is-not-equal";
  DomainNameCondition2["IsNotNull"] = "is-not-null";
  DomainNameCondition2["IsString"] = "is-string";
})(DomainNameCondition || (DomainNameCondition = {}));
var EmailCondition;
(function(EmailCondition2) {
  EmailCondition2["Contains"] = "contains";
  EmailCondition2["IsEmailAddress"] = "is-email-address";
  EmailCondition2["IsEqual"] = "is-equal";
  EmailCondition2["IsInList"] = "is-in-list";
  EmailCondition2["IsNotEqual"] = "is-not-equal";
  EmailCondition2["IsNotInList"] = "is-not-in-list";
  EmailCondition2["IsNotNull"] = "is-not-null";
  EmailCondition2["IsString"] = "is-string";
})(EmailCondition || (EmailCondition = {}));
var IPAddressCondition;
(function(IPAddressCondition2) {
  IPAddressCondition2["Contains"] = "contains";
  IPAddressCondition2["IsEqual"] = "is-equal";
  IPAddressCondition2["IsIPAddress"] = "is-ip-address";
  IPAddressCondition2["IsInIPAddressRange"] = "is-in-ip-address-range";
  IPAddressCondition2["IsInList"] = "is-in-list";
  IPAddressCondition2["IsNotEqual"] = "is-not-equal";
  IPAddressCondition2["IsNotInList"] = "is-not-in-list";
  IPAddressCondition2["IsNotInIPAddressRange"] = "is-not-in-ip-address-range";
  IPAddressCondition2["IsNotNull"] = "is-not-null";
  IPAddressCondition2["IsString"] = "is-string";
})(IPAddressCondition || (IPAddressCondition = {}));
var IPAddressRangeCondition;
(function(IPAddressRangeCondition2) {
  IPAddressRangeCondition2["IsEqual"] = "is-equal";
  IPAddressRangeCondition2["IsIPAddressRange"] = "is-ip-address-range";
  IPAddressRangeCondition2["IsInList"] = "is-in-list";
  IPAddressRangeCondition2["IsNotEqual"] = "is-not-equal";
  IPAddressRangeCondition2["IsNotInList"] = "is-not-in-list";
  IPAddressRangeCondition2["IsNotInIPAddressRange"] = "is-not-in-ip-address-range";
  IPAddressRangeCondition2["IsNotNull"] = "is-not-null";
  IPAddressRangeCondition2["IsString"] = "is-string";
})(IPAddressRangeCondition || (IPAddressRangeCondition = {}));
var PortCondition;
(function(PortCondition2) {
  PortCondition2["IsEqual"] = "is-equal";
  PortCondition2["IsGreaterThan"] = "greater-than";
  PortCondition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  PortCondition2["IsInteger"] = "is-integer";
  PortCondition2["IsLessThan"] = "less-than";
  PortCondition2["IsLessThanOrEqual"] = "less-than-or-equal";
  PortCondition2["IsNotEqual"] = "is-not-equal";
  PortCondition2["IsNotNull"] = "is-not-null";
})(PortCondition || (PortCondition = {}));
var MACAddressCondition;
(function(MACAddressCondition2) {
  MACAddressCondition2["Contains"] = "contains";
  MACAddressCondition2["IsEqual"] = "is-equal";
  MACAddressCondition2["IsInList"] = "is-in-list";
  MACAddressCondition2["IsMACAddress"] = "is-mac-address";
  MACAddressCondition2["IsNotEqual"] = "is-not-equal";
  MACAddressCondition2["IsNotInList"] = "is-not-in-list";
  MACAddressCondition2["IsNotNull"] = "is-not-null";
  MACAddressCondition2["IsString"] = "is-string";
})(MACAddressCondition || (MACAddressCondition = {}));
var MagnetURICondition;
(function(MagnetURICondition2) {
  MagnetURICondition2["Contains"] = "contains";
  MagnetURICondition2["IsEqual"] = "is-equal";
  MagnetURICondition2["IsInList"] = "is-in-list";
  MagnetURICondition2["IsMagnetURI"] = "is-magnet-uri";
  MagnetURICondition2["IsNotEqual"] = "is-not-equal";
  MagnetURICondition2["IsNotInList"] = "is-not-in-list";
  MagnetURICondition2["IsNotNull"] = "is-not-null";
  MagnetURICondition2["IsString"] = "is-string";
})(MagnetURICondition || (MagnetURICondition = {}));
var MimeTypeCondition;
(function(MimeTypeCondition2) {
  MimeTypeCondition2["Contains"] = "contains";
  MimeTypeCondition2["IsEqual"] = "is-equal";
  MimeTypeCondition2["IsInList"] = "is-in-list";
  MimeTypeCondition2["IsMimeType"] = "is-mime-type";
  MimeTypeCondition2["IsNotEqual"] = "is-not-equal";
  MimeTypeCondition2["IsNotInList"] = "is-not-in-list";
  MimeTypeCondition2["IsNotNull"] = "is-not-null";
  MimeTypeCondition2["IsString"] = "is-string";
})(MimeTypeCondition || (MimeTypeCondition = {}));
var SlugCondition;
(function(SlugCondition2) {
  SlugCondition2["Contains"] = "contains";
  SlugCondition2["IsEqual"] = "is-equal";
  SlugCondition2["IsInList"] = "is-in-list";
  SlugCondition2["IsNotEqual"] = "is-not-equal";
  SlugCondition2["IsNotInList"] = "is-not-in-list";
  SlugCondition2["IsNotNull"] = "is-not-null";
  SlugCondition2["IsString"] = "is-string";
  SlugCondition2["IsSlug"] = "is-slug";
})(SlugCondition || (SlugCondition = {}));
var URLCondition;
(function(URLCondition2) {
  URLCondition2["Contains"] = "contains";
  URLCondition2["IsEqual"] = "is-equal";
  URLCondition2["IsInList"] = "is-in-list";
  URLCondition2["IsNotEqual"] = "is-not-equal";
  URLCondition2["IsNotInList"] = "is-not-in-list";
  URLCondition2["IsNotNull"] = "is-not-null";
  URLCondition2["IsString"] = "is-string";
  URLCondition2["IsURL"] = "is-url";
})(URLCondition || (URLCondition = {}));
var NumberCondition;
(function(NumberCondition2) {
  NumberCondition2["IsAfter"] = "is-after";
  NumberCondition2["IsAfterOrEqual"] = "is-after-or-equal";
  NumberCondition2["IsBefore"] = "is-before";
  NumberCondition2["IsBeforeOrEqual"] = "is-before-or-equal";
  NumberCondition2["IsBetween"] = "is-between";
  NumberCondition2["IsDecimal"] = "is-decimal";
  NumberCondition2["IsDivisibleBy"] = "is-divisible-by";
  NumberCondition2["IsEAN"] = "is-ean";
  NumberCondition2["IsEIN"] = "is-ein";
  NumberCondition2["IsEqual"] = "is-equal";
  NumberCondition2["IsEvenNumber"] = "is-even-number";
  NumberCondition2["IsFloat"] = "is-float";
  NumberCondition2["IsGreaterThan"] = "greater-than";
  NumberCondition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  NumberCondition2["IsInt"] = "is-integer";
  NumberCondition2["IsISBN"] = "is-isbn";
  NumberCondition2["IsISMN"] = "is-ismn";
  NumberCondition2["IsISSN"] = "is-issn";
  NumberCondition2["IsLatitude"] = "is-latitude";
  NumberCondition2["IsLongitude"] = "is-longitude";
  NumberCondition2["IsLessThan"] = "less-than";
  NumberCondition2["IsLessThanOrEqual"] = "less-than-or-equal";
  NumberCondition2["IsMACAddress"] = "is-mac-address";
  NumberCondition2["IsNumber"] = "is-number";
  NumberCondition2["IsNegativeNumber"] = "is-negative-number";
  NumberCondition2["IsNotEqual"] = "is-not-equal";
  NumberCondition2["IsNotNull"] = "is-not-null";
  NumberCondition2["IsOddNumber"] = "is-odd-number";
  NumberCondition2["IsPassportNumber"] = "is-passport-number";
  NumberCondition2["IsPhoneNumber"] = "is-phone-number";
  NumberCondition2["IsPort"] = "is-port";
  NumberCondition2["IsPositiveNumber"] = "is-positive-number";
  NumberCondition2["IsPostalCode"] = "is-postal-code";
  NumberCondition2["IsSemanticVersion"] = "is-semantic-version";
  NumberCondition2["IsSSN"] = "is-ssn";
  NumberCondition2["IsTaxIDNumber"] = "is-tax-id-number";
  NumberCondition2["IsUUID"] = "is-uuid";
  NumberCondition2["IsVATIDNumber"] = "is-vat-id-number";
})(NumberCondition || (NumberCondition = {}));
var FloatCondition;
(function(FloatCondition2) {
  FloatCondition2["IsEqual"] = "is-equal";
  FloatCondition2["IsFloat"] = "is-float";
  FloatCondition2["IsGreaterThan"] = "greater-than";
  FloatCondition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  FloatCondition2["IsLessThan"] = "less-than";
  FloatCondition2["IsLessThanOrEqual"] = "less-than-or-equal";
  FloatCondition2["IsNotEqual"] = "is-not-equal";
  FloatCondition2["IsNotNull"] = "is-not-null";
  FloatCondition2["IsNumber"] = "is-number";
  FloatCondition2["IsNumeric"] = "is-numeric";
})(FloatCondition || (FloatCondition = {}));
var IntegerCondition;
(function(IntegerCondition2) {
  IntegerCondition2["IsEqual"] = "is-equal";
  IntegerCondition2["IsInteger"] = "is-integer";
  IntegerCondition2["IsGreaterThan"] = "greater-than";
  IntegerCondition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  IntegerCondition2["IsLessThan"] = "less-than";
  IntegerCondition2["IsLessThanOrEqual"] = "less-than-or-equal";
  IntegerCondition2["IsNotEqual"] = "is-not-equal";
  IntegerCondition2["IsNotNull"] = "is-not-null";
  IntegerCondition2["IsNumber"] = "is-number";
  IntegerCondition2["IsNumeric"] = "is-numeric";
})(IntegerCondition || (IntegerCondition = {}));
var CreditCardCondition;
(function(CreditCardCondition2) {
  CreditCardCondition2["IsCreditCard"] = "is-credit-card";
  CreditCardCondition2["IsEqual"] = "is-equal";
  CreditCardCondition2["IsLengthEqual"] = "is-length-equal";
  CreditCardCondition2["IsLengthGreaterThan"] = "is-length-greater-than";
  CreditCardCondition2["IsLengthGreaterThanOrEqual"] = "is-length-great-than-or-equal";
  CreditCardCondition2["IsLengthLessThan"] = "is-length-less-than";
  CreditCardCondition2["IsLengthLessThanOrEqual"] = "is-length-less-than-or-equal";
  CreditCardCondition2["IsNotEqual"] = "is-not-equal";
  CreditCardCondition2["IsNotNull"] = "is-not-null";
  CreditCardCondition2["IsRegexMatch"] = "is-regex-match";
  CreditCardCondition2["IsNotRegexMatch"] = "is-not-regex-match";
})(CreditCardCondition || (CreditCardCondition = {}));
var EmailAddressCondition;
(function(EmailAddressCondition2) {
  EmailAddressCondition2["isEmailAddress"] = "is-email-address";
  EmailAddressCondition2["IsEqual"] = "is-equal";
  EmailAddressCondition2["IsInList"] = "is-in-list";
  EmailAddressCondition2["IsLengthEqual"] = "is-length-equal";
  EmailAddressCondition2["IsLengthGreaterThan"] = "is-length-greater-than";
  EmailAddressCondition2["IsLengthGreaterThanOrEqual"] = "is-length-great-than-or-equal";
  EmailAddressCondition2["IsLengthLessThan"] = "is-length-less-than";
  EmailAddressCondition2["IsLengthLessThanOrEqual"] = "is-length-less-than-or-equal";
  EmailAddressCondition2["IsNotEqual"] = "is-not-equal";
  EmailAddressCondition2["IsNotInList"] = "is-not-in-list";
  EmailAddressCondition2["IsNotNull"] = "is-not-null";
  EmailAddressCondition2["IsRegexMatch"] = "is-regex-match";
  EmailAddressCondition2["IsNotRegexMatch"] = "is-not-regex-match";
})(EmailAddressCondition || (EmailAddressCondition = {}));
var LicensePlateNumber;
(function(LicensePlateNumber2) {
  LicensePlateNumber2["IsLicensePlateNumber"] = "is-license-plate-number";
  LicensePlateNumber2["IsNotNull"] = "is-not-null";
  LicensePlateNumber2["IsNotRegexMatch"] = "is-not-regex-match";
  LicensePlateNumber2["IsString"] = "is-string";
  LicensePlateNumber2["IsRegexMatch"] = "is-regex-match";
})(LicensePlateNumber || (LicensePlateNumber = {}));
var PassportNumberCondition;
(function(PassportNumberCondition2) {
  PassportNumberCondition2["IsNotNull"] = "is-not-null";
  PassportNumberCondition2["IsPassportNumber"] = "is-passport-number";
  PassportNumberCondition2["IsString"] = "is-string";
  PassportNumberCondition2["IsRegexMatch"] = "is-regex-match";
})(PassportNumberCondition || (PassportNumberCondition = {}));
var PasswordCondition;
(function(PasswordCondition2) {
  PasswordCondition2["IsComplexEnough"] = "is-complex-enough";
  PasswordCondition2["IsInList"] = "is-in-list";
  PasswordCondition2["IsNotInList"] = "is-not-in-list";
  PasswordCondition2["IsNotNull"] = "is-not-null";
  PasswordCondition2["IsNotRegexMatch"] = "is-not-regex-match";
  PasswordCondition2["IsLengthGreaterThan"] = "is-length-greater-than";
  PasswordCondition2["IsLengthGreaterThanOrEqual"] = "is-length-great-than-or-equal";
  PasswordCondition2["IsLengthLessThan"] = "is-length-less-than";
  PasswordCondition2["IsLengthLessThanOrEqual"] = "is-length-less-than-or-equal";
  PasswordCondition2["IsStrongPassword"] = "is-strong-password";
  PasswordCondition2["IsString"] = "is-string";
  PasswordCondition2["IsRegexMatch"] = "is-regex-match";
})(PasswordCondition || (PasswordCondition = {}));
var PhoneNumberCondition;
(function(PhoneNumberCondition2) {
  PhoneNumberCondition2["IsNotNull"] = "is-not-null";
  PhoneNumberCondition2["IsNotRegexMatch"] = "is-not-regex-match";
  PhoneNumberCondition2["IsNumber"] = "is-number";
  PhoneNumberCondition2["IsPhoneNumber"] = "is-phone-number";
  PhoneNumberCondition2["IsRegexMatch"] = "is-regex-match";
})(PhoneNumberCondition || (PhoneNumberCondition = {}));
var SocialSecurityNumberCondition;
(function(SocialSecurityNumberCondition2) {
  SocialSecurityNumberCondition2["IsNotNull"] = "is-not-null";
  SocialSecurityNumberCondition2["IsSSN"] = "is-ssn";
  SocialSecurityNumberCondition2["IsString"] = "is-string";
  SocialSecurityNumberCondition2["IsRegexMatch"] = "is-regex-match";
})(SocialSecurityNumberCondition || (SocialSecurityNumberCondition = {}));
var BICCondition;
(function(BICCondition2) {
  BICCondition2["Contains"] = "contains";
  BICCondition2["IsBIC"] = "is-bic";
  BICCondition2["IsEqual"] = "is-equal";
  BICCondition2["IsInList"] = "is-in-list";
  BICCondition2["IsNotEqual"] = "is-not-equal";
  BICCondition2["IsNotInList"] = "is-not-in-list";
  BICCondition2["IsNotNull"] = "is-not-null";
  BICCondition2["IsString"] = "is-string";
})(BICCondition || (BICCondition = {}));
var EANCondition;
(function(EANCondition2) {
  EANCondition2["Contains"] = "contains";
  EANCondition2["IsEAN"] = "is-ean";
  EANCondition2["IsEqual"] = "is-equal";
  EANCondition2["IsInList"] = "is-in-list";
  EANCondition2["IsNotEqual"] = "is-not-equal";
  EANCondition2["IsNotInList"] = "is-not-in-list";
  EANCondition2["IsNotNull"] = "is-not-null";
  EANCondition2["IsString"] = "is-string";
})(EANCondition || (EANCondition = {}));
var EINCondition;
(function(EINCondition2) {
  EINCondition2["Contains"] = "contains";
  EINCondition2["IsEIN"] = "is-ein";
  EINCondition2["IsEqual"] = "is-equal";
  EINCondition2["IsInList"] = "is-in-list";
  EINCondition2["IsNotEqual"] = "is-not-equal";
  EINCondition2["IsNotInList"] = "is-not-in-list";
  EINCondition2["IsNotNull"] = "is-not-null";
  EINCondition2["IsString"] = "is-string";
})(EINCondition || (EINCondition = {}));
var IBANCondition;
(function(IBANCondition2) {
  IBANCondition2["Contains"] = "contains";
  IBANCondition2["IsEqual"] = "is-equal";
  IBANCondition2["IsIBAN"] = "is-iban";
  IBANCondition2["IsInList"] = "is-in-list";
  IBANCondition2["IsNotEqual"] = "is-not-equal";
  IBANCondition2["IsNotInList"] = "is-not-in-list";
  IBANCondition2["IsNotNull"] = "is-not-null";
  IBANCondition2["IsString"] = "is-string";
})(IBANCondition || (IBANCondition = {}));
var ISBNCondition;
(function(ISBNCondition2) {
  ISBNCondition2["Contains"] = "contains";
  ISBNCondition2["IsEqual"] = "is-equal";
  ISBNCondition2["IsISBN"] = "is-isbn";
  ISBNCondition2["IsInList"] = "is-in-list";
  ISBNCondition2["IsNotEqual"] = "is-not-equal";
  ISBNCondition2["IsNotInList"] = "is-not-in-list";
  ISBNCondition2["IsNotNull"] = "is-not-null";
  ISBNCondition2["IsString"] = "is-string";
})(ISBNCondition || (ISBNCondition = {}));
var ISINCondition;
(function(ISINCondition2) {
  ISINCondition2["Contains"] = "contains";
  ISINCondition2["IsEqual"] = "is-equal";
  ISINCondition2["IsISIN"] = "is-isin";
  ISINCondition2["IsInList"] = "is-in-list";
  ISINCondition2["IsNotEqual"] = "is-not-equal";
  ISINCondition2["IsNotInList"] = "is-not-in-list";
  ISINCondition2["IsNotNull"] = "is-not-null";
  ISINCondition2["IsString"] = "is-string";
})(ISINCondition || (ISINCondition = {}));
var ISMNCondition;
(function(ISMNCondition2) {
  ISMNCondition2["Contains"] = "contains";
  ISMNCondition2["IsEqual"] = "is-equal";
  ISMNCondition2["IsISMN"] = "is-ismn";
  ISMNCondition2["IsInList"] = "is-in-list";
  ISMNCondition2["IsNotEqual"] = "is-not-equal";
  ISMNCondition2["IsNotInList"] = "is-not-in-list";
  ISMNCondition2["IsNotNull"] = "is-not-null";
  ISMNCondition2["IsString"] = "is-string";
})(ISMNCondition || (ISMNCondition = {}));
var ISSNCondition;
(function(ISSNCondition2) {
  ISSNCondition2["Contains"] = "contains";
  ISSNCondition2["IsEqual"] = "is-equal";
  ISSNCondition2["IsISSN"] = "is-issn";
  ISSNCondition2["IsInList"] = "is-in-list";
  ISSNCondition2["IsNotEqual"] = "is-not-equal";
  ISSNCondition2["IsNotInList"] = "is-not-in-list";
  ISSNCondition2["IsNotNull"] = "is-not-null";
  ISSNCondition2["IsString"] = "is-string";
})(ISSNCondition || (ISSNCondition = {}));
var TaxIDNumberCondition;
(function(TaxIDNumberCondition2) {
  TaxIDNumberCondition2["Contains"] = "contains";
  TaxIDNumberCondition2["IsEqual"] = "is-equal";
  TaxIDNumberCondition2["IsInList"] = "is-in-list";
  TaxIDNumberCondition2["IsNotEqual"] = "is-not-equal";
  TaxIDNumberCondition2["IsNotInList"] = "is-not-in-list";
  TaxIDNumberCondition2["IsNotNull"] = "is-not-null";
  TaxIDNumberCondition2["IsString"] = "is-string";
  TaxIDNumberCondition2["IsTaxIDNumber"] = "is-tax-id-number";
})(TaxIDNumberCondition || (TaxIDNumberCondition = {}));
var VATCondition;
(function(VATCondition2) {
  VATCondition2["Contains"] = "contains";
  VATCondition2["IsEqual"] = "is-equal";
  VATCondition2["IsInList"] = "is-in-list";
  VATCondition2["IsNotEqual"] = "is-not-equal";
  VATCondition2["IsNotInList"] = "is-not-in-list";
  VATCondition2["IsNotNull"] = "is-not-null";
  VATCondition2["IsString"] = "is-string";
  VATCondition2["IsVATIDNumber"] = "is-vat-id-number";
})(VATCondition || (VATCondition = {}));
var StringCondition;
(function(StringCondition2) {
  StringCondition2["Contains"] = "contains";
  StringCondition2["HasNumberCount"] = "has-number-count";
  StringCondition2["HasLowercaseCount"] = "has-lowercase-count";
  StringCondition2["HasLetterCount"] = "has-letter-count";
  StringCondition2["HasSpacesCount"] = "has-spaces-count";
  StringCondition2["HasSymbolCount"] = "has-symbol-count";
  StringCondition2["HasUppercaseCount"] = "has-uppercase-count";
  StringCondition2["IsAlpha"] = "is-alpha";
  StringCondition2["IsAlphanumeric"] = "is-alphanumeric";
  StringCondition2["IsAscii"] = "is-ascii";
  StringCondition2["IsBase64"] = "is-base-64";
  StringCondition2["IsColor"] = "is-color";
  StringCondition2["IsComplexEnough"] = "is-complex-enough";
  StringCondition2["IsCreditCard"] = "is-credit-card";
  StringCondition2["IsDataURI"] = "is-data-uri";
  StringCondition2["IsDomainName"] = "is-domain-name";
  StringCondition2["IsEmailAddress"] = "is-email-address";
  StringCondition2["IsEthereumAddress"] = "is-ethereum-address";
  StringCondition2["IsEAN"] = "is-ean";
  StringCondition2["IsEIN"] = "is-ein";
  StringCondition2["IsEqual"] = "is-equal";
  StringCondition2["IsIBAN"] = "is-iban";
  StringCondition2["IsHSLColor"] = "is-hsl-color";
  StringCondition2["IsHexColor"] = "is-hex-color";
  StringCondition2["IsHexadecimal"] = "is-hexadecimal";
  StringCondition2["IsIdentityCardCode"] = "is-identity-card-code";
  StringCondition2["IsIMEI"] = "is-imei";
  StringCondition2["IsInList"] = "is-in-list";
  StringCondition2["IsIPAddress"] = "is-ip-address";
  StringCondition2["IsInIPAddressRange"] = "is-in-ip-address-range";
  StringCondition2["IsISBN"] = "is-isbn";
  StringCondition2["IsISIN"] = "is-isin";
  StringCondition2["IsISMN"] = "is-ismn";
  StringCondition2["IsISRC"] = "is-isrc";
  StringCondition2["IsISSN"] = "is-issn";
  StringCondition2["IsLanguage"] = "is-language";
  StringCondition2["IsLatitude"] = "is-latitude";
  StringCondition2["IsLongitude"] = "is-longitude";
  StringCondition2["IsLengthEqual"] = "is-length-equal";
  StringCondition2["IsLengthGreaterThan"] = "is-length-greater-than";
  StringCondition2["IsLengthGreaterThanOrEqual"] = "is-length-great-than-or-equal";
  StringCondition2["IsLengthLessThan"] = "is-length-less-than";
  StringCondition2["IsLengthLessThanOrEqual"] = "is-length-less-than-or-equal";
  StringCondition2["IsLicensePlateNumber"] = "is-license-plate-number";
  StringCondition2["IsLowercase"] = "is-lowercase";
  StringCondition2["IsOctal"] = "is-octal";
  StringCondition2["IsMACAddress"] = "is-mac-address";
  StringCondition2["IsMD5"] = "is-md5";
  StringCondition2["IsMagnetURI"] = "is-magnet-uri";
  StringCondition2["IsMarkdown"] = "is-markdown";
  StringCondition2["IsMimeType"] = "is-mime-type";
  StringCondition2["IsMonth"] = "is-month";
  StringCondition2["IsNotInIPAddressRange"] = "is-not-in-ip-address-range";
  StringCondition2["IsNotInList"] = "is-not-in-list";
  StringCondition2["IsNotNull"] = "is-not-null";
  StringCondition2["IsNotRegexMatch"] = "is-not-regex-match";
  StringCondition2["IsNumber"] = "is-number";
  StringCondition2["IsNumeric"] = "is-numeric";
  StringCondition2["IsPassportNumber"] = "is-passport-number";
  StringCondition2["IsPhoneNumber"] = "is-phone-number";
  StringCondition2["IsPort"] = "is-port";
  StringCondition2["IsPostalCode"] = "is-postal-code";
  StringCondition2["IsProvince"] = "is-province";
  StringCondition2["IsRegexMatch"] = "is-regex-match";
  StringCondition2["IsSemanticVersion"] = "is-semantic-version";
  StringCondition2["IsSlug"] = "is-slug";
  StringCondition2["IsSSN"] = "is-ssn";
  StringCondition2["IsState"] = "is-state";
  StringCondition2["IsStreetAddress"] = "is-street-address";
  StringCondition2["IsString"] = "is-string";
  StringCondition2["IsTaxIDNumber"] = "is-tax-id-number";
  StringCondition2["IsURL"] = "is-url";
  StringCondition2["IsUUID"] = "is-uuid";
  StringCondition2["IsUppercase"] = "is-uppercase";
  StringCondition2["IsVATIDNumber"] = "is-vat-id-number";
  StringCondition2["IsWeekday"] = "is-weekday";
  StringCondition2["IsWeekend"] = "is-weekend";
  StringCondition2["IsYear"] = "is-year";
})(StringCondition || (StringCondition = {}));
var LongTextCondition;
(function(LongTextCondition2) {
  LongTextCondition2["Contains"] = "contains";
  LongTextCondition2["IsAlpha"] = "is-alpha";
  LongTextCondition2["IsAlphanumeric"] = "is-alphanumeric";
  LongTextCondition2["IsInList"] = "is-in-list";
  LongTextCondition2["IsMarkdown"] = "is-markdown";
  LongTextCondition2["IsNotInList"] = "is-not-in-list";
  LongTextCondition2["IsNumeric"] = "is-numeric";
  LongTextCondition2["IsLowercase"] = "is-lowercase";
  LongTextCondition2["IsString"] = "is-string";
  LongTextCondition2["IsUppercase"] = "is-uppercase";
})(LongTextCondition || (LongTextCondition = {}));
var FormValidationProblem;
(function(FormValidationProblem2) {
  FormValidationProblem2["InvalidCharacters"] = "invalid-characters";
  FormValidationProblem2["InvalidPattern"] = "invalid-pattern";
  FormValidationProblem2["NotComplexEnough"] = "not-complex-enough";
  FormValidationProblem2["NotUnique"] = "not-unique";
  FormValidationProblem2["NotValidEmail"] = "not-valid-email";
  FormValidationProblem2["TooLong"] = "too-long";
  FormValidationProblem2["TooShort"] = "too-short";
  FormValidationProblem2["Required"] = "required";
})(FormValidationProblem || (FormValidationProblem = {}));
var Privilege;
(function(Privilege2) {
  Privilege2[Privilege2["Allowed"] = 0] = "Allowed";
  Privilege2[Privilege2["Blocked"] = 1] = "Blocked";
})(Privilege || (Privilege = {}));
var TaskStatus;
(function(TaskStatus2) {
  TaskStatus2["Canceled"] = "Canceled";
  TaskStatus2["Completed"] = "Completed";
  TaskStatus2["Created"] = "Created";
  TaskStatus2["Faulted"] = "Faulted";
  TaskStatus2["Queued"] = "Queued";
  TaskStatus2["Running"] = "Running";
  TaskStatus2["Waiting"] = "Waiting";
})(TaskStatus || (TaskStatus = {}));
var UserVerificationStatus;
(function(UserVerificationStatus2) {
  UserVerificationStatus2["Archived"] = "ARCHIVED";
  UserVerificationStatus2["Compromised"] = "COMPROMISED";
  UserVerificationStatus2["Confirmed"] = "CONFIRMED";
  UserVerificationStatus2["ForcePasswordChange"] = "FORCE_CHANGE_PASSWORD";
  UserVerificationStatus2["ResetRequired"] = "RESET_REQUIRED";
  UserVerificationStatus2["Unconfirmed"] = "UNCONFIRMED";
  UserVerificationStatus2["Unknown"] = "UNKNOWN";
})(UserVerificationStatus || (UserVerificationStatus = {}));
var UserAuthenticationVerificationType;
(function(UserAuthenticationVerificationType2) {
  UserAuthenticationVerificationType2["Code"] = "code";
  UserAuthenticationVerificationType2["Link"] = "link";
})(UserAuthenticationVerificationType || (UserAuthenticationVerificationType = {}));
var UserRole;
(function(UserRole2) {
  UserRole2["Owner"] = "Owner";
  UserRole2["Admin"] = "Admin";
  UserRole2["User"] = "User";
  UserRole2["Visitor"] = "Visitor";
})(UserRole || (UserRole = {}));
var PaymentIntentStatus;
(function(PaymentIntentStatus2) {
  PaymentIntentStatus2["RequiresPaymentMethod"] = "requires_payment_method";
  PaymentIntentStatus2["RequiresConfirmation"] = "requires_confirmation";
  PaymentIntentStatus2["RequiresAction"] = "requires_action";
  PaymentIntentStatus2["Processing"] = "processing";
  PaymentIntentStatus2["RequiresCapture"] = "requires_capture";
  PaymentIntentStatus2["Canceled"] = "canceled";
  PaymentIntentStatus2["Succeeded"] = "succeeded";
})(PaymentIntentStatus || (PaymentIntentStatus = {}));
var SubscriptionStatus;
(function(SubscriptionStatus2) {
  SubscriptionStatus2["Incomplete"] = "incomplete";
  SubscriptionStatus2["IncompleteExpired"] = "incomplete_expired";
  SubscriptionStatus2["Trialing"] = "trialing";
  SubscriptionStatus2["Active"] = "active";
  SubscriptionStatus2["PastDue"] = "past_due";
  SubscriptionStatus2["Canceled"] = "canceled";
  SubscriptionStatus2["Unpaid"] = "unpaid";
})(SubscriptionStatus || (SubscriptionStatus = {}));
var SubscriptionPlanDuration;
(function(SubscriptionPlanDuration2) {
  SubscriptionPlanDuration2["Monthly"] = "monthly";
  SubscriptionPlanDuration2["Quarterly"] = "quarterly";
  SubscriptionPlanDuration2["Yearly"] = "yearly";
  SubscriptionPlanDuration2["Lifetime"] = "lifetime";
})(SubscriptionPlanDuration || (SubscriptionPlanDuration = {}));
var ChatMessageStatus;
(function(ChatMessageStatus2) {
  ChatMessageStatus2["Delivered"] = "delivered";
  ChatMessageStatus2["Read"] = "read";
  ChatMessageStatus2["Sending"] = "sending";
  ChatMessageStatus2["Sent"] = "sent";
})(ChatMessageStatus || (ChatMessageStatus = {}));
var ChatMessageType;
(function(ChatMessageType2) {
  ChatMessageType2["Audio"] = "audio";
  ChatMessageType2["File"] = "file";
  ChatMessageType2["Image"] = "image";
  ChatMessageType2["Text"] = "text";
  ChatMessageType2["Video"] = "video";
})(ChatMessageType || (ChatMessageType = {}));
var ChatMessageAttachmentType;
(function(ChatMessageAttachmentType2) {
  ChatMessageAttachmentType2["Audio"] = "audio";
  ChatMessageAttachmentType2["File"] = "file";
  ChatMessageAttachmentType2["Image"] = "image";
  ChatMessageAttachmentType2["Video"] = "video";
})(ChatMessageAttachmentType || (ChatMessageAttachmentType = {}));
var ChatMessageReactionType;
(function(ChatMessageReactionType2) {
  ChatMessageReactionType2["Angry"] = "angry";
  ChatMessageReactionType2["Laugh"] = "laugh";
  ChatMessageReactionType2["Like"] = "like";
  ChatMessageReactionType2["Love"] = "love";
  ChatMessageReactionType2["Sad"] = "sad";
  ChatMessageReactionType2["Wow"] = "wow";
  ChatMessageReactionType2["Wink"] = "wink";
  ChatMessageReactionType2["Yay"] = "yay";
})(ChatMessageReactionType || (ChatMessageReactionType = {}));
var CommunicationMedium;
(function(CommunicationMedium2) {
  CommunicationMedium2["Email"] = "email";
  CommunicationMedium2["PhoneNumber"] = "phone_number";
})(CommunicationMedium || (CommunicationMedium = {}));
var LogLevel;
(function(LogLevel2) {
  LogLevel2["Analytics"] = "analytics";
  LogLevel2["Critical"] = "critical";
  LogLevel2["Debug"] = "debug";
  LogLevel2["Exception"] = "exception";
  LogLevel2["Http"] = "http";
  LogLevel2["Info"] = "info";
  LogLevel2["Warning"] = "warning";
})(LogLevel || (LogLevel = {}));
var HttpRequestMethod;
(function(HttpRequestMethod2) {
  HttpRequestMethod2["Delete"] = "delete";
  HttpRequestMethod2["Get"] = "get";
  HttpRequestMethod2["Head"] = "head";
  HttpRequestMethod2["Patch"] = "patch";
  HttpRequestMethod2["Post"] = "post";
  HttpRequestMethod2["Put"] = "put";
})(HttpRequestMethod || (HttpRequestMethod = {}));
var HttpResponseCode;
(function(HttpResponseCode2) {
  HttpResponseCode2[HttpResponseCode2["CONTINUE"] = 100] = "CONTINUE";
  HttpResponseCode2[HttpResponseCode2["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
  HttpResponseCode2[HttpResponseCode2["PROCESSING"] = 102] = "PROCESSING";
  HttpResponseCode2[HttpResponseCode2["OK"] = 200] = "OK";
  HttpResponseCode2[HttpResponseCode2["CREATED"] = 201] = "CREATED";
  HttpResponseCode2[HttpResponseCode2["ACCEPTED"] = 202] = "ACCEPTED";
  HttpResponseCode2[HttpResponseCode2["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
  HttpResponseCode2[HttpResponseCode2["NO_CONTENT"] = 204] = "NO_CONTENT";
  HttpResponseCode2[HttpResponseCode2["RESET_CONTENT"] = 205] = "RESET_CONTENT";
  HttpResponseCode2[HttpResponseCode2["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
  HttpResponseCode2[HttpResponseCode2["MULTI_STATUS"] = 207] = "MULTI_STATUS";
  HttpResponseCode2[HttpResponseCode2["ALREADY_REPORTED"] = 208] = "ALREADY_REPORTED";
  HttpResponseCode2[HttpResponseCode2["IM_USED"] = 226] = "IM_USED";
  HttpResponseCode2[HttpResponseCode2["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
  HttpResponseCode2[HttpResponseCode2["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
  HttpResponseCode2[HttpResponseCode2["FOUND"] = 302] = "FOUND";
  HttpResponseCode2[HttpResponseCode2["SEE_OTHER"] = 303] = "SEE_OTHER";
  HttpResponseCode2[HttpResponseCode2["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
  HttpResponseCode2[HttpResponseCode2["USE_PROXY"] = 305] = "USE_PROXY";
  HttpResponseCode2[HttpResponseCode2["SWITCH_PROXY"] = 306] = "SWITCH_PROXY";
  HttpResponseCode2[HttpResponseCode2["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
  HttpResponseCode2[HttpResponseCode2["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
  HttpResponseCode2[HttpResponseCode2["BAD_REQUEST"] = 400] = "BAD_REQUEST";
  HttpResponseCode2[HttpResponseCode2["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
  HttpResponseCode2[HttpResponseCode2["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["FORBIDDEN"] = 403] = "FORBIDDEN";
  HttpResponseCode2[HttpResponseCode2["NOT_FOUND"] = 404] = "NOT_FOUND";
  HttpResponseCode2[HttpResponseCode2["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
  HttpResponseCode2[HttpResponseCode2["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
  HttpResponseCode2[HttpResponseCode2["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
  HttpResponseCode2[HttpResponseCode2["CONFLICT"] = 409] = "CONFLICT";
  HttpResponseCode2[HttpResponseCode2["GONE"] = 410] = "GONE";
  HttpResponseCode2[HttpResponseCode2["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
  HttpResponseCode2[HttpResponseCode2["PAYLOAD_TOO_LARGE"] = 413] = "PAYLOAD_TOO_LARGE";
  HttpResponseCode2[HttpResponseCode2["URI_TOO_LONG"] = 414] = "URI_TOO_LONG";
  HttpResponseCode2[HttpResponseCode2["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
  HttpResponseCode2[HttpResponseCode2["RANGE_NOT_SATISFIABLE"] = 416] = "RANGE_NOT_SATISFIABLE";
  HttpResponseCode2[HttpResponseCode2["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
  HttpResponseCode2[HttpResponseCode2["I_AM_A_TEAPOT"] = 418] = "I_AM_A_TEAPOT";
  HttpResponseCode2[HttpResponseCode2["MISDIRECTED_REQUEST"] = 421] = "MISDIRECTED_REQUEST";
  HttpResponseCode2[HttpResponseCode2["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
  HttpResponseCode2[HttpResponseCode2["LOCKED"] = 423] = "LOCKED";
  HttpResponseCode2[HttpResponseCode2["FAILED_DEPENDENCY"] = 424] = "FAILED_DEPENDENCY";
  HttpResponseCode2[HttpResponseCode2["TOO_EARLY"] = 425] = "TOO_EARLY";
  HttpResponseCode2[HttpResponseCode2["UPGRADE_REQUIRED"] = 426] = "UPGRADE_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["PRECONDITION_REQUIRED"] = 428] = "PRECONDITION_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
  HttpResponseCode2[HttpResponseCode2["REQUEST_HEADER_FIELDS_TOO_LARGE"] = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE";
  HttpResponseCode2[HttpResponseCode2["UNAVAILABLE_FOR_LEGAL_REASONS"] = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS";
  HttpResponseCode2[HttpResponseCode2["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
  HttpResponseCode2[HttpResponseCode2["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
  HttpResponseCode2[HttpResponseCode2["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
  HttpResponseCode2[HttpResponseCode2["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
  HttpResponseCode2[HttpResponseCode2["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
  HttpResponseCode2[HttpResponseCode2["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
  HttpResponseCode2[HttpResponseCode2["VARIANT_ALSO_NEGOTIATES"] = 506] = "VARIANT_ALSO_NEGOTIATES";
  HttpResponseCode2[HttpResponseCode2["INSUFFICIENT_STORAGE"] = 507] = "INSUFFICIENT_STORAGE";
  HttpResponseCode2[HttpResponseCode2["LOOP_DETECTED"] = 508] = "LOOP_DETECTED";
  HttpResponseCode2[HttpResponseCode2["BANDWIDTH_LIMIT_EXCEEDED"] = 509] = "BANDWIDTH_LIMIT_EXCEEDED";
  HttpResponseCode2[HttpResponseCode2["NOT_EXTENDED"] = 510] = "NOT_EXTENDED";
  HttpResponseCode2[HttpResponseCode2["NETWORK_AUTHENTICATION_REQUIRED"] = 511] = "NETWORK_AUTHENTICATION_REQUIRED";
})(HttpResponseCode || (HttpResponseCode = {}));
var CountryCode;
(function(CountryCode2) {
  CountryCode2["Afghanistan"] = "AF";
  CountryCode2["Albania"] = "AL";
  CountryCode2["Algeria"] = "DZ";
  CountryCode2["AmericanSamoa"] = "AS";
  CountryCode2["Andorra"] = "AD";
  CountryCode2["Angola"] = "AO";
  CountryCode2["Anguilla"] = "AI";
  CountryCode2["Antarctica"] = "AQ";
  CountryCode2["AntiguaAndBarbuda"] = "AG";
  CountryCode2["Argentina"] = "AR";
  CountryCode2["Armenia"] = "AM";
  CountryCode2["Aruba"] = "AW";
  CountryCode2["Australia"] = "AU";
  CountryCode2["Austria"] = "AT";
  CountryCode2["Azerbaijan"] = "AZ";
  CountryCode2["Bahamas"] = "BS";
  CountryCode2["Bahrain"] = "BH";
  CountryCode2["Bangladesh"] = "BD";
  CountryCode2["Barbados"] = "BB";
  CountryCode2["Belarus"] = "BY";
  CountryCode2["Belgium"] = "BE";
  CountryCode2["Belize"] = "BZ";
  CountryCode2["Benin"] = "BJ";
  CountryCode2["Bermuda"] = "BM";
  CountryCode2["Bhutan"] = "BT";
  CountryCode2["Bolivia"] = "BO";
  CountryCode2["BosniaAndHerzegovina"] = "BA";
  CountryCode2["Botswana"] = "BW";
  CountryCode2["BouvetIsland"] = "BV";
  CountryCode2["Brazil"] = "BR";
  CountryCode2["BritishIndianOceanTerritory"] = "IO";
  CountryCode2["Brunei"] = "BN";
  CountryCode2["Bulgaria"] = "BG";
  CountryCode2["BurkinaFaso"] = "BF";
  CountryCode2["Burundi"] = "BI";
  CountryCode2["Cambodia"] = "KH";
  CountryCode2["Cameroon"] = "CM";
  CountryCode2["Canada"] = "CA";
  CountryCode2["CapeVerde"] = "CV";
  CountryCode2["CaymanIslands"] = "KY";
  CountryCode2["CentralAfricanRepublic"] = "CF";
  CountryCode2["Chad"] = "TD";
  CountryCode2["Chile"] = "CL";
  CountryCode2["China"] = "CN";
  CountryCode2["ChristmasIsland"] = "CX";
  CountryCode2["CocosKeelingIslands"] = "CC";
  CountryCode2["Colombia"] = "CO";
  CountryCode2["Comoros"] = "KM";
  CountryCode2["Congo"] = "CG";
  CountryCode2["CongoTheDemocraticRepublicOfThe"] = "CD";
  CountryCode2["CookIslands"] = "CK";
  CountryCode2["CostaRica"] = "CR";
  CountryCode2["CoteDIvoire"] = "CI";
  CountryCode2["Croatia"] = "HR";
  CountryCode2["Cuba"] = "CU";
  CountryCode2["Cyprus"] = "CY";
  CountryCode2["CzechRepublic"] = "CZ";
  CountryCode2["Denmark"] = "DK";
  CountryCode2["Djibouti"] = "DJ";
  CountryCode2["Dominica"] = "DM";
  CountryCode2["DominicanRepublic"] = "DO";
  CountryCode2["Ecuador"] = "EC";
  CountryCode2["Egypt"] = "EG";
  CountryCode2["ElSalvador"] = "SV";
  CountryCode2["EquatorialGuinea"] = "GQ";
  CountryCode2["Eritrea"] = "ER";
  CountryCode2["Estonia"] = "EE";
  CountryCode2["Ethiopia"] = "ET";
  CountryCode2["FalklandIslands"] = "FK";
  CountryCode2["FaroeIslands"] = "FO";
  CountryCode2["Fiji"] = "FJ";
  CountryCode2["Finland"] = "FI";
  CountryCode2["France"] = "FR";
  CountryCode2["FrenchGuiana"] = "GF";
  CountryCode2["FrenchPolynesia"] = "PF";
  CountryCode2["FrenchSouthernTerritories"] = "TF";
  CountryCode2["Gabon"] = "GA";
  CountryCode2["Gambia"] = "GM";
  CountryCode2["Georgia"] = "GE";
  CountryCode2["Germany"] = "DE";
  CountryCode2["Ghana"] = "GH";
  CountryCode2["Gibraltar"] = "GI";
  CountryCode2["Greece"] = "GR";
  CountryCode2["Greenland"] = "GL";
  CountryCode2["Grenada"] = "GD";
  CountryCode2["Guadeloupe"] = "GP";
  CountryCode2["Guam"] = "GU";
  CountryCode2["Guatemala"] = "GT";
  CountryCode2["Guernsey"] = "GG";
  CountryCode2["Guinea"] = "GN";
  CountryCode2["GuineaBissau"] = "GW";
  CountryCode2["Guyana"] = "GY";
  CountryCode2["Haiti"] = "HT";
  CountryCode2["HeardIslandMcdonaldIslands"] = "HM";
  CountryCode2["HolySeeVaticanCityState"] = "VA";
  CountryCode2["Honduras"] = "HN";
  CountryCode2["HongKong"] = "HK";
  CountryCode2["Hungary"] = "HU";
  CountryCode2["Iceland"] = "IS";
  CountryCode2["India"] = "IN";
  CountryCode2["Indonesia"] = "ID";
  CountryCode2["Iran"] = "IR";
  CountryCode2["Iraq"] = "IQ";
  CountryCode2["Ireland"] = "IE";
  CountryCode2["IsleOfMan"] = "IM";
  CountryCode2["Israel"] = "IL";
  CountryCode2["Italy"] = "IT";
  CountryCode2["Jamaica"] = "JM";
  CountryCode2["Japan"] = "JP";
  CountryCode2["Jersey"] = "JE";
  CountryCode2["Jordan"] = "JO";
  CountryCode2["Kazakhstan"] = "KZ";
  CountryCode2["Kenya"] = "KE";
  CountryCode2["Kiribati"] = "KI";
  CountryCode2["Kuwait"] = "KW";
  CountryCode2["Kyrgyzstan"] = "KG";
  CountryCode2["Laos"] = "LA";
  CountryCode2["Latvia"] = "LV";
  CountryCode2["Lebanon"] = "LB";
  CountryCode2["Lesotho"] = "LS";
  CountryCode2["Liberia"] = "LR";
  CountryCode2["Libya"] = "LY";
  CountryCode2["Liechtenstein"] = "LI";
  CountryCode2["Lithuania"] = "LT";
  CountryCode2["Luxembourg"] = "LU";
  CountryCode2["Macau"] = "MO";
  CountryCode2["Madagascar"] = "MG";
  CountryCode2["Malawi"] = "MW";
  CountryCode2["Malaysia"] = "MY";
  CountryCode2["Maldives"] = "MV";
  CountryCode2["Mali"] = "ML";
  CountryCode2["Malta"] = "MT";
  CountryCode2["MarshallIslands"] = "MH";
  CountryCode2["Martinique"] = "MQ";
  CountryCode2["Mauritania"] = "MR";
  CountryCode2["Mauritius"] = "MU";
  CountryCode2["Mayotte"] = "YT";
  CountryCode2["Mexico"] = "MX";
  CountryCode2["MicronesiaFederatedStatesOf"] = "FM";
  CountryCode2["Moldova"] = "MD";
  CountryCode2["Monaco"] = "MC";
  CountryCode2["Mongolia"] = "MN";
  CountryCode2["Montenegro"] = "ME";
  CountryCode2["Montserrat"] = "MS";
  CountryCode2["Morocco"] = "MA";
  CountryCode2["Mozambique"] = "MZ";
  CountryCode2["Myanmar"] = "MM";
  CountryCode2["Namibia"] = "NA";
  CountryCode2["Nauru"] = "NR";
  CountryCode2["Nepal"] = "NP";
  CountryCode2["Netherlands"] = "NL";
  CountryCode2["NetherlandsAntilles"] = "AN";
  CountryCode2["NewCaledonia"] = "NC";
  CountryCode2["NewZealand"] = "NZ";
  CountryCode2["NorthKorea"] = "KP";
  CountryCode2["Nicaragua"] = "NI";
  CountryCode2["Niger"] = "NE";
  CountryCode2["Nigeria"] = "NG";
  CountryCode2["Niue"] = "NU";
  CountryCode2["NorfolkIsland"] = "NF";
  CountryCode2["NorthMacedonia"] = "MK";
  CountryCode2["NorthernMarianaIslands"] = "MP";
  CountryCode2["Norway"] = "NO";
  CountryCode2["Oman"] = "OM";
  CountryCode2["Pakistan"] = "PK";
  CountryCode2["Palau"] = "PW";
  CountryCode2["PalestinianTerritoryOccupied"] = "PS";
  CountryCode2["Panama"] = "PA";
  CountryCode2["PapuaNewGuinea"] = "PG";
  CountryCode2["Paraguay"] = "PY";
  CountryCode2["Peru"] = "PE";
  CountryCode2["Philippines"] = "PH";
  CountryCode2["Pitcairn"] = "PN";
  CountryCode2["Poland"] = "PL";
  CountryCode2["Portugal"] = "PT";
  CountryCode2["PuertoRico"] = "PR";
  CountryCode2["Qatar"] = "QA";
  CountryCode2["Reunion"] = "RE";
  CountryCode2["Romania"] = "RO";
  CountryCode2["RussianFederation"] = "RU";
  CountryCode2["Rwanda"] = "RW";
  CountryCode2["SaintBarthelemy"] = "BL";
  CountryCode2["SaintHelena"] = "SH";
  CountryCode2["SaintKittsAndNevis"] = "KN";
  CountryCode2["SaintLucia"] = "LC";
  CountryCode2["SaintMartin"] = "MF";
  CountryCode2["SaintPierreAndMiquelon"] = "PM";
  CountryCode2["SaintVincentAndTheGrenadines"] = "VC";
  CountryCode2["Samoa"] = "WS";
  CountryCode2["SanMarino"] = "SM";
  CountryCode2["SaoTomeAndPrincipe"] = "ST";
  CountryCode2["SaudiArabia"] = "SA";
  CountryCode2["Senegal"] = "SN";
  CountryCode2["Serbia"] = "RS";
  CountryCode2["SerbiaAndMontenegro"] = "CS";
  CountryCode2["Seychelles"] = "SC";
  CountryCode2["SierraLeone"] = "SL";
  CountryCode2["Singapore"] = "SG";
  CountryCode2["Slovakia"] = "SK";
  CountryCode2["Slovenia"] = "SI";
  CountryCode2["SolomonIslands"] = "SB";
  CountryCode2["Somalia"] = "SO";
  CountryCode2["SouthAfrica"] = "ZA";
  CountryCode2["SouthGeorgiaAndTheSouthSandwichIslands"] = "GS";
  CountryCode2["SouthKorea"] = "KR";
  CountryCode2["Spain"] = "ES";
  CountryCode2["SriLanka"] = "LK";
  CountryCode2["Sudan"] = "SD";
  CountryCode2["Suriname"] = "SR";
  CountryCode2["SvalbardAndJanMayen"] = "SJ";
  CountryCode2["Swaziland"] = "SZ";
  CountryCode2["Sweden"] = "SE";
  CountryCode2["Switzerland"] = "CH";
  CountryCode2["Syria"] = "SY";
  CountryCode2["Taiwan"] = "TW";
  CountryCode2["Tajikistan"] = "TJ";
  CountryCode2["Tanzania"] = "TZ";
  CountryCode2["Thailand"] = "TH";
  CountryCode2["TimorLeste"] = "TL";
  CountryCode2["Togo"] = "TG";
  CountryCode2["Tokelau"] = "TK";
  CountryCode2["Tonga"] = "TO";
  CountryCode2["TrinidadAndTobago"] = "TT";
  CountryCode2["Tunisia"] = "TN";
  CountryCode2["Turkey"] = "TR";
  CountryCode2["Turkmenistan"] = "TM";
  CountryCode2["TurksAndCaicosIslands"] = "TC";
  CountryCode2["Tuvalu"] = "TV";
  CountryCode2["Uganda"] = "UG";
  CountryCode2["Ukraine"] = "UA";
  CountryCode2["UnitedArabEmirates"] = "AE";
  CountryCode2["UnitedKingdom"] = "GB";
  CountryCode2["UnitedStates"] = "US";
  CountryCode2["UnitedStatesMinorOutlyingIslands"] = "UM";
  CountryCode2["Uruguay"] = "UY";
  CountryCode2["Uzbekistan"] = "UZ";
  CountryCode2["Vanuatu"] = "VU";
  CountryCode2["Venezuela"] = "VE";
  CountryCode2["Vietnam"] = "VN";
  CountryCode2["VirginIslandsBritish"] = "VG";
  CountryCode2["VirginIslandsUS"] = "VI";
  CountryCode2["WallisAndFutuna"] = "WF";
  CountryCode2["WesternSahara"] = "EH";
  CountryCode2["Yemen"] = "YE";
  CountryCode2["Zambia"] = "ZM";
  CountryCode2["Zimbabwe"] = "ZW";
})(CountryCode || (CountryCode = {}));
var CurrencyCode;
(function(CurrencyCode2) {
  CurrencyCode2["AfghanistanAfghani"] = "AFN";
  CurrencyCode2["AlbaniaLek"] = "ALL";
  CurrencyCode2["ArmeniaDram"] = "AMD";
  CurrencyCode2["AlgeriaDinar"] = "DZD";
  CurrencyCode2["AmericanSamoaTala"] = "WST";
  CurrencyCode2["AngolaKwanza"] = "AOA";
  CurrencyCode2["ArgentinaPeso"] = "ARS";
  CurrencyCode2["AustraliaDollar"] = "AUD";
  CurrencyCode2["ArubaFlorin"] = "AWG";
  CurrencyCode2["AzerbaijanNewManat"] = "AZN";
  CurrencyCode2["BosniaAndHerzegovinaConvertibleMark"] = "BAM";
  CurrencyCode2["BahrainDinar"] = "BHD";
  CurrencyCode2["BarbadosDollar"] = "BBD";
  CurrencyCode2["BangladeshTaka"] = "BDT";
  CurrencyCode2["BelgiumFranc"] = "BGN";
  CurrencyCode2["BermudaDollar"] = "BMD";
  CurrencyCode2["BruneiDollar"] = "BND";
  CurrencyCode2["BoliviaBoliviano"] = "BOB";
  CurrencyCode2["BrazilReal"] = "BRL";
  CurrencyCode2["BahamasDollar"] = "BSD";
  CurrencyCode2["BhutanNgultrum"] = "BTN";
  CurrencyCode2["BotswanaPula"] = "BWP";
  CurrencyCode2["BelarusRuble"] = "BYN";
  CurrencyCode2["BelizeDollar"] = "BZD";
  CurrencyCode2["BulgariaLev"] = "BGN";
  CurrencyCode2["BurundiFranc"] = "BIF";
  CurrencyCode2["BritishPound"] = "GBP";
  CurrencyCode2["CanadaDollar"] = "CAD";
  CurrencyCode2["CambodiaRiel"] = "KHR";
  CurrencyCode2["ComorosFranc"] = "KMF";
  CurrencyCode2["CaymanIslandsDollar"] = "KYD";
  CurrencyCode2["ChilePeso"] = "CLP";
  CurrencyCode2["ChinaYuan"] = "CNY";
  CurrencyCode2["ColombiaPeso"] = "COP";
  CurrencyCode2["CostaRicaColon"] = "CRC";
  CurrencyCode2["CroatiaKuna"] = "HRK";
  CurrencyCode2["CubaConvertiblePeso"] = "CUC";
  CurrencyCode2["CubaPeso"] = "CUP";
  CurrencyCode2["CapeVerdeEscudo"] = "CVE";
  CurrencyCode2["CyprusPound"] = "CYP";
  CurrencyCode2["CzechRepublicKoruna"] = "CZK";
  CurrencyCode2["DjiboutiFranc"] = "DJF";
  CurrencyCode2["DenmarkKrone"] = "DKK";
  CurrencyCode2["DominicaDollar"] = "XCD";
  CurrencyCode2["DominicanRepublicPeso"] = "DOP";
  CurrencyCode2["EastCaribbeanDollar"] = "XCD";
  CurrencyCode2["EgyptPound"] = "EGP";
  CurrencyCode2["ElSalvadorColon"] = "SVC";
  CurrencyCode2["EquatorialGuineaEkwele"] = "GQE";
  CurrencyCode2["EritreaNakfa"] = "ERN";
  CurrencyCode2["EstoniaKroon"] = "EEK";
  CurrencyCode2["EthiopiaBirr"] = "ETB";
  CurrencyCode2["Euro"] = "EUR";
  CurrencyCode2["FijiDollar"] = "FJD";
  CurrencyCode2["FalklandIslandsPound"] = "FKP";
  CurrencyCode2["GambiaDalasi"] = "GMD";
  CurrencyCode2["GabonFranc"] = "GMD";
  CurrencyCode2["GeorgiaLari"] = "GEL";
  CurrencyCode2["GhanaCedi"] = "GHS";
  CurrencyCode2["GibraltarPound"] = "GIP";
  CurrencyCode2["GuatemalaQuetzal"] = "GTQ";
  CurrencyCode2["GuernseyPound"] = "GGP";
  CurrencyCode2["GuineaBissauPeso"] = "GWP";
  CurrencyCode2["GuyanaDollar"] = "GYD";
  CurrencyCode2["HongKongDollar"] = "HKD";
  CurrencyCode2["HondurasLempira"] = "HNL";
  CurrencyCode2["HaitiGourde"] = "HTG";
  CurrencyCode2["HungaryForint"] = "HUF";
  CurrencyCode2["IndonesiaRupiah"] = "IDR";
  CurrencyCode2["IsleOfManPound"] = "IMP";
  CurrencyCode2["IsraelNewShekel"] = "ILS";
  CurrencyCode2["IndiaRupee"] = "INR";
  CurrencyCode2["IraqDinar"] = "IQD";
  CurrencyCode2["IranRial"] = "IRR";
  CurrencyCode2["IcelandKrona"] = "ISK";
  CurrencyCode2["JamaicaDollar"] = "JMD";
  CurrencyCode2["JapanYen"] = "JPY";
  CurrencyCode2["JerseyPound"] = "JEP";
  CurrencyCode2["JordanDinar"] = "JOD";
  CurrencyCode2["KazakhstanTenge"] = "KZT";
  CurrencyCode2["KenyaShilling"] = "KES";
  CurrencyCode2["KyrgyzstanSom"] = "KGS";
  CurrencyCode2["NorthKoreaWon"] = "KPW";
  CurrencyCode2["SouthKoreaWon"] = "KRW";
  CurrencyCode2["KuwaitDinar"] = "KWD";
  CurrencyCode2["LaosKip"] = "LAK";
  CurrencyCode2["LebanonPound"] = "LBP";
  CurrencyCode2["LiberiaDollar"] = "LRD";
  CurrencyCode2["LesothoLoti"] = "LSL";
  CurrencyCode2["LibyanDinar"] = "LYD";
  CurrencyCode2["LithuaniaLitas"] = "LTL";
  CurrencyCode2["LatviaLats"] = "LVL";
  CurrencyCode2["LibyaDinar"] = "LYD";
  CurrencyCode2["MacauPataca"] = "MOP";
  CurrencyCode2["MaldivesRufiyaa"] = "MVR";
  CurrencyCode2["MalawiKwacha"] = "MWK";
  CurrencyCode2["MaltaLira"] = "MTL";
  CurrencyCode2["MauritiusRupee"] = "MUR";
  CurrencyCode2["MongoliaTughrik"] = "MNT";
  CurrencyCode2["MoroccoDirham"] = "MAD";
  CurrencyCode2["MoldovaLeu"] = "MDL";
  CurrencyCode2["MozambiqueMetical"] = "MZN";
  CurrencyCode2["MadagascarAriary"] = "MGA";
  CurrencyCode2["MacedoniaDenar"] = "MKD";
  CurrencyCode2["MexicoPeso"] = "MXN";
  CurrencyCode2["MalaysiaRinggit"] = "MYR";
  CurrencyCode2["MyanmarKyat"] = "MMK";
  CurrencyCode2["MicronesiaFederatedStatesDollar"] = "USD";
  CurrencyCode2["NicaraguaCordoba"] = "NIO";
  CurrencyCode2["NamibiaDollar"] = "NAD";
  CurrencyCode2["NetherlandsAntillesGuilder"] = "ANG";
  CurrencyCode2["NewCaledoniaFranc"] = "XPF";
  CurrencyCode2["NigeriaNaira"] = "NGN";
  CurrencyCode2["NicaraguaCordobaOro"] = "NIO";
  CurrencyCode2["NigerCFAFranc"] = "XOF";
  CurrencyCode2["NorwayKrone"] = "NOK";
  CurrencyCode2["NepalRupee"] = "NPR";
  CurrencyCode2["NewZealandDollar"] = "NZD";
  CurrencyCode2["OmanRial"] = "OMR";
  CurrencyCode2["PanamaBalboa"] = "PAB";
  CurrencyCode2["PeruNuevoSol"] = "PEN";
  CurrencyCode2["PapuaNewGuineaKina"] = "PGK";
  CurrencyCode2["PhilippinesPeso"] = "PHP";
  CurrencyCode2["PakistanRupee"] = "PKR";
  CurrencyCode2["PeruNuevo"] = "PEN";
  CurrencyCode2["PolandZloty"] = "PLN";
  CurrencyCode2["ParaguayGuarani"] = "PYG";
  CurrencyCode2["QatarRial"] = "QAR";
  CurrencyCode2["RomaniaNewLeu"] = "RON";
  CurrencyCode2["SerbiaDinar"] = "RSD";
  CurrencyCode2["SriLankaRupee"] = "LKR";
  CurrencyCode2["RussiaRuble"] = "RUB";
  CurrencyCode2["RwandaFranc"] = "RWF";
  CurrencyCode2["SaudiArabiaRiyal"] = "SAR";
  CurrencyCode2["SlovakiaKoruna"] = "SKK";
  CurrencyCode2["SloveniaTolar"] = "SIT";
  CurrencyCode2["SolomonIslandsDollar"] = "SBD";
  CurrencyCode2["SeychellesRupee"] = "SCR";
  CurrencyCode2["SudanPound"] = "SDG";
  CurrencyCode2["SwedenKrona"] = "SEK";
  CurrencyCode2["SingaporeDollar"] = "SGD";
  CurrencyCode2["SaintHelenaPound"] = "SHP";
  CurrencyCode2["SierraLeoneLeone"] = "SLL";
  CurrencyCode2["SomaliaShilling"] = "SOS";
  CurrencyCode2["SurinameDollar"] = "SRD";
  CurrencyCode2["SintMaartenPound"] = "SXD";
  CurrencyCode2["SyriaPound"] = "SYP";
  CurrencyCode2["SwazilandLilangeni"] = "SZL";
  CurrencyCode2["SwitzerlandFranc"] = "CHF";
  CurrencyCode2["ThailandBaht"] = "THB";
  CurrencyCode2["TajikistanSomoni"] = "TJS";
  CurrencyCode2["TurkmenistanManat"] = "TMT";
  CurrencyCode2["TunisiaDinar"] = "TND";
  CurrencyCode2["TongaPaanga"] = "TOP";
  CurrencyCode2["TurkeyLira"] = "TRY";
  CurrencyCode2["TrinidadAndTobagoDollar"] = "TTD";
  CurrencyCode2["TaiwanNewDollar"] = "TWD";
  CurrencyCode2["TanzaniaShilling"] = "TZS";
  CurrencyCode2["UnitedArabEmiratesDirham"] = "AED";
  CurrencyCode2["UkraineHryvnia"] = "UAH";
  CurrencyCode2["UgandaShilling"] = "UGX";
  CurrencyCode2["UnitedKingdomPound"] = "GBP";
  CurrencyCode2["UnitedStatesDollar"] = "USD";
  CurrencyCode2["UruguayPeso"] = "UYU";
  CurrencyCode2["UzbekistanSom"] = "UZS";
  CurrencyCode2["VenezuelaBolivar"] = "VEF";
  CurrencyCode2["VietnamDong"] = "VND";
  CurrencyCode2["VanuatuVatu"] = "VUV";
  CurrencyCode2["SamoaTala"] = "WST";
  CurrencyCode2["YemenRial"] = "YER";
  CurrencyCode2["SouthAfricaRand"] = "ZAR";
  CurrencyCode2["ZambiaKwacha"] = "ZMW";
  CurrencyCode2["ZimbabweDollar"] = "ZWL";
})(CurrencyCode || (CurrencyCode = {}));
({
  AfghanistanAfghani: {
    code: CurrencyCode.AfghanistanAfghani,
    countries: [CountryCode.Afghanistan],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Afghan Afghani",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u060B",
    symbol_native: "\u060B",
    symbol_placement: "before",
    thousands_separator: ","
  },
  AlbaniaLek: {
    code: CurrencyCode.AlbaniaLek,
    countries: [CountryCode.Albania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Albanian Lek",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Lek",
    symbol_native: "Lek",
    symbol_placement: "before",
    thousands_separator: "."
  },
  AlgeriaDinar: {
    code: CurrencyCode.AlgeriaDinar,
    countries: [CountryCode.Algeria],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Algerian Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u062F.\u062C",
    symbol_native: "\u062F.\u062C",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ArgentinaPeso: {
    code: CurrencyCode.ArgentinaPeso,
    countries: [CountryCode.Argentina],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Argentine Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ArmeniaDram: {
    code: CurrencyCode.ArmeniaDram,
    countries: [CountryCode.Armenia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Armenian Dram",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0564\u0580.",
    symbol_native: "\u0564\u0580.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ArubaFlorin: {
    code: CurrencyCode.ArubaFlorin,
    countries: [CountryCode.Aruba],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Aruban Florin",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0192",
    symbol_native: "\u0192",
    symbol_placement: "before",
    thousands_separator: ","
  },
  AustraliaDollar: {
    code: CurrencyCode.AustraliaDollar,
    countries: [CountryCode.Australia],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Australian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  AzerbaijanManat: {
    code: CurrencyCode.AzerbaijanNewManat,
    countries: [CountryCode.Azerbaijan],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Azerbaijani Manat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u043C\u0430\u043D",
    symbol_native: "\u043C\u0430\u043D",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BahrainDinar: {
    code: CurrencyCode.BahrainDinar,
    countries: [CountryCode.Bahrain],
    decimal_digits: 3,
    decimal_separator: ".",
    name: "Bahraini Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: ".\u062F.\u0628",
    symbol_native: ".\u062F.\u0628",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BangladeshTaka: {
    code: CurrencyCode.BangladeshTaka,
    countries: [CountryCode.Bangladesh],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bangladeshi Taka",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u09F3",
    symbol_native: "\u09F3",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BarbadosDollar: {
    code: CurrencyCode.BarbadosDollar,
    countries: [CountryCode.Barbados],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Barbadian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BelarusRuble: {
    code: CurrencyCode.BelarusRuble,
    countries: [CountryCode.Belarus],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Belarusian Ruble",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Br",
    symbol_native: "Br",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BelizeDollar: {
    code: CurrencyCode.BelizeDollar,
    countries: [CountryCode.Belize],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Belize Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "BZ$",
    symbol_native: "BZ$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BermudaDollar: {
    code: CurrencyCode.BermudaDollar,
    countries: [CountryCode.Bermuda],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bermudian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BoliviaBoliviano: {
    code: CurrencyCode.BoliviaBoliviano,
    countries: [CountryCode.Bolivia],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bolivian Boliviano",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$b",
    symbol_native: "$b",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BosniaAndHerzegovinaConvertibleMarka: {
    code: CurrencyCode.BosniaAndHerzegovinaConvertibleMark,
    countries: [CountryCode.BosniaAndHerzegovina],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Bosnia and Herzegovina Convertible Marka",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KM",
    symbol_native: "KM",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BotswanaPula: {
    code: CurrencyCode.BotswanaPula,
    countries: [CountryCode.Botswana],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Botswana Pula",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "P",
    symbol_native: "P",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BrazilReal: {
    code: CurrencyCode.BrazilReal,
    countries: [CountryCode.Brazil],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Brazilian Real",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "R$",
    symbol_native: "R$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BruneiDollar: {
    code: CurrencyCode.BruneiDollar,
    countries: [CountryCode.Brunei],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Brunei Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BulgariaLev: {
    code: CurrencyCode.BulgariaLev,
    countries: [CountryCode.Bulgaria],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bulgarian Lev",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u043B\u0432",
    symbol_native: "\u043B\u0432",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BurundiFranc: {
    code: CurrencyCode.BurundiFranc,
    countries: [CountryCode.Burundi],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Burundian Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "FBu",
    symbol_native: "FBu",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CambodiaRiel: {
    code: CurrencyCode.CambodiaRiel,
    countries: [CountryCode.Cambodia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cambodian Riel",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u17DB",
    symbol_native: "\u17DB",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CanadaDollar: {
    code: CurrencyCode.CanadaDollar,
    countries: [CountryCode.Canada],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Canadian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CapeVerdeEscudo: {
    code: CurrencyCode.CapeVerdeEscudo,
    countries: [CountryCode.CapeVerde],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Cape Verde Escudo",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Esc",
    symbol_native: "Esc",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CaymanIslandsDollar: {
    code: CurrencyCode.CaymanIslandsDollar,
    countries: [CountryCode.CaymanIslands],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Cayman Islands Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ChilePeso: {
    code: CurrencyCode.ChilePeso,
    countries: [CountryCode.Chile],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Chilean Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ChinaYuanRenminbi: {
    code: CurrencyCode.ChinaYuan,
    countries: [CountryCode.China],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Chinese Yuan",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA5",
    symbol_native: "\xA5",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ColombiaPeso: {
    code: CurrencyCode.ColombiaPeso,
    countries: [CountryCode.Colombia],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Colombian Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ComorosFranc: {
    code: CurrencyCode.ComorosFranc,
    countries: [CountryCode.Comoros],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Comoros Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "CF",
    symbol_native: "CF",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CostaRicaColon: {
    code: CurrencyCode.CostaRicaColon,
    countries: [CountryCode.CostaRica],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Costa Rican Colon",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A1",
    symbol_native: "\u20A1",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CroatiaKuna: {
    code: CurrencyCode.CroatiaKuna,
    countries: [CountryCode.Croatia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Croatian Kuna",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kn",
    symbol_native: "kn",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CubaConvertiblePeso: {
    code: CurrencyCode.CubaConvertiblePeso,
    countries: [CountryCode.Cuba],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cuba Convertible Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CubaPeso: {
    code: CurrencyCode.CubaPeso,
    countries: [CountryCode.Cuba],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cuba Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CyprusPound: {
    code: CurrencyCode.CyprusPound,
    countries: [CountryCode.Cyprus],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cyprus Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CzechRepublicKoruna: {
    code: CurrencyCode.CzechRepublicKoruna,
    countries: [CountryCode.CzechRepublic],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Czech Republic Koruna",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "K\u010D",
    symbol_native: "K\u010D",
    symbol_placement: "before",
    thousands_separator: "."
  },
  DenmarkKrone: {
    code: CurrencyCode.DenmarkKrone,
    countries: [CountryCode.Denmark],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Denmark Krone",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  DjiboutiFranc: {
    code: CurrencyCode.DjiboutiFranc,
    countries: [CountryCode.Djibouti],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Djibouti Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Fdj",
    symbol_native: "Fdj",
    symbol_placement: "before",
    thousands_separator: ","
  },
  DominicanRepublicPeso: {
    code: CurrencyCode.DominicanRepublicPeso,
    countries: [CountryCode.DominicanRepublic],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Dominican Republic Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "RD$",
    symbol_native: "RD$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EastCaribbeanDollar: {
    code: CurrencyCode.EastCaribbeanDollar,
    countries: [
      CountryCode.AntiguaAndBarbuda,
      CountryCode.Dominica,
      CountryCode.Grenada,
      CountryCode.SaintKittsAndNevis,
      CountryCode.SaintLucia,
      CountryCode.SaintVincentAndTheGrenadines
    ],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "East Caribbean Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  EgyptPound: {
    code: CurrencyCode.EgyptPound,
    countries: [CountryCode.Egypt],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Egypt Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ElSalvadorColon: {
    code: CurrencyCode.ElSalvadorColon,
    countries: [CountryCode.ElSalvador],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "El Salvador Colon",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A1",
    symbol_native: "\u20A1",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EquatorialGuineaEkwele: {
    code: CurrencyCode.EquatorialGuineaEkwele,
    countries: [CountryCode.EquatorialGuinea],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Equatorial Guinea Ekwele",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "GQE",
    symbol_native: "GQE",
    symbol_placement: "before",
    thousands_separator: ","
  },
  EritreaNakfa: {
    code: CurrencyCode.EritreaNakfa,
    countries: [CountryCode.Eritrea],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Eritrea Nakfa",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Nfk",
    symbol_native: "Nfk",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EstoniaKroon: {
    code: CurrencyCode.EstoniaKroon,
    countries: [CountryCode.Estonia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Estonia Kroon",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EthiopiaBirr: {
    code: CurrencyCode.EthiopiaBirr,
    countries: [CountryCode.Ethiopia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Ethiopia Birr",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Br",
    symbol_native: "Br",
    symbol_placement: "before",
    thousands_separator: "."
  },
  Euro: {
    code: CurrencyCode.Euro,
    countries: [
      CountryCode.Andorra,
      CountryCode.Austria,
      CountryCode.Belgium,
      CountryCode.Cyprus,
      CountryCode.Estonia,
      CountryCode.Finland,
      CountryCode.France,
      CountryCode.Germany,
      CountryCode.Greece,
      CountryCode.Ireland,
      CountryCode.Italy,
      CountryCode.Latvia,
      CountryCode.Lithuania,
      CountryCode.Luxembourg,
      CountryCode.Malta,
      CountryCode.Monaco,
      CountryCode.Netherlands,
      CountryCode.Portugal,
      CountryCode.Spain,
      CountryCode.Sweden,
      CountryCode.UnitedKingdom
    ],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Euro",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AC",
    symbol_native: "\u20AC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  FalklandIslandsPound: {
    code: CurrencyCode.FalklandIslandsPound,
    countries: [CountryCode.FalklandIslands],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Equatorial Guinea Ekwele",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  FijiDollar: {
    code: CurrencyCode.FijiDollar,
    countries: [CountryCode.Fiji],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Fiji Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GambiaDalasi: {
    code: CurrencyCode.GambiaDalasi,
    countries: [CountryCode.Gambia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Gambia Dalasi",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "D",
    symbol_native: "D",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GeorgiaLari: {
    code: CurrencyCode.GeorgiaLari,
    countries: [CountryCode.Georgia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Georgia Lari",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20BE",
    symbol_native: "\u20BE",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GhanaCedi: {
    code: CurrencyCode.GhanaCedi,
    countries: [CountryCode.Ghana],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Ghana Cedi",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B5",
    symbol_native: "\u20B5",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GibraltarPound: {
    code: CurrencyCode.GibraltarPound,
    countries: [CountryCode.Gibraltar],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Gibraltar Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuatemalaQuetzal: {
    code: CurrencyCode.GuatemalaQuetzal,
    countries: [CountryCode.Guatemala],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guatemala Quetzal",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Q",
    symbol_native: "Q",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuernseyPound: {
    code: CurrencyCode.GuernseyPound,
    countries: [CountryCode.Guernsey],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guernsey Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuineaBissauPeso: {
    code: CurrencyCode.GuineaBissauPeso,
    countries: [CountryCode.GuineaBissau],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guinea-Bissau Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B5",
    symbol_native: "\u20B5",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuyanaDollar: {
    code: CurrencyCode.GuyanaDollar,
    countries: [CountryCode.Guyana],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guyana Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HaitiGourde: {
    code: CurrencyCode.HaitiGourde,
    countries: [CountryCode.Haiti],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Haiti Gourde",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "G",
    symbol_native: "G",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HondurasLempira: {
    code: CurrencyCode.HondurasLempira,
    countries: [CountryCode.Honduras],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Honduras Lempira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "L",
    symbol_native: "L",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HongKongDollar: {
    code: CurrencyCode.HongKongDollar,
    countries: [CountryCode.HongKong],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Hong Kong Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HungaryForint: {
    code: CurrencyCode.HungaryForint,
    countries: [CountryCode.Hungary],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Hungary Forint",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Ft",
    symbol_native: "Ft",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IcelandKrona: {
    code: CurrencyCode.IcelandKrona,
    countries: [CountryCode.Iceland],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Iceland Krona",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IndianRupee: {
    code: CurrencyCode.IndiaRupee,
    countries: [CountryCode.India, CountryCode.Bhutan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Indian Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B9",
    symbol_native: "\u20B9",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IndonesiaRupiah: {
    code: CurrencyCode.IndonesiaRupiah,
    countries: [CountryCode.Indonesia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Indonesia Rupiah",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Rp",
    symbol_native: "Rp",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IranRial: {
    code: CurrencyCode.IranRial,
    countries: [CountryCode.Iran],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Iran Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IsleOfManPound: {
    code: CurrencyCode.IsleOfManPound,
    countries: [CountryCode.IsleOfMan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Isle of Man Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IsraeliShekel: {
    code: CurrencyCode.IsraelNewShekel,
    countries: [CountryCode.Israel],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Israeli Shekel",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AA",
    symbol_native: "\u20AA",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JamaicaDollar: {
    code: CurrencyCode.JamaicaDollar,
    countries: [CountryCode.Jamaica],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Jamaica Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "J$",
    symbol_native: "J$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JapanYen: {
    code: CurrencyCode.JapanYen,
    countries: [CountryCode.Japan],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Japan Yen",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA5",
    symbol_native: "\uFFE5",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JerseyPound: {
    code: CurrencyCode.JerseyPound,
    countries: [CountryCode.Jersey],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Jersey Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JordanDinar: {
    code: CurrencyCode.JordanDinar,
    countries: [CountryCode.Jordan],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Jordan Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "JD",
    symbol_native: "JD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KazakhstanTenge: {
    code: CurrencyCode.KazakhstanTenge,
    countries: [CountryCode.Kazakhstan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Kazakhstan Tenge",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B8",
    symbol_native: "\u20B8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KenyaShilling: {
    code: CurrencyCode.KenyaShilling,
    countries: [CountryCode.Kenya],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Kenya Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KSh",
    symbol_native: "KSh",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KuwaitDinar: {
    code: CurrencyCode.KuwaitDinar,
    countries: [CountryCode.Kuwait],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Kuwait Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KD",
    symbol_native: "KD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KyrgyzstanSom: {
    code: CurrencyCode.KyrgyzstanSom,
    countries: [CountryCode.Kyrgyzstan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Kyrgyzstan Som",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KGS",
    symbol_native: "KGS",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LaosKip: {
    code: CurrencyCode.LaosKip,
    countries: [CountryCode.Laos],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Laos Kip",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AD",
    symbol_native: "\u20AD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LatviaLats: {
    code: CurrencyCode.LatviaLats,
    countries: [CountryCode.Latvia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Latvia Lat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Ls",
    symbol_native: "Ls",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LebanonPound: {
    code: CurrencyCode.LebanonPound,
    countries: [CountryCode.Lebanon],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Lebanon Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LesothoLoti: {
    code: CurrencyCode.LesothoLoti,
    countries: [CountryCode.Lesotho],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Lesotho Loti",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "M",
    symbol_native: "M",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LiberiaDollar: {
    code: CurrencyCode.LiberiaDollar,
    countries: [CountryCode.Liberia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Liberia Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LibyanDinar: {
    code: CurrencyCode.LibyanDinar,
    countries: [CountryCode.Libya],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Libyan Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "LD",
    symbol_native: "LD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LithuaniaLitas: {
    code: CurrencyCode.LithuaniaLitas,
    countries: [CountryCode.Lithuania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Lithuania Litas",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Lt",
    symbol_native: "Lt",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MacauPataca: {
    code: CurrencyCode.MacauPataca,
    countries: [CountryCode.Macau],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Macau Pataca",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "MOP$",
    symbol_native: "MOP$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MacedoniaDenar: {
    code: CurrencyCode.MacedoniaDenar,
    countries: [CountryCode.NorthMacedonia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Macedonia Denar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0434\u0435\u043D",
    symbol_native: "\u0434\u0435\u043D",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MadagascarAriary: {
    code: CurrencyCode.MadagascarAriary,
    countries: [CountryCode.Madagascar],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Madagascar Ariary",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Ar",
    symbol_native: "Ar",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MalawiKwacha: {
    code: CurrencyCode.MalawiKwacha,
    countries: [CountryCode.Malawi],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Malawi Kwacha",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "MK",
    symbol_native: "MK",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MalaysiaRinggit: {
    code: CurrencyCode.MalaysiaRinggit,
    countries: [CountryCode.Malaysia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Malaysia Ringgit",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "RM",
    symbol_native: "RM",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MaldivesRufiyaa: {
    code: CurrencyCode.MaldivesRufiyaa,
    countries: [CountryCode.Maldives],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Maldives Rufiyaa",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Rf",
    symbol_native: "Rf",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MaltaLira: {
    code: CurrencyCode.MaltaLira,
    countries: [CountryCode.Malta],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Malta Lira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Lm",
    symbol_native: "Lm",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MauritiusRupee: {
    code: CurrencyCode.MauritiusRupee,
    countries: [CountryCode.Mauritius],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mauritius Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MexicoPeso: {
    code: CurrencyCode.MexicoPeso,
    countries: [CountryCode.Mexico],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mexico Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MoldovaLeu: {
    code: CurrencyCode.MoldovaLeu,
    countries: [CountryCode.Moldova],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Moldova Leu",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "L",
    symbol_native: "L",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MongoliaTughrik: {
    code: CurrencyCode.MongoliaTughrik,
    countries: [CountryCode.Mongolia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mongolia Tughrik",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AE",
    symbol_native: "\u20AE",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MoroccoDirham: {
    code: CurrencyCode.MoroccoDirham,
    countries: [CountryCode.Morocco],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Morocco Dirham",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "DH",
    symbol_native: "DH",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MozambiqueMetical: {
    code: CurrencyCode.MozambiqueMetical,
    countries: [CountryCode.Mozambique],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mozambique Metical",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "MT",
    symbol_native: "MT",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MyanmarKyat: {
    code: CurrencyCode.MyanmarKyat,
    countries: [CountryCode.Myanmar],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Myanmar Kyat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "K",
    symbol_native: "K",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NamibiaDollar: {
    code: CurrencyCode.NamibiaDollar,
    countries: [CountryCode.Namibia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Namibia Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NepalRupee: {
    code: CurrencyCode.NepalRupee,
    countries: [CountryCode.Nepal],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Nepal Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NetherlandsAntillesGuilder: {
    code: CurrencyCode.NetherlandsAntillesGuilder,
    countries: [CountryCode.NetherlandsAntilles],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Netherlands Antilles Guilder",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0192",
    symbol_native: "\u0192",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NewCaledoniaFranc: {
    code: CurrencyCode.NewCaledoniaFranc,
    countries: [CountryCode.NewCaledonia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "New Caledonia Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A3",
    symbol_native: "\u20A3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NewZealandDollar: {
    code: CurrencyCode.NewZealandDollar,
    countries: [CountryCode.NewZealand],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "New Zealand Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NicaraguaCordoba: {
    code: CurrencyCode.NicaraguaCordoba,
    countries: [CountryCode.Nicaragua],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Nicaragua Cordoba",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "C$",
    symbol_native: "C$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NigerCFAFranc: {
    code: CurrencyCode.NigerCFAFranc,
    countries: [CountryCode.Niger],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Niger CFA Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "CFA",
    symbol_native: "CFA",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NigeriaNaira: {
    code: CurrencyCode.NigeriaNaira,
    countries: [CountryCode.Nigeria],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Nigeria Naira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A6",
    symbol_native: "\u20A6",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NorthKoreaWon: {
    code: CurrencyCode.NorthKoreaWon,
    countries: [CountryCode.NorthKorea],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "North Korea Won",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A9",
    symbol_native: "\u20A9",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NorwayKrone: {
    code: CurrencyCode.NorwayKrone,
    countries: [CountryCode.Norway],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Norway Krone",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  OmanRial: {
    code: CurrencyCode.OmanRial,
    countries: [CountryCode.Oman],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Oman Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PakistanRupee: {
    code: CurrencyCode.PakistanRupee,
    countries: [CountryCode.Pakistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Pakistan Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PanamaBalboa: {
    code: CurrencyCode.PanamaBalboa,
    countries: [CountryCode.Panama],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Panama Balboa",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "B/.",
    symbol_native: "B/.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ParaguayGuarani: {
    code: CurrencyCode.ParaguayGuarani,
    countries: [CountryCode.Paraguay],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Paraguay Guarani",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Gs",
    symbol_native: "Gs",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PeruvianNuevo: {
    code: CurrencyCode.PeruNuevo,
    countries: [CountryCode.Peru],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Peruvian Nuevo",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "S/.",
    symbol_native: "S/.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PhilippinesPeso: {
    code: CurrencyCode.PhilippinesPeso,
    countries: [CountryCode.Philippines],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Philippines Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B1",
    symbol_native: "\u20B1",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PolandZloty: {
    code: CurrencyCode.PolandZloty,
    countries: [CountryCode.Poland],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Poland Zloty",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "z\u0142",
    symbol_native: "z\u0142",
    symbol_placement: "before",
    thousands_separator: "."
  },
  QatarRial: {
    code: CurrencyCode.QatarRial,
    countries: [CountryCode.Qatar],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Qatar Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  RomaniaNewLeu: {
    code: CurrencyCode.RomaniaNewLeu,
    countries: [CountryCode.Romania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Romania New Leu",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "lei",
    symbol_native: "lei",
    symbol_placement: "before",
    thousands_separator: "."
  },
  RussiaRuble: {
    code: CurrencyCode.RussiaRuble,
    countries: [CountryCode.RussianFederation],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Russia Ruble",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20BD",
    symbol_native: "\u20BD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  RwandaFranc: {
    code: CurrencyCode.RwandaFranc,
    countries: [CountryCode.Rwanda],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Rwanda Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "RF",
    symbol_native: "RF",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SaudiArabiaRiyal: {
    code: CurrencyCode.SaudiArabiaRiyal,
    countries: [CountryCode.SaudiArabia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Saudi Arabia Riyal",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SerbiaDinar: {
    code: CurrencyCode.SerbiaDinar,
    countries: [CountryCode.Serbia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Serbia Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0414\u0438\u043D.",
    symbol_native: "\u0414\u0438\u043D.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SeychellesRupee: {
    code: CurrencyCode.SeychellesRupee,
    countries: [CountryCode.Seychelles],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Seychelles Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SingaporeDollar: {
    code: CurrencyCode.SingaporeDollar,
    countries: [CountryCode.Singapore],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Singapore Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SlovakiaKoruna: {
    code: CurrencyCode.SlovakiaKoruna,
    countries: [CountryCode.Slovakia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Slovakia Koruna",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Sk",
    symbol_native: "Sk",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SloveniaTolar: {
    code: CurrencyCode.SloveniaTolar,
    countries: [CountryCode.Slovenia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Slovenia Tolar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "SIT",
    symbol_native: "SIT",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SolomonIslandsDollar: {
    code: CurrencyCode.SolomonIslandsDollar,
    countries: [CountryCode.SolomonIslands],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Solomon Islands Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SomaliaShilling: {
    code: CurrencyCode.SomaliaShilling,
    countries: [CountryCode.Somalia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Somalia Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "S",
    symbol_native: "S",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SouthAfricaRand: {
    code: CurrencyCode.SouthAfricaRand,
    countries: [CountryCode.SouthAfrica],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "South Africa Rand",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "R",
    symbol_native: "R",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SouthKoreaWon: {
    code: CurrencyCode.SouthKoreaWon,
    countries: [CountryCode.SouthKorea],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "South Korea Won",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A9",
    symbol_native: "\u20A9",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SriLankaRupee: {
    code: CurrencyCode.SriLankaRupee,
    countries: [CountryCode.SriLanka],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Sri Lanka Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SudanPound: {
    code: CurrencyCode.SudanPound,
    countries: [CountryCode.Sudan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Sudan Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SurinameDollar: {
    code: CurrencyCode.SurinameDollar,
    countries: [CountryCode.Suriname],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Suriname Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SwazilandLilangeni: {
    code: CurrencyCode.SwazilandLilangeni,
    countries: [CountryCode.Swaziland],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Swaziland Lilangeni",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "E",
    symbol_native: "E",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SwedenKrona: {
    code: CurrencyCode.SwedenKrona,
    countries: [CountryCode.Sweden],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Sweden Krona",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SwitzerlandFranc: {
    code: CurrencyCode.SwitzerlandFranc,
    countries: [CountryCode.Switzerland],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Switzerland Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "CHF",
    symbol_native: "CHF",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SyriaPound: {
    code: CurrencyCode.SyriaPound,
    countries: [CountryCode.Syria],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Syria Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TaiwanNewDollar: {
    code: CurrencyCode.TaiwanNewDollar,
    countries: [CountryCode.Taiwan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Taiwan New Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "NT$",
    symbol_native: "NT$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TajikistanSomoni: {
    code: CurrencyCode.TajikistanSomoni,
    countries: [CountryCode.Tajikistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Tajikistan Somoni",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "TJS",
    symbol_native: "TJS",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TanzaniaShilling: {
    code: CurrencyCode.TanzaniaShilling,
    countries: [CountryCode.Tanzania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Tanzania Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "TSh",
    symbol_native: "TSh",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ThailandBaht: {
    code: CurrencyCode.ThailandBaht,
    countries: [CountryCode.Thailand],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Thailand Baht",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0E3F",
    symbol_native: "\u0E3F",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TunisiaDinar: {
    code: CurrencyCode.TunisiaDinar,
    countries: [CountryCode.Tunisia],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Tunisia Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u062F.\u062A",
    symbol_native: "\u062F.\u062A",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TurkeyLira: {
    code: CurrencyCode.TurkeyLira,
    countries: [CountryCode.Turkey],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Turkey Lira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20BA",
    symbol_native: "\u20BA",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TurkmenistanManat: {
    code: CurrencyCode.TurkmenistanManat,
    countries: [CountryCode.Turkmenistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Turkmenistan Manat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "m",
    symbol_native: "m",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UgandaShilling: {
    code: CurrencyCode.UgandaShilling,
    countries: [CountryCode.Uganda],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Uganda Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "USh",
    symbol_native: "USh",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UkraineHryvnia: {
    code: CurrencyCode.UkraineHryvnia,
    countries: [CountryCode.Ukraine],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Ukraine Hryvnia",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B4",
    symbol_native: "\u20B4",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UnitedArabEmiratesDirham: {
    code: CurrencyCode.UnitedArabEmiratesDirham,
    countries: [CountryCode.UnitedArabEmirates],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "United Arab Emirates Dirham",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u062F.\u0625",
    symbol_native: "\u062F.\u0625",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UnitedKingdomPound: {
    code: CurrencyCode.UnitedKingdomPound,
    countries: [CountryCode.UnitedKingdom],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "United Kingdom Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UnitedStatesDollar: {
    code: CurrencyCode.UnitedStatesDollar,
    countries: [CountryCode.UnitedStates],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "United States Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UruguayPeso: {
    code: CurrencyCode.UruguayPeso,
    countries: [CountryCode.Uruguay],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Uruguay Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$U",
    symbol_native: "$U",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UzbekistanSom: {
    code: CurrencyCode.UzbekistanSom,
    countries: [CountryCode.Uzbekistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Uzbekistan Som",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "UZS",
    symbol_native: "UZS",
    symbol_placement: "before",
    thousands_separator: "."
  },
  VanuatuVatu: {
    code: CurrencyCode.VanuatuVatu,
    countries: [CountryCode.Vanuatu],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Vanuatu Vatu",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "VT",
    symbol_native: "VT",
    symbol_placement: "before",
    thousands_separator: "."
  },
  VenezuelaBolivar: {
    code: CurrencyCode.VenezuelaBolivar,
    countries: [CountryCode.Venezuela],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Venezuela Bolivar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Bs. F",
    symbol_native: "Bs. F",
    symbol_placement: "before",
    thousands_separator: "."
  },
  VietnamDong: {
    code: CurrencyCode.VietnamDong,
    countries: [CountryCode.Vietnam],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Vietnam Dong",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AB",
    symbol_native: "\u20AB",
    symbol_placement: "before",
    thousands_separator: "."
  },
  YemenRial: {
    code: CurrencyCode.YemenRial,
    countries: [CountryCode.Yemen],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Yemen Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ZambiaKwacha: {
    code: CurrencyCode.ZambiaKwacha,
    countries: [CountryCode.Zambia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Zambia Kwacha",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "ZK",
    symbol_native: "ZK",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ZimbabweDollar: {
    code: CurrencyCode.ZimbabweDollar,
    countries: [CountryCode.Zimbabwe],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Zimbabwe Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AB",
    symbol_native: "\u20AB",
    symbol_placement: "before",
    thousands_separator: "."
  }
});
var CryptoCurrency;
(function(CryptoCurrency2) {
  CryptoCurrency2["Bitcoin"] = "BTC";
  CryptoCurrency2["Ethereum"] = "ETH";
  CryptoCurrency2["Litecoin"] = "LTC";
  CryptoCurrency2["Ripple"] = "XRP";
  CryptoCurrency2["Dash"] = "DASH";
  CryptoCurrency2["Zcash"] = "ZEC";
  CryptoCurrency2["Dogecoin"] = "DOGE";
  CryptoCurrency2["Monero"] = "XMR";
  CryptoCurrency2["BitcoinCash"] = "BCH";
  CryptoCurrency2["EOS"] = "EOS";
  CryptoCurrency2["Binance"] = "BNB";
  CryptoCurrency2["Stellar"] = "XLM";
  CryptoCurrency2["Cardano"] = "ADA";
  CryptoCurrency2["IOTA"] = "IOTA";
  CryptoCurrency2["Tezos"] = "XTZ";
  CryptoCurrency2["NEO"] = "NEO";
  CryptoCurrency2["TRON"] = "TRX";
  CryptoCurrency2["EOSClassic"] = "EOSC";
  CryptoCurrency2["Ontology"] = "ONT";
  CryptoCurrency2["VeChain"] = "VEN";
  CryptoCurrency2["QTUM"] = "QTUM";
  CryptoCurrency2["Lisk"] = "LSK";
  CryptoCurrency2["Waves"] = "WAVES";
  CryptoCurrency2["OmiseGO"] = "OMG";
  CryptoCurrency2["Zilliqa"] = "ZIL";
  CryptoCurrency2["BitcoinGold"] = "BTG";
  CryptoCurrency2["Decred"] = "DCR";
  CryptoCurrency2["Stratis"] = "STRAT";
  CryptoCurrency2["Populous"] = "PPT";
  CryptoCurrency2["Augur"] = "REP";
  CryptoCurrency2["Golem"] = "GNT";
  CryptoCurrency2["Siacoin"] = "SC";
  CryptoCurrency2["BasicAttentionToken"] = "BAT";
  CryptoCurrency2["ZCoin"] = "XZC";
  CryptoCurrency2["StratisHedged"] = "SNT";
  CryptoCurrency2["VeChainHedged"] = "VEN";
  CryptoCurrency2["PowerLedger"] = "POWR";
  CryptoCurrency2["WavesHedged"] = "WAVE";
  CryptoCurrency2["ZilliqaHedged"] = "ZRX";
  CryptoCurrency2["BitcoinDiamond"] = "BCD";
  CryptoCurrency2["DigiByte"] = "DGB";
  CryptoCurrency2["DigiByteHedged"] = "DGB";
  CryptoCurrency2["Bytecoin"] = "BCN";
  CryptoCurrency2["BytecoinHedged"] = "BCN";
})(CryptoCurrency || (CryptoCurrency = {}));
var LanguageCode;
(function(LanguageCode2) {
  LanguageCode2["Afrikaans"] = "af";
  LanguageCode2["Albanian"] = "sq";
  LanguageCode2["Amharic"] = "am";
  LanguageCode2["Arabic"] = "ar";
  LanguageCode2["Armenian"] = "hy";
  LanguageCode2["Azerbaijani"] = "az";
  LanguageCode2["Bashkir"] = "ba";
  LanguageCode2["Basque"] = "eu";
  LanguageCode2["Belarusian"] = "be";
  LanguageCode2["Bengali"] = "bn";
  LanguageCode2["Berber"] = "ber";
  LanguageCode2["Bhutani"] = "dz";
  LanguageCode2["Bihari"] = "bh";
  LanguageCode2["Bislama"] = "bi";
  LanguageCode2["Bosnian"] = "bs";
  LanguageCode2["Breten"] = "br";
  LanguageCode2["Bulgarian"] = "bg";
  LanguageCode2["Burmese"] = "my";
  LanguageCode2["Cantonese"] = "yue";
  LanguageCode2["Catalan"] = "ca";
  LanguageCode2["Chinese"] = "zh";
  LanguageCode2["Chuvash"] = "cv";
  LanguageCode2["Corsican"] = "co";
  LanguageCode2["Croatian"] = "hr";
  LanguageCode2["Czech"] = "cs";
  LanguageCode2["Danish"] = "da";
  LanguageCode2["Dari"] = "prs";
  LanguageCode2["Divehi"] = "dv";
  LanguageCode2["Dutch"] = "nl";
  LanguageCode2["English"] = "en";
  LanguageCode2["Esperanto"] = "eo";
  LanguageCode2["Estonian"] = "et";
  LanguageCode2["Faroese"] = "fo";
  LanguageCode2["Farsi"] = "fa";
  LanguageCode2["Filipino"] = "fil";
  LanguageCode2["Finnish"] = "fi";
  LanguageCode2["French"] = "fr";
  LanguageCode2["Frisian"] = "fy";
  LanguageCode2["Galician"] = "gl";
  LanguageCode2["Georgian"] = "ka";
  LanguageCode2["German"] = "de";
  LanguageCode2["Greek"] = "el";
  LanguageCode2["Greenlandic"] = "kl";
  LanguageCode2["Gujarati"] = "gu";
  LanguageCode2["Haitian"] = "ht";
  LanguageCode2["Hausa"] = "ha";
  LanguageCode2["Hebrew"] = "he";
  LanguageCode2["Hindi"] = "hi";
  LanguageCode2["Hungarian"] = "hu";
  LanguageCode2["Icelandic"] = "is";
  LanguageCode2["Igbo"] = "ig";
  LanguageCode2["Indonesian"] = "id";
  LanguageCode2["Irish"] = "ga";
  LanguageCode2["Italian"] = "it";
  LanguageCode2["Japanese"] = "ja";
  LanguageCode2["Javanese"] = "jv";
  LanguageCode2["Kannada"] = "kn";
  LanguageCode2["Karelian"] = "krl";
  LanguageCode2["Kazakh"] = "kk";
  LanguageCode2["Khmer"] = "km";
  LanguageCode2["Komi"] = "kv";
  LanguageCode2["Konkani"] = "kok";
  LanguageCode2["Korean"] = "ko";
  LanguageCode2["Kurdish"] = "ku";
  LanguageCode2["Kyrgyz"] = "ky";
  LanguageCode2["Lao"] = "lo";
  LanguageCode2["Latin"] = "la";
  LanguageCode2["Latvian"] = "lv";
  LanguageCode2["Lithuanian"] = "lt";
  LanguageCode2["Luxembourgish"] = "lb";
  LanguageCode2["Ossetian"] = "os";
  LanguageCode2["Macedonian"] = "mk";
  LanguageCode2["Malagasy"] = "mg";
  LanguageCode2["Malay"] = "ms";
  LanguageCode2["Malayalam"] = "ml";
  LanguageCode2["Maltese"] = "mt";
  LanguageCode2["Maori"] = "mi";
  LanguageCode2["Marathi"] = "mr";
  LanguageCode2["Mari"] = "mhr";
  LanguageCode2["Mongolian"] = "mn";
  LanguageCode2["Montenegrin"] = "me";
  LanguageCode2["Nepali"] = "ne";
  LanguageCode2["NorthernSotho"] = "nso";
  LanguageCode2["Norwegian"] = "no";
  LanguageCode2["NorwegianBokmal"] = "nb";
  LanguageCode2["NorwegianNynorsk"] = "nn";
  LanguageCode2["Oriya"] = "or";
  LanguageCode2["Pashto"] = "ps";
  LanguageCode2["Persian"] = "fa";
  LanguageCode2["Polish"] = "pl";
  LanguageCode2["Portuguese"] = "pt";
  LanguageCode2["Punjabi"] = "pa";
  LanguageCode2["Quechua"] = "qu";
  LanguageCode2["Romanian"] = "ro";
  LanguageCode2["Russian"] = "ru";
  LanguageCode2["Sakha"] = "sah";
  LanguageCode2["Sami"] = "se";
  LanguageCode2["Samoan"] = "sm";
  LanguageCode2["Sanskrit"] = "sa";
  LanguageCode2["Scots"] = "gd";
  LanguageCode2["Serbian"] = "sr";
  LanguageCode2["SerbianCyrillic"] = "sr-Cyrl";
  LanguageCode2["Sesotho"] = "st";
  LanguageCode2["Shona"] = "sn";
  LanguageCode2["Sindhi"] = "sd";
  LanguageCode2["Sinhala"] = "si";
  LanguageCode2["Slovak"] = "sk";
  LanguageCode2["Slovenian"] = "sl";
  LanguageCode2["Somali"] = "so";
  LanguageCode2["Spanish"] = "es";
  LanguageCode2["Sudanese"] = "su";
  LanguageCode2["Sutu"] = "sx";
  LanguageCode2["Swahili"] = "sw";
  LanguageCode2["Swedish"] = "sv";
  LanguageCode2["Syriac"] = "syr";
  LanguageCode2["Tagalog"] = "tl";
  LanguageCode2["Tajik"] = "tg";
  LanguageCode2["Tamazight"] = "tmh";
  LanguageCode2["Tamil"] = "ta";
  LanguageCode2["Tatar"] = "tt";
  LanguageCode2["Telugu"] = "te";
  LanguageCode2["Thai"] = "th";
  LanguageCode2["Tibetan"] = "bo";
  LanguageCode2["Tsonga"] = "ts";
  LanguageCode2["Tswana"] = "tn";
  LanguageCode2["Turkish"] = "tr";
  LanguageCode2["Turkmen"] = "tk";
  LanguageCode2["Ukrainian"] = "uk";
  LanguageCode2["Urdu"] = "ur";
  LanguageCode2["Uzbek"] = "uz";
  LanguageCode2["Vietnamese"] = "vi";
  LanguageCode2["Welsh"] = "cy";
  LanguageCode2["Xhosa"] = "xh";
  LanguageCode2["Yiddish"] = "yi";
  LanguageCode2["Yoruba"] = "yo";
  LanguageCode2["Zulu"] = "zu";
})(LanguageCode || (LanguageCode = {}));
var LocaleCode;
(function(LocaleCode2) {
  LocaleCode2["Afrikaans"] = "af";
  LocaleCode2["AfrikaansSouthAfrica"] = "af-ZA";
  LocaleCode2["Albanian"] = "sq";
  LocaleCode2["AlbanianAlbania"] = "sq-AL";
  LocaleCode2["Amharic"] = "am";
  LocaleCode2["AmharicEthiopia"] = "am-ET";
  LocaleCode2["Arabic"] = "ar";
  LocaleCode2["ArabicAlgeria"] = "ar-DZ";
  LocaleCode2["ArabicBahrain"] = "ar-BH";
  LocaleCode2["ArabicEgypt"] = "ar-EG";
  LocaleCode2["ArabicIraq"] = "ar-IQ";
  LocaleCode2["ArabicJordan"] = "ar-JO";
  LocaleCode2["ArabicKuwait"] = "ar-KW";
  LocaleCode2["ArabicLebanon"] = "ar-LB";
  LocaleCode2["ArabicLibya"] = "ar-LY";
  LocaleCode2["ArabicMorocco"] = "ar-MA";
  LocaleCode2["ArabicOman"] = "ar-OM";
  LocaleCode2["ArabicQatar"] = "ar-QA";
  LocaleCode2["ArabicSaudiArabia"] = "ar-SA";
  LocaleCode2["ArabicSyria"] = "ar-SY";
  LocaleCode2["ArabicTunisia"] = "ar-TN";
  LocaleCode2["ArabicUnitedArabEmirates"] = "ar-AE";
  LocaleCode2["ArabicYemen"] = "ar-YE";
  LocaleCode2["Armenian"] = "hy";
  LocaleCode2["ArmenianArmenia"] = "hy-AM";
  LocaleCode2["Azerbaijani"] = "az";
  LocaleCode2["AzerbaijaniAzerbaijan"] = "az-AZ";
  LocaleCode2["AzerbaijaniCyrillicAzerbaijan"] = "az-Cyrl-AZ";
  LocaleCode2["Bashkir"] = "ba";
  LocaleCode2["Basque"] = "eu";
  LocaleCode2["BasqueSpain"] = "eu-ES";
  LocaleCode2["Belarusian"] = "be";
  LocaleCode2["BelarusianBelarus"] = "be-BY";
  LocaleCode2["Bengali"] = "bn";
  LocaleCode2["BengaliBangladesh"] = "bn-BD";
  LocaleCode2["BengaliIndia"] = "bn-IN";
  LocaleCode2["Berber"] = "ber";
  LocaleCode2["Bhutani"] = "dz";
  LocaleCode2["BhutaniBhutan"] = "dz-BT";
  LocaleCode2["Bosnian"] = "bs";
  LocaleCode2["BosnianBosniaAndHerzegovina"] = "bs-BA";
  LocaleCode2["Breton"] = "br";
  LocaleCode2["Bulgarian"] = "bg";
  LocaleCode2["BulgarianBosniaAndHerzegovina"] = "bg-BG";
  LocaleCode2["BulgarianBulgaria"] = "bg-BG";
  LocaleCode2["Burmese"] = "my";
  LocaleCode2["BurmeseMyanmar"] = "my-MM";
  LocaleCode2["Cantonese"] = "yue";
  LocaleCode2["CantoneseHongKong"] = "yue-HK";
  LocaleCode2["Catalan"] = "ca";
  LocaleCode2["CatalanSpain"] = "ca-ES";
  LocaleCode2["Chechen"] = "ce";
  LocaleCode2["Cherokee"] = "chr";
  LocaleCode2["Chinese"] = "zh";
  LocaleCode2["ChineseSimplified"] = "zh-Hans";
  LocaleCode2["ChineseSimplifiedChina"] = "zh-Hans-CN";
  LocaleCode2["ChineseSimplifiedHongKong"] = "zh-Hans-HK";
  LocaleCode2["ChineseSimplifiedMacau"] = "zh-Hans-MO";
  LocaleCode2["ChineseSimplifiedSingapore"] = "zh-Hans-SG";
  LocaleCode2["ChineseTraditional"] = "zh-Hant";
  LocaleCode2["ChineseTraditionalHongKong"] = "zh-Hant-HK";
  LocaleCode2["ChineseTraditionalMacau"] = "zh-Hant-MO";
  LocaleCode2["ChineseTraditionalSingapore"] = "zh-Hant-SG";
  LocaleCode2["ChineseTraditionalTaiwan"] = "zh-Hant-TW";
  LocaleCode2["Chuvash"] = "cv";
  LocaleCode2["CorsicanFrance"] = "co-FR";
  LocaleCode2["Croatian"] = "hr";
  LocaleCode2["CroatianBosniaAndHerzegovina"] = "hr-BA";
  LocaleCode2["CroatianCroatia"] = "hr-HR";
  LocaleCode2["Czech"] = "cs";
  LocaleCode2["CzechCzechRepublic"] = "cs-CZ";
  LocaleCode2["Danish"] = "da";
  LocaleCode2["DanishDenmark"] = "da-DK";
  LocaleCode2["Dari"] = "prs";
  LocaleCode2["DariAfghanistan"] = "prs-AF";
  LocaleCode2["Divehi"] = "dv";
  LocaleCode2["DivehiMaldives"] = "dv-MV";
  LocaleCode2["Dutch"] = "nl";
  LocaleCode2["DutchBelgium"] = "nl-BE";
  LocaleCode2["DutchNetherlands"] = "nl-NL";
  LocaleCode2["English"] = "en";
  LocaleCode2["EnglishAustralia"] = "en-AU";
  LocaleCode2["EnglishBelgium"] = "en-BE";
  LocaleCode2["EnglishBelize"] = "en-BZ";
  LocaleCode2["EnglishCanada"] = "en-CA";
  LocaleCode2["EnglishCaribbean"] = "en-029";
  LocaleCode2["EnglishIreland"] = "en-IE";
  LocaleCode2["EnglishJamaica"] = "en-JM";
  LocaleCode2["EnglishNewZealand"] = "en-NZ";
  LocaleCode2["EnglishPhilippines"] = "en-PH";
  LocaleCode2["EnglishSingapore"] = "en-SG";
  LocaleCode2["EnglishSouthAfrica"] = "en-ZA";
  LocaleCode2["EnglishTrinidadAndTobago"] = "en-TT";
  LocaleCode2["EnglishUnitedKingdom"] = "en-GB";
  LocaleCode2["EnglishUnitedStates"] = "en-US";
  LocaleCode2["EnglishZimbabwe"] = "en-ZW";
  LocaleCode2["Esperanto"] = "eo";
  LocaleCode2["Estonian"] = "et";
  LocaleCode2["EstonianEstonia"] = "et-EE";
  LocaleCode2["Faroese"] = "fo";
  LocaleCode2["FaroeseFaroeIslands"] = "fo-FO";
  LocaleCode2["Farsi"] = "fa";
  LocaleCode2["FarsiIran"] = "fa-IR";
  LocaleCode2["Filipino"] = "fil";
  LocaleCode2["FilipinoPhilippines"] = "fil-PH";
  LocaleCode2["Finnish"] = "fi";
  LocaleCode2["FinnishFinland"] = "fi-FI";
  LocaleCode2["French"] = "fr";
  LocaleCode2["FrenchBelgium"] = "fr-BE";
  LocaleCode2["FrenchCanada"] = "fr-CA";
  LocaleCode2["FrenchFrance"] = "fr-FR";
  LocaleCode2["FrenchLuxembourg"] = "fr-LU";
  LocaleCode2["FrenchMonaco"] = "fr-MC";
  LocaleCode2["FrenchReunion"] = "fr-RE";
  LocaleCode2["FrenchSwitzerland"] = "fr-CH";
  LocaleCode2["Frisian"] = "fy";
  LocaleCode2["FrisianNetherlands"] = "fy-NL";
  LocaleCode2["Galician"] = "gl";
  LocaleCode2["GalicianSpain"] = "gl-ES";
  LocaleCode2["Georgian"] = "ka";
  LocaleCode2["GeorgianGeorgia"] = "ka-GE";
  LocaleCode2["German"] = "de";
  LocaleCode2["GermanAustria"] = "de-AT";
  LocaleCode2["GermanBelgium"] = "de-BE";
  LocaleCode2["GermanGermany"] = "de-DE";
  LocaleCode2["GermanLiechtenstein"] = "de-LI";
  LocaleCode2["GermanLuxembourg"] = "de-LU";
  LocaleCode2["GermanSwitzerland"] = "de-CH";
  LocaleCode2["Greenlandic"] = "kl";
  LocaleCode2["GreenlandicGreenland"] = "kl-GL";
  LocaleCode2["Greek"] = "el";
  LocaleCode2["GreekGreece"] = "el-GR";
  LocaleCode2["Gujarati"] = "gu";
  LocaleCode2["GujaratiIndia"] = "gu-IN";
  LocaleCode2["Haitian"] = "ht";
  LocaleCode2["Hausa"] = "ha";
  LocaleCode2["HausaGhana"] = "ha-GH";
  LocaleCode2["HausaNiger"] = "ha-NE";
  LocaleCode2["HausaNigeria"] = "ha-NG";
  LocaleCode2["Hebrew"] = "he";
  LocaleCode2["HebrewIsrael"] = "he-IL";
  LocaleCode2["Hindi"] = "hi";
  LocaleCode2["HindiIndia"] = "hi-IN";
  LocaleCode2["Hungarian"] = "hu";
  LocaleCode2["HungarianHungary"] = "hu-HU";
  LocaleCode2["Icelandic"] = "is";
  LocaleCode2["IcelandicIceland"] = "is-IS";
  LocaleCode2["Igbo"] = "ig";
  LocaleCode2["IgboNigeria"] = "ig-NG";
  LocaleCode2["Indonesian"] = "id";
  LocaleCode2["IndonesianIndonesia"] = "id-ID";
  LocaleCode2["Irish"] = "ga";
  LocaleCode2["IrishIreland"] = "ga-IE";
  LocaleCode2["Italian"] = "it";
  LocaleCode2["ItalianItaly"] = "it-IT";
  LocaleCode2["ItalianSwitzerland"] = "it-CH";
  LocaleCode2["Japanese"] = "ja";
  LocaleCode2["JapaneseJapan"] = "ja-JP";
  LocaleCode2["Javanese"] = "jv";
  LocaleCode2["Kannada"] = "kn";
  LocaleCode2["KannadaIndia"] = "kn-IN";
  LocaleCode2["Karelian"] = "krl";
  LocaleCode2["Kazakh"] = "kk";
  LocaleCode2["KazakhKazakhstan"] = "kk-KZ";
  LocaleCode2["Khmer"] = "km";
  LocaleCode2["KhmerCambodia"] = "km-KH";
  LocaleCode2["KinyarwandaRwanda"] = "rw-RW";
  LocaleCode2["Komi"] = "kv";
  LocaleCode2["Konkani"] = "kok";
  LocaleCode2["KonkaniIndia"] = "kok-IN";
  LocaleCode2["Korean"] = "ko";
  LocaleCode2["KoreanSouthKorea"] = "ko-KR";
  LocaleCode2["Kurdish"] = "ku";
  LocaleCode2["KurdishIraq"] = "ku-IQ";
  LocaleCode2["KurdishTurkey"] = "ku-TR";
  LocaleCode2["Kyrgyz"] = "ky";
  LocaleCode2["KyrgyzKyrgyzstan"] = "ky-KG";
  LocaleCode2["Lao"] = "lo";
  LocaleCode2["LaoLaos"] = "lo-LA";
  LocaleCode2["Latin"] = "la";
  LocaleCode2["Latvian"] = "lv";
  LocaleCode2["LatvianLatvia"] = "lv-LV";
  LocaleCode2["Lithuanian"] = "lt";
  LocaleCode2["LithuanianLithuania"] = "lt-LT";
  LocaleCode2["Luxembourgish"] = "lb";
  LocaleCode2["LuxembourgishBelgium"] = "lb-LU";
  LocaleCode2["LuxembourgishLuxembourg"] = "lb-LU";
  LocaleCode2["Macedonian"] = "mk";
  LocaleCode2["MacedonianNorthMacedonia"] = "mk-MK";
  LocaleCode2["Malagasy"] = "mg";
  LocaleCode2["Malay"] = "ms";
  LocaleCode2["MalayBrunei"] = "ms-BN";
  LocaleCode2["MalayIndia"] = "ms-IN";
  LocaleCode2["MalayMalaysia"] = "ms-MY";
  LocaleCode2["MalaySingapore"] = "ms-SG";
  LocaleCode2["Malayalam"] = "ml";
  LocaleCode2["MalayalamIndia"] = "ml-IN";
  LocaleCode2["Maltese"] = "mt";
  LocaleCode2["MalteseMalta"] = "mt-MT";
  LocaleCode2["Maori"] = "mi";
  LocaleCode2["MaoriNewZealand"] = "mi-NZ";
  LocaleCode2["Marathi"] = "mr";
  LocaleCode2["MarathiIndia"] = "mr-IN";
  LocaleCode2["Mari"] = "chm";
  LocaleCode2["Mongolian"] = "mn";
  LocaleCode2["MongolianMongolia"] = "mn-MN";
  LocaleCode2["Montenegrin"] = "me";
  LocaleCode2["MontenegrinMontenegro"] = "me-ME";
  LocaleCode2["Nepali"] = "ne";
  LocaleCode2["NepaliNepal"] = "ne-NP";
  LocaleCode2["NorthernSotho"] = "ns";
  LocaleCode2["NorthernSothoSouthAfrica"] = "ns-ZA";
  LocaleCode2["Norwegian"] = "nb";
  LocaleCode2["NorwegianBokmalNorway"] = "nb-NO";
  LocaleCode2["NorwegianNynorskNorway"] = "nn-NO";
  LocaleCode2["Oriya"] = "or";
  LocaleCode2["OriyaIndia"] = "or-IN";
  LocaleCode2["Ossetian"] = "os";
  LocaleCode2["Pashto"] = "ps";
  LocaleCode2["PashtoAfghanistan"] = "ps-AF";
  LocaleCode2["Persian"] = "fa";
  LocaleCode2["PersianIran"] = "fa-IR";
  LocaleCode2["Polish"] = "pl";
  LocaleCode2["PolishPoland"] = "pl-PL";
  LocaleCode2["Portuguese"] = "pt";
  LocaleCode2["PortugueseBrazil"] = "pt-BR";
  LocaleCode2["PortuguesePortugal"] = "pt-PT";
  LocaleCode2["Punjabi"] = "pa";
  LocaleCode2["PunjabiIndia"] = "pa-IN";
  LocaleCode2["PunjabiPakistan"] = "pa-PK";
  LocaleCode2["Quechua"] = "qu";
  LocaleCode2["QuechuaBolivia"] = "qu-BO";
  LocaleCode2["QuechuaEcuador"] = "qu-EC";
  LocaleCode2["QuechuaPeru"] = "qu-PE";
  LocaleCode2["Romanian"] = "ro";
  LocaleCode2["RomanianRomania"] = "ro-RO";
  LocaleCode2["Russian"] = "ru";
  LocaleCode2["RussianKazakhstan"] = "ru-KZ";
  LocaleCode2["RussianKyrgyzstan"] = "ru-KG";
  LocaleCode2["RussianRussia"] = "ru-RU";
  LocaleCode2["RussianUkraine"] = "ru-UA";
  LocaleCode2["Sakha"] = "sah";
  LocaleCode2["Sanskrit"] = "sa";
  LocaleCode2["SanskritIndia"] = "sa-IN";
  LocaleCode2["Sami"] = "se";
  LocaleCode2["SamiNorway"] = "se-NO";
  LocaleCode2["SamiSweden"] = "se-SE";
  LocaleCode2["SamiFinland"] = "se-FI";
  LocaleCode2["Samoan"] = "sm";
  LocaleCode2["SamoanSamoa"] = "sm-WS";
  LocaleCode2["Scots"] = "gd";
  LocaleCode2["Serbian"] = "sr";
  LocaleCode2["SerbianBosniaAndHerzegovina"] = "sr-BA";
  LocaleCode2["SerbianSerbiaAndMontenegro"] = "sr-SP";
  LocaleCode2["SerbianCyrillic"] = "sr-SP-Cyrl";
  LocaleCode2["SerbianCyrillicBosniaAndHerzegovina"] = "sr-Cyrl-BA";
  LocaleCode2["SerbianCyrillicSerbiaAndMontenegro"] = "sr-Cyrl-SP";
  LocaleCode2["Sesotho"] = "st";
  LocaleCode2["SesothoSouthAfrica"] = "st-ZA";
  LocaleCode2["Shona"] = "sn";
  LocaleCode2["ShonaZimbabwe"] = "sn-ZW";
  LocaleCode2["Sindhi"] = "sd";
  LocaleCode2["SindhiPakistan"] = "sd-PK";
  LocaleCode2["Sinhala"] = "si";
  LocaleCode2["SinhalaSriLanka"] = "si-LK";
  LocaleCode2["Slovak"] = "sk";
  LocaleCode2["SlovakSlovakia"] = "sk-SK";
  LocaleCode2["Slovenian"] = "sl";
  LocaleCode2["SlovenianSlovenia"] = "sl-SI";
  LocaleCode2["Somali"] = "so";
  LocaleCode2["SomaliSomalia"] = "so-SO";
  LocaleCode2["Spanish"] = "es";
  LocaleCode2["SpanishArgentina"] = "es-AR";
  LocaleCode2["SpanishBolivia"] = "es-BO";
  LocaleCode2["SpanishChile"] = "es-CL";
  LocaleCode2["SpanishColombia"] = "es-CO";
  LocaleCode2["SpanishCostaRica"] = "es-CR";
  LocaleCode2["SpanishCuba"] = "es-CU";
  LocaleCode2["SpanishDominicanRepublic"] = "es-DO";
  LocaleCode2["SpanishEcuador"] = "es-EC";
  LocaleCode2["SpanishEquatorialGuinea"] = "es-GQ";
  LocaleCode2["SpanishElSalvador"] = "es-SV";
  LocaleCode2["SpanishGuatemala"] = "es-GT";
  LocaleCode2["SpanishHonduras"] = "es-HN";
  LocaleCode2["SpanishMexico"] = "es-MX";
  LocaleCode2["SpanishNicaragua"] = "es-NI";
  LocaleCode2["SpanishPanama"] = "es-PA";
  LocaleCode2["SpanishParaguay"] = "es-PY";
  LocaleCode2["SpanishPeru"] = "es-PE";
  LocaleCode2["SpanishPuertoRico"] = "es-PR";
  LocaleCode2["SpanishSpain"] = "es-ES";
  LocaleCode2["SpanishUnitedStates"] = "es-US";
  LocaleCode2["SpanishUruguay"] = "es-UY";
  LocaleCode2["SpanishVenezuela"] = "es-VE";
  LocaleCode2["Sudanese"] = "su";
  LocaleCode2["Sutu"] = "st";
  LocaleCode2["SutuSouthAfrica"] = "st-ZA";
  LocaleCode2["Swahili"] = "sw";
  LocaleCode2["SwahiliKenya"] = "sw-KE";
  LocaleCode2["Swedish"] = "sv";
  LocaleCode2["SwedishFinland"] = "sv-FI";
  LocaleCode2["SwedishSweden"] = "sv-SE";
  LocaleCode2["Syriac"] = "syr";
  LocaleCode2["SyriacSyria"] = "syr-SY";
  LocaleCode2["Tajik"] = "tg";
  LocaleCode2["TajikTajikistan"] = "tg-TJ";
  LocaleCode2["Tagalog"] = "tl";
  LocaleCode2["TagalogPhilippines"] = "tl-PH";
  LocaleCode2["Tamazight"] = "tmh";
  LocaleCode2["Tamil"] = "ta";
  LocaleCode2["TamilIndia"] = "ta-IN";
  LocaleCode2["Tatar"] = "tt";
  LocaleCode2["Telugu"] = "te";
  LocaleCode2["TeluguIndia"] = "te-IN";
  LocaleCode2["Thai"] = "th";
  LocaleCode2["ThaiThailand"] = "th-TH";
  LocaleCode2["Tibetan"] = "bo";
  LocaleCode2["TibetanBhutan"] = "bo-BT";
  LocaleCode2["TibetanChina"] = "bo-CN";
  LocaleCode2["TibetanIndia"] = "bo-IN";
  LocaleCode2["Tsonga"] = "ts";
  LocaleCode2["Tswana"] = "tn";
  LocaleCode2["TswanaSouthAfrica"] = "tn-ZA";
  LocaleCode2["Turkish"] = "tr";
  LocaleCode2["TurkishTurkey"] = "tr-TR";
  LocaleCode2["Turkmen"] = "tk";
  LocaleCode2["Ukrainian"] = "uk";
  LocaleCode2["UkrainianUkraine"] = "uk-UA";
  LocaleCode2["Urdu"] = "ur";
  LocaleCode2["UrduAfghanistan"] = "ur-AF";
  LocaleCode2["UrduIndia"] = "ur-IN";
  LocaleCode2["UrduPakistan"] = "ur-PK";
  LocaleCode2["Uzbek"] = "uz";
  LocaleCode2["UzbekCyrillic"] = "uz-Cyrl-UZ";
  LocaleCode2["UzbekLatin"] = "uz-Latn-UZ";
  LocaleCode2["UzbekUzbekistan"] = "uz-UZ";
  LocaleCode2["Vietnamese"] = "vi";
  LocaleCode2["VietnameseVietnam"] = "vi-VN";
  LocaleCode2["Welsh"] = "cy";
  LocaleCode2["WelshUnitedKingdom"] = "cy-GB";
  LocaleCode2["Xhosa"] = "xh";
  LocaleCode2["XhosaSouthAfrica"] = "xh-ZA";
  LocaleCode2["Yiddish"] = "yi";
  LocaleCode2["Yoruba"] = "yo";
  LocaleCode2["YorubaNigeria"] = "yo-NG";
  LocaleCode2["ZhuyinMandarinChina"] = "yue-Hant-CN";
  LocaleCode2["Zulu"] = "zu";
  LocaleCode2["ZuluSouthAfrica"] = "zu-ZA";
})(LocaleCode || (LocaleCode = {}));
var TimezoneRegions;
(function(TimezoneRegions2) {
  TimezoneRegions2["AfricaAbidjan"] = "Africa/Abidjan";
  TimezoneRegions2["AfricaAccra"] = "Africa/Accra";
  TimezoneRegions2["AfricaAddisAbaba"] = "Africa/Addis_Ababa";
  TimezoneRegions2["AfricaAlgiers"] = "Africa/Algiers";
  TimezoneRegions2["AfricaAsmara"] = "Africa/Asmara";
  TimezoneRegions2["AfricaBamako"] = "Africa/Bamako";
  TimezoneRegions2["AfricaBangui"] = "Africa/Bangui";
  TimezoneRegions2["AfricaBanjul"] = "Africa/Banjul";
  TimezoneRegions2["AfricaBissau"] = "Africa/Bissau";
  TimezoneRegions2["AfricaBlantyre"] = "Africa/Blantyre";
  TimezoneRegions2["AfricaBrazzaville"] = "Africa/Brazzaville";
  TimezoneRegions2["AfricaBujumbura"] = "Africa/Bujumbura";
  TimezoneRegions2["AfricaCairo"] = "Africa/Cairo";
  TimezoneRegions2["AfricaCasablanca"] = "Africa/Casablanca";
  TimezoneRegions2["AfricaCeuta"] = "Africa/Ceuta";
  TimezoneRegions2["AfricaConakry"] = "Africa/Conakry";
  TimezoneRegions2["AfricaDakar"] = "Africa/Dakar";
  TimezoneRegions2["AfricaDarEsSalaam"] = "Africa/Dar_es_Salaam";
  TimezoneRegions2["AfricaDjibouti"] = "Africa/Djibouti";
  TimezoneRegions2["AfricaDouala"] = "Africa/Douala";
  TimezoneRegions2["AfricaElAaiun"] = "Africa/El_Aaiun";
  TimezoneRegions2["AfricaFreetown"] = "Africa/Freetown";
  TimezoneRegions2["AfricaGaborone"] = "Africa/Gaborone";
  TimezoneRegions2["AfricaHarare"] = "Africa/Harare";
  TimezoneRegions2["AfricaJohannesburg"] = "Africa/Johannesburg";
  TimezoneRegions2["AfricaJuba"] = "Africa/Juba";
  TimezoneRegions2["AfricaKampala"] = "Africa/Kampala";
  TimezoneRegions2["AfricaKhartoum"] = "Africa/Khartoum";
  TimezoneRegions2["AfricaKigali"] = "Africa/Kigali";
  TimezoneRegions2["AfricaKinshasa"] = "Africa/Kinshasa";
  TimezoneRegions2["AfricaLagos"] = "Africa/Lagos";
  TimezoneRegions2["AfricaLibreville"] = "Africa/Libreville";
  TimezoneRegions2["AfricaLome"] = "Africa/Lome";
  TimezoneRegions2["AfricaLuanda"] = "Africa/Luanda";
  TimezoneRegions2["AfricaLubumbashi"] = "Africa/Lubumbashi";
  TimezoneRegions2["AfricaLusaka"] = "Africa/Lusaka";
  TimezoneRegions2["AfricaMalabo"] = "Africa/Malabo";
  TimezoneRegions2["AfricaMaputo"] = "Africa/Maputo";
  TimezoneRegions2["AfricaMaseru"] = "Africa/Maseru";
  TimezoneRegions2["AfricaMbabane"] = "Africa/Mbabane";
  TimezoneRegions2["AfricaMogadishu"] = "Africa/Mogadishu";
  TimezoneRegions2["AfricaMonrovia"] = "Africa/Monrovia";
  TimezoneRegions2["AfricaNairobi"] = "Africa/Nairobi";
  TimezoneRegions2["AfricaNdjamena"] = "Africa/Ndjamena";
  TimezoneRegions2["AfricaNiamey"] = "Africa/Niamey";
  TimezoneRegions2["AfricaNouakchott"] = "Africa/Nouakchott";
  TimezoneRegions2["AfricaOuagadougou"] = "Africa/Ouagadougou";
  TimezoneRegions2["AfricaPortoNovo"] = "Africa/Porto-Novo";
  TimezoneRegions2["AfricaSaoTome"] = "Africa/Sao_Tome";
  TimezoneRegions2["AfricaTripoli"] = "Africa/Tripoli";
  TimezoneRegions2["AfricaTunis"] = "Africa/Tunis";
  TimezoneRegions2["AfricaWindhoek"] = "Africa/Windhoek";
  TimezoneRegions2["AmericaAdak"] = "America/Adak";
  TimezoneRegions2["AmericaAnchorage"] = "America/Anchorage";
  TimezoneRegions2["AmericaAnguilla"] = "America/Anguilla";
  TimezoneRegions2["AmericaAntigua"] = "America/Antigua";
  TimezoneRegions2["AmericaAraguaina"] = "America/Araguaina";
  TimezoneRegions2["AmericaArgentinaBuenosAires"] = "America/Argentina/Buenos_Aires";
  TimezoneRegions2["AmericaArgentinaCatamarca"] = "America/Argentina/Catamarca";
  TimezoneRegions2["AmericaArgentinaCordoba"] = "America/Argentina/Cordoba";
  TimezoneRegions2["AmericaArgentinaJujuy"] = "America/Argentina/Jujuy";
  TimezoneRegions2["AmericaArgentinaLaRioja"] = "America/Argentina/La_Rioja";
  TimezoneRegions2["AmericaArgentinaMendoza"] = "America/Argentina/Mendoza";
  TimezoneRegions2["AmericaArgentinaRioGallegos"] = "America/Argentina/Rio_Gallegos";
  TimezoneRegions2["AmericaArgentinaSalta"] = "America/Argentina/Salta";
  TimezoneRegions2["AmericaArgentinaSanJuan"] = "America/Argentina/San_Juan";
  TimezoneRegions2["AmericaArgentinaSanLuis"] = "America/Argentina/San_Luis";
  TimezoneRegions2["AmericaArgentinaTucuman"] = "America/Argentina/Tucuman";
  TimezoneRegions2["AmericaArgentinaUshuaia"] = "America/Argentina/Ushuaia";
  TimezoneRegions2["AmericaAruba"] = "America/Aruba";
  TimezoneRegions2["AmericaAsuncion"] = "America/Asuncion";
  TimezoneRegions2["AmericaAtikokan"] = "America/Atikokan";
  TimezoneRegions2["AmericaAtka"] = "America/Atka";
  TimezoneRegions2["AmericaBahia"] = "America/Bahia";
  TimezoneRegions2["AmericaBahiaBanderas"] = "America/Bahia_Banderas";
  TimezoneRegions2["AmericaBarbados"] = "America/Barbados";
  TimezoneRegions2["AmericaBelem"] = "America/Belem";
  TimezoneRegions2["AmericaBelize"] = "America/Belize";
  TimezoneRegions2["AmericaBlancSablon"] = "America/Blanc-Sablon";
  TimezoneRegions2["AmericaBoaVista"] = "America/Boa_Vista";
  TimezoneRegions2["AmericaBogota"] = "America/Bogota";
  TimezoneRegions2["AmericaBoise"] = "America/Boise";
  TimezoneRegions2["AmericaCambridgeBay"] = "America/Cambridge_Bay";
  TimezoneRegions2["AmericaCampoGrande"] = "America/Campo_Grande";
  TimezoneRegions2["AmericaCancun"] = "America/Cancun";
  TimezoneRegions2["AmericaCaracas"] = "America/Caracas";
  TimezoneRegions2["AmericaCayenne"] = "America/Cayenne";
  TimezoneRegions2["AmericaCayman"] = "America/Cayman";
  TimezoneRegions2["AmericaChicago"] = "America/Chicago";
  TimezoneRegions2["AmericaChihuahua"] = "America/Chihuahua";
  TimezoneRegions2["AmericaCoralHarbour"] = "America/Coral_Harbour";
  TimezoneRegions2["AmericaCordoba"] = "America/Cordoba";
  TimezoneRegions2["AmericaCostaRica"] = "America/Costa_Rica";
  TimezoneRegions2["AmericaCreston"] = "America/Creston";
  TimezoneRegions2["AmericaCuiaba"] = "America/Cuiaba";
  TimezoneRegions2["AmericaCuracao"] = "America/Curacao";
  TimezoneRegions2["AmericaDanmarkshavn"] = "America/Danmarkshavn";
  TimezoneRegions2["AmericaDawson"] = "America/Dawson";
  TimezoneRegions2["AmericaDawsonCreek"] = "America/Dawson_Creek";
  TimezoneRegions2["AmericaDenver"] = "America/Denver";
  TimezoneRegions2["AmericaDetroit"] = "America/Detroit";
  TimezoneRegions2["AmericaDominica"] = "America/Dominica";
  TimezoneRegions2["AmericaEdmonton"] = "America/Edmonton";
  TimezoneRegions2["AmericaEirunepe"] = "America/Eirunepe";
  TimezoneRegions2["AmericaElSalvador"] = "America/El_Salvador";
  TimezoneRegions2["AmericaFortaleza"] = "America/Fortaleza";
  TimezoneRegions2["AmericaGlaceBay"] = "America/Glace_Bay";
  TimezoneRegions2["AmericaGodthab"] = "America/Godthab";
  TimezoneRegions2["AmericaGooseBay"] = "America/Goose_Bay";
  TimezoneRegions2["AmericaGrandTurk"] = "America/Grand_Turk";
  TimezoneRegions2["AmericaGrenada"] = "America/Grenada";
  TimezoneRegions2["AmericaGuadeloupe"] = "America/Guadeloupe";
  TimezoneRegions2["AmericaGuatemala"] = "America/Guatemala";
  TimezoneRegions2["AmericaGuayaquil"] = "America/Guayaquil";
  TimezoneRegions2["AmericaGuyana"] = "America/Guyana";
  TimezoneRegions2["AmericaHalifax"] = "America/Halifax";
  TimezoneRegions2["AmericaHavana"] = "America/Havana";
  TimezoneRegions2["AmericaHermosillo"] = "America/Hermosillo";
  TimezoneRegions2["AmericaIndianaIndianapolis"] = "America/Indiana/Indianapolis";
  TimezoneRegions2["AmericaIndianaKnox"] = "America/Indiana/Knox";
  TimezoneRegions2["AmericaIndianaMarengo"] = "America/Indiana/Marengo";
  TimezoneRegions2["AmericaIndianaPetersburg"] = "America/Indiana/Petersburg";
  TimezoneRegions2["AmericaIndianaTellCity"] = "America/Indiana/Tell_City";
  TimezoneRegions2["AmericaIndianaVevay"] = "America/Indiana/Vevay";
  TimezoneRegions2["AmericaIndianaVincennes"] = "America/Indiana/Vincennes";
  TimezoneRegions2["AmericaIndianaWinamac"] = "America/Indiana/Winamac";
  TimezoneRegions2["AmericaInuvik"] = "America/Inuvik";
  TimezoneRegions2["AmericaIqaluit"] = "America/Iqaluit";
  TimezoneRegions2["AmericaJamaica"] = "America/Jamaica";
  TimezoneRegions2["AmericaJuneau"] = "America/Juneau";
  TimezoneRegions2["AmericaKentuckyLouisville"] = "America/Kentucky/Louisville";
  TimezoneRegions2["AmericaKentuckyMonticello"] = "America/Kentucky/Monticello";
  TimezoneRegions2["AmericaKralendijk"] = "America/Kralendijk";
  TimezoneRegions2["AmericaLaPaz"] = "America/La_Paz";
  TimezoneRegions2["AmericaLima"] = "America/Lima";
  TimezoneRegions2["AmericaLosAngeles"] = "America/Los_Angeles";
  TimezoneRegions2["AmericaLouisville"] = "America/Louisville";
  TimezoneRegions2["AmericaLowerPrinces"] = "America/Lower_Princes";
  TimezoneRegions2["AmericaMaceio"] = "America/Maceio";
  TimezoneRegions2["AmericaManagua"] = "America/Managua";
  TimezoneRegions2["AmericaManaus"] = "America/Manaus";
  TimezoneRegions2["AmericaMarigot"] = "America/Marigot";
  TimezoneRegions2["AmericaMartinique"] = "America/Martinique";
  TimezoneRegions2["AmericaMatamoros"] = "America/Matamoros";
  TimezoneRegions2["AmericaMazatlan"] = "America/Mazatlan";
  TimezoneRegions2["AmericaMenominee"] = "America/Menominee";
  TimezoneRegions2["AmericaMerida"] = "America/Merida";
  TimezoneRegions2["AmericaMetlakatla"] = "America/Metlakatla";
  TimezoneRegions2["AmericaMexicoCity"] = "America/Mexico_City";
  TimezoneRegions2["AmericaMiquelon"] = "America/Miquelon";
  TimezoneRegions2["AmericaMoncton"] = "America/Moncton";
  TimezoneRegions2["AmericaMonterrey"] = "America/Monterrey";
  TimezoneRegions2["AmericaMontevideo"] = "America/Montevideo";
  TimezoneRegions2["AmericaMontserrat"] = "America/Montserrat";
  TimezoneRegions2["AmericaMontreal"] = "America/Montreal";
  TimezoneRegions2["AmericaNassau"] = "America/Nassau";
  TimezoneRegions2["AmericaNewYork"] = "America/New_York";
  TimezoneRegions2["AmericaNipigon"] = "America/Nipigon";
  TimezoneRegions2["AmericaNome"] = "America/Nome";
  TimezoneRegions2["AmericaNoronha"] = "America/Noronha";
  TimezoneRegions2["AmericaNorthDakotaBeulah"] = "America/North_Dakota/Beulah";
  TimezoneRegions2["AmericaNorthDakotaCenter"] = "America/North_Dakota/Center";
  TimezoneRegions2["AmericaNorthDakotaNewSalem"] = "America/North_Dakota/New_Salem";
  TimezoneRegions2["AmericaOjinaga"] = "America/Ojinaga";
  TimezoneRegions2["AmericaPanama"] = "America/Panama";
  TimezoneRegions2["AmericaPangnirtung"] = "America/Pangnirtung";
  TimezoneRegions2["AmericaParamaribo"] = "America/Paramaribo";
  TimezoneRegions2["AmericaPhoenix"] = "America/Phoenix";
  TimezoneRegions2["AmericaPortAuPrince"] = "America/Port-au-Prince";
  TimezoneRegions2["AmericaPortOfSpain"] = "America/Port_of_Spain";
  TimezoneRegions2["AmericaPortoVelho"] = "America/Porto_Velho";
  TimezoneRegions2["AmericaPuertoRico"] = "America/Puerto_Rico";
  TimezoneRegions2["AmericaRainyRiver"] = "America/Rainy_River";
  TimezoneRegions2["AmericaRankinInlet"] = "America/Rankin_Inlet";
  TimezoneRegions2["AmericaRecife"] = "America/Recife";
  TimezoneRegions2["AmericaRegina"] = "America/Regina";
  TimezoneRegions2["AmericaResolute"] = "America/Resolute";
  TimezoneRegions2["AmericaRioBranco"] = "America/Rio_Branco";
  TimezoneRegions2["AmericaSantaIsabel"] = "America/Santa_Isabel";
  TimezoneRegions2["AmericaSantarem"] = "America/Santarem";
  TimezoneRegions2["AmericaSantiago"] = "America/Santiago";
  TimezoneRegions2["AmericaSantoDomingo"] = "America/Santo_Domingo";
  TimezoneRegions2["AmericaSaoPaulo"] = "America/Sao_Paulo";
  TimezoneRegions2["AmericaScoresbysund"] = "America/Scoresbysund";
  TimezoneRegions2["AmericaShiprock"] = "America/Shiprock";
  TimezoneRegions2["AmericaSitka"] = "America/Sitka";
  TimezoneRegions2["AmericaStBarthelemy"] = "America/St_Barthelemy";
  TimezoneRegions2["AmericaStJohns"] = "America/St_Johns";
  TimezoneRegions2["AmericaStKitts"] = "America/St_Kitts";
  TimezoneRegions2["AmericaStLucia"] = "America/St_Lucia";
  TimezoneRegions2["AmericaStThomas"] = "America/St_Thomas";
  TimezoneRegions2["AmericaStVincent"] = "America/St_Vincent";
  TimezoneRegions2["AmericaSwiftCurrent"] = "America/Swift_Current";
  TimezoneRegions2["AmericaTegucigalpa"] = "America/Tegucigalpa";
  TimezoneRegions2["AmericaThule"] = "America/Thule";
  TimezoneRegions2["AmericaThunderBay"] = "America/Thunder_Bay";
  TimezoneRegions2["AmericaTijuana"] = "America/Tijuana";
  TimezoneRegions2["AmericaToronto"] = "America/Toronto";
  TimezoneRegions2["AmericaTortola"] = "America/Tortola";
  TimezoneRegions2["AmericaVancouver"] = "America/Vancouver";
  TimezoneRegions2["AmericaWhitehorse"] = "America/Whitehorse";
  TimezoneRegions2["AmericaWinnipeg"] = "America/Winnipeg";
  TimezoneRegions2["AmericaYakutat"] = "America/Yakutat";
  TimezoneRegions2["AmericaYellowknife"] = "America/Yellowknife";
  TimezoneRegions2["AntarcticaCasey"] = "Antarctica/Casey";
  TimezoneRegions2["AntarcticaDavis"] = "Antarctica/Davis";
  TimezoneRegions2["AntarcticaDumontDUrville"] = "Antarctica/DumontDUrville";
  TimezoneRegions2["AntarcticaMacquarie"] = "Antarctica/Macquarie";
  TimezoneRegions2["AntarcticaMawson"] = "Antarctica/Mawson";
  TimezoneRegions2["AntarcticaMcMurdo"] = "Antarctica/McMurdo";
  TimezoneRegions2["AntarcticaPalmer"] = "Antarctica/Palmer";
  TimezoneRegions2["AntarcticaRothera"] = "Antarctica/Rothera";
  TimezoneRegions2["AntarcticaSyowa"] = "Antarctica/Syowa";
  TimezoneRegions2["AntarcticaTroll"] = "Antarctica/Troll";
  TimezoneRegions2["AntarcticaVostok"] = "Antarctica/Vostok";
  TimezoneRegions2["ArcticLongyearbyen"] = "Arctic/Longyearbyen";
  TimezoneRegions2["AsiaAden"] = "Asia/Aden";
  TimezoneRegions2["AsiaAlmaty"] = "Asia/Almaty";
  TimezoneRegions2["AsiaAmman"] = "Asia/Amman";
  TimezoneRegions2["AsiaAnadyr"] = "Asia/Anadyr";
  TimezoneRegions2["AsiaAqtau"] = "Asia/Aqtau";
  TimezoneRegions2["AsiaAqtobe"] = "Asia/Aqtobe";
  TimezoneRegions2["AsiaAshgabat"] = "Asia/Ashgabat";
  TimezoneRegions2["AsiaBaghdad"] = "Asia/Baghdad";
  TimezoneRegions2["AsiaBahrain"] = "Asia/Bahrain";
  TimezoneRegions2["AsiaBaku"] = "Asia/Baku";
  TimezoneRegions2["AsiaBangkok"] = "Asia/Bangkok";
  TimezoneRegions2["AsiaBarnaul"] = "Asia/Barnaul";
  TimezoneRegions2["AsiaBeirut"] = "Asia/Beirut";
  TimezoneRegions2["AsiaBishkek"] = "Asia/Bishkek";
  TimezoneRegions2["AsiaBrunei"] = "Asia/Brunei";
  TimezoneRegions2["AsiaChita"] = "Asia/Chita";
  TimezoneRegions2["AsiaChoibalsan"] = "Asia/Choibalsan";
  TimezoneRegions2["AsiaColombo"] = "Asia/Colombo";
  TimezoneRegions2["AsiaDamascus"] = "Asia/Damascus";
  TimezoneRegions2["AsiaDhaka"] = "Asia/Dhaka";
  TimezoneRegions2["AsiaDili"] = "Asia/Dili";
  TimezoneRegions2["AsiaDubai"] = "Asia/Dubai";
  TimezoneRegions2["AsiaDushanbe"] = "Asia/Dushanbe";
  TimezoneRegions2["AsiaFamagusta"] = "Asia/Famagusta";
  TimezoneRegions2["AsiaGaza"] = "Asia/Gaza";
  TimezoneRegions2["AsiaHebron"] = "Asia/Hebron";
  TimezoneRegions2["AsiaHoChiMinh"] = "Asia/Ho_Chi_Minh";
  TimezoneRegions2["AsiaHongKong"] = "Asia/Hong_Kong";
  TimezoneRegions2["AsiaHovd"] = "Asia/Hovd";
  TimezoneRegions2["AsiaIrkutsk"] = "Asia/Irkutsk";
  TimezoneRegions2["AsiaJakarta"] = "Asia/Jakarta";
  TimezoneRegions2["AsiaJayapura"] = "Asia/Jayapura";
  TimezoneRegions2["AsiaJerusalem"] = "Asia/Jerusalem";
  TimezoneRegions2["AsiaKabul"] = "Asia/Kabul";
  TimezoneRegions2["AsiaKamchatka"] = "Asia/Kamchatka";
  TimezoneRegions2["AsiaKarachi"] = "Asia/Karachi";
  TimezoneRegions2["AsiaKathmandu"] = "Asia/Kathmandu";
  TimezoneRegions2["AsiaKhandyga"] = "Asia/Khandyga";
  TimezoneRegions2["AsiaKolkata"] = "Asia/Kolkata";
  TimezoneRegions2["AsiaKrasnoyarsk"] = "Asia/Krasnoyarsk";
  TimezoneRegions2["AsiaKualaLumpur"] = "Asia/Kuala_Lumpur";
  TimezoneRegions2["AsiaKuching"] = "Asia/Kuching";
  TimezoneRegions2["AsiaKuwait"] = "Asia/Kuwait";
  TimezoneRegions2["AsiaMacau"] = "Asia/Macau";
  TimezoneRegions2["AsiaMagadan"] = "Asia/Magadan";
  TimezoneRegions2["AsiaMakassar"] = "Asia/Makassar";
  TimezoneRegions2["AsiaManila"] = "Asia/Manila";
  TimezoneRegions2["AsiaMuscat"] = "Asia/Muscat";
  TimezoneRegions2["AsiaNicosia"] = "Asia/Nicosia";
  TimezoneRegions2["AsiaNovokuznetsk"] = "Asia/Novokuznetsk";
  TimezoneRegions2["AsiaNovosibirsk"] = "Asia/Novosibirsk";
  TimezoneRegions2["AsiaOmsk"] = "Asia/Omsk";
  TimezoneRegions2["AsiaOral"] = "Asia/Oral";
  TimezoneRegions2["AsiaPhnomPenh"] = "Asia/Phnom_Penh";
  TimezoneRegions2["AsiaPontianak"] = "Asia/Pontianak";
  TimezoneRegions2["AsiaPyongyang"] = "Asia/Pyongyang";
  TimezoneRegions2["AsiaQatar"] = "Asia/Qatar";
  TimezoneRegions2["AsiaQyzylorda"] = "Asia/Qyzylorda";
  TimezoneRegions2["AsiaRangoon"] = "Asia/Rangoon";
  TimezoneRegions2["AsiaRiyadh"] = "Asia/Riyadh";
  TimezoneRegions2["AsiaSakhalin"] = "Asia/Sakhalin";
  TimezoneRegions2["AsiaSamarkand"] = "Asia/Samarkand";
  TimezoneRegions2["AsiaSeoul"] = "Asia/Seoul";
  TimezoneRegions2["AsiaShanghai"] = "Asia/Shanghai";
  TimezoneRegions2["AsiaSingapore"] = "Asia/Singapore";
  TimezoneRegions2["AsiaSrednekolymsk"] = "Asia/Srednekolymsk";
  TimezoneRegions2["AsiaTaipei"] = "Asia/Taipei";
  TimezoneRegions2["AsiaTashkent"] = "Asia/Tashkent";
  TimezoneRegions2["AsiaTbilisi"] = "Asia/Tbilisi";
  TimezoneRegions2["AsiaTehran"] = "Asia/Tehran";
  TimezoneRegions2["AsiaThimphu"] = "Asia/Thimphu";
  TimezoneRegions2["AsiaTokyo"] = "Asia/Tokyo";
  TimezoneRegions2["AsiaTomsk"] = "Asia/Tomsk";
  TimezoneRegions2["AsiaUlaanbaatar"] = "Asia/Ulaanbaatar";
  TimezoneRegions2["AsiaUrumqi"] = "Asia/Urumqi";
  TimezoneRegions2["AsiaUstNera"] = "Asia/Ust-Nera";
  TimezoneRegions2["AsiaVientiane"] = "Asia/Vientiane";
  TimezoneRegions2["AsiaVladivostok"] = "Asia/Vladivostok";
  TimezoneRegions2["AsiaYakutsk"] = "Asia/Yakutsk";
  TimezoneRegions2["AsiaYekaterinburg"] = "Asia/Yekaterinburg";
  TimezoneRegions2["AsiaYerevan"] = "Asia/Yerevan";
  TimezoneRegions2["AtlanticAzores"] = "Atlantic/Azores";
  TimezoneRegions2["AtlanticBermuda"] = "Atlantic/Bermuda";
  TimezoneRegions2["AtlanticCanary"] = "Atlantic/Canary";
  TimezoneRegions2["AtlanticCapeVerde"] = "Atlantic/Cape_Verde";
  TimezoneRegions2["AtlanticFaroe"] = "Atlantic/Faroe";
  TimezoneRegions2["AtlanticMadeira"] = "Atlantic/Madeira";
  TimezoneRegions2["AtlanticReykjavik"] = "Atlantic/Reykjavik";
  TimezoneRegions2["AtlanticSouthGeorgia"] = "Atlantic/South_Georgia";
  TimezoneRegions2["AtlanticStHelena"] = "Atlantic/St_Helena";
  TimezoneRegions2["AtlanticStanley"] = "Atlantic/Stanley";
  TimezoneRegions2["AustraliaAdelaide"] = "Australia/Adelaide";
  TimezoneRegions2["AustraliaBrisbane"] = "Australia/Brisbane";
  TimezoneRegions2["AustraliaBrokenHill"] = "Australia/Broken_Hill";
  TimezoneRegions2["AustraliaCanberra"] = "Australia/Canberra";
  TimezoneRegions2["AustraliaCurrie"] = "Australia/Currie";
  TimezoneRegions2["AustraliaDarwin"] = "Australia/Darwin";
  TimezoneRegions2["AustraliaEucla"] = "Australia/Eucla";
  TimezoneRegions2["AustraliaHobart"] = "Australia/Hobart";
  TimezoneRegions2["AustraliaLindeman"] = "Australia/Lindeman";
  TimezoneRegions2["AustraliaLordHowe"] = "Australia/Lord_Howe";
  TimezoneRegions2["AustraliaMelbourne"] = "Australia/Melbourne";
  TimezoneRegions2["AustraliaPerth"] = "Australia/Perth";
  TimezoneRegions2["AustraliaSydney"] = "Australia/Sydney";
  TimezoneRegions2["EuropeAmsterdam"] = "Europe/Amsterdam";
  TimezoneRegions2["EuropeAndorra"] = "Europe/Andorra";
  TimezoneRegions2["EuropeAthens"] = "Europe/Athens";
  TimezoneRegions2["EuropeBelgrade"] = "Europe/Belgrade";
  TimezoneRegions2["EuropeBerlin"] = "Europe/Berlin";
  TimezoneRegions2["EuropeBratislava"] = "Europe/Bratislava";
  TimezoneRegions2["EuropeBrussels"] = "Europe/Brussels";
  TimezoneRegions2["EuropeBucharest"] = "Europe/Bucharest";
  TimezoneRegions2["EuropeBudapest"] = "Europe/Budapest";
  TimezoneRegions2["EuropeBusingen"] = "Europe/Busingen";
  TimezoneRegions2["EuropeChisinau"] = "Europe/Chisinau";
  TimezoneRegions2["EuropeCopenhagen"] = "Europe/Copenhagen";
  TimezoneRegions2["EuropeDublin"] = "Europe/Dublin";
  TimezoneRegions2["EuropeGibraltar"] = "Europe/Gibraltar";
  TimezoneRegions2["EuropeGuernsey"] = "Europe/Guernsey";
  TimezoneRegions2["EuropeHelsinki"] = "Europe/Helsinki";
  TimezoneRegions2["EuropeIsleOfMan"] = "Europe/Isle_of_Man";
  TimezoneRegions2["EuropeIstanbul"] = "Europe/Istanbul";
  TimezoneRegions2["EuropeJersey"] = "Europe/Jersey";
  TimezoneRegions2["EuropeKaliningrad"] = "Europe/Kaliningrad";
  TimezoneRegions2["EuropeKiev"] = "Europe/Kiev";
  TimezoneRegions2["EuropeKirov"] = "Europe/Kirov";
  TimezoneRegions2["EuropeLisbon"] = "Europe/Lisbon";
  TimezoneRegions2["EuropeLjubljana"] = "Europe/Ljubljana";
  TimezoneRegions2["EuropeLondon"] = "Europe/London";
  TimezoneRegions2["EuropeLuxembourg"] = "Europe/Luxembourg";
  TimezoneRegions2["EuropeMadrid"] = "Europe/Madrid";
  TimezoneRegions2["EuropeMalta"] = "Europe/Malta";
  TimezoneRegions2["EuropeMariehamn"] = "Europe/Mariehamn";
  TimezoneRegions2["EuropeMinsk"] = "Europe/Minsk";
  TimezoneRegions2["EuropeMonaco"] = "Europe/Monaco";
  TimezoneRegions2["EuropeMoscow"] = "Europe/Moscow";
  TimezoneRegions2["EuropeOslo"] = "Europe/Oslo";
  TimezoneRegions2["EuropeParis"] = "Europe/Paris";
  TimezoneRegions2["EuropePodgorica"] = "Europe/Podgorica";
  TimezoneRegions2["EuropePrague"] = "Europe/Prague";
  TimezoneRegions2["EuropeRiga"] = "Europe/Riga";
  TimezoneRegions2["EuropeRome"] = "Europe/Rome";
  TimezoneRegions2["EuropeSamara"] = "Europe/Samara";
  TimezoneRegions2["EuropeSanMarino"] = "Europe/San_Marino";
  TimezoneRegions2["EuropeSarajevo"] = "Europe/Sarajevo";
  TimezoneRegions2["EuropeSimferopol"] = "Europe/Simferopol";
  TimezoneRegions2["EuropeSkopje"] = "Europe/Skopje";
  TimezoneRegions2["EuropeSofia"] = "Europe/Sofia";
  TimezoneRegions2["EuropeStockholm"] = "Europe/Stockholm";
  TimezoneRegions2["EuropeTallinn"] = "Europe/Tallinn";
  TimezoneRegions2["EuropeTirane"] = "Europe/Tirane";
  TimezoneRegions2["EuropeUzhgorod"] = "Europe/Uzhgorod";
  TimezoneRegions2["EuropeVaduz"] = "Europe/Vaduz";
  TimezoneRegions2["EuropeVatican"] = "Europe/Vatican";
  TimezoneRegions2["EuropeVienna"] = "Europe/Vienna";
  TimezoneRegions2["EuropeVilnius"] = "Europe/Vilnius";
  TimezoneRegions2["EuropeVolgograd"] = "Europe/Volgograd";
  TimezoneRegions2["EuropeWarsaw"] = "Europe/Warsaw";
  TimezoneRegions2["EuropeZagreb"] = "Europe/Zagreb";
  TimezoneRegions2["EuropeZaporozhye"] = "Europe/Zaporozhye";
  TimezoneRegions2["EuropeZurich"] = "Europe/Zurich";
  TimezoneRegions2["GMT"] = "GMT";
  TimezoneRegions2["IndianAntananarivo"] = "Indian/Antananarivo";
  TimezoneRegions2["IndianChagos"] = "Indian/Chagos";
  TimezoneRegions2["IndianChristmas"] = "Indian/Christmas";
  TimezoneRegions2["IndianCocos"] = "Indian/Cocos";
  TimezoneRegions2["IndianComoro"] = "Indian/Comoro";
  TimezoneRegions2["IndianKerguelen"] = "Indian/Kerguelen";
  TimezoneRegions2["IndianMahe"] = "Indian/Mahe";
  TimezoneRegions2["IndianMaldives"] = "Indian/Maldives";
  TimezoneRegions2["IndianMauritius"] = "Indian/Mauritius";
  TimezoneRegions2["IndianMayotte"] = "Indian/Mayotte";
  TimezoneRegions2["IndianReunion"] = "Indian/Reunion";
  TimezoneRegions2["PacificApia"] = "Pacific/Apia";
  TimezoneRegions2["PacificAuckland"] = "Pacific/Auckland";
  TimezoneRegions2["PacificBougainville"] = "Pacific/Bougainville";
  TimezoneRegions2["PacificChatham"] = "Pacific/Chatham";
  TimezoneRegions2["PacificChuuk"] = "Pacific/Chuuk";
  TimezoneRegions2["PacificEaster"] = "Pacific/Easter";
  TimezoneRegions2["PacificEfate"] = "Pacific/Efate";
  TimezoneRegions2["PacificEnderbury"] = "Pacific/Enderbury";
  TimezoneRegions2["PacificFakaofo"] = "Pacific/Fakaofo";
  TimezoneRegions2["PacificFiji"] = "Pacific/Fiji";
  TimezoneRegions2["PacificFunafuti"] = "Pacific/Funafuti";
  TimezoneRegions2["PacificGalapagos"] = "Pacific/Galapagos";
  TimezoneRegions2["PacificGambier"] = "Pacific/Gambier";
  TimezoneRegions2["PacificGuadalcanal"] = "Pacific/Guadalcanal";
  TimezoneRegions2["PacificGuam"] = "Pacific/Guam";
  TimezoneRegions2["PacificHonolulu"] = "Pacific/Honolulu";
  TimezoneRegions2["PacificJohnston"] = "Pacific/Johnston";
  TimezoneRegions2["PacificKiritimati"] = "Pacific/Kiritimati";
  TimezoneRegions2["PacificKosrae"] = "Pacific/Kosrae";
  TimezoneRegions2["PacificKwajalein"] = "Pacific/Kwajalein";
  TimezoneRegions2["PacificMajuro"] = "Pacific/Majuro";
  TimezoneRegions2["PacificMarquesas"] = "Pacific/Marquesas";
  TimezoneRegions2["PacificMidway"] = "Pacific/Midway";
  TimezoneRegions2["PacificNauru"] = "Pacific/Nauru";
  TimezoneRegions2["PacificNiue"] = "Pacific/Niue";
  TimezoneRegions2["PacificNorfolk"] = "Pacific/Norfolk";
  TimezoneRegions2["PacificNoumea"] = "Pacific/Noumea";
  TimezoneRegions2["PacificPagoPago"] = "Pacific/Pago_Pago";
  TimezoneRegions2["PacificPalau"] = "Pacific/Palau";
  TimezoneRegions2["PacificPitcairn"] = "Pacific/Pitcairn";
  TimezoneRegions2["PacificPohnpei"] = "Pacific/Pohnpei";
  TimezoneRegions2["PacificPonape"] = "Pacific/Ponape";
  TimezoneRegions2["PacificPortMoresby"] = "Pacific/Port_Moresby";
  TimezoneRegions2["PacificRarotonga"] = "Pacific/Rarotonga";
  TimezoneRegions2["PacificSaipan"] = "Pacific/Saipan";
  TimezoneRegions2["PacificSamoa"] = "Pacific/Samoa";
  TimezoneRegions2["PacificTahiti"] = "Pacific/Tahiti";
  TimezoneRegions2["PacificTarawa"] = "Pacific/Tarawa";
  TimezoneRegions2["PacificTongatapu"] = "Pacific/Tongatapu";
  TimezoneRegions2["PacificTruk"] = "Pacific/Truk";
  TimezoneRegions2["PacificWake"] = "Pacific/Wake";
  TimezoneRegions2["PacificWallis"] = "Pacific/Wallis";
  TimezoneRegions2["PacificYap"] = "Pacific/Yap";
})(TimezoneRegions || (TimezoneRegions = {}));
var TimezoneOffset;
(function(TimezoneOffset2) {
  TimezoneOffset2["UTC_MINUS_12"] = "UTC-12";
  TimezoneOffset2["UTC_MINUS_11_30"] = "UTC-11:30";
  TimezoneOffset2["UTC_MINUS_11"] = "UTC-11";
  TimezoneOffset2["UTC_MINUS_10_30"] = "UTC-10:30";
  TimezoneOffset2["UTC_MINUS_10"] = "UTC-10";
  TimezoneOffset2["UTC_MINUS_9_30"] = "UTC-9:30";
  TimezoneOffset2["UTC_MINUS_9"] = "UTC-09";
  TimezoneOffset2["UTC_MINUS_8_45"] = "UTC-8:45";
  TimezoneOffset2["UTC_MINUS_8"] = "UTC-08";
  TimezoneOffset2["UTC_MINUS_7"] = "UTC-07";
  TimezoneOffset2["UTC_MINUS_6_30"] = "UTC-6:30";
  TimezoneOffset2["UTC_MINUS_6"] = "UTC-06";
  TimezoneOffset2["UTC_MINUS_5_45"] = "UTC-5:45";
  TimezoneOffset2["UTC_MINUS_5_30"] = "UTC-5:30";
  TimezoneOffset2["UTC_MINUS_5"] = "UTC-05";
  TimezoneOffset2["UTC_MINUS_4_30"] = "UTC-4:30";
  TimezoneOffset2["UTC_MINUS_4"] = "UTC-04";
  TimezoneOffset2["UTC_MINUS_3_30"] = "UTC-3:30";
  TimezoneOffset2["UTC_MINUS_3"] = "UTC-03";
  TimezoneOffset2["UTC_MINUS_2_30"] = "UTC-2:30";
  TimezoneOffset2["UTC_MINUS_2"] = "UTC-02";
  TimezoneOffset2["UTC_MINUS_1"] = "UTC-01";
  TimezoneOffset2["UTC_0"] = "UTC+00";
  TimezoneOffset2["UTC_PLUS_1"] = "UTC+01";
  TimezoneOffset2["UTC_PLUS_2"] = "UTC+02";
  TimezoneOffset2["UTC_PLUS_3"] = "UTC+03";
  TimezoneOffset2["UTC_PLUS_3_30"] = "UTC+3:30";
  TimezoneOffset2["UTC_PLUS_4"] = "UTC+04";
  TimezoneOffset2["UTC_PLUS_4_30"] = "UTC+4:30";
  TimezoneOffset2["UTC_PLUS_5"] = "UTC+05";
  TimezoneOffset2["UTC_PLUS_5_30"] = "UTC+5:30";
  TimezoneOffset2["UTC_PLUS_5_45"] = "UTC+5:45";
  TimezoneOffset2["UTC_PLUS_6"] = "UTC+06";
  TimezoneOffset2["UTC_PLUS_6_30"] = "UTC+6:30";
  TimezoneOffset2["UTC_PLUS_7"] = "UTC+07";
  TimezoneOffset2["UTC_PLUS_8"] = "UTC+08";
  TimezoneOffset2["UTC_PLUS_8_45"] = "UTC+8:45";
  TimezoneOffset2["UTC_PLUS_9"] = "UTC+09";
  TimezoneOffset2["UTC_PLUS_9_30"] = "UTC+9:30";
  TimezoneOffset2["UTC_PLUS_10"] = "UTC+10";
  TimezoneOffset2["UTC_PLUS_10_30"] = "UTC+10:30";
  TimezoneOffset2["UTC_PLUS_11"] = "UTC+11";
  TimezoneOffset2["UTC_PLUS_11_30"] = "UTC+11:30";
  TimezoneOffset2["UTC_PLUS_12"] = "UTC+12";
  TimezoneOffset2["UTC_PLUS_12_45"] = "UTC+12:45";
  TimezoneOffset2["UTC_PLUS_13"] = "UTC+13";
  TimezoneOffset2["UTC_PLUS_13_45"] = "UTC+13:45";
  TimezoneOffset2["UTC_PLUS_14"] = "UTC+14";
})(TimezoneOffset || (TimezoneOffset = {}));
var Timezones;
(function(Timezones2) {
  Timezones2["AcreTime"] = "ACT";
  Timezones2["AfghanistanTime"] = "AFT";
  Timezones2["AIXCentralEuropeanTime"] = "DFT";
  Timezones2["AlaskaDaylightTime"] = "AKDT";
  Timezones2["AlaskaStandardTime"] = "AKST";
  Timezones2["AlmaAtaTime"] = "ALMT";
  Timezones2["AmazonSummerTime"] = "AMST";
  Timezones2["AmazonTime"] = "AMT";
  Timezones2["AnadyrTime"] = "ANAT";
  Timezones2["AqtobeTime"] = "AQTT";
  Timezones2["ArabiaStandardTime"] = "AST";
  Timezones2["ArgentinaTime"] = "ART";
  Timezones2["ArmeniaTime"] = "AMT";
  Timezones2["ASEANCommonTime"] = "ASEAN";
  Timezones2["AtlanticDaylightTime"] = "ADT";
  Timezones2["AtlanticStandardTime"] = "AST";
  Timezones2["AustralianCentralDaylightSavingTime"] = "ACDT";
  Timezones2["AustralianCentralStandardTime"] = "ACST";
  Timezones2["AustralianCentralWesternStandardTime"] = "ACWST";
  Timezones2["AustralianEasternDaylightSavingTime"] = "AEDT";
  Timezones2["AustralianEasternStandardTime"] = "AEST";
  Timezones2["AustralianEasternTime"] = "AET";
  Timezones2["AustralianWesternStandardTime"] = "AWST";
  Timezones2["AzerbaijanTime"] = "AZT";
  Timezones2["AzoresStandardTime"] = "AZOT";
  Timezones2["AzoresSummerTime"] = "AZOST";
  Timezones2["BakerIslandTime"] = "BIT";
  Timezones2["BangladeshStandardTime"] = "BST";
  Timezones2["BhutanTime"] = "BTT";
  Timezones2["BoliviaTime"] = "BOT";
  Timezones2["BougainvilleStandardTime"] = "BST";
  Timezones2["BrasiliaSummerTime"] = "BRST";
  Timezones2["BrasiliaTime"] = "BRT";
  Timezones2["BritishIndianOceanTime"] = "BIOT";
  Timezones2["BritishSummerTime"] = "BST";
  Timezones2["BruneiTime"] = "BNT";
  Timezones2["CapeVerdeTime"] = "CVT";
  Timezones2["CentralAfricaTime"] = "CAT";
  Timezones2["CentralDaylightTime"] = "CDT";
  Timezones2["CentralEuropeanSummerTime"] = "CEST";
  Timezones2["CentralEuropeanTime"] = "CET";
  Timezones2["CentralIndonesiaTime"] = "WITA";
  Timezones2["CentralStandardTime"] = "CST";
  Timezones2["CentralTime"] = "CT";
  Timezones2["CentralWesternStandardTime"] = "CWST";
  Timezones2["ChamorroStandardTime"] = "CHST";
  Timezones2["ChathamDaylightTime"] = "CHADT";
  Timezones2["ChathamStandardTime"] = "CHAST";
  Timezones2["ChileStandardTime"] = "CLT";
  Timezones2["ChileSummerTime"] = "CLST";
  Timezones2["ChinaStandardTime"] = "CST";
  Timezones2["ChoibalsanStandardTime"] = "CHOT";
  Timezones2["ChoibalsanSummerTime"] = "CHOST";
  Timezones2["ChristmasIslandTime"] = "CXT";
  Timezones2["ChuukTime"] = "CHUT";
  Timezones2["ClipptertonIslandStandardTime"] = "CIST";
  Timezones2["CocosIslandsTime"] = "CCT";
  Timezones2["ColombiaSummerTime"] = "COST";
  Timezones2["ColombiaTime"] = "COT";
  Timezones2["CookIslandTime"] = "CKT";
  Timezones2["CoordinatedUniversalTime"] = "UTC";
  Timezones2["CubaDaylightTime"] = "CDT";
  Timezones2["CubaStandardTime"] = "CST";
  Timezones2["DavisTime"] = "DAVT";
  Timezones2["DumontDUrvilleTime"] = "DDUT";
  Timezones2["EastAfricaTime"] = "EAT";
  Timezones2["EasterIslandStandardTime"] = "EAST";
  Timezones2["EasterIslandSummerTime"] = "EASST";
  Timezones2["EasternCaribbeanTime"] = "ECT";
  Timezones2["EasternDaylightTime"] = "EDT";
  Timezones2["EasternEuropeanSummerTime"] = "EEST";
  Timezones2["EasternEuropeanTime"] = "EET";
  Timezones2["EasternGreenlandSummerTime"] = "EGST";
  Timezones2["EasternGreenlandTime"] = "EGT";
  Timezones2["EasternIndonesianTime"] = "WIT";
  Timezones2["EasternStandardTime"] = "EST";
  Timezones2["EasternTime"] = "ET";
  Timezones2["EcuadorTime"] = "ECT";
  Timezones2["FalklandIslandsSummerTime"] = "FKST";
  Timezones2["FalklandIslandsTime"] = "FKT";
  Timezones2["FernandoDeNoronhaTime"] = "FNT";
  Timezones2["FijiTime"] = "FJT";
  Timezones2["FrenchGuianaTime"] = "GFT";
  Timezones2["FrenchSouthernAndAntarcticTime"] = "TFT";
  Timezones2["FurtherEasternEuropeanTime"] = "FET";
  Timezones2["GalapagosTime"] = "GALT";
  Timezones2["GambierIslandTime"] = "GIT";
  Timezones2["GambierIslandsTime"] = "GAMT";
  Timezones2["GeorgiaStandardTime"] = "GET";
  Timezones2["GilbertIslandTime"] = "GILT";
  Timezones2["GreenwichMeanTime"] = "GMT";
  Timezones2["GulfStandardTime"] = "GST";
  Timezones2["GuyanaTime"] = "GYT";
  Timezones2["HawaiiAleutianDaylightTime"] = "HDT";
  Timezones2["HawaiiAleutianStandardTime"] = "HST";
  Timezones2["HeardAndMcDonaldIslandsTime"] = "HMT";
  Timezones2["HeureAvanceeDEuropeCentraleTime"] = "HAEC";
  Timezones2["HongKongTime"] = "HKT";
  Timezones2["HovdSummerTime"] = "HOVST";
  Timezones2["HovdTime"] = "HOVT";
  Timezones2["IndianOceanTime"] = "IOT";
  Timezones2["IndianStandardTime"] = "IST";
  Timezones2["IndochinaTime"] = "ICT";
  Timezones2["InternationalDayLineWestTime"] = "IDLW";
  Timezones2["IranDaylightTime"] = "IRDT";
  Timezones2["IranStandardTime"] = "IRST";
  Timezones2["IrishStandardTime"] = "IST";
  Timezones2["IrkutskSummerTime"] = "IRKST";
  Timezones2["IrkutskTime"] = "IRKT";
  Timezones2["IsraelDaylightTime"] = "IDT";
  Timezones2["IsraelStandardTime"] = "IST";
  Timezones2["JapanStandardTime"] = "JST";
  Timezones2["KaliningradTime"] = "KALT";
  Timezones2["KamchatkaTime"] = "KAMT";
  Timezones2["KoreaStandardTime"] = "KST";
  Timezones2["KosraeTime"] = "KOST";
  Timezones2["KrasnoyarskSummerTime"] = "KRAST";
  Timezones2["KrasnoyarskTime"] = "KRAT";
  Timezones2["KyrgyzstanTime"] = "KGT";
  Timezones2["LineIslandsTime"] = "LINT";
  Timezones2["KazakhstanStandardTime"] = "KAST";
  Timezones2["LordHoweStandardTime"] = "LHST";
  Timezones2["LordHoweSummerTime"] = "LHST";
  Timezones2["MacquarieIslandStationTime"] = "MIST";
  Timezones2["MagadanTime"] = "MAGT";
  Timezones2["MalaysiaStandardTime"] = "MST";
  Timezones2["MalaysiaTime"] = "MYT";
  Timezones2["MaldivesTime"] = "MVT";
  Timezones2["MarquesasIslandsTime"] = "MART";
  Timezones2["MarshallIslandsTime"] = "MHT";
  Timezones2["MauritiusTime"] = "MUT";
  Timezones2["MawsonStationTime"] = "MAWT";
  Timezones2["MiddleEuropeanSummerTime"] = "MEDT";
  Timezones2["MiddleEuropeanTime"] = "MET";
  Timezones2["MoscowTime"] = "MSK";
  Timezones2["MountainDaylightTime"] = "MDT";
  Timezones2["MountainStandardTime"] = "MST";
  Timezones2["MyanmarStandardTime"] = "MMT";
  Timezones2["NepalTime"] = "NCT";
  Timezones2["NauruTime"] = "NRT";
  Timezones2["NewCaledoniaTime"] = "NCT";
  Timezones2["NewZealandDaylightTime"] = "NZDT";
  Timezones2["NewZealandStandardTime"] = "NZST";
  Timezones2["NewfoundlandDaylightTime"] = "NDT";
  Timezones2["NewfoundlandStandardTime"] = "NST";
  Timezones2["NewfoundlandTime"] = "NT";
  Timezones2["NiueTime"] = "NUT";
  Timezones2["NorfolkIslandTime"] = "NFT";
  Timezones2["NovosibirskTime"] = "NOVT";
  Timezones2["OmskTime"] = "OMST";
  Timezones2["OralTime"] = "ORAT";
  Timezones2["PacificDaylightTime"] = "PDT";
  Timezones2["PacificStandardTime"] = "PST";
  Timezones2["PakistanStandardTime"] = "PKT";
  Timezones2["PalauTime"] = "PWT";
  Timezones2["PapuaNewGuineaTime"] = "PGT";
  Timezones2["ParaguaySummerTime"] = "PYST";
  Timezones2["ParaguayTime"] = "PYT";
  Timezones2["PeruTime"] = "PET";
  Timezones2["PhilippineStandardTime"] = "PHST";
  Timezones2["PhilippineTime"] = "PHT";
  Timezones2["PhoenixIslandTime"] = "PHOT";
  Timezones2["PitcairnTime"] = "PST";
  Timezones2["PohnpeiStandardTime"] = "PONT";
  Timezones2["ReunionTime"] = "RET";
  Timezones2["RotheraResearchStationTime"] = "ROTT";
  Timezones2["SaintPierreAndMiquelonDaylightTime"] = "PMDT";
  Timezones2["SaintPierreAndMiquelonStandardTime"] = "PMST";
  Timezones2["SakhalinIslandTime"] = "SAKT";
  Timezones2["SamaraTime"] = "SAMT";
  Timezones2["SamoaDaylightTime"] = "SDT";
  Timezones2["SamoaStandardTime"] = "SST";
  Timezones2["SeychellesTime"] = "SCT";
  Timezones2["ShowaStationTime"] = "SYOT";
  Timezones2["SingaporeStandardTime"] = "SST";
  Timezones2["SingaporeTime"] = "SGT";
  Timezones2["SolomonIslandsTime"] = "SBT";
  Timezones2["SouthAfricanStandardTime"] = "SAST";
  Timezones2["SouthGeorgiaAndTheSouthSandwichIslandsTime"] = "GST";
  Timezones2["SrednekolymskTime"] = "SRET";
  Timezones2["SriLankaStandardTime"] = "SLST";
  Timezones2["SurinameTime"] = "SRT";
  Timezones2["TahitiTime"] = "TAHT";
  Timezones2["TajikistanTime"] = "TJT";
  Timezones2["ThailandStandardTime"] = "THA";
  Timezones2["TimorLesteTime"] = "TLT";
  Timezones2["TokelauTime"] = "TKT";
  Timezones2["TongaTime"] = "TOT";
  Timezones2["TurkeyTime"] = "TRT";
  Timezones2["TurkmenistanTime"] = "TMT";
  Timezones2["TuvaluTime"] = "TVT";
  Timezones2["UlaanbaatarStandardTime"] = "ULAT";
  Timezones2["UlaanbaatarSummerTime"] = "ULAST";
  Timezones2["UruguayStandardTime"] = "UYT";
  Timezones2["UruguaySummerTime"] = "UYST";
  Timezones2["UzbekistanTime"] = "UZT";
  Timezones2["VanuatuTime"] = "VUT";
  Timezones2["VenezuelaStandardTime"] = "VET";
  Timezones2["VladivostokTime"] = "VLAT";
  Timezones2["VolgogradTime"] = "VOLT";
  Timezones2["VostokStationTime"] = "VOST";
  Timezones2["WakeIslandTime"] = "WAKT";
  Timezones2["WestAfricaSummerTime"] = "WAST";
  Timezones2["WestAfricaTime"] = "WAT";
  Timezones2["WestGreenlandSummerTime"] = "WGST";
  Timezones2["WestGreenlandTime"] = "WGT";
  Timezones2["WestKazakhstanTime"] = "WKT";
  Timezones2["WesternEuropeanSummerTime"] = "WEDT";
  Timezones2["WesternEuropeanTime"] = "WET";
  Timezones2["WesternIndonesianTime"] = "WIT";
  Timezones2["WesternStandardTime"] = "WST";
  Timezones2["YakutskTime"] = "YAKT";
  Timezones2["YekaterinburgTime"] = "YEKT";
})(Timezones || (Timezones = {}));
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AcreTime,
  name: "Acre Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AfghanistanTime,
  name: "Afghanistan Time",
  offset: TimezoneOffset.UTC_PLUS_4_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AIXCentralEuropeanTime,
  name: "AIX Central European Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.AlaskaDaylightTime,
  name: "Alaska Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AlaskaStandardTime,
  name: "Alaska Standard Time",
  offset: TimezoneOffset.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AlmaAtaTime,
  name: "Alma-Ata Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AmazonSummerTime,
  name: "Amazon Summer Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AmazonTime,
  name: "Amazon Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AnadyrTime,
  name: "Anadyr Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AqtobeTime,
  name: "Aqtobe Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ArabiaStandardTime,
  name: "Arabia Standard Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ArgentinaTime,
  name: "Argentina Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ArmeniaTime,
  name: "Armenia Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.AtlanticDaylightTime,
  name: "Atlantic Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AtlanticStandardTime,
  name: "Atlantic Standard Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.AustralianCentralDaylightSavingTime,
  name: "Australian Central Daylight Saving Time",
  offset: TimezoneOffset.UTC_PLUS_10_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AustralianCentralStandardTime,
  name: "Australian Central Standard Time",
  offset: TimezoneOffset.UTC_PLUS_9_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AustralianCentralWesternStandardTime,
  name: "Australian Central Western Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8_45
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.AustralianEasternDaylightSavingTime,
  name: "Australian Eastern Daylight Saving Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AustralianEasternStandardTime,
  name: "Australian Eastern Standard Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AustralianEasternTime,
  name: "Australian Eastern Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AustralianWesternStandardTime,
  name: "Australian Western Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AzerbaijanTime,
  name: "Azerbaijan Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AzoresStandardTime,
  name: "Azores Standard Time",
  offset: TimezoneOffset.UTC_MINUS_1
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.AzoresSummerTime,
  name: "Azores Summer Time",
  offset: TimezoneOffset.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BakerIslandTime,
  name: "Baker Island Time",
  offset: TimezoneOffset.UTC_MINUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BangladeshStandardTime,
  name: "Bangladesh Standard Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BhutanTime,
  name: "Bhutan Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BoliviaTime,
  name: "Bolivia Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BougainvilleStandardTime,
  name: "Bougainville Standard Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.BrasiliaSummerTime,
  name: "Brasilia Summer Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BrasiliaTime,
  name: "Brasilia Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BritishIndianOceanTime,
  name: "British Indian Ocean Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.BritishSummerTime,
  name: "British Summer Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BruneiTime,
  name: "Brunei Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CapeVerdeTime,
  name: "Cape Verde Time",
  offset: TimezoneOffset.UTC_MINUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralAfricaTime,
  name: "Central Africa Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.CentralDaylightTime,
  name: "Central Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.CentralEuropeanSummerTime,
  name: "Central European Summer Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralEuropeanTime,
  name: "Central European Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralIndonesiaTime,
  name: "Central Indonesia Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralStandardTime,
  name: "Central Standard Time",
  offset: TimezoneOffset.UTC_MINUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralTime,
  name: "Central Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralWesternStandardTime,
  name: "Central Western Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChamorroStandardTime,
  name: "Chamorro Standard Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.ChathamDaylightTime,
  name: "Chatham Daylight Time",
  offset: TimezoneOffset.UTC_PLUS_13_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChathamStandardTime,
  name: "Chatham Standard Time",
  offset: TimezoneOffset.UTC_PLUS_12_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChileStandardTime,
  name: "Chile Standard Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.ChileSummerTime,
  name: "Chile Summer Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChinaStandardTime,
  name: "China Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChoibalsanStandardTime,
  name: "Choibalsan Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.ChoibalsanSummerTime,
  name: "Choibalsan Summer Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChristmasIslandTime,
  name: "Christmas Island Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChuukTime,
  name: "Chuuk Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ClipptertonIslandStandardTime,
  name: "Clippterton Island Standard Time",
  offset: TimezoneOffset.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CocosIslandsTime,
  name: "Cocos Standard Time",
  offset: TimezoneOffset.UTC_PLUS_6_30
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.ColombiaSummerTime,
  name: "Colombia Summer Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ColombiaTime,
  name: "Colombia Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CookIslandTime,
  name: "Cook Island Time",
  offset: TimezoneOffset.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CoordinatedUniversalTime,
  name: "Coordinated Universal Time",
  offset: TimezoneOffset.UTC_0
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.CubaDaylightTime,
  name: "Cuba Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CubaStandardTime,
  name: "Cuba Standard Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.DavisTime,
  name: "Davis Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.DumontDUrvilleTime,
  name: "Dumont D'Urville Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EastAfricaTime,
  name: "East Africa Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasterIslandStandardTime,
  name: "Easter Island Standard Time",
  offset: TimezoneOffset.UTC_MINUS_6
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.EasterIslandSummerTime,
  name: "Easter Island Summer Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternCaribbeanTime,
  name: "Eastern Caribbean Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.EasternDaylightTime,
  name: "Eastern Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.EasternEuropeanSummerTime,
  name: "Eastern European Summer Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternEuropeanTime,
  name: "Eastern European Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.EasternGreenlandSummerTime,
  name: "Eastern Greenland Summer Time",
  offset: TimezoneOffset.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternGreenlandTime,
  name: "Eastern Greenland Time",
  offset: TimezoneOffset.UTC_MINUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternIndonesianTime,
  name: "Eastern Indonesian Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternStandardTime,
  name: "Eastern Standard Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternTime,
  name: "Eastern Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EcuadorTime,
  name: "Ecuador Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.FalklandIslandsSummerTime,
  name: "Falkland Islands Summer Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FalklandIslandsTime,
  name: "Falkland Islands Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FernandoDeNoronhaTime,
  name: "Fernando de Noronha Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FijiTime,
  name: "Fiji Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FrenchGuianaTime,
  name: "French Guiana Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FrenchSouthernAndAntarcticTime,
  name: "French Southern and Antarctic Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FurtherEasternEuropeanTime,
  name: "Further Eastern European Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GalapagosTime,
  name: "Galapagos Time",
  offset: TimezoneOffset.UTC_MINUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GambierIslandTime,
  name: "Gambier Island Time",
  offset: TimezoneOffset.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GambierIslandsTime,
  name: "Gambier Islands Time",
  offset: TimezoneOffset.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GeorgiaStandardTime,
  name: "Georgia Standard Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GilbertIslandTime,
  name: "Gilbert Island Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GreenwichMeanTime,
  name: "Greenwich Mean Time",
  offset: TimezoneOffset.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GulfStandardTime,
  name: "Gulf Standard Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GuyanaTime,
  name: "Guyana Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.HawaiiAleutianDaylightTime,
  name: "Hawaii-Aleutian Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.HawaiiAleutianStandardTime,
  name: "Hawaii-Aleutian Standard Time",
  offset: TimezoneOffset.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.HeardAndMcDonaldIslandsTime,
  name: "Heard and McDonald Islands Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.HongKongTime,
  name: "Hong Kong Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.HovdSummerTime,
  name: "Hovd Summer Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.HovdTime,
  name: "Hovd Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IndianOceanTime,
  name: "Indian Ocean Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IndianStandardTime,
  name: "Indian Standard Time",
  offset: TimezoneOffset.UTC_PLUS_5_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IndochinaTime,
  name: "Indochina Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.InternationalDayLineWestTime,
  name: "International Day Line West Time",
  offset: TimezoneOffset.UTC_MINUS_12
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.IranDaylightTime,
  name: "Iran Daylight Time",
  offset: TimezoneOffset.UTC_PLUS_4_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IranStandardTime,
  name: "Iran Standard Time",
  offset: TimezoneOffset.UTC_PLUS_3_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IrishStandardTime,
  name: "Irish Standard Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IrkutskTime,
  name: "Irkutsk Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.IsraelDaylightTime,
  name: "Israel Daylight Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IsraelStandardTime,
  name: "Israel Standard Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.JapanStandardTime,
  name: "Japan Standard Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KaliningradTime,
  name: "Kaliningrad Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KamchatkaTime,
  name: "Kamchatka Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KoreaStandardTime,
  name: "Korea Standard Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KosraeTime,
  name: "Kosrae Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KrasnoyarskTime,
  name: "Krasnoyarsk Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KyrgyzstanTime,
  name: "Kyrgyzstan Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.LineIslandsTime,
  name: "Line Islands Time",
  offset: TimezoneOffset.UTC_PLUS_14
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.LordHoweStandardTime,
  name: "Lord Howe Standard Time",
  offset: TimezoneOffset.UTC_PLUS_10_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.LordHoweSummerTime,
  name: "Lord Howe Summer Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MacquarieIslandStationTime,
  name: "Macquarie Island Station Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MagadanTime,
  name: "Magadan Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MalaysiaStandardTime,
  name: "Malaysia Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MalaysiaTime,
  name: "Malaysia Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MaldivesTime,
  name: "Maldives Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MarquesasIslandsTime,
  name: "Marquesas Islands Time",
  offset: TimezoneOffset.UTC_PLUS_9_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MarshallIslandsTime,
  name: "Marshall Islands Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MauritiusTime,
  name: "Mauritius Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MawsonStationTime,
  name: "Mawson Station Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MiddleEuropeanSummerTime,
  name: "Middle European Summer Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MiddleEuropeanTime,
  name: "Middle European Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MoscowTime,
  name: "Moscow Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MountainDaylightTime,
  name: "Mountain Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MountainStandardTime,
  name: "Mountain Standard Time",
  offset: TimezoneOffset.UTC_MINUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MyanmarStandardTime,
  name: "Myanmar Standard Time",
  offset: TimezoneOffset.UTC_PLUS_6_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NepalTime,
  name: "Nepal Time",
  offset: TimezoneOffset.UTC_PLUS_5_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NauruTime,
  name: "Nauru Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NewCaledoniaTime,
  name: "New Caledonia Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NewZealandDaylightTime,
  name: "New Zealand Daylight Time",
  offset: TimezoneOffset.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NewZealandStandardTime,
  name: "New Zealand Standard Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NewfoundlandDaylightTime,
  name: "Newfoundland Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_2_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NewfoundlandTime,
  name: "Newfoundland Time",
  offset: TimezoneOffset.UTC_MINUS_3_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NiueTime,
  name: "Niue Time",
  offset: TimezoneOffset.UTC_MINUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NorfolkIslandTime,
  name: "Norfolk Island Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NovosibirskTime,
  name: "Novosibirsk Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.OmskTime,
  name: "Omsk Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.OralTime,
  name: "Oral Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PacificDaylightTime,
  name: "Pacific Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PacificStandardTime,
  name: "Pacific Standard Time",
  offset: TimezoneOffset.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PakistanStandardTime,
  name: "Pakistan Standard Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PalauTime,
  name: "Palau Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PapuaNewGuineaTime,
  name: "Papua New Guinea Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ParaguaySummerTime,
  name: "Paraguay Summer Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ParaguayTime,
  name: "Paraguay Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PeruTime,
  name: "Peru Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PhilippineStandardTime,
  name: "Philippine Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PhilippineTime,
  name: "Philippine Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PhoenixIslandTime,
  name: "Phoenix Island Time",
  offset: TimezoneOffset.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PitcairnTime,
  name: "Pitcairn Time",
  offset: TimezoneOffset.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PohnpeiStandardTime,
  name: "Pohnpei Standard Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ReunionTime,
  name: "Reunion Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.RotheraResearchStationTime,
  name: "Rothera Research Station Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SaintPierreAndMiquelonDaylightTime,
  name: "Saint Pierre and Miquelon Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SaintPierreAndMiquelonStandardTime,
  name: "Saint Pierre and Miquelon Standard Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SakhalinIslandTime,
  name: "Sakhalin Island Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SamaraTime,
  name: "Samara Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SamoaDaylightTime,
  name: "Samoa Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SamoaStandardTime,
  name: "Samoa Standard Time",
  offset: TimezoneOffset.UTC_MINUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SeychellesTime,
  name: "Seychelles Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ShowaStationTime,
  name: "Showa Station Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SingaporeStandardTime,
  name: "Singapore Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SingaporeTime,
  name: "Singapore Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SolomonIslandsTime,
  name: "Solomon Islands Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SouthAfricanStandardTime,
  name: "South African Standard Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SouthGeorgiaAndTheSouthSandwichIslandsTime,
  name: "South Georgia and the South Sandwich Islands Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SrednekolymskTime,
  name: "Srednekolymsk Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SriLankaStandardTime,
  name: "Sri Lanka Standard Time",
  offset: TimezoneOffset.UTC_PLUS_5_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SurinameTime,
  name: "Suriname Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TahitiTime,
  name: "Tahiti Time",
  offset: TimezoneOffset.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TajikistanTime,
  name: "Tajikistan Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ThailandStandardTime,
  name: "Thailand Standard Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TimorLesteTime,
  name: "Timor-Leste Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TokelauTime,
  name: "Tokelau Time",
  offset: TimezoneOffset.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TongaTime,
  name: "Tonga Time",
  offset: TimezoneOffset.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TurkeyTime,
  name: "Turkey Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TurkmenistanTime,
  name: "Turkmenistan Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TuvaluTime,
  name: "Tuvalu Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.UlaanbaatarStandardTime,
  name: "Ulaanbaatar Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.UlaanbaatarSummerTime,
  name: "Ulaanbaatar Summer Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.UruguayStandardTime,
  name: "Uruguay Standard Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.UruguaySummerTime,
  name: "Uruguay Summer Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.UzbekistanTime,
  name: "Uzbekistan Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.VanuatuTime,
  name: "Vanuatu Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.VenezuelaStandardTime,
  name: "Venezuela Standard Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.VladivostokTime,
  name: "Vladivostok Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.VolgogradTime,
  name: "Volgograd Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.VostokStationTime,
  name: "Vostok Station Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WakeIslandTime,
  name: "Wake Island Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WestAfricaSummerTime,
  name: "West Africa Summer Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WestAfricaTime,
  name: "West Africa Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WestGreenlandSummerTime,
  name: "West Greenland Summer Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WestGreenlandTime,
  name: "West Greenland Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WestKazakhstanTime,
  name: "West Kazakhstan Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WesternEuropeanSummerTime,
  name: "Western European Summer Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WesternEuropeanTime,
  name: "Western European Time",
  offset: TimezoneOffset.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WesternIndonesianTime,
  name: "Western Indonesian Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WesternStandardTime,
  name: "Western Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.YakutskTime,
  name: "Yakutsk Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.YekaterinburgTime,
  name: "Yekaterinburg Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
var Region;
(function(Region2) {
  Region2["Africa"] = "Africa";
  Region2["Americas"] = "Americas";
  Region2["Asia"] = "Asia";
  Region2["Europe"] = "Europe";
  Region2["Oceania"] = "Oceania";
  Region2["Polar"] = "Polar";
})(Region || (Region = {}));
var SubRegion;
(function(SubRegion2) {
  SubRegion2["CentralAmerica"] = "Central America";
  SubRegion2["EasternAsia"] = "Eastern Asia";
  SubRegion2["EasternEurope"] = "Eastern Europe";
  SubRegion2["EasternAfrica"] = "Eastern Africa";
  SubRegion2["MiddleAfrica"] = "Middle Africa";
  SubRegion2["MiddleEast"] = "Middle East";
  SubRegion2["NorthernAfrica"] = "Northern Africa";
  SubRegion2["NorthernAmerica"] = "Northern America";
  SubRegion2["NorthernEurope"] = "Northern Europe";
  SubRegion2["Polynesia"] = "Polynesia";
  SubRegion2["SouthAmerica"] = "South America";
  SubRegion2["SouthernAfrica"] = "Southern Africa";
  SubRegion2["SouthernAsia"] = "Southern Asia";
  SubRegion2["SouthernEurope"] = "Southern Europe";
  SubRegion2["WesternAfrica"] = "Western Africa";
  SubRegion2["WesternAsia"] = "Western Asia";
  SubRegion2["WesternEurope"] = "Western Europe";
  SubRegion2["WesternAustralia"] = "Western Australia";
})(SubRegion || (SubRegion = {}));
({
  Afghanistan: {
    i18n: {
      calling_codes: [93],
      currencies: [CurrencyCode.AfghanistanAfghani],
      languages: [
        LocaleCode.Pashto,
        LocaleCode.Dari,
        LocaleCode.Turkmen,
        LocaleCode.Uzbek
      ],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_4_30],
        regions: [TimezoneRegions.AsiaKabul],
        timezones: [Timezones.AfghanistanTime]
      }
    },
    id: CountryCode.Afghanistan,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1EB}",
        emoji_unicode: "U+1F1E6 U+1F1EB",
        svg: "https://www.countryflags.io/af/flat/64.svg"
      },
      tld: [".af"]
    },
    iso: {
      alpha2: CountryCode.Afghanistan,
      alpha3: "AFG",
      numeric: "004"
    },
    name: {
      alt_spellings: ["AF", "Af\u0121\u0101nist\u0101n"],
      demonym: "Afghan",
      native: {
        endonym: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
      },
      official: "Islamic Republic of Afghanistan",
      short: "Afghanistan",
      translations: {
        [LocaleCode.Afrikaans]: "Afghanistan",
        [LocaleCode.Albanian]: "Shqip\xEBri",
        [LocaleCode.Amharic]: "\u12A0\u134D\u130B\u1295",
        [LocaleCode.Arabic]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Basque]: "Afganist\xE1n",
        [LocaleCode.Belarusian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Bengali]: "\u0986\u09AB\u0997\u09BE\u09A8\u09BF\u09B8\u09CD\u09A4\u09BE\u09A8",
        [LocaleCode.Berber]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F51\u0F7C\u0F53\u0F0B\u0F63\u0F7A\u0F0B\u0F66\u0F90\u0F51\u0F0B\u0F46\u0F0D",
        [LocaleCode.Bosnian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Breton]: "Afganistan",
        [LocaleCode.Bulgarian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Burmese]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A",
        [LocaleCode.Catalan]: "Afganistan",
        [LocaleCode.Chinese]: "\u963F\u5BCC\u6C57",
        [LocaleCode.Croatian]: "Afganistan",
        [LocaleCode.Czech]: "Afganistan",
        [LocaleCode.Danish]: "Afghanistan",
        [LocaleCode.Dutch]: "Afghanistan",
        [LocaleCode.English]: "Afghanistan",
        [LocaleCode.Esperanto]: "Afganistan",
        [LocaleCode.Estonian]: "Afganistan",
        [LocaleCode.Finnish]: "Afghanistan",
        [LocaleCode.French]: "Afghanistan",
        [LocaleCode.Frisian]: "Afghanistan",
        [LocaleCode.Galician]: "Afganist\xE1n",
        [LocaleCode.Georgian]: "\u10D0\u10D5\u10E6\u10D0\u10DC\u10D4\u10D7\u10D8",
        [LocaleCode.German]: "Afghanistan",
        [LocaleCode.Greenlandic]: "Afghanistan",
        [LocaleCode.Greek]: "\u0391\u03C6\u03B3\u03B1\u03BD\u03B9\u03C3\u03C4\u03AC\u03BD",
        [LocaleCode.Gujarati]: "\u0A85\u0AAB\u0A97\u0ABE\u0AA8\u0ABF\u0AB8\u0ACD\u0AA4\u0ABE\u0AA8",
        [LocaleCode.Haitian]: "Afghanistan",
        [LocaleCode.Hausa]: "Afghanistan",
        [LocaleCode.Hebrew]: "\u05D0\u05E4\u05D2\u05E0\u05D9\u05E1\u05D8\u05DF",
        [LocaleCode.Hindi]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode.Hungarian]: "Afganistan",
        [LocaleCode.Icelandic]: "Afghanistan",
        [LocaleCode.Igbo]: "Afghanistan",
        [LocaleCode.Indonesian]: "Afghanistan",
        [LocaleCode.Irish]: "Afghanistan",
        [LocaleCode.Italian]: "Afghanistan",
        [LocaleCode.Japanese]: "\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3",
        [LocaleCode.Javanese]: "Afghanistan",
        [LocaleCode.Kannada]: "\u0C85\u0CAB\u0C97\u0CBE\u0CA8\u0CBF\u0CB8\u0CCD\u0CA4\u0CBE\u0CA8",
        [LocaleCode.Kazakh]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Khmer]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17B7\u1780",
        [LocaleCode.Korean]: "\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4",
        [LocaleCode.Kurdish]: "Afghanistan",
        [LocaleCode.Kyrgyz]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Lao]: "\u0EAD\u0EB2\u0E9F\u0EB2\u0EA5\u0EBD\u0E99",
        [LocaleCode.Latin]: "Afghanistan",
        [LocaleCode.Latvian]: "Afghanistan",
        [LocaleCode.Lithuanian]: "Afganistanas",
        [LocaleCode.Luxembourgish]: "Afghanistan",
        [LocaleCode.Macedonian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Malagasy]: "Afghanistan",
        [LocaleCode.Malay]: "Afghanistan",
        [LocaleCode.Malayalam]: "\u0D05\u0D2B\u0D17\u0D3E\u0D28\u0D3F\u0D38\u0D4D\u0D24\u0D3E\u0D28",
        [LocaleCode.Maltese]: "Afghanistan",
        [LocaleCode.Maori]: "Afghanistan",
        [LocaleCode.Marathi]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode.Mongolian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Nepali]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode.Norwegian]: "Afghanistan",
        [LocaleCode.Pashto]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Persian]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Polish]: "Afganistan",
        [LocaleCode.Portuguese]: "Afghanistan",
        [LocaleCode.Punjabi]: "Afghanistan",
        [LocaleCode.Romanian]: "Afghanistan",
        [LocaleCode.Polish]: "Afganistan",
        [LocaleCode.Russian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Samoan]: "Afghanistan",
        [LocaleCode.Sanskrit]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode.Scots]: "Afghanistan",
        [LocaleCode.Serbian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Sesotho]: "Afghanistan",
        [LocaleCode.Shona]: "Afghanistan",
        [LocaleCode.Sindhi]: "Afghanistan",
        [LocaleCode.Sinhala]: "\u0D86\u0D9C\u0DCA\u200D\u0DBB\u0DDC\u0D9A\u0DCA\u0D9A\u0DD2\u0DBA\u0DCF\u0DC0",
        [LocaleCode.Slovak]: "Afganistan",
        [LocaleCode.Slovenian]: "Afganistan",
        [LocaleCode.Somali]: "Afghanistan",
        [LocaleCode.Spanish]: "Afganist\xE1n",
        [LocaleCode.Sudanese]: "Afghanistan",
        [LocaleCode.Swahili]: "Afghanistan",
        [LocaleCode.Swedish]: "Afghanistan",
        [LocaleCode.Tagalog]: "Afghanistan",
        [LocaleCode.Tajik]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Tatar]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Tamil]: "\u0B86\u0BAA\u0BCD\u0BAA\u0B95\u0BBE\u0BA9\u0BBF\u0BB8\u0BCD\u0BA4\u0BBE\u0BA9\u0BCD",
        [LocaleCode.Telugu]: "\u0C06\u0C2B\u0C4D\u0C18\u0C28\u0C3F\u0C38\u0C4D\u0C24\u0C3E\u0C28\u0C4D",
        [LocaleCode.Thai]: "\u0E2D\u0E31\u0E1F\u0E01\u0E32\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19",
        [LocaleCode.Tibetan]: "\u0F68\u0F55\u0F0B\u0F42\u0F7A\u0F0B\u0F53\u0F72\u0F66\u0F72\u0F0B\u0F4F\u0F7A\u0F53\u0F66\u0F72\u0F0D",
        [LocaleCode.Turkish]: "Afganistan",
        [LocaleCode.Ukrainian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Urdu]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Uzbek]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Vietnamese]: "Afghanistan",
        [LocaleCode.Welsh]: "Afghanistan",
        [LocaleCode.Xhosa]: "Afghanistan",
        [LocaleCode.Yiddish]: "Afghanistan",
        [LocaleCode.Yoruba]: "Afghanistan",
        [LocaleCode.Zulu]: "Afghanistan"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Kabul",
          total: 341e5
        }
      },
      geography: {
        area: 652230,
        region: Region.Asia,
        sub_region: SubRegion.SouthernAsia
      },
      government: {
        capital: "Kabul",
        type: "Islamic Emirate"
      }
    }
  },
  Albania: {
    i18n: {
      calling_codes: [355],
      currencies: [CurrencyCode.AlbaniaLek],
      languages: [LocaleCode.Albanian, LocaleCode.Greek, LocaleCode.Turkish],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_1],
        regions: [TimezoneRegions.EuropeBrussels],
        timezones: [Timezones.CentralEuropeanTime]
      }
    },
    id: CountryCode.Albania,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F1}",
        emoji_unicode: "U+1F1E6 U+1F1F1",
        svg: "https://www.countryflags.io/al/flat/64.svg"
      },
      tld: [".al"]
    },
    iso: {
      alpha2: CountryCode.Albania,
      alpha3: "ALB",
      numeric: "008"
    },
    name: {
      alt_spellings: ["AL", "Shqip\xEBri", "Shqip\xEBria", "Shqipnia"],
      demonym: "Albanian",
      native: {
        endonym: "Shqip\xEBri"
      },
      official: "Republic of Albania",
      short: "Albania",
      translations: {
        [LocaleCode.Afrikaans]: "Albania",
        [LocaleCode.Albanian]: "Albania",
        [LocaleCode.Amharic]: "\u12A0\u120D\u1263\u1295\u12EB",
        [LocaleCode.Arabic]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627",
        [LocaleCode.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Basque]: "Albania",
        [LocaleCode.Belarusian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Bengali]: "\u0986\u09B2\u09AC\u09BE\u09A8\u09BF\u09AF\u09BC\u09BE",
        [LocaleCode.Berber]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627",
        [LocaleCode.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B",
        [LocaleCode.Bosnian]: "Albanija",
        [LocaleCode.Breton]: "Albania",
        [LocaleCode.Bulgarian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Burmese]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A",
        [LocaleCode.Catalan]: "Alb\xE0nia",
        [LocaleCode.Chinese]: "\u963F\u5C14\u5DF4\u5C3C\u4E9A",
        [LocaleCode.Croatian]: "Albanija",
        [LocaleCode.Czech]: "Alb\xE1nie",
        [LocaleCode.Danish]: "Albanien",
        [LocaleCode.Dutch]: "Albani\xEB",
        [LocaleCode.English]: "Albania",
        [LocaleCode.Esperanto]: "Albanio",
        [LocaleCode.Estonian]: "Albaania",
        [LocaleCode.Finnish]: "Albania",
        [LocaleCode.French]: "Albanie",
        [LocaleCode.Frisian]: "Albani\xEB",
        [LocaleCode.Galician]: "Alb\xE2nia",
        [LocaleCode.Georgian]: "\u10D0\u10DA\u10D1\u10D0\u10DC\u10D8\u10D0",
        [LocaleCode.German]: "Albanien",
        [LocaleCode.Greenlandic]: "Albania",
        [LocaleCode.Greek]: "\u0391\u03BB\u03B2\u03B1\u03BD\u03AF\u03B1",
        [LocaleCode.Gujarati]: "\u0A85\u0AB2\u0AAC\u0AA8\u0ABF\u0AAF\u0ABE",
        [LocaleCode.Haitian]: "Albanais",
        [LocaleCode.Hausa]: "Albania",
        [LocaleCode.Hebrew]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05D4",
        [LocaleCode.Hindi]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E",
        [LocaleCode.Hungarian]: "Alb\xE1nia",
        [LocaleCode.Icelandic]: "Alb\xFAnir",
        [LocaleCode.Igbo]: "Albania",
        [LocaleCode.Indonesian]: "Albania",
        [LocaleCode.Irish]: "Alb\xE1in",
        [LocaleCode.Italian]: "Albania",
        [LocaleCode.Japanese]: "\u30A2\u30EB\u30D0\u30CB\u30A2",
        [LocaleCode.Javanese]: "Albania",
        [LocaleCode.Kannada]: "\u0C85\u0CB2\u0CCD\u0CAC\u0CBE\u0CA8\u0CBF\u0CAF\u0CBE",
        [LocaleCode.Kazakh]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Khmer]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17C1\u179F\u17CA\u17B8",
        [LocaleCode.Korean]: "\uC54C\uBC14\uB2C8\uC544",
        [LocaleCode.Kurdish]: "\u0622\u0644\u0628\u0627\u0646\u06CC\u0627",
        [LocaleCode.Kyrgyz]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Lao]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E99\u0EB5",
        [LocaleCode.Latin]: "Albania",
        [LocaleCode.Latvian]: "Alb\u0101nija",
        [LocaleCode.Lithuanian]: "Albanija",
        [LocaleCode.Luxembourgish]: "Albani\xEB",
        [LocaleCode.Macedonian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430",
        [LocaleCode.Malagasy]: "Albania",
        [LocaleCode.Malay]: "Albania",
        [LocaleCode.Malayalam]: "\u0D05\u0D32\u0D4D\u0D2C\u0D3E\u0D28\u0D3F\u0D2F\u0D3E",
        [LocaleCode.Maltese]: "Albania",
        [LocaleCode.Maori]: "Albania",
        [LocaleCode.Marathi]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Nepali]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E",
        [LocaleCode.Norwegian]: "Albania",
        [LocaleCode.Pashto]: "\u0627\u0627\u0644\u0628\u0627\u0646\u06CC",
        [LocaleCode.Persian]: "\u0622\u0644\u0628\u0627\u0646\u06CC",
        [LocaleCode.Polish]: "Albania",
        [LocaleCode.Portuguese]: "Alb\xE2nia",
        [LocaleCode.Punjabi]: "\u0A05\u0A32\u0A2C\u0A28\u0A40\u0A06",
        [LocaleCode.Romanian]: "Alb\u0103n",
        [LocaleCode.Russian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Samoan]: "Albania",
        [LocaleCode.Sanskrit]: "Albani",
        [LocaleCode.Scots]: "Alb\xE0inia",
        [LocaleCode.Serbian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430",
        [LocaleCode.Sesotho]: "Albania",
        [LocaleCode.Shona]: "Albania",
        [LocaleCode.Sindhi]: "Albania",
        [LocaleCode.Sinhala]: "\u0D87\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA",
        [LocaleCode.Slovak]: "Alb\xE1nsko",
        [LocaleCode.Slovenian]: "Albanija",
        [LocaleCode.Somali]: "Albania",
        [LocaleCode.Spanish]: "Albania",
        [LocaleCode.Sudanese]: "Albania",
        [LocaleCode.Swahili]: "Albania",
        [LocaleCode.Swedish]: "Albanien",
        [LocaleCode.Tagalog]: "Albania",
        [LocaleCode.Tajik]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Tamil]: "\u0B85\u0BB2\u0BCD\u0BAA\u0BBE\u0BA9\u0BBF\u0BAF\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Telugu]: "\u0C05\u0C32\u0C4D\u0C2C\u0C3E\u0C28\u0C3F\u0C2F\u0C3E",
        [LocaleCode.Thai]: "\u0E2D\u0E31\u0E25\u0E41\u0E1A\u0E19\u0E34\u0E19\u0E35",
        [LocaleCode.Tibetan]: "\u0F68\u0F63\u0F0B\u0F56\u0F72\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F72",
        [LocaleCode.Turkish]: "Albaniye",
        [LocaleCode.Ukrainian]: "\u0410\u043B\u0431\u0430\u043D\u0456\u044F",
        [LocaleCode.Urdu]: "\u0622\u0644\u0628\u0627\u0646\u06CC",
        [LocaleCode.Uzbek]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Vietnamese]: "Albanie",
        [LocaleCode.Welsh]: "Albania",
        [LocaleCode.Xhosa]: "Albania",
        [LocaleCode.Yiddish]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05E9",
        [LocaleCode.Yoruba]: "Albania",
        [LocaleCode.Zulu]: "Albania"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Tirana",
          total: 2853e3
        }
      },
      geography: {
        area: 28748,
        region: Region.Europe,
        sub_region: SubRegion.SouthernEurope
      },
      government: {
        capital: "Tirana",
        type: "Republic"
      }
    }
  },
  Algeria: {
    i18n: {
      calling_codes: [213],
      currencies: [CurrencyCode.AlgeriaDinar],
      languages: [
        LocaleCode.Arabic,
        LocaleCode.French,
        LocaleCode.Berber,
        LocaleCode.Tamazight
      ],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],
        regions: [TimezoneRegions.AfricaAlgiers],
        timezones: [Timezones.CentralEuropeanTime]
      }
    },
    id: CountryCode.Algeria,
    info: {
      flag: {
        emoji: "\u{1F1E9}\u{1F1FF}",
        emoji_unicode: "U+1F1E9 U+1F1FF",
        svg: "https://www.countryflags.io/dz/flat/64.svg"
      },
      tld: [".dz", ".\u062C\u0632\u0627\u0626\u0631"]
    },
    iso: {
      alpha2: CountryCode.Algeria,
      alpha3: "DZA",
      numeric: "012"
    },
    name: {
      alt_spellings: ["DZ", "Dzayer", "Alg\xE9rie"],
      demonym: "Algerian",
      native: {
        endonym: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
      },
      official: "People's Democratic Republic of Algeria",
      short: "Algeria",
      translations: {
        [LocaleCode.Afrikaans]: "Algerije",
        [LocaleCode.Albanian]: "Algeria",
        [LocaleCode.Amharic]: "\u12A0\u120D\u1300\u122D\u1235",
        [LocaleCode.Arabic]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
        [LocaleCode.Armenian]: "\u0531\u056C\u0563\u0578\u0580\u056B\u0561",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Basque]: "Algeria",
        [LocaleCode.Belarusian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Bengali]: "\u0986\u09B2\u099C\u09C7\u09B0",
        [LocaleCode.Berber]: "\u062C\u0632\u0627\u0626\u0631",
        [LocaleCode.Bhutani]: "\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41",
        [LocaleCode.Bosnian]: "Al\u017Eir",
        [LocaleCode.Breton]: "Algeria",
        [LocaleCode.Bulgarian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Burmese]: "\u1021\u102C\u101B\u1015\u103A",
        [LocaleCode.Catalan]: "Alg\xE8ria",
        [LocaleCode.Chinese]: "\u963F\u5C14\u53CA\u5229\u4E9A",
        [LocaleCode.Croatian]: "Al\u017Eir",
        [LocaleCode.Czech]: "Al\u017E\xEDrsko",
        [LocaleCode.Danish]: "Algeriet",
        [LocaleCode.Dutch]: "Algerije",
        [LocaleCode.English]: "Algeria",
        [LocaleCode.Esperanto]: "Al\u011Derio",
        [LocaleCode.Estonian]: "Al\u017Eira",
        [LocaleCode.Finnish]: "Algeria",
        [LocaleCode.French]: "Alg\xE9rie",
        [LocaleCode.Frisian]: "Algeri\xEB",
        [LocaleCode.Galician]: "Alxeria",
        [LocaleCode.Georgian]: "\u10D0\u10DA\u10D2\u10D8\u10E3\u10E0\u10D8",
        [LocaleCode.German]: "Algerien",
        [LocaleCode.Greenlandic]: "Algeria",
        [LocaleCode.Greek]: "\u0391\u03BB\u03B3\u03B5\u03C1\u03AF\u03B1",
        [LocaleCode.Gujarati]: "\u0A86\u0AB2\u0AC7\u0A97\u0AB0\u0ABF\u0AAF\u0ABE",
        [LocaleCode.Haitian]: "Alg\xE9rie",
        [LocaleCode.Hausa]: "Algeria",
        [LocaleCode.Hebrew]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4",
        [LocaleCode.Hindi]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode.Hungarian]: "Alg\xE1r",
        [LocaleCode.Icelandic]: "Alg\xFAra",
        [LocaleCode.Igbo]: "Algeria",
        [LocaleCode.Indonesian]: "Aljir",
        [LocaleCode.Irish]: "Alg\xE9rie",
        [LocaleCode.Italian]: "Algeria",
        [LocaleCode.Japanese]: "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2",
        [LocaleCode.Javanese]: "Aljir",
        [LocaleCode.Kannada]: "\u0C86\u0CB2\u0CCD\u0C97\u0CC7\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD",
        [LocaleCode.Kazakh]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Khmer]: "\u17A2\u17B6\u179B\u17CB\u1794\u17B6\u1793\u17B8",
        [LocaleCode.Korean]: "\uC54C\uC81C\uB9AC",
        [LocaleCode.Kurdish]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631",
        [LocaleCode.Kyrgyz]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Lao]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E88\u0EB5\u0E99",
        [LocaleCode.Latin]: "Algeria",
        [LocaleCode.Latvian]: "Al\u017E\u012Brija",
        [LocaleCode.Lithuanian]: "Al\u017Eyras",
        [LocaleCode.Luxembourgish]: "Algeria",
        [LocaleCode.Macedonian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Malagasy]: "Alg\xE9rie",
        [LocaleCode.Malay]: "Aljir",
        [LocaleCode.Malayalam]: "\u0D06\u0D32\u0D02\u0D17\u0D47\u0D30\u0D3F\u0D2F\u0D7B",
        [LocaleCode.Maltese]: "Alg\xE9rie",
        [LocaleCode.Maori]: "Algeria",
        [LocaleCode.Marathi]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Nepali]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode.Norwegian]: "Algeria",
        [LocaleCode.Pashto]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
        [LocaleCode.Persian]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0639\u0631\u0628",
        [LocaleCode.Polish]: "Algieria",
        [LocaleCode.Portuguese]: "Alg\xE9ria",
        [LocaleCode.Punjabi]: "\u0A06\u0A32\u0A47\u0A17\u0A40\u0A06",
        [LocaleCode.Romanian]: "Algeria",
        [LocaleCode.Russian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Samoan]: "Algeria",
        [LocaleCode.Sanskrit]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode.Scots]: "Algeria",
        [LocaleCode.Serbian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Sesotho]: "Algeria",
        [LocaleCode.Shona]: "Algeria",
        [LocaleCode.Sindhi]: "Algeria",
        [LocaleCode.Sinhala]: "\u0D86\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA",
        [LocaleCode.Slovak]: "Al\u017E\xEDrsko",
        [LocaleCode.Slovenian]: "Al\u017Eir",
        [LocaleCode.Somali]: "Algeria",
        [LocaleCode.Spanish]: "Algeria",
        [LocaleCode.Sudanese]: "Aljir",
        [LocaleCode.Swahili]: "Aljir",
        [LocaleCode.Swedish]: "Algeriet",
        [LocaleCode.Tagalog]: "Algeria",
        [LocaleCode.Tajik]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Tamil]: "\u0B86\u0BB2\u0BCD\u0B95\u0BC7\u0BB0\u0BBF\u0BAF\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Telugu]: "\u0C06\u0C32\u0C4D\u0C17\u0C47\u0C30\u0C3F\u0C2F\u0C3E",
        [LocaleCode.Thai]: "\u0E2D\u0E32\u0E23\u0E32\u0E01\u0E2D\u0E19",
        [LocaleCode.Tibetan]: "\u0F68\u0F63\u0F9F\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F61\u0F72",
        [LocaleCode.Turkish]: "Cezayir",
        [LocaleCode.Ukrainian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Urdu]: "\u0622\u0644\u062C\u06CC\u0631",
        [LocaleCode.Uzbek]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Vietnamese]: "\u1EA2\u0301\u1EA1\u1EA3\u1EAD\u1EB5",
        [LocaleCode.Welsh]: "Algeria",
        [LocaleCode.Xhosa]: "Algeria",
        [LocaleCode.Yiddish]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4",
        [LocaleCode.Yoruba]: "Algeria",
        [LocaleCode.Zulu]: "Algeria"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Oran",
          total: 371e5
        }
      },
      geography: {
        area: 2381740,
        region: Region.Africa,
        sub_region: SubRegion.NorthernAfrica
      },
      government: {
        capital: "Algiers",
        type: "Republic"
      }
    }
  },
  AmericanSamoa: {
    i18n: {
      calling_codes: [1684],
      currencies: [CurrencyCode.AmericanSamoaTala],
      languages: [LocaleCode.English, LocaleCode.Samoan],
      tz: {
        offsets: [TimezoneOffset.UTC_MINUS_11],
        regions: [TimezoneRegions.PacificSamoa],
        timezones: [Timezones.SamoaStandardTime]
      }
    },
    id: CountryCode.AmericanSamoa,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F8}",
        emoji_unicode: "U+1F1E6 U+1F1F8",
        svg: "https://www.countryflags.io/as/flat/64.svg"
      },
      tld: [".as"]
    },
    iso: {
      alpha2: CountryCode.AmericanSamoa,
      alpha3: "ASM",
      numeric: "016"
    },
    name: {
      alt_spellings: ["AS", "Amerika S\u0101moa", "Amelika S\u0101moa", "S\u0101moa Amelika"],
      demonym: "American Samoan",
      native: {
        endonym: "American Samoa"
      },
      official: "American Samoa",
      short: "American Samoa",
      translations: {
        [LocaleCode.Afrikaans]: "Amerikaans Samoa",
        [LocaleCode.Albanian]: "Samoa Amerikane",
        [LocaleCode.Amharic]: "\u1233\u121E\u12A0\u122D",
        [LocaleCode.Arabic]: "\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629",
        [LocaleCode.Armenian]: "\u054D\u0561\u0570\u0561\u0574\u0561\u056C\u056B\u0561",
        [LocaleCode.Azerbaijani]: "Samoa Amerikana",
        [LocaleCode.Bashkir]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Basque]: "Samoa Amerikana",
        [LocaleCode.Belarusian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Bengali]: "\u0986\u09AE\u09C7\u09B0\u09BF\u0995\u09BE\u09A8 \u09B8\u09BE\u09AE\u09CB\u09AF\u09BC\u09BE",
        [LocaleCode.Berber]: "\u062C\u0632\u0631 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629",
        [LocaleCode.Bhutani]: "\u0F68\u0F62\u0F92\u0FB1\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F58\u0F44\u0F66\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F66\u0F90\u0F56\u0F66\u0F0B\u0F62\u0F92\u0FB1\u0F74\u0F51\u0F0B\u0F46\u0F7A\u0F53\u0F0B\u0F54\u0F7C\u0F0D",
        [LocaleCode.Bosnian]: "Ameri\u010Dka Samoa",
        [LocaleCode.Breton]: "Samoa Amerikan",
        [LocaleCode.Bulgarian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Burmese]: "\u1021\u1019\u1039\u1038\u1019\u101B\u102D\u102F\u1018\u102C\u101E\u102C",
        [LocaleCode.Catalan]: "Samoa Americana",
        [LocaleCode.Chinese]: "\u7F8E\u5C5E\u8428\u6469\u4E9A",
        [LocaleCode.Croatian]: "Ameri\u010Dka Samoa",
        [LocaleCode.Czech]: "Americk\xE1 Samoa",
        [LocaleCode.Danish]: "Amerikansk Samoa",
        [LocaleCode.Dutch]: "Amerikaans Samoa",
        [LocaleCode.English]: "American Samoa",
        [LocaleCode.Esperanto]: "Samoa Amerika",
        [LocaleCode.Estonian]: "Ameerika Samoa",
        [LocaleCode.Finnish]: "Amerikka Samoa",
        [LocaleCode.French]: "American Samoa",
        [LocaleCode.Frisian]: "Amerikaans Samoa",
        [LocaleCode.Galician]: "Samoa Americana",
        [LocaleCode.Georgian]: "\u10D0\u10DB\u10D4\u10E0\u10D8\u10D9\u10D8\u10E1 \u10E1\u10D0\u10DB\u10DD\u10D0",
        [LocaleCode.German]: "Amerikanisch-Samoa",
        [LocaleCode.Greenlandic]: "Amerikaans Samoa",
        [LocaleCode.Greek]: "\u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AE \u03A3\u03B1\u03BC\u03CC\u03B1",
        [LocaleCode.Gujarati]: "\u0A86\u0AAE\u0AC7\u0AB0\u0ABF\u0A95\u0AA8 \u0AB8\u0ABE\u0AAE\u0ACB\u0AAF\u0ABE",
        [LocaleCode.Haitian]: "Amerikaans Samoa",
        [LocaleCode.Hausa]: "Amerikaans Samoa",
        [LocaleCode.Hebrew]: "\u05D0\u05DE\u05E8\u05D9\u05E7\u05E0\u05D9\u05D4 \u05E1\u05DE\u05D5\u05D0\u05D4",
        [LocaleCode.Hindi]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode.Hungarian]: "Amerikai Szamoa",
        [LocaleCode.Icelandic]: "Amerikai Szamoa",
        [LocaleCode.Igbo]: "Ikina Amerika",
        [LocaleCode.Indonesian]: "Samoa Amerika",
        [LocaleCode.Irish]: "Samoa Amerikana",
        [LocaleCode.Italian]: "Samoa Americane",
        [LocaleCode.Japanese]: "\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2",
        [LocaleCode.Javanese]: "Samoa Amerika",
        [LocaleCode.Kannada]: "\u0C85\u0CAE\u0CC7\u0CB0\u0CBF\u0C95\u0CA8\u0CCD \u0CB8\u0CAE\u0CCB\u0C86",
        [LocaleCode.Kazakh]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Khmer]: "\u17A2\u17B6\u1798\u17C9\u17B6\u179A\u17B8\u179F\u17D2\u178F\u1784\u17CB",
        [LocaleCode.Korean]: "\uC544\uBA54\uB9AC\uCE74 \uC0AC\uBAA8\uC544",
        [LocaleCode.Kurdish]: "Amerikaans Samoa",
        [LocaleCode.Kyrgyz]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Lao]: "\u0EAD\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94",
        [LocaleCode.Latin]: "Samoa Amerikana",
        [LocaleCode.Latvian]: "Amerikas Samoa",
        [LocaleCode.Lithuanian]: "Amerikos Samoa",
        [LocaleCode.Luxembourgish]: "Amerikaans Samoa",
        [LocaleCode.Macedonian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Malagasy]: "Samoa Amerika",
        [LocaleCode.Malay]: "Amerika Samo",
        [LocaleCode.Malayalam]: "\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D28\u0D4D\u0D31\u0D4D \u0D38\u0D2E\u0D4B\u0D06",
        [LocaleCode.Maltese]: "Samoa Amerika",
        [LocaleCode.Maori]: "Samoa Amerika",
        [LocaleCode.Marathi]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode.Mongolian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Nepali]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode.Norwegian]: "Amerikansk Samoa",
        [LocaleCode.Pashto]: "\u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627",
        [LocaleCode.Persian]: "\u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627",
        [LocaleCode.Polish]: "Samoa Ameryka\u0144skie",
        [LocaleCode.Portuguese]: "Samoa Americana",
        [LocaleCode.Punjabi]: "\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40 \u0A38\u0A3E\u0A2E\u0A4B\u0A06",
        [LocaleCode.Romanian]: "Samoa americane",
        [LocaleCode.Russian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Samoan]: "Samoa Amerika",
        [LocaleCode.Sanskrit]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode.Scots]: "Amerikaans Samoa",
        [LocaleCode.Serbian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Sesotho]: "Amerikaans Samoa",
        [LocaleCode.Shona]: "Amerikaans Samoa",
        [LocaleCode.Sindhi]: "Amerikaans Samoa",
        [LocaleCode.Sinhala]: "\u0D86\u0DBB\u0DCA\u0DA2\u0DD2\u0DB1\u0DCF\u0DB1\u0DD4 \u0DC3\u0DD0\u0DB8\u0DD0\u0DBD\u0DCA\u0DC0",
        [LocaleCode.Slovak]: "Amerikaans Samoa",
        [LocaleCode.Slovenian]: "Amerikaans Samoa",
        [LocaleCode.Somali]: "Amerikaans Samoa",
        [LocaleCode.Spanish]: "Samoa Americana",
        [LocaleCode.Sudanese]: "Amerikaans Samoa",
        [LocaleCode.Swahili]: "Amerikaans Samoa",
        [LocaleCode.Swedish]: "Amerikansk Samoa",
        [LocaleCode.Tagalog]: "Amerikaans Samoa",
        [LocaleCode.Tajik]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430",
        [LocaleCode.Tamil]: "\u0B85\u0BAE\u0BC6\u0BB0\u0BBF\u0B95\u0BCD \u0B9A\u0BAE\u0BCB\u0BB5\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430",
        [LocaleCode.Telugu]: "\u0C05\u0C2E\u0C46\u0C30\u0C3F\u0C15\u0C4D \u0C38\u0C2E\u0C4B\u0C35\u0C3E",
        [LocaleCode.Thai]: "\u0E2A\u0E2B\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E41\u0E2D\u0E1F\u0E23\u0E34\u0E01\u0E32",
        [LocaleCode.Tibetan]: "\u0F68\u0F7A\u0F0B\u0F62\u0F72\u0F0B\u0F40\u0F0B\u0F68\u0F7A\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F74\u0F0B\u0F61\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F40",
        [LocaleCode.Turkish]: "Amerikan Samoas\u0131",
        [LocaleCode.Ukrainian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Urdu]: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627",
        [LocaleCode.Uzbek]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430",
        [LocaleCode.Vietnamese]: "Amerikaans Samoa",
        [LocaleCode.Welsh]: "Amerikaans Samoa",
        [LocaleCode.Xhosa]: "Amerikaans Samoa",
        [LocaleCode.Yiddish]: "Amerikaans Samoa",
        [LocaleCode.Yoruba]: "Amerikaans Samoa",
        [LocaleCode.Zulu]: "Amerikaans Samoa"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Pago Pago",
          total: 558e3
        }
      },
      geography: {
        area: 199,
        region: Region.Oceania,
        sub_region: SubRegion.Polynesia
      },
      government: {
        capital: "Pago Pago",
        type: "Nonmetropolitan Territory of the US"
      }
    }
  },
  Andorra: {
    i18n: {
      calling_codes: [376],
      currencies: [CurrencyCode.Euro],
      languages: [LocaleCode.Catalan, LocaleCode.Spanish],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],
        regions: [TimezoneRegions.EuropeAndorra],
        timezones: [Timezones.CentralEuropeanTime]
      }
    },
    id: CountryCode.Andorra,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F4}",
        emoji_unicode: "U+1F1E6 U+1F1F4",
        svg: "https://www.countryflags.io/ad/flat/64.svg"
      },
      tld: [".ad"]
    },
    iso: {
      alpha2: CountryCode.Andorra,
      alpha3: "AND",
      numeric: "020"
    },
    name: {
      alt_spellings: ["AD", "Principality of Andorra", "Principat d'Andorra"],
      demonym: "Andorran",
      native: {
        endonym: "Andorra"
      },
      official: "Principality of Andorra",
      short: "Andorra",
      translations: {
        [LocaleCode.Afrikaans]: "Andorra",
        [LocaleCode.Albanian]: "Andorra",
        [LocaleCode.Amharic]: "\u12A0\u1295\u12F6\u122B",
        [LocaleCode.Arabic]: "\u0623\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode.Armenian]: "\u0540\u0561\u0576\u0564\u0561\u0580\u0561\u057E\u0561\u0575\u0584",
        [LocaleCode.Azerbaijani]: "Andorra",
        [LocaleCode.Bashkir]: "\u0410\u043D\u0434\u043E\u0440\u0430",
        [LocaleCode.Basque]: "Andorra",
        [LocaleCode.Belarusian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Bengali]: "\u0985\u09A8\u09CD\u09A1\u09CB\u09B0\u09BE",
        [LocaleCode.Berber]: "\u0623\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode.Bhutani]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B",
        [LocaleCode.Bosnian]: "Andora",
        [LocaleCode.Breton]: "Andorra",
        [LocaleCode.Bulgarian]: "\u0410\u043D\u0434\u043E\u0440\u0430",
        [LocaleCode.Burmese]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102D\u102F\u1038",
        [LocaleCode.Catalan]: "Andorra",
        [LocaleCode.Chinese]: "\u5B89\u9053\u5C14",
        [LocaleCode.Croatian]: "Andora",
        [LocaleCode.Czech]: "Andorra",
        [LocaleCode.Danish]: "Andorra",
        [LocaleCode.Dutch]: "Andorra",
        [LocaleCode.English]: "Andorra",
        [LocaleCode.Esperanto]: "Andora",
        [LocaleCode.Estonian]: "Andorra",
        [LocaleCode.Finnish]: "Andorra",
        [LocaleCode.French]: "Andorra",
        [LocaleCode.Frisian]: "Andorra",
        [LocaleCode.Galician]: "Andorra",
        [LocaleCode.Georgian]: "\u12A0\u1295\u12F6\u122B",
        [LocaleCode.German]: "Andorra",
        [LocaleCode.Greek]: "\u0391\u03BD\u03B4\u03CC\u03C1\u03B1",
        [LocaleCode.Hebrew]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4",
        [LocaleCode.Hindi]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode.Hungarian]: "Andorra",
        [LocaleCode.Icelandic]: "Andorra",
        [LocaleCode.Igbo]: "Andorra",
        [LocaleCode.Indonesian]: "Andorra",
        [LocaleCode.Irish]: "Andorra",
        [LocaleCode.Italian]: "Andorra",
        [LocaleCode.Japanese]: "\u30A2\u30F3\u30C9\u30E9",
        [LocaleCode.Javanese]: "Andorra",
        [LocaleCode.Kannada]: "\u0C85\u0C82\u0CA1\u0CCB\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD",
        [LocaleCode.Kazakh]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Khmer]: "\u17A2\u1784\u17CB\u178A\u17B6\u179A\u17B6",
        [LocaleCode.Korean]: "\uC548\uB3C4\uB77C",
        [LocaleCode.Kurdish]: "Andorra",
        [LocaleCode.Kyrgyz]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Lao]: "\u0EAD\u0EB1\u0E99\u0EC2\u0E94\u0EA3\u0EB2",
        [LocaleCode.Latin]: "Andorra",
        [LocaleCode.Latvian]: "Andora",
        [LocaleCode.Lithuanian]: "Andora",
        [LocaleCode.Luxembourgish]: "Andorra",
        [LocaleCode.Macedonian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Malagasy]: "Andorra",
        [LocaleCode.Malay]: "Andorra",
        [LocaleCode.Malayalam]: "\u0D05\u0D02\u0D21\u0D4B\u0D30\u0D3F\u0D2F\u0D28\u0D4D",
        [LocaleCode.Maltese]: "Andorra",
        [LocaleCode.Maori]: "Andorra",
        [LocaleCode.Marathi]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Nepali]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode.Norwegian]: "Andorra",
        [LocaleCode.Pashto]: "\u0622\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode.Persian]: "\u0622\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode.Polish]: "Andora",
        [LocaleCode.Portuguese]: "Andorra",
        [LocaleCode.Punjabi]: "\u0A05\u0A70\u0A21\u0A4B\u0A30\u0A3E",
        [LocaleCode.Romanian]: "Andorra",
        [LocaleCode.Russian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Samoan]: "Andorra",
        [LocaleCode.Sanskrit]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode.Scots]: "Andorra",
        [LocaleCode.Serbian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Sesotho]: "Andorra",
        [LocaleCode.Shona]: "Andorra",
        [LocaleCode.Sindhi]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode.Sinhala]: "\u0D86\u0DB1\u0DCA\u0DAF\u0DDA",
        [LocaleCode.Slovak]: "Andorra",
        [LocaleCode.Slovenian]: "Andora",
        [LocaleCode.Somali]: "Andorra",
        [LocaleCode.Spanish]: "Andorra",
        [LocaleCode.Sudanese]: "Andorra",
        [LocaleCode.Swahili]: "Andorra",
        [LocaleCode.Swedish]: "Andorra",
        [LocaleCode.Tagalog]: "Andorra",
        [LocaleCode.Tajik]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Tamil]: "\u0B85\u0BA9\u0BCB\u0BB0\u0BCD\u0B9F\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Telugu]: "\u0C05\u0C02\u0C21\u0C4B\u0C30\u0C4D\u0C30\u0C3E",
        [LocaleCode.Thai]: "\u0E2D\u0E31\u0E19\u0E14\u0E2D\u0E23\u0E4C\u0E23\u0E32",
        [LocaleCode.Tibetan]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B",
        [LocaleCode.Turkish]: "Andora",
        [LocaleCode.Ukrainian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Urdu]: "\u0622\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode.Uzbek]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Vietnamese]: "Andorra",
        [LocaleCode.Welsh]: "Andorra",
        [LocaleCode.Xhosa]: "Andorra",
        [LocaleCode.Yiddish]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4",
        [LocaleCode.Yoruba]: "Andorra",
        [LocaleCode.Zulu]: "Andorra"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Andorra la Vella",
          total: 78e3
        }
      },
      geography: {
        area: 468,
        region: Region.Europe,
        sub_region: SubRegion.SouthernEurope
      },
      government: {
        capital: "Andorra la Vella",
        type: "Constitutional Monarchy"
      }
    }
  },
  Angola: {
    i18n: {
      calling_codes: [244],
      currencies: [CurrencyCode.AngolaKwanza],
      languages: [
        LocaleCode.Portuguese,
        LocaleCode.Spanish,
        LocaleCode.French,
        LocaleCode.Italian,
        LocaleCode.German,
        LocaleCode.English
      ],
      tz: {
        offsets: [
          TimezoneOffset.UTC_0,
          TimezoneOffset.UTC_PLUS_1,
          TimezoneOffset.UTC_PLUS_2
        ],
        regions: [TimezoneRegions.AfricaLuanda],
        timezones: [Timezones.WestAfricaTime]
      }
    },
    id: CountryCode.Angola,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1EC}",
        emoji_unicode: "U+1F1E6 U+1F1EC",
        svg: "https://www.countryflags.io/ao/flat/64.svg"
      },
      tld: [".ao"]
    },
    iso: {
      alpha2: CountryCode.Angola,
      alpha3: "AGO",
      numeric: "024"
    },
    name: {
      alt_spellings: ["AO", "Rep\xFAblica de Angola", "\u0281\u025Bpublika de an"],
      demonym: "Angolan",
      native: {
        endonym: "Angola"
      },
      official: "Republic of Angola",
      short: "Angola",
      translations: {
        [LocaleCode.Afrikaans]: "Angola",
        [LocaleCode.Albanian]: "Ang\xF2la",
        [LocaleCode.Amharic]: "\u12A0\u1295\u130E\u120A\u12EB",
        [LocaleCode.Arabic]: "\u0623\u0646\u063A\u0648\u0644\u0627",
        [LocaleCode.Armenian]: "\u0540\u0561\u0576\u0563\u0561\u056C\u0561\u056F\u0561",
        [LocaleCode.Azerbaijani]: "Ang\u0259l",
        [LocaleCode.Bashkir]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Basque]: "Angola",
        [LocaleCode.Belarusian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Bengali]: "\u0985\u0999\u09CD\u0997\u09B2\u09BE",
        [LocaleCode.Berber]: "Angola",
        [LocaleCode.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42",
        [LocaleCode.Bosnian]: "Angola",
        [LocaleCode.Breton]: "Angola",
        [LocaleCode.Bulgarian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Burmese]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A",
        [LocaleCode.Catalan]: "Angola",
        [LocaleCode.Chinese]: "\u5B89\u54E5\u62C9",
        [LocaleCode.Croatian]: "Angola",
        [LocaleCode.Czech]: "Angola",
        [LocaleCode.Danish]: "Angola",
        [LocaleCode.Dutch]: "Angola",
        [LocaleCode.English]: "Angola",
        [LocaleCode.Esperanto]: "Angolo",
        [LocaleCode.Estonian]: "Angola",
        [LocaleCode.Finnish]: "Angola",
        [LocaleCode.French]: "Angola",
        [LocaleCode.Frisian]: "Angola",
        [LocaleCode.Galician]: "Angola",
        [LocaleCode.Georgian]: "\u10D0\u10DC\u10D2\u10DD\u10DA\u10D0",
        [LocaleCode.German]: "Angola",
        [LocaleCode.Greenlandic]: "Angola",
        [LocaleCode.Greek]: "\u0391\u03B3\u03BA\u03CC\u03BB\u03B1",
        [LocaleCode.Gujarati]: "\u0A85\u0A82\u0A97\u0ACB\u0AB2\u0ABE",
        [LocaleCode.Haitian]: "Angola",
        [LocaleCode.Hausa]: "Angola",
        [LocaleCode.Hebrew]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4",
        [LocaleCode.Hindi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode.Hungarian]: "Angola",
        [LocaleCode.Icelandic]: "Angola",
        [LocaleCode.Igbo]: "Angola",
        [LocaleCode.Indonesian]: "Angola",
        [LocaleCode.Irish]: "Angola",
        [LocaleCode.Italian]: "Angola",
        [LocaleCode.Japanese]: "\u30A2\u30F3\u30B4\u30E9",
        [LocaleCode.Javanese]: "Anggol",
        [LocaleCode.Kannada]: "\u0C85\u0C82\u0C97\u0CCB\u0CB2\u0CBE",
        [LocaleCode.Kazakh]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Khmer]: "\u17A2\u1784\u17CB\u1780\u17B6\u179B\u17A2\u1784\u17CB\u1782\u17D2\u179B\u17C1\u179F",
        [LocaleCode.Korean]: "\uC559\uACE8\uB77C",
        [LocaleCode.Kurdish]: "Angola",
        [LocaleCode.Kyrgyz]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Lao]: "\u0EAD\u0EB0\u0E99\u0EB2\u0E94\u0EB2",
        [LocaleCode.Latin]: "Angola",
        [LocaleCode.Latvian]: "Angola",
        [LocaleCode.Lithuanian]: "Angola",
        [LocaleCode.Luxembourgish]: "Angola",
        [LocaleCode.Macedonian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Malagasy]: "Angola",
        [LocaleCode.Malay]: "Angola",
        [LocaleCode.Malayalam]: "\u0D05\u0D02\u0D17\u0D4B\u0D33\u0D3E",
        [LocaleCode.Maltese]: "Angola",
        [LocaleCode.Maori]: "Angola",
        [LocaleCode.Marathi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Nepali]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode.Norwegian]: "Angola",
        [LocaleCode.Pashto]: "\u0627\u0646\u06AB\u0648\u0644\u0627",
        [LocaleCode.Persian]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode.Polish]: "Angola",
        [LocaleCode.Portuguese]: "Angola",
        [LocaleCode.Punjabi]: "\u0A05\u0A19\u0A4D\u0A17\u0A4B\u0A32\u0A3E",
        [LocaleCode.Romanian]: "Angole",
        [LocaleCode.Russian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Samoan]: "Angola",
        [LocaleCode.Sanskrit]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode.Scots]: "Angola",
        [LocaleCode.Serbian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Sesotho]: "Angola",
        [LocaleCode.Shona]: "Angola",
        [LocaleCode.Sindhi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode.Sinhala]: "\u0D86\u0D9C\u0DBD\u0DD2\u0DBA\u0DCF\u0DC0",
        [LocaleCode.Slovak]: "Angola",
        [LocaleCode.Slovenian]: "Angola",
        [LocaleCode.Somali]: "Angola",
        [LocaleCode.Spanish]: "Angola",
        [LocaleCode.Sudanese]: "Angola",
        [LocaleCode.Swahili]: "Angola",
        [LocaleCode.Swedish]: "Angola",
        [LocaleCode.Tagalog]: "Angola",
        [LocaleCode.Tajik]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Tamil]: "\u0B85\u0B99\u0BCD\u0B95\u0BCB\u0BB2\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Telugu]: "\u0C05\u0C02\u0C17\u0C4B\u0C32\u0C3E",
        [LocaleCode.Thai]: "\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E32\u0E23\u0E2D\u0E32\u0E19\u0E32\u0E21\u0E34\u0E2A\u0E16\u0E32\u0E19",
        [LocaleCode.Tibetan]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B",
        [LocaleCode.Turkish]: "Angola",
        [LocaleCode.Ukrainian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Urdu]: "\u0627\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode.Uzbek]: "Angola",
        [LocaleCode.Vietnamese]: "Angola",
        [LocaleCode.Xhosa]: "Angola",
        [LocaleCode.Welsh]: "Angola",
        [LocaleCode.Yiddish]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4",
        [LocaleCode.Yoruba]: "Angola",
        [LocaleCode.Zulu]: "Angola"
      }
    }
  },
  Anguilla: {
    i18n: {
      calling_codes: [1264],
      currencies: [
        CurrencyCode.DominicaDollar,
        CurrencyCode.EastCaribbeanDollar,
        CurrencyCode.Euro,
        CurrencyCode.UnitedStatesDollar,
        CurrencyCode.BritishPound
      ],
      languages: [LocaleCode.English, LocaleCode.Spanish],
      tz: {
        offsets: [TimezoneOffset.UTC_MINUS_4],
        regions: [TimezoneRegions.AmericaAnguilla],
        timezones: [Timezones.AtlanticStandardTime]
      }
    },
    id: CountryCode.Anguilla,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1EC}",
        emoji_unicode: "U+1F1E6 U+1F1EC",
        svg: "https://www.countryflags.io/ai/flat/64.svg"
      },
      tld: [".ai"]
    },
    iso: {
      alpha2: CountryCode.Anguilla,
      alpha3: "AIA",
      numeric: "660"
    },
    name: {
      alt_spellings: ["AI"],
      demonym: "Anguillian",
      native: {
        endonym: "Anguilla"
      },
      official: "Anguilla",
      short: "Anguilla",
      translations: {
        [LocaleCode.Afrikaans]: "Anguilla",
        [LocaleCode.Albanian]: "Anguilla",
        [LocaleCode.Amharic]: "\u12A0\u1295\u1309\u120B",
        [LocaleCode.Arabic]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627",
        [LocaleCode.Armenian]: "\u0531\u0576\u0563\u056B\u056C\u0561",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Basque]: "Angila",
        [LocaleCode.Belarusian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Bengali]: "\u0985\u0999\u09CD\u0997\u09C0\u09B2\u09BE",
        [LocaleCode.Berber]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627",
        [LocaleCode.Bhutani]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B",
        [LocaleCode.Bosnian]: "Angila",
        [LocaleCode.Breton]: "Angila",
        [LocaleCode.Bulgarian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Burmese]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A",
        [LocaleCode.Catalan]: "Angilla",
        [LocaleCode.Chinese]: "\u5B89\u572D\u62C9",
        [LocaleCode.Croatian]: "Angila",
        [LocaleCode.Czech]: "Anguilla",
        [LocaleCode.Danish]: "Anguilla",
        [LocaleCode.Dutch]: "Anguilla",
        [LocaleCode.English]: "Anguilla",
        [LocaleCode.Esperanto]: "Angila",
        [LocaleCode.Estonian]: "Anguilla",
        [LocaleCode.Finnish]: "Anguilla",
        [LocaleCode.French]: "Anguilla",
        [LocaleCode.Frisian]: "Angila",
        [LocaleCode.Galician]: "Anguilla",
        [LocaleCode.Georgian]: "\u10D0\u10DC\u10D2\u10D8\u10DA\u10D0",
        [LocaleCode.German]: "Anguilla",
        [LocaleCode.Greenlandic]: "Anguilla",
        [LocaleCode.Greek]: "\u0391\u03BD\u03B3\u03BA\u03C5\u03BB\u03AC",
        [LocaleCode.Gujarati]: "\u0A85\u0A82\u0A97\u0ACD\u0AAF\u0ABE\u0AB2\u0ABE",
        [LocaleCode.Haitian]: "Anguilla",
        [LocaleCode.Hausa]: "Anguilla",
        [LocaleCode.Hebrew]: "\u05D0\u05E0\u05D2\u05D5\u05D9\u05D0\u05DC\u05D4",
        [LocaleCode.Hindi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode.Hungarian]: "Anguilla",
        [LocaleCode.Icelandic]: "Anguilla",
        [LocaleCode.Igbo]: "Anguilla",
        [LocaleCode.Indonesian]: "Anguilla",
        [LocaleCode.Irish]: "Anguilla",
        [LocaleCode.Italian]: "Anguilla",
        [LocaleCode.Japanese]: "\u30A2\u30F3\u30AE\u30E9",
        [LocaleCode.Javanese]: "Anguilla",
        [LocaleCode.Kannada]: "\u0C85\u0C82\u0C97\u0CCD\u0CB5\u0CC7\u0CB2\u0CBE",
        [LocaleCode.Kazakh]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Khmer]: "\u17A2\u1784\u17CB\u1780\u17B6\u179A\u17A0\u17D2\u1782\u17B8\u1798",
        [LocaleCode.Korean]: "\uC575\uADC8\uB77C",
        [LocaleCode.Kurdish]: "Anguilla",
        [LocaleCode.Kyrgyz]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Lao]: "\u0EAD\u0EB0\u0E99\u0EB0\u0E88\u0EB3",
        [LocaleCode.Latin]: "Anguilla",
        [LocaleCode.Latvian]: "Anguilla",
        [LocaleCode.Lithuanian]: "Anguilla",
        [LocaleCode.Luxembourgish]: "Angilla",
        [LocaleCode.Macedonian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Malagasy]: "Angila",
        [LocaleCode.Malay]: "Anguilla",
        [LocaleCode.Malayalam]: "\u0D05\u0D02\u0D17\u0D4D\u0D35\u0D47\u0D32\u0D3E",
        [LocaleCode.Maltese]: "Anguilla",
        [LocaleCode.Maori]: "Anguilla",
        [LocaleCode.Marathi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Nepali]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode.Norwegian]: "Anguilla",
        [LocaleCode.Pashto]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode.Persian]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode.Polish]: "Anguilla",
        [LocaleCode.Portuguese]: "Anguilla",
        [LocaleCode.Punjabi]: "\u0A05\u0A02\u0A17\u0A40\u0A32\u0A3E",
        [LocaleCode.Romanian]: "Anguilla",
        [LocaleCode.Russian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Samoan]: "Anguilla",
        [LocaleCode.Sanskrit]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode.Scots]: "Anguilla",
        [LocaleCode.Serbian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Sesotho]: "Anguilla",
        [LocaleCode.Shona]: "Anguilla",
        [LocaleCode.Sindhi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode.Sinhala]: "\u0D86\u0D82\u0D9C\u0DD2\u0DBD\u0DCF\u0DC0",
        [LocaleCode.Slovak]: "Anguilla",
        [LocaleCode.Slovenian]: "Anguilla",
        [LocaleCode.Somali]: "Anguilla",
        [LocaleCode.Spanish]: "Anguilla",
        [LocaleCode.Sudanese]: "Anguilla",
        [LocaleCode.Swahili]: "Anguilla",
        [LocaleCode.Swedish]: "Anguilla",
        [LocaleCode.Tagalog]: "Anguilla",
        [LocaleCode.Tajik]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Tamil]: "\u0B85\u0B99\u0BCD\u0B95\u0BC8\u0BB2\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Telugu]: "\u0C05\u0C02\u0C17\u0C4D\u0C35\u0C47\u0C32\u0C3E",
        [LocaleCode.Thai]: "\u0E2D\u0E31\u0E07\u0E01\u0E32\u0E25\u0E32",
        [LocaleCode.Tibetan]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B",
        [LocaleCode.Turkish]: "Anguilla",
        [LocaleCode.Ukrainian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Urdu]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode.Uzbek]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Vietnamese]: "Anguilla",
        [LocaleCode.Welsh]: "Anguilla",
        [LocaleCode.Xhosa]: "Anguilla",
        [LocaleCode.Yiddish]: "Anguilla",
        [LocaleCode.Yoruba]: "Anguilla",
        [LocaleCode.Zulu]: "Anguilla"
      }
    }
  },
  Antarctica: {
    i18n: {
      calling_codes: [672],
      currencies: [CurrencyCode.UnitedStatesDollar, CurrencyCode.Euro],
      languages: [
        LocaleCode.English,
        LocaleCode.Spanish,
        LocaleCode.French,
        LocaleCode.Portuguese,
        LocaleCode.Italian,
        LocaleCode.Dutch,
        LocaleCode.German,
        LocaleCode.Swedish,
        LocaleCode.Norwegian,
        LocaleCode.Danish,
        LocaleCode.Finnish
      ],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],
        regions: [
          TimezoneRegions.AntarcticaCasey,
          TimezoneRegions.AntarcticaDavis,
          TimezoneRegions.AntarcticaMcMurdo,
          TimezoneRegions.AntarcticaPalmer,
          TimezoneRegions.AntarcticaRothera
        ],
        timezones: [
          Timezones.AtlanticStandardTime,
          Timezones.CentralTime,
          Timezones.EasternTime,
          Timezones.AtlanticStandardTime,
          Timezones.AzoresStandardTime,
          Timezones.NewfoundlandStandardTime
        ]
      }
    },
    id: CountryCode.Antarctica,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F6}",
        emoji_unicode: "U+1F1E6 U+1F1F6",
        svg: "https://www.countryflags.io/aq/flat/64.svg"
      },
      tld: [".aq"]
    },
    iso: {
      alpha2: CountryCode.Antarctica,
      alpha3: "ATA",
      numeric: "010"
    },
    name: {
      alt_spellings: ["AQ"],
      demonym: "Antarctican",
      native: {
        endonym: "Antarctica"
      },
      official: "Antarctica",
      short: "Antarctica",
      translations: {
        [LocaleCode.Afrikaans]: "Antarctica",
        [LocaleCode.Albanian]: "Antarktika",
        [LocaleCode.Amharic]: "\u12A0\u1295\u1272\u120D\u12AB\u1293",
        [LocaleCode.Arabic]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627",
        [LocaleCode.Armenian]: "\u0540\u0561\u0576\u0561\u0580\u0561\u057F\u056F\u0578",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Basque]: "Antarktika",
        [LocaleCode.Belarusian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Bengali]: "\u0985\u09A8\u09CD\u09A4\u09B0\u09BE\u09B6\u09CD\u09AC\u09C0",
        [LocaleCode.Berber]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627",
        [LocaleCode.Bhutani]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B",
        [LocaleCode.Bosnian]: "Antarktika",
        [LocaleCode.Breton]: "Antarktika",
        [LocaleCode.Bulgarian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Burmese]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102E\u1038\u101A\u102C\u1038",
        [LocaleCode.Catalan]: "Ant\xE0rtida",
        [LocaleCode.Chinese]: "\u5357\u6781\u6D32",
        [LocaleCode.Croatian]: "Antarktika",
        [LocaleCode.Czech]: "Antarktida",
        [LocaleCode.Danish]: "Antarktis",
        [LocaleCode.Dutch]: "Antarctica",
        [LocaleCode.English]: "Antarctica",
        [LocaleCode.Esperanto]: "Antarktika",
        [LocaleCode.Estonian]: "Antarktika",
        [LocaleCode.Finnish]: "Antarktis",
        [LocaleCode.French]: "Antarctica",
        [LocaleCode.Frisian]: "Antarktis",
        [LocaleCode.Galician]: "Ant\xE1rtida",
        [LocaleCode.Georgian]: "\u10D0\u10DC\u10E2\u10D0\u10E0\u10E5\u10E2\u10D8\u10D9\u10D0",
        [LocaleCode.German]: "Antarktis",
        [LocaleCode.Greenlandic]: "Antarktis",
        [LocaleCode.Greek]: "\u0391\u03BD\u03C4\u03B1\u03C1\u03BA\u03C4\u03B9\u03BA\u03AE",
        [LocaleCode.Gujarati]: "\u0A85\u0AA8\u0ACD\u0AA4\u0AB0\u0ABE\u0AB6\u0ACD\u0AB5\u0AC0",
        [LocaleCode.Haitian]: "Antarctica",
        [LocaleCode.Hausa]: "Antarktika",
        [LocaleCode.Hebrew]: "\u05D0\u05E0\u05D8\u05E8\u05E7\u05D8\u05D9\u05E7\u05D4",
        [LocaleCode.Hindi]: "\u0905\u0928\u094D\u0924\u0930\u0915\u094D\u0937\u0947\u0924\u094D\u0930",
        [LocaleCode.Hungarian]: "Antarktika",
        [LocaleCode.Icelandic]: "Antarktis",
        [LocaleCode.Igbo]: "Antarktika",
        [LocaleCode.Indonesian]: "Antarktika",
        [LocaleCode.Irish]: "Antarktika",
        [LocaleCode.Italian]: "Antartide",
        [LocaleCode.Japanese]: "\u5357\u6975",
        [LocaleCode.Javanese]: "Antarktika",
        [LocaleCode.Kannada]: "\u0C85\u0CA8\u0CCD\u0CA4\u0CB0\u0CBE\u0CB6\u0CCD\u0CB5\u0CBF",
        [LocaleCode.Kazakh]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Khmer]: "\u17A2\u1784\u17CB\u179F\u17D2\u1780\u179A\u17A2\u17B6\u1798\u17C9\u17BB\u1799",
        [LocaleCode.Korean]: "\uC564\uD2F0\uCE74\uD1A0\uB2C9",
        [LocaleCode.Kurdish]: "Antarktika",
        [LocaleCode.Kyrgyz]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Lao]: "\u0EAD\u0EB0\u0E99\u0EAD\u0EA5\u0EB2\u0E81\u0EB4\u0EAA\u0EB0",
        [LocaleCode.Latin]: "Antarctica",
        [LocaleCode.Latvian]: "Antarktika",
        [LocaleCode.Lithuanian]: "Antarktis",
        [LocaleCode.Luxembourgish]: "Antarktis",
        [LocaleCode.Macedonian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Malagasy]: "Antarctica",
        [LocaleCode.Malay]: "Antarktika",
        [LocaleCode.Malayalam]: "\u0D05\u0D28\u0D4D\u0D24\u0D30\u0D3E\u0D36\u0D4D\u0D35\u0D3F",
        [LocaleCode.Maltese]: "Antarktika",
        [LocaleCode.Maori]: "Antarktika",
        [LocaleCode.Marathi]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Nepali]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E",
        [LocaleCode.Norwegian]: "Antarktis",
        [LocaleCode.Pashto]: "\u0627\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627",
        [LocaleCode.Persian]: "\u0622\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627",
        [LocaleCode.Polish]: "Antarktyka",
        [LocaleCode.Portuguese]: "Ant\xE1rtida",
        [LocaleCode.Punjabi]: "\u0A05\u0A28\u0A4D\u0A24\u0A30\u0A3E\u0A36\u0A3F\u0A15\u0A3E",
        [LocaleCode.Romanian]: "Antarctica",
        [LocaleCode.Russian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Samoan]: "Antarktika",
        [LocaleCode.Sanskrit]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E",
        [LocaleCode.Scots]: "Antarktika",
        [LocaleCode.Serbian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Sesotho]: "Antarktika",
        [LocaleCode.Shona]: "Antarktika",
        [LocaleCode.Sindhi]: "Antarktika",
        [LocaleCode.Sinhala]: "\u0D86\u0DB1\u0DCA\u0DA7\u0DCA\u0DA7\u0DD2\u0D9A\u0DCF\u0DC0",
        [LocaleCode.Slovak]: "Antarktika",
        [LocaleCode.Slovenian]: "Antarktika",
        [LocaleCode.Somali]: "Antarktika",
        [LocaleCode.Spanish]: "Ant\xE1rtida",
        [LocaleCode.Sudanese]: "Antarktika",
        [LocaleCode.Swahili]: "Antarktika",
        [LocaleCode.Swedish]: "Antarktis",
        [LocaleCode.Tagalog]: "Antarktika",
        [LocaleCode.Tajik]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Tamil]: "\u0B85\u0BA9\u0BCD\u0BA4\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BBF\u0B95\u0BCD",
        [LocaleCode.Tatar]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Telugu]: "\u0C05\u0C28\u0C4D\u0C24\u0C30\u0C3E\u0C36\u0C4D\u0C35\u0C3F\u0C15\u0C3E",
        [LocaleCode.Thai]: "\u0E20\u0E39\u0E21\u0E34\u0E20\u0E32\u0E04\u0E2D\u0E32\u0E19\u0E31\u0E19\u0E15\u0E34\u0E01\u0E32",
        [LocaleCode.Tibetan]: "\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72\u0F0B\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72",
        [LocaleCode.Turkish]: "Antarktika",
        [LocaleCode.Ukrainian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Urdu]: "\u0627\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627",
        [LocaleCode.Uzbek]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Vietnamese]: "\u0110\u1EA5t Antarktik",
        [LocaleCode.Welsh]: "Antarktika",
        [LocaleCode.Xhosa]: "Antarktika",
        [LocaleCode.Yiddish]: "Antarktika",
        [LocaleCode.Yoruba]: "Antarktika",
        [LocaleCode.Zulu]: "Antarktika"
      }
    }
  },
  Armenia: {
    i18n: {
      calling_codes: [374],
      currencies: [CurrencyCode.ArmeniaDram],
      languages: [LocaleCode.Armenian],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_4],
        regions: [TimezoneRegions.AsiaJakarta],
        timezones: [Timezones.ArmeniaTime]
      }
    },
    id: CountryCode.Armenia,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F2}",
        emoji_unicode: "U+1F1E6 U+1F1F2",
        svg: "https://www.countryflags.io/am/flat/64.svg"
      },
      tld: [".am"]
    },
    iso: {
      alpha2: CountryCode.Armenia,
      alpha3: "ARM",
      numeric: "051"
    },
    name: {
      alt_spellings: ["AM", "Hayastan", "Republic of Armenia", "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"],
      demonym: "Armenian",
      native: {
        endonym: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"
      },
      official: "Republic of Armenia",
      short: "Armenia",
      translations: {
        [LocaleCode.Afrikaans]: "Armeni\xEB",
        [LocaleCode.Albanian]: "Armenia",
        [LocaleCode.Amharic]: "\u12A0\u121B\u122D\u129B",
        [LocaleCode.Arabic]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627",
        [LocaleCode.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Basque]: "Arm\xE9nia",
        [LocaleCode.Belarusian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Bengali]: "\u0986\u09B0\u09CD\u09AE\u09C7\u09A8\u09BF",
        [LocaleCode.Berber]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627",
        [LocaleCode.Bhutani]: "\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42",
        [LocaleCode.Bosnian]: "Armenija",
        [LocaleCode.Breton]: "Armeni\xEB",
        [LocaleCode.Bulgarian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Burmese]: "\u1021\u102C\u1019\u1010\u102D\u1010\u1039",
        [LocaleCode.Catalan]: "Arm\xE8nia",
        [LocaleCode.Chinese]: "\u4E9A\u7F8E\u5C3C\u4E9A",
        [LocaleCode.Croatian]: "Armenija",
        [LocaleCode.Czech]: "Arm\xE9nie",
        [LocaleCode.Danish]: "Armenien",
        [LocaleCode.Dutch]: "Armeni\xEB",
        [LocaleCode.English]: "Armenia",
        [LocaleCode.Esperanto]: "Armenia",
        [LocaleCode.Estonian]: "Armeenia",
        [LocaleCode.Finnish]: "Armenia",
        [LocaleCode.French]: "Armenia",
        [LocaleCode.Frisian]: "Armeenia",
        [LocaleCode.Galician]: "Arm\xE9nia",
        [LocaleCode.Georgian]: "\u10D0\u10E0\u10DB\u10DD\u10DC\u10D8",
        [LocaleCode.German]: "Armenien",
        [LocaleCode.Greenlandic]: "Armenia",
        [LocaleCode.Greek]: "\u0391\u03C1\u03BC\u03B5\u03BD\u03AF\u03B1",
        [LocaleCode.Gujarati]: "\u0A85\u0AB0\u0ACD\u0AAE\u0AC7\u0AA8\u0ABF",
        [LocaleCode.Haitian]: "Armenia",
        [LocaleCode.Hausa]: "Armenia",
        [LocaleCode.Hebrew]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4",
        [LocaleCode.Hindi]: "\u0905\u05E8\u05DE\u05E0\u093F\u092F\u093E",
        [LocaleCode.Hungarian]: "\xD6rm\xE9nyorsz\xE1g",
        [LocaleCode.Icelandic]: "Armenia",
        [LocaleCode.Igbo]: "Armenia",
        [LocaleCode.Indonesian]: "Armenia",
        [LocaleCode.Irish]: "Armenia",
        [LocaleCode.Italian]: "Armenia",
        [LocaleCode.Japanese]: "\u30A2\u30EB\u30E1\u30CB\u30A2",
        [LocaleCode.Javanese]: "Armenia",
        [LocaleCode.Kannada]: "\u0C85\u0CB0\u0CCD\u0CAE\u0CC7\u0CA8\u0CBF",
        [LocaleCode.Kazakh]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Khmer]: "\u17A2\u17B6\u1798\u17C9\u17C1\u179A\u17B8",
        [LocaleCode.Korean]: "\uC544\uB974\uBA54\uB2C8\uC544",
        [LocaleCode.Kurdish]: "Armenia",
        [LocaleCode.Kyrgyz]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Lao]: "\u0EAD\u0EB2\u0EAB\u0EBC\u0E99\u0EB2",
        [LocaleCode.Latin]: "Armenia",
        [LocaleCode.Latvian]: "Armeenia",
        [LocaleCode.Lithuanian]: "Arm\u0117nija",
        [LocaleCode.Luxembourgish]: "Armenien",
        [LocaleCode.Macedonian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430",
        [LocaleCode.Malagasy]: "Armenia",
        [LocaleCode.Malay]: "Armenia",
        [LocaleCode.Malayalam]: "\u0D05\u0D30\u0D4D\u200D\u0D2E\u0D47\u0D28\u0D3F",
        [LocaleCode.Maltese]: "Armenia",
        [LocaleCode.Maori]: "Armenia",
        [LocaleCode.Marathi]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F",
        [LocaleCode.Mongolian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Nepali]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F",
        [LocaleCode.Norwegian]: "Armenia",
        [LocaleCode.Pashto]: "\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627",
        [LocaleCode.Persian]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Polish]: "Armenia",
        [LocaleCode.Portuguese]: "Armenia",
        [LocaleCode.Punjabi]: "\u0A05\u0A30\u0A2E\u0A40\u0A28\u0A40",
        [LocaleCode.Romanian]: "Armenia",
        [LocaleCode.Russian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Samoan]: "Armenia",
        [LocaleCode.Sanskrit]: "Armenia",
        [LocaleCode.Scots]: "Armenia",
        [LocaleCode.Serbian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430",
        [LocaleCode.Sesotho]: "Armenia",
        [LocaleCode.Shona]: "Armenia",
        [LocaleCode.Sindhi]: "Armenia",
        [LocaleCode.Sinhala]: "\u0D86\u0DBB\u0DCA\u0DB8\u0DD3\u0DB1\u0DD2",
        [LocaleCode.Slovak]: "Armenia",
        [LocaleCode.Slovenian]: "Armenija",
        [LocaleCode.Somali]: "Armenia",
        [LocaleCode.Spanish]: "Armenia",
        [LocaleCode.Sudanese]: "Armenia",
        [LocaleCode.Swahili]: "Armenia",
        [LocaleCode.Swedish]: "Armenien",
        [LocaleCode.Tagalog]: "Armenia",
        [LocaleCode.Tajik]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Tamil]: "\u0B85\u0BB0\u0BCD\u0BAE\u0BC7\u0BA9\u0BBF\u0BAF\u0BA9\u0BCD",
        [LocaleCode.Tatar]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Telugu]: "\u0C05\u0C30\u0C4D\u0C2E\u0C47\u0C28\u0C3F",
        [LocaleCode.Thai]: "\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E21\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19",
        [LocaleCode.Tibetan]: "\u0F68\u0F62\u0F0B\u0F58\u0F7A\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F74\u0F0D",
        [LocaleCode.Turkish]: "Ermenistan",
        [LocaleCode.Ukrainian]: "\u0410\u0440\u043C\u0435\u043D\u0456\u044F",
        [LocaleCode.Urdu]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Uzbek]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Vietnamese]: "Armenia",
        [LocaleCode.Welsh]: "Armenia",
        [LocaleCode.Xhosa]: "Armenia",
        [LocaleCode.Yiddish]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4",
        [LocaleCode.Yoruba]: "Armenia",
        [LocaleCode.Zulu]: "Armenia"
      }
    }
  },
  SomeCountry: {
    i18n: {
      calling_codes: [],
      currencies: [],
      languages: [],
      tz: {
        offsets: [],
        regions: [],
        timezones: []
      }
    },
    id: CountryCode.AmericanSamoa,
    info: {
      flag: {
        emoji: "",
        emoji_unicode: "",
        svg: ""
      },
      tld: []
    },
    iso: {
      alpha2: CountryCode.AmericanSamoa,
      alpha3: "",
      numeric: ""
    },
    name: {
      alt_spellings: [],
      demonym: "",
      native: {
        endonym: ""
      },
      official: "",
      short: "",
      translations: {
        [LocaleCode.Afrikaans]: "",
        [LocaleCode.Albanian]: "",
        [LocaleCode.Amharic]: "",
        [LocaleCode.Arabic]: "",
        [LocaleCode.Armenian]: "",
        [LocaleCode.Azerbaijani]: "",
        [LocaleCode.Bashkir]: "",
        [LocaleCode.Basque]: "",
        [LocaleCode.Belarusian]: "",
        [LocaleCode.Bengali]: "",
        [LocaleCode.Berber]: "",
        [LocaleCode.Bhutani]: "",
        [LocaleCode.Bosnian]: "",
        [LocaleCode.Breton]: "",
        [LocaleCode.Bulgarian]: "",
        [LocaleCode.Burmese]: "",
        [LocaleCode.Catalan]: "",
        [LocaleCode.Chinese]: "",
        [LocaleCode.Croatian]: "",
        [LocaleCode.Czech]: "",
        [LocaleCode.Danish]: "",
        [LocaleCode.Dutch]: "",
        [LocaleCode.English]: "",
        [LocaleCode.Esperanto]: "",
        [LocaleCode.Estonian]: "",
        [LocaleCode.Finnish]: "",
        [LocaleCode.French]: "",
        [LocaleCode.Frisian]: "",
        [LocaleCode.Galician]: "",
        [LocaleCode.Georgian]: "",
        [LocaleCode.German]: "",
        [LocaleCode.Greenlandic]: "",
        [LocaleCode.Greek]: "",
        [LocaleCode.Gujarati]: "",
        [LocaleCode.Haitian]: "",
        [LocaleCode.Hausa]: "",
        [LocaleCode.Hebrew]: "",
        [LocaleCode.Hindi]: "",
        [LocaleCode.Hungarian]: "",
        [LocaleCode.Icelandic]: "",
        [LocaleCode.Igbo]: "",
        [LocaleCode.Indonesian]: "",
        [LocaleCode.Irish]: "",
        [LocaleCode.Italian]: "",
        [LocaleCode.Japanese]: "",
        [LocaleCode.Javanese]: "",
        [LocaleCode.Kannada]: "",
        [LocaleCode.Kazakh]: "",
        [LocaleCode.Khmer]: "",
        [LocaleCode.Korean]: "",
        [LocaleCode.Kurdish]: "",
        [LocaleCode.Kyrgyz]: "",
        [LocaleCode.Lao]: "",
        [LocaleCode.Latin]: "",
        [LocaleCode.Latvian]: "",
        [LocaleCode.Lithuanian]: "",
        [LocaleCode.Luxembourgish]: "",
        [LocaleCode.Macedonian]: "",
        [LocaleCode.Malagasy]: "",
        [LocaleCode.Malay]: "",
        [LocaleCode.Malayalam]: "",
        [LocaleCode.Maltese]: "",
        [LocaleCode.Maori]: "",
        [LocaleCode.Marathi]: "",
        [LocaleCode.Mongolian]: "",
        [LocaleCode.Nepali]: "",
        [LocaleCode.Norwegian]: "",
        [LocaleCode.Pashto]: "",
        [LocaleCode.Persian]: "",
        [LocaleCode.Polish]: "",
        [LocaleCode.Portuguese]: "",
        [LocaleCode.Punjabi]: "",
        [LocaleCode.Romanian]: "",
        [LocaleCode.Russian]: "",
        [LocaleCode.Samoan]: "",
        [LocaleCode.Sanskrit]: "",
        [LocaleCode.Scots]: "",
        [LocaleCode.Serbian]: "",
        [LocaleCode.Sesotho]: "",
        [LocaleCode.Shona]: "",
        [LocaleCode.Sindhi]: "",
        [LocaleCode.Sinhala]: "",
        [LocaleCode.Slovak]: "",
        [LocaleCode.Slovenian]: "",
        [LocaleCode.Somali]: "",
        [LocaleCode.Spanish]: "",
        [LocaleCode.Sudanese]: "",
        [LocaleCode.Swahili]: "",
        [LocaleCode.Swedish]: "",
        [LocaleCode.Tagalog]: "",
        [LocaleCode.Tajik]: "",
        [LocaleCode.Tamil]: "",
        [LocaleCode.Tatar]: "",
        [LocaleCode.Telugu]: "",
        [LocaleCode.Thai]: "",
        [LocaleCode.Tibetan]: "",
        [LocaleCode.Turkish]: "",
        [LocaleCode.Ukrainian]: "",
        [LocaleCode.Urdu]: "",
        [LocaleCode.Uzbek]: "",
        [LocaleCode.Vietnamese]: "",
        [LocaleCode.Welsh]: "",
        [LocaleCode.Xhosa]: "",
        [LocaleCode.Yiddish]: "",
        [LocaleCode.Yoruba]: "",
        [LocaleCode.Zulu]: ""
      }
    }
  }
});
({
  id: LocaleCode.Afrikaans,
  language: {
    code: LanguageCode.Afrikaans,
    name: "Afrikaans",
    native: "Afrikaans"
  },
  name: "Afrikaans",
  native_name: "Afrikaans",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.AfrikaansSouthAfrica,
  language: {
    code: LanguageCode.Afrikaans,
    name: "Afrikaans",
    native: "Afrikaans"
  },
  name: "Afrikaans (South Africa)",
  native_name: "Afrikaans (Suid-Afrika)",
  rtl: false
});
({
  id: LocaleCode.Albanian,
  language: {
    code: LanguageCode.Albanian,
    name: "Albanian",
    native: "Shqip"
  },
  name: "Albanian",
  native_name: "Shqip",
  rtl: false
});
({
  country: {
    code: CountryCode.Albania,
    name: "Albania",
    native: "Shqip\xEBria"
  },
  id: LocaleCode.AlbanianAlbania,
  language: {
    code: LanguageCode.Albanian,
    name: "Albanian",
    native: "Shqip"
  },
  name: "Albanian (Albania)",
  native_name: "Shqip (Shqip\xEBria)",
  rtl: false
});
({
  id: LocaleCode.Amharic,
  language: {
    code: LanguageCode.Amharic,
    name: "Amharic",
    native: "\u12A0\u121B\u122D\u129B"
  },
  name: "Amharic",
  native_name: "\u12A0\u121B\u122D\u129B",
  rtl: false
});
({
  country: {
    code: CountryCode.Ethiopia,
    name: "Ethiopia",
    native: "\u12A2\u1275\u12EE\u1335\u12EB"
  },
  id: LocaleCode.AmharicEthiopia,
  language: {
    code: LanguageCode.Amharic,
    name: "Amharic",
    native: "\u12A0\u121B\u122D\u129B"
  },
  name: "Amharic (Ethiopia)",
  native_name: "\u12A0\u121B\u122D\u129B (\u12A2\u1275\u12EE\u1335\u12EB)",
  rtl: false
});
({
  id: LocaleCode.Arabic,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
  rtl: true
});
({
  country: {
    code: CountryCode.Algeria,
    name: "Algeria",
    native: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
  },
  id: LocaleCode.ArabicAlgeria,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Algeria)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u062C\u0632\u0627\u0626\u0631)",
  rtl: true
});
({
  country: {
    code: CountryCode.Bahrain,
    name: "Bahrain",
    native: "\u0627\u0644\u0628\u062D\u0631\u064A\u0646"
  },
  id: LocaleCode.ArabicBahrain,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Bahrain)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0628\u062D\u0631\u064A\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.Egypt,
    name: "Egypt",
    native: "\u0645\u0635\u0631"
  },
  id: LocaleCode.ArabicEgypt,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Egypt)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0645\u0635\u0631)",
  rtl: true
});
({
  country: {
    code: CountryCode.Iraq,
    name: "Iraq",
    native: "\u0627\u0644\u0639\u0631\u0627\u0642"
  },
  id: LocaleCode.ArabicIraq,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Iraq)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0639\u0631\u0627\u0642)",
  rtl: true
});
({
  country: {
    code: CountryCode.Jordan,
    name: "Jordan",
    native: "\u0627\u0644\u0623\u0631\u062F\u0646"
  },
  id: LocaleCode.ArabicJordan,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Jordan)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0623\u0631\u062F\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.Kuwait,
    name: "Kuwait",
    native: "\u0627\u0644\u0643\u0648\u064A\u062A"
  },
  id: LocaleCode.ArabicKuwait,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Kuwait)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0643\u0648\u064A\u062A)",
  rtl: true
});
({
  country: {
    code: CountryCode.Lebanon,
    name: "Lebanon",
    native: "\u0644\u0628\u0646\u0627\u0646"
  },
  id: LocaleCode.ArabicLebanon,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Lebanon)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u0628\u0646\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.Libya,
    name: "Libya",
    native: "\u0644\u064A\u0628\u064A\u0627"
  },
  id: LocaleCode.ArabicLibya,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Libya)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u064A\u0628\u064A\u0627)",
  rtl: true
});
({
  country: {
    code: CountryCode.Morocco,
    name: "Morocco",
    native: "\u0627\u0644\u0645\u063A\u0631\u0628"
  },
  id: LocaleCode.ArabicMorocco,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Morocco)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u063A\u0631\u0628)",
  rtl: true
});
({
  country: {
    code: CountryCode.Oman,
    name: "Oman",
    native: "\u0639\u0645\u0627\u0646"
  },
  id: LocaleCode.ArabicOman,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Oman)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0639\u0645\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.Qatar,
    name: "Qatar",
    native: "\u0642\u0637\u0631"
  },
  id: LocaleCode.ArabicQatar,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Qatar)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0642\u0637\u0631)",
  rtl: true
});
({
  country: {
    code: CountryCode.SaudiArabia,
    name: "Saudi Arabia",
    native: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629"
  },
  id: LocaleCode.ArabicSaudiArabia,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Saudi Arabia)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629)",
  rtl: true
});
({
  country: {
    code: CountryCode.Tunisia,
    name: "Tunisia",
    native: "\u062A\u0648\u0646\u0633"
  },
  id: LocaleCode.ArabicTunisia,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Tunisia)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u062A\u0648\u0646\u0633)",
  rtl: true
});
({
  country: {
    code: CountryCode.UnitedArabEmirates,
    name: "United Arab Emirates",
    native: "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
  },
  id: LocaleCode.ArabicUnitedArabEmirates,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (United Arab Emirates)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629)",
  rtl: true
});
({
  country: {
    code: CountryCode.Yemen,
    name: "Yemen",
    native: "\u0627\u0644\u064A\u0645\u0646"
  },
  id: LocaleCode.ArabicYemen,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Yemen)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u064A\u0645\u0646)",
  rtl: true
});
({
  id: LocaleCode.Armenian,
  language: {
    code: LanguageCode.Armenian,
    name: "Armenian",
    native: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576"
  },
  name: "Armenian",
  native_name: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576",
  rtl: false
});
({
  country: { code: CountryCode.Armenia, name: "Armenia", native: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576" },
  id: LocaleCode.ArmenianArmenia,
  language: {
    code: LanguageCode.Armenian,
    name: "Armenian",
    native: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576"
  },
  name: "Armenian (Armenia)",
  native_name: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576 (\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576)",
  rtl: false
});
({
  id: LocaleCode.Azerbaijani,
  language: {
    code: LanguageCode.Azerbaijani,
    name: "Azeribaijani",
    native: "Az\u0259rbaycan"
  },
  name: "Azeri",
  native_name: "Az\u0259rbaycan",
  rtl: false
});
({
  country: {
    code: CountryCode.Azerbaijan,
    name: "Azerbaijan",
    native: "Az\u0259rbaycan"
  },
  id: LocaleCode.AzerbaijaniAzerbaijan,
  language: {
    code: LanguageCode.Azerbaijani,
    name: "Azerbaijani",
    native: "Az\u0259rbaycan"
  },
  name: "Azeri (Azerbaijan)",
  native_name: "Az\u0259rbaycan (Az\u0259rbaycan)",
  rtl: false
});
({
  id: LocaleCode.Basque,
  language: {
    code: LanguageCode.Basque,
    name: "Basque",
    native: "Euskara"
  },
  name: "Basque",
  native_name: "Euskara",
  rtl: false
});
({
  country: {
    code: CountryCode.Spain,
    name: "Spain",
    native: "Espa\xF1a"
  },
  id: LocaleCode.BasqueSpain,
  language: {
    code: LanguageCode.Basque,
    name: "Basque",
    native: "Euskara"
  },
  name: "Basque (Spain)",
  native_name: "Euskara (Espa\xF1a)",
  rtl: false
});
({
  id: LocaleCode.Belarusian,
  language: {
    code: LanguageCode.Belarusian,
    name: "Belarusian",
    native: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F"
  },
  name: "Belarusian",
  native_name: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F",
  rtl: false
});
({
  country: {
    code: CountryCode.Belarus,
    name: "Belarus",
    native: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C"
  },
  id: LocaleCode.BelarusianBelarus,
  language: {
    code: LanguageCode.Belarusian,
    name: "Belarusian",
    native: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F"
  },
  name: "Belarusian (Belarus)",
  native_name: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C)",
  rtl: false
});
({
  id: LocaleCode.Bengali,
  language: {
    code: LanguageCode.Bengali,
    name: "Bengali",
    native: "\u09AC\u09BE\u0982\u09B2\u09BE"
  },
  name: "Bengali",
  native_name: "\u09AC\u09BE\u0982\u09B2\u09BE",
  rtl: false
});
({
  country: {
    code: CountryCode.Bangladesh,
    name: "Bangladesh",
    native: "\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6"
  },
  id: LocaleCode.BengaliBangladesh,
  language: {
    code: LanguageCode.Bengali,
    name: "Bengali",
    native: "\u09AC\u09BE\u0982\u09B2\u09BE"
  },
  name: "Bengali (Bangladesh)",
  native_name: "\u09AC\u09BE\u0982\u09B2\u09BE (\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6)",
  rtl: false
});
({
  id: LocaleCode.Bhutani,
  language: {
    code: LanguageCode.Bhutani,
    name: "Bhutani",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Bhutani",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42",
  rtl: false
});
({
  country: {
    code: CountryCode.Bhutan,
    name: "Bhutan",
    native: "\u0F60\u0F56\u0FB2\u0F74\u0F42"
  },
  id: LocaleCode.BhutaniBhutan,
  language: {
    code: LanguageCode.Bhutani,
    name: "Bhutani",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Bhutani (Bhutan)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42)",
  rtl: false
});
({
  id: LocaleCode.Bulgarian,
  language: {
    code: LanguageCode.Bulgarian,
    name: "Bulgarian",
    native: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438"
  },
  name: "Bulgarian",
  native_name: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438",
  rtl: false
});
({
  country: {
    code: CountryCode.Bulgaria,
    name: "Bulgaria",
    native: "\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F"
  },
  id: LocaleCode.BulgarianBulgaria,
  language: {
    code: LanguageCode.Bulgarian,
    name: "Bulgarian",
    native: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438"
  },
  name: "Bulgarian (Bulgaria)",
  native_name: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 (\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F)",
  rtl: false
});
({
  id: LocaleCode.Burmese,
  language: {
    code: LanguageCode.Burmese,
    name: "Burmese",
    native: "\u1017\u1019\u102C\u1005\u102C"
  },
  name: "Burmese",
  native_name: "\u1017\u1019\u102C\u1005\u102C",
  rtl: false
});
({
  country: {
    code: CountryCode.Myanmar,
    name: "Myanmar",
    native: "\u1019\u103C\u1014\u103A\u1019\u102C"
  },
  id: LocaleCode.BurmeseMyanmar,
  language: {
    code: LanguageCode.Burmese,
    name: "Burmese",
    native: "\u1017\u1019\u102C\u1005\u102C"
  },
  name: "Burmese (Myanmar)",
  native_name: "\u1017\u1019\u102C\u1005\u102C (\u1019\u103C\u1014\u103A\u1019\u102C)",
  rtl: false
});
({
  id: LocaleCode.Cantonese,
  language: {
    code: LanguageCode.Cantonese,
    name: "Cantonese",
    native: "\u5EE3\u6771\u8A71"
  },
  name: "Cantonese",
  native_name: "\u5EE3\u6771\u8A71",
  rtl: false
});
({
  country: {
    code: CountryCode.HongKong,
    name: "Hong Kong",
    native: "\u9999\u6E2F"
  },
  id: LocaleCode.CantoneseHongKong,
  language: {
    code: LanguageCode.Cantonese,
    name: "Cantonese",
    native: "\u5EE3\u6771\u8A71"
  },
  name: "Cantonese (Hong Kong)",
  native_name: "\u5EE3\u6771\u8A71 (\u9999\u6E2F)",
  rtl: false
});
({
  id: LocaleCode.Catalan,
  language: {
    code: LanguageCode.Catalan,
    name: "Catalan",
    native: "Catal\xE0"
  },
  name: "Catalan",
  native_name: "Catal\xE0",
  rtl: false
});
({
  country: {
    code: CountryCode.Spain,
    name: "Spain",
    native: "Espa\xF1a"
  },
  id: LocaleCode.CatalanSpain,
  language: {
    code: LanguageCode.Catalan,
    name: "Catalan",
    native: "Catal\xE0"
  },
  name: "Catalan (Spain)",
  native_name: "Catal\xE0 (Espanya)",
  rtl: false
});
({
  id: LocaleCode.ChineseSimplified,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified)",
  native_name: "\u4E2D\u6587",
  rtl: false
});
({
  country: {
    code: CountryCode.China,
    name: "China",
    native: "\u4E2D\u56FD"
  },
  id: LocaleCode.ChineseSimplifiedChina,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/China)",
  native_name: "\u4E2D\u6587 (\u4E2D\u56FD)",
  rtl: false
});
({
  country: {
    code: CountryCode.HongKong,
    name: "Hong Kong",
    native: "\u9999\u6E2F"
  },
  id: LocaleCode.ChineseSimplifiedHongKong,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/Hong Kong)",
  native_name: "\u4E2D\u6587 (\u9999\u6E2F)",
  rtl: false
});
({
  country: {
    code: CountryCode.Macau,
    name: "Macau",
    native: "\u6FB3\u9580"
  },
  id: LocaleCode.ChineseSimplifiedMacau,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/Macau)",
  native_name: "\u4E2D\u6587 (\u6FB3\u9580)",
  rtl: false
});
({
  country: {
    code: CountryCode.Singapore,
    name: "Singapore",
    native: "\u65B0\u52A0\u5761"
  },
  id: LocaleCode.ChineseSimplifiedSingapore,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/Singapore)",
  native_name: "\u4E2D\u6587 (\u65B0\u52A0\u5761)",
  rtl: false
});
({
  id: LocaleCode.ChineseTraditional,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Traditional)",
  native_name: "\u4E2D\u6587",
  rtl: false
});
({
  country: {
    code: CountryCode.HongKong,
    name: "Hong Kong",
    native: "\u9999\u6E2F"
  },
  id: LocaleCode.ChineseTraditionalHongKong,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese (Traditional/Hong Kong)",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Hong Kong)",
  native_name: "\u4E2D\u6587 (\u9999\u6E2F)",
  rtl: false
});
({
  country: {
    code: CountryCode.Macau,
    name: "Macau",
    native: "\u6FB3\u9580"
  },
  id: LocaleCode.ChineseTraditionalMacau,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese (Traditional/Macau)",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Macau)",
  native_name: "\u4E2D\u6587 (\u6FB3\u9580)",
  rtl: false
});
({
  country: {
    code: CountryCode.Singapore,
    name: "Singapore",
    native: "\u65B0\u52A0\u5761"
  },
  id: LocaleCode.ChineseTraditionalSingapore,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese (Traditional/Singapore)",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Singapore)",
  native_name: "\u4E2D\u6587 (\u65B0\u52A0\u5761)",
  rtl: false
});
({
  id: LocaleCode.Croatian,
  language: {
    code: LanguageCode.Croatian,
    name: "Croatian",
    native: "Hrvatski"
  },
  name: "Croatian",
  native_name: "Hrvatski",
  rtl: false
});
({
  country: {
    code: CountryCode.BosniaAndHerzegovina,
    name: "Bosnia and Herzegovina",
    native: "Bosna i Hercegovina"
  },
  id: LocaleCode.CroatianBosniaAndHerzegovina,
  language: {
    code: LanguageCode.Croatian,
    name: "Croatian",
    native: "Hrvatski"
  },
  name: "Croatian (Bosnia and Herzegovina)",
  native_name: "Hrvatski (Bosna i Hercegovina)",
  rtl: false
});
({
  country: {
    code: CountryCode.Croatia,
    name: "Croatia",
    native: "Hrvatska"
  },
  id: LocaleCode.CroatianCroatia,
  language: {
    code: LanguageCode.Croatian,
    name: "Croatian",
    native: "Hrvatski"
  },
  name: "Croatian (Croatia)",
  native_name: "Hrvatski (Hrvatska)",
  rtl: false
});
({
  id: LocaleCode.Czech,
  language: {
    code: LanguageCode.Czech,
    name: "Czech",
    native: "\u010Ce\u0161tina"
  },
  name: "Czech",
  native_name: "\u010Ce\u0161tina",
  rtl: false
});
({
  country: {
    code: CountryCode.CzechRepublic,
    name: "Czech Republic",
    native: "\u010Cesk\xE1 republika"
  },
  id: LocaleCode.CzechCzechRepublic,
  language: {
    code: LanguageCode.Czech,
    name: "Czech",
    native: "\u010Ce\u0161tina"
  },
  name: "Czech (Czech Republic)",
  native_name: "\u010Ce\u0161tina (\u010Cesk\xE1 republika)",
  rtl: false
});
({
  id: LocaleCode.Danish,
  language: {
    code: LanguageCode.Danish,
    name: "Danish",
    native: "Dansk"
  },
  name: "Danish",
  native_name: "Dansk",
  rtl: false
});
({
  country: {
    code: CountryCode.Denmark,
    name: "Denmark",
    native: "Danmark"
  },
  id: LocaleCode.DanishDenmark,
  language: {
    code: LanguageCode.Danish,
    name: "Danish",
    native: "Dansk"
  },
  name: "Danish (Denmark)",
  native_name: "Dansk (Danmark)",
  rtl: false
});
({
  id: LocaleCode.Divehi,
  language: {
    code: LanguageCode.Divehi,
    name: "Divehi",
    native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0"
  },
  name: "Divehi",
  native_name: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0",
  rtl: true
});
({
  country: {
    code: CountryCode.Maldives,
    name: "Maldives",
    native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC"
  },
  id: LocaleCode.DivehiMaldives,
  language: {
    code: LanguageCode.Divehi,
    name: "Divehi",
    native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0"
  },
  name: "Divehi (Maldives)",
  native_name: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0 (\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC)",
  rtl: true
});
({
  id: LocaleCode.Dutch,
  language: {
    code: LanguageCode.Dutch,
    name: "Dutch",
    native: "Nederlands"
  },
  name: "Dutch",
  native_name: "Nederlands",
  rtl: false
});
({
  country: {
    code: CountryCode.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode.DutchBelgium,
  language: {
    code: LanguageCode.Dutch,
    name: "Dutch",
    native: "Nederlands"
  },
  name: "Dutch (Belgium)",
  native_name: "Nederlands (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode.Netherlands,
    name: "Netherlands",
    native: "Nederland"
  },
  id: LocaleCode.DutchNetherlands,
  language: {
    code: LanguageCode.Dutch,
    name: "Dutch",
    native: "Nederlands"
  },
  name: "Dutch (Netherlands)",
  native_name: "Nederlands (Nederland)",
  rtl: false
});
({
  id: LocaleCode.English,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English",
  native_name: "English",
  rtl: false
});
({
  country: {
    code: CountryCode.Australia,
    name: "Australia",
    native: "Australia"
  },
  id: LocaleCode.EnglishAustralia,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Australia)",
  native_name: "English (Australia)",
  rtl: false
});
({
  country: {
    code: CountryCode.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode.EnglishBelgium,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Belgium)",
  native_name: "English (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode.Canada,
    name: "Canada",
    native: "Canada"
  },
  id: LocaleCode.EnglishCanada,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Canada)",
  native_name: "English (Canada)",
  rtl: false
});
({
  country: {
    code: CountryCode.Ireland,
    name: "Ireland",
    native: "\xC9ire"
  },
  id: LocaleCode.EnglishIreland,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Ireland)",
  native_name: "English (\xC9ire)",
  rtl: false
});
({
  country: {
    code: CountryCode.Jamaica,
    name: "Jamaica",
    native: "Jamaica"
  },
  id: LocaleCode.EnglishJamaica,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Jamaica)",
  native_name: "English (Jamaica)",
  rtl: false
});
({
  country: {
    code: CountryCode.NewZealand,
    name: "New Zealand",
    native: "New Zealand"
  },
  id: LocaleCode.EnglishNewZealand,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (New Zealand)",
  native_name: "English (New Zealand)",
  rtl: false
});
({
  country: {
    code: CountryCode.Philippines,
    name: "Philippines",
    native: "Philippines"
  },
  id: LocaleCode.EnglishPhilippines,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Philippines)",
  native_name: "English (Philippines)",
  rtl: false
});
({
  country: {
    code: CountryCode.Singapore,
    name: "Singapore",
    native: "Singapore"
  },
  id: LocaleCode.EnglishSingapore,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Singapore)",
  native_name: "English (Singapore)",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.EnglishSouthAfrica,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (South Africa)",
  native_name: "English (South Africa)",
  rtl: false
});
({
  country: {
    code: CountryCode.TrinidadAndTobago,
    name: "Trinidad and Tobago",
    native: "Trinidad and Tobago"
  },
  id: LocaleCode.EnglishTrinidadAndTobago,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Trinidad and Tobago)",
  native_name: "English (Trinidad and Tobago)",
  rtl: false
});
({
  country: {
    code: CountryCode.UnitedKingdom,
    name: "United Kingdom",
    native: "United Kingdom"
  },
  id: LocaleCode.EnglishUnitedKingdom,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (United Kingdom)",
  native_name: "English (United Kingdom)",
  rtl: false
});
({
  country: {
    code: CountryCode.UnitedStates,
    name: "United States",
    native: "United States"
  },
  id: LocaleCode.EnglishUnitedStates,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (United States)",
  native_name: "English (United States)",
  rtl: false
});
({
  country: {
    code: CountryCode.Zimbabwe,
    name: "Zimbabwe",
    native: "Zimbabwe"
  },
  id: LocaleCode.EnglishZimbabwe,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Zimbabwe)",
  native_name: "English (Zimbabwe)",
  rtl: false
});
({
  id: LocaleCode.Esperanto,
  language: {
    code: LanguageCode.Esperanto,
    name: "Esperanto",
    native: "Esperanto"
  },
  name: "Esperanto",
  native_name: "Esperanto",
  rtl: false
});
({
  id: LocaleCode.Estonian,
  language: {
    code: LanguageCode.Estonian,
    name: "Estonian",
    native: "Eesti"
  },
  name: "Estonian",
  native_name: "Eesti",
  rtl: false
});
({
  country: {
    code: CountryCode.Estonia,
    name: "Estonia",
    native: "Eesti"
  },
  id: LocaleCode.EstonianEstonia,
  language: {
    code: LanguageCode.Estonian,
    name: "Estonian",
    native: "Eesti"
  },
  name: "Estonian (Estonia)",
  native_name: "Eesti (Eesti)",
  rtl: false
});
({
  id: LocaleCode.Faroese,
  language: {
    code: LanguageCode.Faroese,
    name: "Faroese",
    native: "F\xF8royskt"
  },
  name: "Faroese",
  native_name: "F\xF8royskt",
  rtl: false
});
({
  country: {
    code: CountryCode.FaroeIslands,
    name: "Faroe Islands",
    native: "F\xF8royar"
  },
  id: LocaleCode.FaroeseFaroeIslands,
  language: {
    code: LanguageCode.Faroese,
    name: "Faroese",
    native: "F\xF8royskt"
  },
  name: "Faroese (Faroe Islands)",
  native_name: "F\xF8royskt (F\xF8royar)",
  rtl: false
});
({
  id: LocaleCode.Farsi,
  language: {
    code: LanguageCode.Farsi,
    name: "Farsi",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Farsi",
  native_name: "\u0641\u0627\u0631\u0633\u06CC",
  rtl: true
});
({
  country: {
    code: CountryCode.Iran,
    name: "Iran",
    native: "\u0627\u06CC\u0631\u0627\u0646"
  },
  id: LocaleCode.FarsiIran,
  language: {
    code: LanguageCode.Farsi,
    name: "Farsi",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Farsi (Iran)",
  native_name: "\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode.Filipino,
  language: {
    code: LanguageCode.Filipino,
    name: "Filipino",
    native: "Filipino"
  },
  name: "Filipino",
  native_name: "Filipino",
  rtl: false
});
({
  country: {
    code: CountryCode.Philippines,
    name: "Philippines",
    native: "Pilipinas"
  },
  id: LocaleCode.FilipinoPhilippines,
  language: {
    code: LanguageCode.Filipino,
    name: "Filipino",
    native: "Filipino"
  },
  name: "Filipino (Philippines)",
  native_name: "Filipino (Pilipinas)",
  rtl: false
});
({
  id: LocaleCode.Finnish,
  language: {
    code: LanguageCode.Finnish,
    name: "Finnish",
    native: "Suomi"
  },
  name: "Finnish",
  native_name: "Suomi",
  rtl: false
});
({
  country: {
    code: CountryCode.Finland,
    name: "Finland",
    native: "Suomi"
  },
  id: LocaleCode.FinnishFinland,
  language: {
    code: LanguageCode.Finnish,
    name: "Finnish",
    native: "Suomi"
  },
  name: "Finnish (Finland)",
  native_name: "Suomi (Suomi)",
  rtl: false
});
({
  id: LocaleCode.French,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French",
  native_name: "Fran\xE7ais",
  rtl: false
});
({
  country: {
    code: CountryCode.Belgium,
    name: "Belgium",
    native: "Belgique"
  },
  id: LocaleCode.FrenchBelgium,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Belgium)",
  native_name: "Fran\xE7ais (Belgique)",
  rtl: false
});
({
  country: {
    code: CountryCode.Canada,
    name: "Canada",
    native: "Canada"
  },
  id: LocaleCode.FrenchCanada,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Canada)",
  native_name: "Fran\xE7ais (Canada)",
  rtl: false
});
({
  country: {
    code: CountryCode.France,
    name: "France",
    native: "France"
  },
  id: LocaleCode.FrenchFrance,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (France)",
  native_name: "Fran\xE7ais (France)",
  rtl: false
});
({
  country: {
    code: CountryCode.Luxembourg,
    name: "Luxembourg",
    native: "Luxembourg"
  },
  id: LocaleCode.FrenchLuxembourg,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Luxembourg)",
  native_name: "Fran\xE7ais (Luxembourg)",
  rtl: false
});
({
  country: {
    code: CountryCode.Monaco,
    name: "Monaco",
    native: "Monaco"
  },
  id: LocaleCode.FrenchMonaco,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Monaco)",
  native_name: "Fran\xE7ais (Monaco)",
  rtl: false
});
({
  country: {
    code: CountryCode.Reunion,
    name: "Reunion",
    native: "La R\xE9union"
  },
  id: LocaleCode.FrenchReunion,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Reunion)",
  native_name: "Fran\xE7ais (La R\xE9union)",
  rtl: false
});
({
  country: {
    code: CountryCode.Switzerland,
    name: "Switzerland",
    native: "Suisse"
  },
  id: LocaleCode.FrenchSwitzerland,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Switzerland)",
  native_name: "Fran\xE7ais (Suisse)",
  rtl: false
});
({
  id: LocaleCode.Frisian,
  language: {
    code: LanguageCode.Frisian,
    name: "Frisian",
    native: "Frysk"
  },
  name: "Frisian",
  native_name: "Frysk",
  rtl: false
});
({
  country: {
    code: CountryCode.Netherlands,
    name: "Netherlands",
    native: "Nederland"
  },
  id: LocaleCode.FrisianNetherlands,
  language: {
    code: LanguageCode.Frisian,
    name: "Frisian",
    native: "Frysk"
  },
  name: "Frisian (Netherlands)",
  native_name: "Frysk (Nederland)",
  rtl: false
});
({
  id: LocaleCode.Galician,
  language: {
    code: LanguageCode.Galician,
    name: "Galician",
    native: "Galego"
  },
  name: "Galician",
  native_name: "Galego",
  rtl: false
});
({
  country: {
    code: CountryCode.Spain,
    name: "Spain",
    native: "Espa\xF1a"
  },
  id: LocaleCode.GalicianSpain,
  language: {
    code: LanguageCode.Galician,
    name: "Galician",
    native: "Galego"
  },
  name: "Galician (Spain)",
  native_name: "Galego (Espa\xF1a)",
  rtl: false
});
({
  id: LocaleCode.Georgian,
  language: {
    code: LanguageCode.Georgian,
    name: "Georgian",
    native: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8"
  },
  name: "Georgian",
  native_name: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8",
  rtl: false
});
({
  country: {
    code: CountryCode.Georgia,
    name: "Georgia",
    native: "\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD"
  },
  id: LocaleCode.GeorgianGeorgia,
  language: {
    code: LanguageCode.Georgian,
    name: "Georgian",
    native: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8"
  },
  name: "Georgian (Georgia)",
  native_name: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8 (\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD)",
  rtl: false
});
({
  id: LocaleCode.German,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German",
  native_name: "Deutsch",
  rtl: false
});
({
  country: {
    code: CountryCode.Austria,
    name: "Austria",
    native: "\xD6sterreich"
  },
  id: LocaleCode.GermanAustria,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Austria)",
  native_name: "Deutsch (\xD6sterreich)",
  rtl: false
});
({
  country: {
    code: CountryCode.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode.GermanBelgium,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Belgium)",
  native_name: "Deutsch (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode.Switzerland,
    name: "Switzerland",
    native: "Suisse"
  },
  id: LocaleCode.GermanSwitzerland,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Switzerland)",
  native_name: "Deutsch (Suisse)",
  rtl: false
});
({
  country: {
    code: CountryCode.Liechtenstein,
    name: "Liechtenstein",
    native: "Liechtenstein"
  },
  id: LocaleCode.GermanLiechtenstein,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Liechtenstein)",
  native_name: "Deutsch (Liechtenstein)",
  rtl: false
});
({
  country: {
    code: CountryCode.Luxembourg,
    name: "Luxembourg",
    native: "Luxembourg"
  },
  id: LocaleCode.GermanLuxembourg,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Luxembourg)",
  native_name: "Deutsch (Luxembourg)",
  rtl: false
});
({
  id: LocaleCode.Greek,
  language: {
    code: LanguageCode.Greek,
    name: "Greek",
    native: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC"
  },
  name: "Greek",
  native_name: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",
  rtl: false
});
({
  country: {
    code: CountryCode.Greece,
    name: "Greece",
    native: "\u0395\u03BB\u03BB\u03AC\u03B4\u03B1"
  },
  id: LocaleCode.GreekGreece,
  language: {
    code: LanguageCode.Greek,
    name: "Greek",
    native: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC"
  },
  name: "Greek (Greece)",
  native_name: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC (\u0395\u03BB\u03BB\u03AC\u03B4\u03B1)",
  rtl: false
});
({
  id: LocaleCode.Greenlandic,
  language: {
    code: LanguageCode.Greenlandic,
    name: "Greenlandic",
    native: "Kalaallisut"
  },
  name: "Greenlandic",
  native_name: "Kalaallisut",
  rtl: false
});
({
  country: {
    code: CountryCode.Greenland,
    name: "Greenland",
    native: "Kalaallit Nunaat"
  },
  id: LocaleCode.GreenlandicGreenland,
  language: {
    code: LanguageCode.Greenlandic,
    name: "Greenlandic",
    native: "Kalaallisut"
  },
  name: "Greenlandic (Greenland)",
  native_name: "Kalaallisut (Kalaallit Nunaat)",
  rtl: false
});
({
  id: LocaleCode.Gujarati,
  language: {
    code: LanguageCode.Gujarati,
    name: "Gujarati",
    native: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0"
  },
  name: "Gujarati",
  native_name: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.GujaratiIndia,
  language: {
    code: LanguageCode.Gujarati,
    name: "Gujarati",
    native: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0"
  },
  name: "Gujarati (India)",
  native_name: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0 (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode.Hausa,
  language: {
    code: LanguageCode.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E",
  rtl: false
});
({
  country: {
    code: CountryCode.Ghana,
    name: "Ghana",
    native: "Ghana"
  },
  id: LocaleCode.HausaGhana,
  language: {
    code: LanguageCode.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa (Ghana)",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Ghana)",
  rtl: false
});
({
  country: {
    code: CountryCode.Niger,
    name: "Niger",
    native: "Niger"
  },
  id: LocaleCode.HausaNiger,
  language: {
    code: LanguageCode.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa (Niger)",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Niger)",
  rtl: false
});
({
  country: {
    code: CountryCode.Nigeria,
    name: "Nigeria",
    native: "Nigeria"
  },
  id: LocaleCode.HausaNigeria,
  language: {
    code: LanguageCode.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa (Nigeria)",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Nigeria)",
  rtl: false
});
({
  id: LocaleCode.Hebrew,
  language: {
    code: LanguageCode.Hebrew,
    name: "Hebrew",
    native: "\u05E2\u05D1\u05E8\u05D9\u05EA"
  },
  name: "Hebrew",
  native_name: "\u05E2\u05D1\u05E8\u05D9\u05EA",
  rtl: true
});
({
  country: {
    code: CountryCode.Israel,
    name: "Hebrew",
    native: ""
  },
  id: LocaleCode.HebrewIsrael,
  language: {
    code: LanguageCode.Hebrew,
    name: "Hebrew",
    native: ""
  },
  name: "Hebrew (Israel)",
  native_name: "",
  rtl: true
});
({
  id: LocaleCode.Hindi,
  language: {
    code: LanguageCode.Hindi,
    name: "Hindi",
    native: "\u0939\u093F\u0928\u094D\u0926\u0940"
  },
  name: "Hindi",
  native_name: "\u0939\u093F\u0928\u094D\u0926\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.HindiIndia,
  language: {
    code: LanguageCode.Hindi,
    name: "Hindi",
    native: "\u092D\u093E\u0930\u0924\u0940\u092F"
  },
  name: "Hindi (India)",
  native_name: "\u092D\u093E\u0930\u0924\u0940\u092F",
  rtl: false
});
({
  id: LocaleCode.Hungarian,
  language: {
    code: LanguageCode.Hungarian,
    name: "Hungarian",
    native: "Magyar"
  },
  name: "Hungarian",
  native_name: "Magyar",
  rtl: false
});
({
  country: {
    code: CountryCode.Hungary,
    name: "Hungary",
    native: "Magyarorsz\xE1g"
  },
  id: LocaleCode.HungarianHungary,
  language: {
    code: LanguageCode.Hungarian,
    name: "Hungarian",
    native: "Magyar"
  },
  name: "Hungarian (Hungary)",
  native_name: "Magyar (Magyarorsz\xE1g)",
  rtl: false
});
({
  id: LocaleCode.Icelandic,
  language: {
    code: LanguageCode.Icelandic,
    name: "Icelandic",
    native: "\xCDslenska"
  },
  name: "Icelandic",
  native_name: "\xCDslenska",
  rtl: false
});
({
  country: {
    code: CountryCode.Iceland,
    name: "Iceland",
    native: "\xCDsland"
  },
  id: LocaleCode.IcelandicIceland,
  language: {
    code: LanguageCode.Icelandic,
    name: "Icelandic",
    native: "\xCDslenska"
  },
  name: "Icelandic (Iceland)",
  native_name: "\xCDslenska (\xCDsland)",
  rtl: false
});
({
  id: LocaleCode.Igbo,
  language: {
    code: LanguageCode.Igbo,
    name: "Igbo",
    native: "Igbo"
  },
  name: "Igbo",
  native_name: "Igbo",
  rtl: false
});
({
  id: LocaleCode.Indonesian,
  language: {
    code: LanguageCode.Indonesian,
    name: "Indonesian",
    native: "Bahasa Indonesia"
  },
  name: "Indonesian",
  native_name: "Bahasa Indonesia",
  rtl: false
});
({
  country: {
    code: CountryCode.Indonesia,
    name: "Indonesia",
    native: "Indonesia"
  },
  id: LocaleCode.IndonesianIndonesia,
  language: {
    code: LanguageCode.Indonesian,
    name: "Indonesian",
    native: "Bahasa Indonesia"
  },
  name: "Indonesian (Indonesia)",
  native_name: "Bahasa Indonesia (Indonesia)",
  rtl: false
});
({
  id: LocaleCode.Irish,
  language: {
    code: LanguageCode.Irish,
    name: "Irish",
    native: "Gaeilge"
  },
  name: "Irish",
  native_name: "Gaeilge",
  rtl: false
});
({
  country: {
    code: CountryCode.Ireland,
    name: "Ireland",
    native: "\xC9ire"
  },
  id: LocaleCode.IrishIreland,
  language: {
    code: LanguageCode.Irish,
    name: "Irish",
    native: "Gaeilge"
  },
  name: "Irish (Ireland)",
  native_name: "Gaeilge (\xC9ire)",
  rtl: false
});
({
  id: LocaleCode.Italian,
  language: {
    code: LanguageCode.Italian,
    name: "Italian",
    native: "Italiano"
  },
  name: "Italian",
  native_name: "Italiano",
  rtl: false
});
({
  country: {
    code: CountryCode.Italy,
    name: "Italy",
    native: "Italia"
  },
  id: LocaleCode.ItalianItaly,
  language: {
    code: LanguageCode.Italian,
    name: "Italian",
    native: "Italiano"
  },
  name: "Italian (Italy)",
  native_name: "Italiano (Italia)",
  rtl: false
});
({
  country: {
    code: CountryCode.Switzerland,
    name: "Switzerland",
    native: "Schweiz"
  },
  id: LocaleCode.ItalianSwitzerland,
  language: {
    code: LanguageCode.Italian,
    name: "Italian",
    native: "Italiano"
  },
  name: "Italian (Switzerland)",
  native_name: "Italiano (Svizzera)",
  rtl: false
});
({
  id: LocaleCode.Japanese,
  language: {
    code: LanguageCode.Japanese,
    name: "Japanese",
    native: "\u65E5\u672C\u8A9E"
  },
  name: "Japanese",
  native_name: "\u65E5\u672C\u8A9E",
  rtl: false
});
({
  country: {
    code: CountryCode.Japan,
    name: "Japan",
    native: "\u65E5\u672C"
  },
  id: LocaleCode.JapaneseJapan,
  language: {
    code: LanguageCode.Japanese,
    name: "Japanese",
    native: "\u65E5\u672C\u8A9E"
  },
  name: "Japanese (Japan)",
  native_name: "\u65E5\u672C\u8A9E (\u65E5\u672C)",
  rtl: false
});
({
  id: LocaleCode.Kannada,
  language: {
    code: LanguageCode.Kannada,
    name: "Kannada",
    native: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1"
  },
  name: "Kannada",
  native_name: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0CAD\u0CBE\u0CB0\u0CA4"
  },
  id: LocaleCode.KannadaIndia,
  language: {
    code: LanguageCode.Kannada,
    name: "Kannada",
    native: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1"
  },
  name: "Kannada (India)",
  native_name: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1 (\u0CAD\u0CBE\u0CB0\u0CA4)",
  rtl: false
});
({
  id: LocaleCode.Kazakh,
  language: {
    code: LanguageCode.Kazakh,
    name: "Kazakh",
    native: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456"
  },
  name: "Kazakh",
  native_name: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456",
  rtl: false
});
({
  country: {
    code: CountryCode.Kazakhstan,
    name: "Kazakhstan",
    native: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D"
  },
  id: LocaleCode.KazakhKazakhstan,
  language: {
    code: LanguageCode.Kazakh,
    name: "Kazakh",
    native: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456"
  },
  name: "Kazakh (Kazakhstan)",
  native_name: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)",
  rtl: false
});
({
  id: LocaleCode.Khmer,
  language: {
    code: LanguageCode.Khmer,
    name: "Khmer",
    native: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A"
  },
  name: "Khmer",
  native_name: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A",
  rtl: false
});
({
  country: {
    code: CountryCode.Cambodia,
    name: "Cambodia",
    native: "\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6"
  },
  id: LocaleCode.KhmerCambodia,
  language: {
    code: LanguageCode.Khmer,
    name: "Khmer",
    native: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A"
  },
  name: "Khmer (Cambodia)",
  native_name: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A (\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6)",
  rtl: false
});
({
  id: LocaleCode.Konkani,
  language: {
    code: LanguageCode.Konkani,
    name: "Konkani",
    native: "\u0915\u094B\u0902\u0915\u0923\u0940"
  },
  name: "Konkani",
  native_name: "\u0915\u094B\u0902\u0915\u0923\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.KonkaniIndia,
  language: {
    code: LanguageCode.Konkani,
    name: "Konkani",
    native: "\u0915\u094B\u0902\u0915\u0923\u0940"
  },
  name: "Konkani (India)",
  native_name: "\u0915\u094B\u0902\u0915\u0923\u0940 (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode.Korean,
  language: {
    code: LanguageCode.Korean,
    name: "Korean",
    native: "\uD55C\uAD6D\uC5B4"
  },
  name: "Korean",
  native_name: "\uD55C\uAD6D\uC5B4",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthKorea,
    name: "South Korea",
    native: "\uB300\uD55C\uBBFC\uAD6D"
  },
  id: LocaleCode.KoreanSouthKorea,
  language: {
    code: LanguageCode.Korean,
    name: "Korean",
    native: "\uD55C\uAD6D\uC5B4"
  },
  name: "Korean (South Korea)",
  native_name: "\uD55C\uAD6D\uC5B4 (\uB300\uD55C\uBBFC\uAD6D)",
  rtl: false
});
({
  id: LocaleCode.Kurdish,
  language: {
    code: LanguageCode.Kurdish,
    name: "Kurdish",
    native: "Kurd\xEE"
  },
  name: "Kurdish",
  native_name: "Kurd\xEE",
  rtl: false
});
({
  country: {
    code: CountryCode.Iraq,
    name: "Iraq",
    native: "\u0627\u0644\u0639\u0631\u0627\u0642"
  },
  id: LocaleCode.KurdishIraq,
  language: {
    code: LanguageCode.Kurdish,
    name: "Kurdish",
    native: "Kurd\xEE"
  },
  name: "Kurdish (Iraq)",
  native_name: "Kurd\xEE (\u0627\u0644\u0639\u0631\u0627\u0642)",
  rtl: false
});
({
  country: {
    code: CountryCode.Turkey,
    name: "Turkey",
    native: "T\xFCrkiye"
  },
  id: LocaleCode.KurdishTurkey,
  language: {
    code: LanguageCode.Kurdish,
    name: "Kurdish",
    native: "Kurd\xEE"
  },
  name: "Kurdish (Turkey)",
  native_name: "Kurd\xEE (T\xFCrkiye)",
  rtl: false
});
({
  id: LocaleCode.Kyrgyz,
  language: {
    code: LanguageCode.Kyrgyz,
    name: "Kyrgyz",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430"
  },
  name: "Kyrgyz",
  native_name: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430",
  rtl: false
});
({
  country: {
    code: CountryCode.Kyrgyzstan,
    name: "Kyrgyzstan",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D"
  },
  id: LocaleCode.KyrgyzKyrgyzstan,
  language: {
    code: LanguageCode.Kyrgyz,
    name: "Kyrgyz",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430"
  },
  name: "Kyrgyz (Kyrgyzstan)",
  native_name: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430 (\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D)",
  rtl: false
});
({
  id: LocaleCode.Lao,
  language: {
    code: LanguageCode.Lao,
    name: "Lao",
    native: "\u0EA5\u0EB2\u0EA7"
  },
  name: "Lao",
  native_name: "\u0EA5\u0EB2\u0EA7",
  rtl: false
});
({
  country: {
    code: CountryCode.Laos,
    name: "Laos",
    native: "\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95"
  },
  id: LocaleCode.LaoLaos,
  language: {
    code: LanguageCode.Lao,
    name: "Lao",
    native: "\u0EA5\u0EB2\u0EA7"
  },
  name: "Lao (Laos)",
  native_name: "\u0EA5\u0EB2\u0EA7 (\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95)",
  rtl: false
});
({
  id: LocaleCode.Latvian,
  language: {
    code: LanguageCode.Latvian,
    name: "Latvian",
    native: "Latvie\u0161u"
  },
  name: "Latvian",
  native_name: "Latvie\u0161u",
  rtl: false
});
({
  country: {
    code: CountryCode.Latvia,
    name: "Latvia",
    native: "Latvija"
  },
  id: LocaleCode.LatvianLatvia,
  language: {
    code: LanguageCode.Latvian,
    name: "Latvian",
    native: "Latvie\u0161u"
  },
  name: "Latvian (Latvia)",
  native_name: "Latvie\u0161u (Latvija)",
  rtl: false
});
({
  id: LocaleCode.Lithuanian,
  language: {
    code: LanguageCode.Lithuanian,
    name: "Lithuanian",
    native: "Lietuvi\u0173"
  },
  name: "Lithuanian",
  native_name: "Lietuvi\u0173",
  rtl: false
});
({
  country: {
    code: CountryCode.Lithuania,
    name: "Lithuania",
    native: "Lietuva"
  },
  id: LocaleCode.LithuanianLithuania,
  language: {
    code: LanguageCode.Lithuanian,
    name: "Lithuanian",
    native: "Lietuvi\u0173"
  },
  name: "Lithuanian (Lithuania)",
  native_name: "Lietuvi\u0173 (Lietuva)",
  rtl: false
});
({
  id: LocaleCode.Luxembourgish,
  language: {
    code: LanguageCode.Luxembourgish,
    name: "Luxembourgish",
    native: "L\xEBtzebuergesch"
  },
  name: "Luxembourgish",
  native_name: "L\xEBtzebuergesch",
  rtl: false
});
({
  country: {
    code: CountryCode.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode.LuxembourgishBelgium,
  language: {
    code: LanguageCode.Luxembourgish,
    name: "Luxembourgish",
    native: "L\xEBtzebuergesch"
  },
  name: "Luxembourgish (Belgium)",
  native_name: "L\xEBtzebuergesch (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode.Luxembourg,
    name: "Luxembourg",
    native: "Luxembourg"
  },
  id: LocaleCode.LuxembourgishLuxembourg,
  language: {
    code: LanguageCode.Luxembourgish,
    name: "Luxembourgish",
    native: "L\xEBtzebuergesch"
  },
  name: "Luxembourgish (Luxembourg)",
  native_name: "L\xEBtzebuergesch (Luxembourg)",
  rtl: false
});
({
  id: LocaleCode.Macedonian,
  language: {
    code: LanguageCode.Macedonian,
    name: "Macedonian",
    native: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438"
  },
  name: "Macedonian",
  native_name: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438",
  rtl: false
});
({
  country: {
    code: CountryCode.NorthMacedonia,
    name: "Macedonia",
    native: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
  },
  id: LocaleCode.MacedonianNorthMacedonia,
  language: {
    code: LanguageCode.Macedonian,
    name: "Macedonian",
    native: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438"
  },
  name: "Macedonian (North Macedonia)",
  native_name: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 (\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430)",
  rtl: false
});
({
  id: LocaleCode.Malay,
  language: {
    code: LanguageCode.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay",
  native_name: "Bahasa Melayu",
  rtl: false
});
({
  country: {
    code: CountryCode.Brunei,
    name: "Brunei",
    native: "Negara Brunei Darussalam"
  },
  id: LocaleCode.MalayBrunei,
  language: {
    code: LanguageCode.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (Brunei)",
  native_name: "Bahasa Melayu (Negara Brunei Darussalam)",
  rtl: false
});
({
  country: {
    code: CountryCode.Malaysia,
    name: "Malaysia",
    native: "Malaysia"
  },
  id: LocaleCode.MalayMalaysia,
  language: {
    code: LanguageCode.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (Malaysia)",
  native_name: "Bahasa Melayu (Malaysia)",
  rtl: false
});
({
  country: {
    code: CountryCode.Singapore,
    name: "Singapore",
    native: "Singapore"
  },
  id: LocaleCode.MalaySingapore,
  language: {
    code: LanguageCode.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (Singapore)",
  native_name: "Bahasa Melayu (Singapore)",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.MalayIndia,
  language: {
    code: LanguageCode.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (India)",
  native_name: "Bahasa Melayu (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode.Maltese,
  language: {
    code: LanguageCode.Maltese,
    name: "Maltese",
    native: "Malti"
  },
  name: "Maltese",
  native_name: "Malti",
  rtl: false
});
({
  country: {
    code: CountryCode.Malta,
    name: "Malta",
    native: "Malta"
  },
  id: LocaleCode.MalteseMalta,
  language: {
    code: LanguageCode.Maltese,
    name: "Maltese",
    native: "Malti"
  },
  name: "Maltese (Malta)",
  native_name: "Malti (Malta)",
  rtl: false
});
({
  id: LocaleCode.Maori,
  language: {
    code: LanguageCode.Maori,
    name: "Maori",
    native: "M\u0101ori"
  },
  name: "Maori",
  native_name: "M\u0101ori",
  rtl: false
});
({
  country: {
    code: CountryCode.NewZealand,
    name: "New Zealand",
    native: "New Zealand"
  },
  id: LocaleCode.MaoriNewZealand,
  language: {
    code: LanguageCode.Maori,
    name: "Maori",
    native: "M\u0101ori"
  },
  name: "Maori (New Zealand)",
  native_name: "M\u0101ori (New Zealand)",
  rtl: false
});
({
  id: LocaleCode.Marathi,
  language: {
    code: LanguageCode.Marathi,
    name: "Marathi",
    native: "\u092E\u0930\u093E\u0920\u0940"
  },
  name: "Marathi",
  native_name: "\u092E\u0930\u093E\u0920\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.MarathiIndia,
  language: {
    code: LanguageCode.Marathi,
    name: "Marathi",
    native: "\u092E\u0930\u093E\u0920\u0940"
  },
  name: "Marathi (India)",
  native_name: "\u092E\u0930\u093E\u0920\u0940 (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode.Mongolian,
  language: {
    code: LanguageCode.Mongolian,
    name: "Mongolian",
    native: "\u041C\u043E\u043D\u0433\u043E\u043B"
  },
  name: "Mongolian",
  native_name: "\u041C\u043E\u043D\u0433\u043E\u043B",
  rtl: false
});
({
  country: {
    code: CountryCode.Mongolia,
    name: "Mongolia",
    native: "\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441"
  },
  id: LocaleCode.MongolianMongolia,
  language: {
    code: LanguageCode.Mongolian,
    name: "Mongolian",
    native: "\u041C\u043E\u043D\u0433\u043E\u043B"
  },
  name: "Mongolian (Mongolia)",
  native_name: "\u041C\u043E\u043D\u0433\u043E\u043B (\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441)",
  rtl: false
});
({
  id: LocaleCode.Montenegrin,
  language: {
    code: LanguageCode.Montenegrin,
    name: "Montenegrin",
    native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A"
  },
  name: "Montenegrin",
  native_name: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A",
  rtl: false
});
({
  country: {
    code: CountryCode.Montenegro,
    name: "Montenegro",
    native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A"
  },
  id: LocaleCode.MontenegrinMontenegro,
  language: {
    code: LanguageCode.Montenegrin,
    name: "Montenegrin",
    native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A"
  },
  name: "Montenegrin (Montenegro)",
  native_name: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A (\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A)",
  rtl: false
});
({
  id: LocaleCode.Nepali,
  language: {
    code: LanguageCode.Nepali,
    name: "Nepali",
    native: "\u0928\u0947\u092A\u093E\u0932\u0940"
  },
  name: "Nepali",
  native_name: "\u0928\u0947\u092A\u093E\u0932\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode.Nepal,
    name: "Nepal",
    native: "\u0928\u0947\u092A\u093E\u0932"
  },
  id: LocaleCode.NepaliNepal,
  language: {
    code: LanguageCode.Nepali,
    name: "Nepali",
    native: "\u0928\u0947\u092A\u093E\u0932\u0940"
  },
  name: "Nepali (Nepal)",
  native_name: "\u0928\u0947\u092A\u093E\u0932\u0940 (\u0928\u0947\u092A\u093E\u0932)",
  rtl: false
});
({
  id: LocaleCode.NorthernSotho,
  language: {
    code: LanguageCode.NorthernSotho,
    name: "Northern Sotho",
    native: "Sesotho sa Leboa"
  },
  name: "Northern Sotho",
  native_name: "Sesotho sa Leboa",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.NorthernSothoSouthAfrica,
  language: {
    code: LanguageCode.NorthernSotho,
    name: "Northern Sotho",
    native: "Sesotho sa Leboa"
  },
  name: "Northern Sotho (South Africa)",
  native_name: "Sesotho sa Leboa (South Africa)",
  rtl: false
});
({
  id: LocaleCode.Norwegian,
  language: {
    code: LanguageCode.Norwegian,
    name: "Norwegian",
    native: "Norsk"
  },
  name: "Norwegian",
  native_name: "Norsk",
  rtl: false
});
({
  country: {
    code: CountryCode.Norway,
    name: "Norway",
    native: "Norge"
  },
  id: LocaleCode.NorwegianBokmalNorway,
  language: {
    code: LanguageCode.NorwegianBokmal,
    name: "Norwegian",
    native: "Norsk"
  },
  name: "Norwegian (Bokmal)",
  native_name: "Norsk (Bokm\xE5l)",
  rtl: false
});
({
  country: {
    code: CountryCode.Norway,
    name: "Norway",
    native: "Norge"
  },
  id: LocaleCode.NorwegianNynorskNorway,
  language: {
    code: LanguageCode.NorwegianNynorsk,
    name: "Norwegian",
    native: "Norsk"
  },
  name: "Norwegian (Nynorsk)",
  native_name: "Norsk (Nynorsk)",
  rtl: false
});
({
  id: LocaleCode.Oriya,
  language: {
    code: LanguageCode.Oriya,
    name: "Oriya",
    native: "\u0B13\u0B21\u0B3C\u0B3F\u0B06"
  },
  name: "Oriya",
  native_name: "\u0B13\u0B21\u0B3C\u0B3F\u0B06",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
  },
  id: LocaleCode.OriyaIndia,
  language: {
    code: LanguageCode.Oriya,
    name: "Oriya",
    native: "\u0B13\u0B21\u0B3C\u0B3F\u0B06"
  },
  name: "Oriya (India)",
  native_name: "\u0B13\u0B21\u0B3C\u0B3F\u0B06 (\u0B2D\u0B3E\u0B30\u0B24)",
  rtl: false
});
({
  id: LocaleCode.Pashto,
  language: {
    code: LanguageCode.Pashto,
    name: "Pashto",
    native: "\u067E\u069A\u062A\u0648"
  },
  name: "Pashto",
  native_name: "\u067E\u069A\u062A\u0648",
  rtl: true
});
({
  country: {
    code: CountryCode.Afghanistan,
    name: "Afghanistan",
    native: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode.PashtoAfghanistan,
  language: {
    code: LanguageCode.Pashto,
    name: "Pashto",
    native: "\u067E\u069A\u062A\u0648"
  },
  name: "Pashto (Afghanistan)",
  native_name: "\u067E\u069A\u062A\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode.Persian,
  language: {
    code: LanguageCode.Persian,
    name: "Persian",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Persian",
  native_name: "\u0641\u0627\u0631\u0633\u06CC",
  rtl: true
});
({
  country: {
    code: CountryCode.Iran,
    name: "Iran",
    native: "\u0627\u06CC\u0631\u0627\u0646"
  },
  id: LocaleCode.PersianIran,
  language: {
    code: LanguageCode.Persian,
    name: "Persian",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Persian (Iran)",
  native_name: "\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode.Polish,
  language: {
    code: LanguageCode.Polish,
    name: "Polish",
    native: "Polski"
  },
  name: "Polish",
  native_name: "Polski",
  rtl: false
});
({
  country: {
    code: CountryCode.Poland,
    name: "Poland",
    native: "Polska"
  },
  id: LocaleCode.PolishPoland,
  language: {
    code: LanguageCode.Polish,
    name: "Polish",
    native: "Polski"
  },
  name: "Polish (Poland)",
  native_name: "Polski (Polska)",
  rtl: false
});
({
  id: LocaleCode.Portuguese,
  language: {
    code: LanguageCode.Portuguese,
    name: "Portuguese",
    native: "Portugu\xEAs"
  },
  name: "Portuguese",
  native_name: "Portugu\xEAs",
  rtl: false
});
({
  country: {
    code: CountryCode.Brazil,
    name: "Brazil",
    native: "Brasil"
  },
  id: LocaleCode.PortugueseBrazil,
  language: {
    code: LanguageCode.Portuguese,
    name: "Portuguese",
    native: "Portugu\xEAs"
  },
  name: "Portuguese (Brazil)",
  native_name: "Portugu\xEAs (Brasil)",
  rtl: false
});
({
  country: {
    code: CountryCode.Portugal,
    name: "Portugal",
    native: "Portugal"
  },
  id: LocaleCode.PortuguesePortugal,
  language: {
    code: LanguageCode.Portuguese,
    name: "Portuguese",
    native: "Portugu\xEAs"
  },
  name: "Portuguese (Portugal)",
  native_name: "Portugu\xEAs (Portugal)",
  rtl: false
});
({
  id: LocaleCode.Punjabi,
  language: {
    code: LanguageCode.Punjabi,
    name: "Punjabi",
    native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40"
  },
  name: "Punjabi",
  native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40",
  rtl: true
});
({
  country: {
    code: CountryCode.Pakistan,
    name: "Pakistan",
    native: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode.PunjabiPakistan,
  language: {
    code: LanguageCode.Punjabi,
    name: "Punjabi",
    native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40"
  },
  name: "Punjabi (Pakistan)",
  native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0A2D\u0A3E\u0A30\u0A24"
  },
  id: LocaleCode.PunjabiIndia,
  language: {
    code: LanguageCode.Punjabi,
    name: "Punjabi",
    native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40"
  },
  name: "Punjabi (India)",
  native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u0A2D\u0A3E\u0A30\u0A24)",
  rtl: true
});
({
  id: LocaleCode.Quechua,
  language: {
    code: LanguageCode.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua",
  native_name: "Runa Simi",
  rtl: false
});
({
  country: {
    code: CountryCode.Bolivia,
    name: "Bolivia",
    native: "Bolivia"
  },
  id: LocaleCode.QuechuaBolivia,
  language: {
    code: LanguageCode.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua (Bolivia)",
  native_name: "Runa Simi (Bolivia)",
  rtl: false
});
({
  country: {
    code: CountryCode.Ecuador,
    name: "Ecuador",
    native: "Ecuador"
  },
  id: LocaleCode.QuechuaEcuador,
  language: {
    code: LanguageCode.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua (Ecuador)",
  native_name: "Runa Simi (Ecuador)",
  rtl: false
});
({
  country: {
    code: CountryCode.Peru,
    name: "Peru",
    native: "Per\xFA"
  },
  id: LocaleCode.QuechuaPeru,
  language: {
    code: LanguageCode.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua (Peru)",
  native_name: "Runa Simi (Per\xFA)",
  rtl: false
});
({
  id: LocaleCode.Romanian,
  language: {
    code: LanguageCode.Romanian,
    name: "Romanian",
    native: "Rom\xE2n\u0103"
  },
  name: "Romanian",
  native_name: "Rom\xE2n\u0103",
  rtl: false
});
({
  country: {
    code: CountryCode.Romania,
    name: "Romania",
    native: "Rom\xE2nia"
  },
  id: LocaleCode.RomanianRomania,
  language: {
    code: LanguageCode.Romanian,
    name: "Romanian",
    native: "Rom\xE2n\u0103"
  },
  name: "Romanian (Romania)",
  native_name: "Rom\xE2n\u0103 (Rom\xE2nia)",
  rtl: false
});
({
  id: LocaleCode.Russian,
  language: {
    code: LanguageCode.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439",
  rtl: false
});
({
  country: {
    code: CountryCode.RussianFederation,
    name: "Russian Federation",
    native: "\u0420\u043E\u0441\u0441\u0438\u044F"
  },
  id: LocaleCode.RussianRussia,
  language: {
    code: LanguageCode.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Russia)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0420\u043E\u0441\u0441\u0438\u044F)",
  rtl: false
});
({
  country: {
    code: CountryCode.Ukraine,
    name: "Ukraine",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430"
  },
  id: LocaleCode.RussianUkraine,
  language: {
    code: LanguageCode.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Ukraine)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)",
  rtl: false
});
({
  country: {
    code: CountryCode.Kazakhstan,
    name: "Kazakhstan",
    native: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D"
  },
  id: LocaleCode.RussianKazakhstan,
  language: {
    code: LanguageCode.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Kazakhstan)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)",
  rtl: false
});
({
  country: {
    code: CountryCode.Kyrgyzstan,
    name: "Kyrgyzstan",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430"
  },
  id: LocaleCode.RussianKyrgyzstan,
  language: {
    code: LanguageCode.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Kyrgyzstan)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430)",
  rtl: false
});
({
  id: LocaleCode.Sanskrit,
  language: {
    code: LanguageCode.Sanskrit,
    name: "Sanskrit",
    native: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D"
  },
  name: "Sanskrit",
  native_name: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.SanskritIndia,
  language: {
    code: LanguageCode.Sanskrit,
    name: "Sanskrit",
    native: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D"
  },
  name: "Sanskrit (India)",
  native_name: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode.Sami,
  language: {
    code: LanguageCode.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami",
  native_name: "S\xE1megiella",
  rtl: false
});
({
  country: {
    code: CountryCode.Finland,
    name: "Finland",
    native: "Suomi"
  },
  id: LocaleCode.SamiFinland,
  language: {
    code: LanguageCode.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami (Finland)",
  native_name: "S\xE1megiella (Suomi)",
  rtl: false
});
({
  country: {
    code: CountryCode.Norway,
    name: "Norway",
    native: "Norge"
  },
  id: LocaleCode.SamiNorway,
  language: {
    code: LanguageCode.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami (Norway)",
  native_name: "S\xE1megiella (Norge)",
  rtl: false
});
({
  country: {
    code: CountryCode.Sweden,
    name: "Sweden",
    native: "Sverige"
  },
  id: LocaleCode.SamiSweden,
  language: {
    code: LanguageCode.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami (Sweden)",
  native_name: "S\xE1megiella (Sverige)",
  rtl: false
});
({
  id: LocaleCode.Samoan,
  language: {
    code: LanguageCode.Samoan,
    name: "Samoan",
    native: "Gagana fa\u2019a S\u0101moa"
  },
  name: "Samoan",
  native_name: "Gagana fa\u2019a S\u0101moa",
  rtl: false
});
({
  country: {
    code: CountryCode.Samoa,
    name: "Samoa",
    native: "Samoa"
  },
  id: LocaleCode.SamoanSamoa,
  language: {
    code: LanguageCode.Samoan,
    name: "Samoan",
    native: "Gagana fa\u2019a S\u0101moa"
  },
  name: "Samoan (Samoa)",
  native_name: "Gagana fa\u2019a S\u0101moa (Samoa)",
  rtl: false
});
({
  id: LocaleCode.Serbian,
  language: {
    code: LanguageCode.Serbian,
    name: "Serbian (Latin)",
    native: "Srpski (Latinica)"
  },
  name: "Serbian (Latin)",
  native_name: "Srpski (Latinica)",
  rtl: false
});
({
  country: {
    code: CountryCode.BosniaAndHerzegovina,
    name: "Bosnia and Herzegovina",
    native: "Bosna i Hercegovina"
  },
  id: LocaleCode.SerbianBosniaAndHerzegovina,
  language: {
    code: LanguageCode.Serbian,
    name: "Serbian (Latin)",
    native: "Srpski (Latinica)"
  },
  name: "Serbian (Latin) (Bosnia and Herzegovina)",
  native_name: "Srpski (Latinica) (Bosna i Hercegovina)",
  rtl: false
});
({
  country: {
    code: CountryCode.SerbiaAndMontenegro,
    name: "Serbia and Montenegro",
    native: "Srbija i Crna Gora"
  },
  id: LocaleCode.SerbianSerbiaAndMontenegro,
  language: {
    code: LanguageCode.Serbian,
    name: "Serbian (Latin)",
    native: "Srpski (Latinica)"
  },
  name: "Serbian (Latin) (Serbia and Montenegro)",
  native_name: "Srpski (Latinica) (Srbija i Crna Gora)",
  rtl: false
});
({
  id: LocaleCode.SerbianCyrillic,
  language: {
    code: LanguageCode.SerbianCyrillic,
    name: "Serbian",
    native: "\u0421\u0440\u043F\u0441\u043A\u0438"
  },
  name: "Serbian (Cyrillic)",
  native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430)",
  rtl: false
});
({
  country: {
    code: CountryCode.BosniaAndHerzegovina,
    name: "Bosnia and Herzegovina",
    native: "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
  },
  id: LocaleCode.SerbianCyrillicBosniaAndHerzegovina,
  language: {
    code: LanguageCode.SerbianCyrillic,
    name: "Serbian",
    native: "\u0421\u0440\u043F\u0441\u043A\u0438"
  },
  name: "Serbian (Cyrillic, Bosnia and Herzegovina)",
  native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430)",
  rtl: false
});
({
  country: {
    code: CountryCode.SerbiaAndMontenegro,
    name: "Serbia and Montenegro",
    native: "\u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430"
  },
  id: LocaleCode.SerbianCyrillicSerbiaAndMontenegro,
  language: {
    code: LanguageCode.SerbianCyrillic,
    name: "Serbian",
    native: "\u0421\u0440\u043F\u0441\u043A\u0438"
  },
  name: "Serbian (Cyrillic, Serbia and Montenegro)",
  native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430)",
  rtl: false
});
({
  id: LocaleCode.Slovak,
  language: {
    code: LanguageCode.Slovak,
    name: "Slovak",
    native: "Sloven\u010Dina"
  },
  name: "Slovak",
  native_name: "Sloven\u010Dina",
  rtl: false
});
({
  country: {
    code: CountryCode.Slovakia,
    name: "Slovakia",
    native: "Slovensko"
  },
  id: LocaleCode.SlovakSlovakia,
  language: {
    code: LanguageCode.Slovak,
    name: "Slovak",
    native: "Sloven\u010Dina"
  },
  name: "Slovak (Slovakia)",
  native_name: "Sloven\u010Dina (Slovensko)",
  rtl: false
});
({
  id: LocaleCode.Slovenian,
  language: {
    code: LanguageCode.Slovenian,
    name: "Slovenian",
    native: "Sloven\u0161\u010Dina"
  },
  name: "Slovenian",
  native_name: "Sloven\u0161\u010Dina",
  rtl: false
});
({
  country: {
    code: CountryCode.Slovenia,
    name: "Slovenia",
    native: "Slovenija"
  },
  id: LocaleCode.SlovenianSlovenia,
  language: {
    code: LanguageCode.Slovenian,
    name: "Slovenian",
    native: "Sloven\u0161\u010Dina"
  },
  name: "Slovenian (Slovenia)",
  native_name: "Sloven\u0161\u010Dina (Slovenija)",
  rtl: false
});
({
  id: LocaleCode.Somali,
  language: {
    code: LanguageCode.Somali,
    name: "Somali",
    native: "Soomaaliga"
  },
  name: "Somali",
  native_name: "Soomaaliga",
  rtl: true
});
({
  country: {
    code: CountryCode.Somalia,
    name: "Somalia",
    native: "Soomaaliya"
  },
  id: LocaleCode.SomaliSomalia,
  language: {
    code: LanguageCode.Somali,
    name: "Somali",
    native: "Soomaaliga"
  },
  name: "Somali (Somalia)",
  native_name: "Soomaaliga (Soomaaliya)",
  rtl: true
});
({
  id: LocaleCode.Spanish,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish",
  native_name: "Espa\xF1ol",
  rtl: false
});
({
  country: {
    code: CountryCode.Argentina,
    name: "Argentina",
    native: "Argentina"
  },
  id: LocaleCode.SpanishArgentina,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Argentina)",
  native_name: "Espa\xF1ol (Argentina)",
  rtl: false
});
({
  country: {
    code: CountryCode.Bolivia,
    name: "Bolivia",
    native: "Bolivia"
  },
  id: LocaleCode.SpanishBolivia,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Bolivia)",
  native_name: "Espa\xF1ol (Bolivia)",
  rtl: false
});
({
  country: {
    code: CountryCode.Chile,
    name: "Chile",
    native: "Chile"
  },
  id: LocaleCode.SpanishChile,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Chile)",
  native_name: "Espa\xF1ol (Chile)",
  rtl: false
});
({
  country: {
    code: CountryCode.Colombia,
    name: "Colombia",
    native: "Colombia"
  },
  id: LocaleCode.SpanishColombia,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Colombia)",
  native_name: "Espa\xF1ol (Colombia)",
  rtl: false
});
({
  country: {
    code: CountryCode.CostaRica,
    name: "Costa Rica",
    native: "Costa Rica"
  },
  id: LocaleCode.SpanishCostaRica,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Costa Rica)",
  native_name: "Espa\xF1ol (Costa Rica)",
  rtl: false
});
({
  country: {
    code: CountryCode.Cuba,
    name: "Cuba",
    native: "Cuba"
  },
  id: LocaleCode.SpanishCuba,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Cuba)",
  native_name: "Espa\xF1ol (Cuba)",
  rtl: false
});
({
  country: {
    code: CountryCode.DominicanRepublic,
    name: "Dominican Republic",
    native: "Rep\xFAblica Dominicana"
  },
  id: LocaleCode.SpanishDominicanRepublic,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Dominican Republic)",
  native_name: "Espa\xF1ol (Rep\xFAblica Dominicana)",
  rtl: false
});
({
  country: {
    code: CountryCode.Ecuador,
    name: "Ecuador",
    native: "Ecuador"
  },
  id: LocaleCode.SpanishEcuador,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Ecuador)",
  native_name: "Espa\xF1ol (Ecuador)",
  rtl: false
});
({
  country: {
    code: CountryCode.ElSalvador,
    name: "El Salvador",
    native: "El Salvador"
  },
  id: LocaleCode.SpanishElSalvador,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (El Salvador)",
  native_name: "Espa\xF1ol (El Salvador)",
  rtl: false
});
({
  country: {
    code: CountryCode.EquatorialGuinea,
    name: "Equatorial Guinea",
    native: "Guinea Ecuatorial"
  },
  id: LocaleCode.SpanishEquatorialGuinea,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Equatorial Guinea)",
  native_name: "Espa\xF1ol (Guinea Ecuatorial)",
  rtl: false
});
({
  country: {
    code: CountryCode.Guatemala,
    name: "Guatemala",
    native: "Guatemala"
  },
  id: LocaleCode.SpanishGuatemala,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Guatemala)",
  native_name: "Espa\xF1ol (Guatemala)",
  rtl: false
});
({
  country: {
    code: CountryCode.Honduras,
    name: "Honduras",
    native: "Honduras"
  },
  id: LocaleCode.SpanishHonduras,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Honduras)",
  native_name: "Espa\xF1ol (Honduras)",
  rtl: false
});
({
  country: {
    code: CountryCode.Mexico,
    name: "Mexico",
    native: "M\xE9xico"
  },
  id: LocaleCode.SpanishMexico,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Mexico)",
  native_name: "Espa\xF1ol (M\xE9xico)",
  rtl: false
});
({
  country: {
    code: CountryCode.Nicaragua,
    name: "Nicaragua",
    native: "Nicaragua"
  },
  id: LocaleCode.SpanishNicaragua,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Nicaragua)",
  native_name: "Espa\xF1ol (Nicaragua)",
  rtl: false
});
({
  country: {
    code: CountryCode.Panama,
    name: "Panama",
    native: "Panam\xE1"
  },
  id: LocaleCode.SpanishPanama,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Panama)",
  native_name: "Espa\xF1ol (Panam\xE1)",
  rtl: false
});
({
  country: {
    code: CountryCode.Paraguay,
    name: "Paraguay",
    native: "Paraguay"
  },
  id: LocaleCode.SpanishParaguay,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Paraguay)",
  native_name: "Espa\xF1ol (Paraguay)",
  rtl: false
});
({
  country: {
    code: CountryCode.Peru,
    name: "Peru",
    native: "Per\xFA"
  },
  id: LocaleCode.SpanishPeru,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Peru)",
  native_name: "Espa\xF1ol (Per\xFA)",
  rtl: false
});
({
  country: {
    code: CountryCode.PuertoRico,
    name: "Puerto Rico",
    native: "Puerto Rico"
  },
  id: LocaleCode.SpanishPuertoRico,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Puerto Rico)",
  native_name: "Espa\xF1ol (Puerto Rico)",
  rtl: false
});
({
  country: {
    code: CountryCode.Uruguay,
    name: "Uruguay",
    native: "Uruguay"
  },
  id: LocaleCode.SpanishUruguay,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Uruguay)",
  native_name: "Espa\xF1ol (Uruguay)",
  rtl: false
});
({
  country: {
    code: CountryCode.Venezuela,
    name: "Venezuela",
    native: "Venezuela"
  },
  id: LocaleCode.SpanishVenezuela,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Venezuela)",
  native_name: "Espa\xF1ol (Venezuela)",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.SutuSouthAfrica,
  language: {
    code: LanguageCode.Sutu,
    name: "Sutu",
    native: "Sesotho"
  },
  name: "Sutu (South Africa)",
  native_name: "Sesotho (Afrika Borwa)",
  rtl: false
});
({
  id: LocaleCode.Swahili,
  language: {
    code: LanguageCode.Swahili,
    name: "Swahili",
    native: "Kiswahili"
  },
  name: "Swahili",
  native_name: "Kiswahili",
  rtl: false
});
({
  country: {
    code: CountryCode.Kenya,
    name: "Kenya",
    native: "Kenya"
  },
  id: LocaleCode.SwahiliKenya,
  language: {
    code: LanguageCode.Swahili,
    name: "Swahili",
    native: "Kiswahili"
  },
  name: "Swahili (Kenya)",
  native_name: "Kiswahili (Kenya)",
  rtl: false
});
({
  id: LocaleCode.Swedish,
  language: {
    code: LanguageCode.Swedish,
    name: "Swedish",
    native: "Svenska"
  },
  name: "Swedish",
  native_name: "Svenska",
  rtl: false
});
({
  country: {
    code: CountryCode.Finland,
    name: "Finland",
    native: "Suomi"
  },
  id: LocaleCode.SwedishFinland,
  language: {
    code: LanguageCode.Swedish,
    name: "Swedish",
    native: "Svenska"
  },
  name: "Swedish (Finland)",
  native_name: "Svenska (Finland)",
  rtl: false
});
({
  country: {
    code: CountryCode.Sweden,
    name: "Sweden",
    native: "Sverige"
  },
  id: LocaleCode.SwedishSweden,
  language: {
    code: LanguageCode.Swedish,
    name: "Swedish",
    native: "Svenska"
  },
  name: "Swedish (Sweden)",
  native_name: "Svenska (Sverige)",
  rtl: false
});
({
  id: LocaleCode.Syriac,
  language: {
    code: LanguageCode.Syriac,
    name: "Syriac",
    native: "\u0723\u0718\u072A\u071D\u071D\u0710"
  },
  name: "Syriac",
  native_name: "\u0723\u0718\u072A\u071D\u071D\u0710",
  rtl: true
});
({
  country: {
    code: CountryCode.Syria,
    name: "Syria",
    native: "\u0633\u0648\u0631\u064A\u0627"
  },
  id: LocaleCode.SyriacSyria,
  language: {
    code: LanguageCode.Syriac,
    name: "Syriac",
    native: "\u0723\u0718\u072A\u071D\u071D\u0710"
  },
  name: "Syriac (Syria)",
  native_name: "\u0723\u0718\u072A\u071D\u071D\u0710 (\u0633\u0648\u0631\u064A\u0627)",
  rtl: true
});
({
  id: LocaleCode.Tajik,
  language: {
    code: LanguageCode.Tajik,
    name: "Tajik",
    native: "\u0422\u043E\u04B7\u0438\u043A\u04E3"
  },
  name: "Tajik",
  native_name: "\u0422\u043E\u04B7\u0438\u043A\u04E3",
  rtl: false
});
({
  country: {
    code: CountryCode.Tajikistan,
    name: "Tajikistan",
    native: "\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D"
  },
  id: LocaleCode.TajikTajikistan,
  language: {
    code: LanguageCode.Tajik,
    name: "Tajik",
    native: "\u0422\u043E\u04B7\u0438\u043A\u04E3"
  },
  name: "Tajik (Tajikistan)",
  native_name: "\u0422\u043E\u04B7\u0438\u043A\u04E3 (\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D)",
  rtl: false
});
({
  id: LocaleCode.Tagalog,
  language: {
    code: LanguageCode.Tagalog,
    name: "Tagalog",
    native: "Tagalog"
  },
  name: "Tagalog",
  native_name: "Tagalog",
  rtl: false
});
({
  country: {
    code: CountryCode.Philippines,
    name: "Philippines",
    native: "Pilipinas"
  },
  id: LocaleCode.TagalogPhilippines,
  language: {
    code: LanguageCode.Tagalog,
    name: "Tagalog",
    native: "Tagalog"
  },
  name: "Tagalog (Philippines)",
  native_name: "Tagalog (Pilipinas)",
  rtl: false
});
({
  id: LocaleCode.Tamil,
  language: {
    code: LanguageCode.Tamil,
    name: "Tamil",
    native: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD"
  },
  name: "Tamil",
  native_name: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
  },
  id: LocaleCode.TamilIndia,
  language: {
    code: LanguageCode.Tamil,
    name: "Tamil",
    native: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD"
  },
  name: "Tamil (India)",
  native_name: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)",
  rtl: false
});
({
  id: LocaleCode.Telugu,
  language: {
    code: LanguageCode.Telugu,
    name: "Telugu",
    native: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41"
  },
  name: "Telugu",
  native_name: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02"
  },
  id: LocaleCode.TeluguIndia,
  language: {
    code: LanguageCode.Telugu,
    name: "Telugu",
    native: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41"
  },
  name: "Telugu (India)",
  native_name: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41 (\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02)",
  rtl: false
});
({
  id: LocaleCode.Thai,
  language: {
    code: LanguageCode.Thai,
    name: "Thai",
    native: "\u0E44\u0E17\u0E22"
  },
  name: "Thai",
  native_name: "\u0E44\u0E17\u0E22",
  rtl: false
});
({
  country: {
    code: CountryCode.Thailand,
    name: "Thailand",
    native: "\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22"
  },
  id: LocaleCode.ThaiThailand,
  language: {
    code: LanguageCode.Thai,
    name: "Thai",
    native: "\u0E44\u0E17\u0E22"
  },
  name: "Thai (Thailand)",
  native_name: "\u0E44\u0E17\u0E22 (\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22)",
  rtl: false
});
({
  id: LocaleCode.Tibetan,
  language: {
    code: LanguageCode.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42",
  rtl: false
});
({
  country: {
    code: CountryCode.China,
    name: "China",
    native: "\u4E2D\u56FD"
  },
  id: LocaleCode.TibetanChina,
  language: {
    code: LanguageCode.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan (China)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42)",
  rtl: false
});
({
  country: {
    code: CountryCode.Bhutan,
    name: "Bhutan",
    native: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D"
  },
  id: LocaleCode.TibetanBhutan,
  language: {
    code: LanguageCode.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan (Bhutan)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D)",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
  },
  id: LocaleCode.TibetanIndia,
  language: {
    code: LanguageCode.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan (India)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)",
  rtl: false
});
({
  id: LocaleCode.Tsonga,
  language: {
    code: LanguageCode.Tsonga,
    name: "Tsonga",
    native: "Xitsonga"
  },
  name: "Tsonga",
  native_name: "Xitsonga",
  rtl: false
});
({
  id: LocaleCode.Tswana,
  language: {
    code: LanguageCode.Tswana,
    name: "Tswana",
    native: "Setswana"
  },
  name: "Tswana",
  native_name: "Setswana",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.TswanaSouthAfrica,
  language: {
    code: LanguageCode.Tswana,
    name: "Tswana",
    native: "Setswana"
  },
  name: "Tswana (South Africa)",
  native_name: "Setswana (South Africa)",
  rtl: false
});
({
  id: LocaleCode.Turkish,
  language: {
    code: LanguageCode.Turkish,
    name: "Turkish",
    native: "T\xFCrk\xE7e"
  },
  name: "Turkish",
  native_name: "T\xFCrk\xE7e",
  rtl: false
});
({
  country: {
    code: CountryCode.Turkey,
    name: "Turkey",
    native: "T\xFCrkiye"
  },
  id: LocaleCode.TurkishTurkey,
  language: {
    code: LanguageCode.Turkish,
    name: "Turkish",
    native: "T\xFCrk\xE7e"
  },
  name: "Turkish (Turkey)",
  native_name: "T\xFCrk\xE7e (T\xFCrkiye)",
  rtl: false
});
({
  id: LocaleCode.Ukrainian,
  language: {
    code: LanguageCode.Ukrainian,
    name: "Ukrainian",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430"
  },
  name: "Ukrainian",
  native_name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430",
  rtl: false
});
({
  country: {
    code: CountryCode.Ukraine,
    name: "Ukraine",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430"
  },
  id: LocaleCode.UkrainianUkraine,
  language: {
    code: LanguageCode.Ukrainian,
    name: "Ukrainian",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430"
  },
  name: "Ukrainian (Ukraine)",
  native_name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)",
  rtl: false
});
({
  id: LocaleCode.Urdu,
  language: {
    code: LanguageCode.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu",
  native_name: "\u0627\u0631\u062F\u0648",
  rtl: true
});
({
  country: {
    code: CountryCode.Afghanistan,
    name: "Afghanistan",
    native: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode.UrduAfghanistan,
  language: {
    code: LanguageCode.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu (Afghanistan)",
  native_name: "\u0627\u0631\u062F\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.UrduIndia,
  language: {
    code: LanguageCode.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu (India)",
  native_name: "\u0627\u0631\u062F\u0648 (\u092D\u093E\u0930\u0924)",
  rtl: true
});
({
  country: {
    code: CountryCode.Pakistan,
    name: "Pakistan",
    native: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode.UrduPakistan,
  language: {
    code: LanguageCode.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu (Pakistan)",
  native_name: "\u0627\u0631\u062F\u0648 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode.Uzbek,
  language: {
    code: LanguageCode.Uzbek,
    name: "Uzbek",
    native: "O\u02BBzbekcha"
  },
  name: "Uzbek",
  native_name: "O\u02BBzbekcha",
  rtl: false
});
({
  country: {
    code: CountryCode.Uzbekistan,
    name: "Uzbekistan",
    native: "O\u02BBzbekiston"
  },
  id: LocaleCode.UzbekUzbekistan,
  language: {
    code: LanguageCode.Uzbek,
    name: "Uzbek",
    native: "O\u02BBzbekcha"
  },
  name: "Uzbek (Latin, Uzbekistan)",
  native_name: "O\u02BBzbekcha (O\u02BBzbekiston)",
  rtl: false
});
({
  country: {
    code: CountryCode.Uzbekistan,
    name: "Uzbekistan",
    native: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D"
  },
  id: LocaleCode.UzbekCyrillic,
  language: {
    code: LanguageCode.Uzbek,
    name: "Uzbek",
    native: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D"
  },
  name: "Uzbek (Cyrillic)",
  native_name: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D (\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D)",
  rtl: false
});
({
  id: LocaleCode.Vietnamese,
  language: {
    code: LanguageCode.Vietnamese,
    name: "Vietnamese",
    native: "Ti\u1EBFng Vi\u1EC7t"
  },
  name: "Vietnamese",
  native_name: "Ti\u1EBFng Vi\u1EC7t",
  rtl: false
});
({
  country: {
    code: CountryCode.Vietnam,
    name: "Vietnam",
    native: "Vi\u1EC7t Nam"
  },
  id: LocaleCode.VietnameseVietnam,
  language: {
    code: LanguageCode.Vietnamese,
    name: "Vietnamese",
    native: "Ti\u1EBFng Vi\u1EC7t"
  },
  name: "Vietnamese (Vietnam)",
  native_name: "Ti\u1EBFng Vi\u1EC7t (Vi\u1EC7t Nam)",
  rtl: false
});
({
  id: LocaleCode.Welsh,
  language: {
    code: LanguageCode.Welsh,
    name: "Welsh",
    native: "Cymraeg"
  },
  name: "Welsh",
  native_name: "Cymraeg",
  rtl: false
});
({
  country: {
    code: CountryCode.UnitedKingdom,
    name: "United Kingdom",
    native: "United Kingdom"
  },
  id: LocaleCode.WelshUnitedKingdom,
  language: {
    code: LanguageCode.Welsh,
    name: "Welsh",
    native: "Cymraeg"
  },
  name: "Welsh (United Kingdom)",
  native_name: "Cymraeg (United Kingdom)",
  rtl: false
});
({
  id: LocaleCode.Xhosa,
  language: {
    code: LanguageCode.Xhosa,
    name: "Xhosa",
    native: "isiXhosa"
  },
  name: "Xhosa",
  native_name: "isiXhosa",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.XhosaSouthAfrica,
  language: {
    code: LanguageCode.Xhosa,
    name: "Xhosa",
    native: "isiXhosa"
  },
  name: "Xhosa (South Africa)",
  native_name: "isiXhosa (South Africa)",
  rtl: false
});
({
  id: LocaleCode.Yiddish,
  language: {
    code: LanguageCode.Yiddish,
    name: "Yiddish",
    native: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9"
  },
  name: "Yiddish",
  native_name: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9",
  rtl: false
});
({
  id: LocaleCode.Yoruba,
  language: {
    code: LanguageCode.Yoruba,
    name: "Yoruba",
    native: "Yor\xF9b\xE1"
  },
  name: "Yoruba",
  native_name: "Yor\xF9b\xE1",
  rtl: false
});
({
  country: {
    code: CountryCode.Nigeria,
    name: "Nigeria",
    native: "Nigeria"
  },
  id: LocaleCode.YorubaNigeria,
  language: {
    code: LanguageCode.Yoruba,
    name: "Yoruba",
    native: "Yor\xF9b\xE1"
  },
  name: "Yoruba (Nigeria)",
  native_name: "Yor\xF9b\xE1 (Nigeria)",
  rtl: false
});
({
  id: LocaleCode.Zulu,
  language: {
    code: LanguageCode.Zulu,
    name: "Zulu",
    native: "isiZulu"
  },
  name: "Zulu",
  native_name: "isiZulu",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.ZuluSouthAfrica,
  language: {
    code: LanguageCode.Zulu,
    name: "Zulu",
    native: "isiZulu"
  },
  name: "Zulu (South Africa)",
  native_name: "isiZulu (South Africa)",
  rtl: false
});
({
  id: TimezoneRegions.AfricaAbidjan,
  name: "Africa/Abidjan",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaAccra,
  name: "Africa/Accra",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaAddisAbaba,
  name: "Africa/Addis_Ababa",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaAlgiers,
  name: "Africa/Algiers",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.AfricaAsmara,
  name: "Africa/Asmara",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaBamako,
  name: "Africa/Bamako",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaBangui,
  name: "Africa/Bangui",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaBanjul,
  name: "Africa/Banjul",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaBissau,
  name: "Africa/Bissau",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaBlantyre,
  name: "Africa/Blantyre",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaBrazzaville,
  name: "Africa/Brazzaville",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaBujumbura,
  name: "Africa/Bujumbura",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaCairo,
  name: "Africa/Cairo",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AfricaCasablanca,
  name: "Africa/Casablanca",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WesternEuropeanTime
});
({
  id: TimezoneRegions.AfricaCeuta,
  name: "Africa/Ceuta",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.AfricaConakry,
  name: "Africa/Conakry",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaDakar,
  name: "Africa/Dakar",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaDarEsSalaam,
  name: "Africa/Dar_es_Salaam",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaDjibouti,
  name: "Africa/Djibouti",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaDouala,
  name: "Africa/Douala",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaElAaiun,
  name: "Africa/El_Aaiun",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaFreetown,
  name: "Africa/Freetown",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaGaborone,
  name: "Africa/Gaborone",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaHarare,
  name: "Africa/Harare",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaJohannesburg,
  name: "Africa/Johannesburg",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.SouthAfricanStandardTime
});
({
  id: TimezoneRegions.AfricaJuba,
  name: "Africa/Juba",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaKampala,
  name: "Africa/Kampala",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaKhartoum,
  name: "Africa/Khartoum",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaKigali,
  name: "Africa/Kigali",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaKinshasa,
  name: "Africa/Kinshasa",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaLagos,
  name: "Africa/Lagos",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaLibreville,
  name: "Africa/Libreville",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaLome,
  name: "Africa/Lome",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaLuanda,
  name: "Africa/Luanda",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaLubumbashi,
  name: "Africa/Lubumbashi",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaLusaka,
  name: "Africa/Lusaka",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaMalabo,
  name: "Africa/Malabo",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaMaputo,
  name: "Africa/Maputo",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaMaseru,
  name: "Africa/Maseru",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.SouthAfricanStandardTime
});
({
  id: TimezoneRegions.AfricaMbabane,
  name: "Africa/Mbabane",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.SouthAfricanStandardTime
});
({
  id: TimezoneRegions.AfricaMogadishu,
  name: "Africa/Mogadishu",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaMonrovia,
  name: "Africa/Monrovia",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaNairobi,
  name: "Africa/Nairobi",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaNdjamena,
  name: "Africa/Ndjamena",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaNiamey,
  name: "Africa/Niamey",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaNouakchott,
  name: "Africa/Nouakchott",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.AfricaOuagadougou,
  name: "Africa/Ouagadougou",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaPortoNovo,
  name: "Africa/Porto-Novo",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaSaoTome,
  name: "Africa/SaoTome",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaTripoli,
  name: "Africa/Tripoli",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaTunis,
  name: "Africa/Tunis",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaWindhoek,
  name: "Africa/Windhoek",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AmericaAdak,
  name: "America/Adak",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions.AmericaAnchorage,
  name: "America/Anchorage",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaAnguilla,
  name: "America/Anguilla",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaAntigua,
  name: "America/Antigua",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaAraguaina,
  name: "America/Araguaina",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaArgentinaBuenosAires,
  name: "America/Argentina/Buenos_Aires",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaCatamarca,
  name: "America/Argentina/Catamarca",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaCordoba,
  name: "America/Argentina/Cordoba",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaJujuy,
  name: "America/Argentina/Jujuy",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaLaRioja,
  name: "America/Argentina/La_Rioja",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaMendoza,
  name: "America/Argentina/Mendoza",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaRioGallegos,
  name: "America/Argentina/Rio_Gallegos",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaSalta,
  name: "America/Argentina/Salta",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaSanJuan,
  name: "America/Argentina/San_Juan",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaSanLuis,
  name: "America/Argentina/San_Luis",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaTucuman,
  name: "America/Argentina/Tucuman",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaUshuaia,
  name: "America/Argentina/Ushuaia",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaAruba,
  name: "America/Aruba",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaAsuncion,
  name: "America/Asuncion",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.ParaguayTime
});
({
  id: TimezoneRegions.AmericaAtikokan,
  name: "America/Atikokan",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaAtka,
  name: "America/Atka",
  offset: TimezoneOffset.UTC_MINUS_10,
  timezone: Timezones.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions.AmericaBahia,
  name: "America/Bahia",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaBahiaBanderas,
  name: "America/Bahia_Banderas",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaBarbados,
  name: "America/Barbados",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaBelem,
  name: "America/Belem",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaBelize,
  name: "America/Belize",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaBlancSablon,
  name: "America/Blanc-Sablon",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaBoaVista,
  name: "America/Boa_Vista",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AmazonTime
});
({
  id: TimezoneRegions.AmericaBogota,
  name: "America/Bogota",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.ColombiaTime
});
({
  id: TimezoneRegions.AmericaBoise,
  name: "America/Boise",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaCambridgeBay,
  name: "America/Cambridge_Bay",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaCampoGrande,
  name: "America/Campo_Grande",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AmazonTime
});
({
  id: TimezoneRegions.AmericaCancun,
  name: "America/Cancun",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaCaracas,
  name: "America/Caracas",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.VenezuelaStandardTime
});
({
  id: TimezoneRegions.AmericaCayenne,
  name: "America/Cayenne",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.FrenchGuianaTime
});
({
  id: TimezoneRegions.AmericaCayman,
  name: "America/Cayman",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaChicago,
  name: "America/Chicago",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaChihuahua,
  name: "America/Chihuahua",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaCoralHarbour,
  name: "America/Coral_Harbour",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaCordoba,
  name: "America/Cordoba",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaCostaRica,
  name: "America/Costa_Rica",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaCreston,
  name: "America/Creston",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaCuiaba,
  name: "America/Cuiaba",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AmazonTime
});
({
  id: TimezoneRegions.AmericaCuracao,
  name: "America/Curacao",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaDanmarkshavn,
  name: "America/Danmarkshavn",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.AmericaDawson,
  name: "America/Dawson",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaDawsonCreek,
  name: "America/Dawson_Creek",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaDenver,
  name: "America/Denver",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaDetroit,
  name: "America/Detroit",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaDominica,
  name: "America/Dominica",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaEdmonton,
  name: "America/Edmonton",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaEirunepe,
  name: "America/Eirunepe",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.AcreTime
});
({
  id: TimezoneRegions.AmericaElSalvador,
  name: "America/El_Salvador",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaFortaleza,
  name: "America/Fortaleza",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaGlaceBay,
  name: "America/Glace_Bay",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaGodthab,
  name: "America/Godthab",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.WestGreenlandTime
});
({
  id: TimezoneRegions.AmericaGooseBay,
  name: "America/Goose_Bay",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaGrandTurk,
  name: "America/Grand_Turk",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaGrenada,
  name: "America/Grenada",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaGuadeloupe,
  name: "America/Guadeloupe",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaGuatemala,
  name: "America/Guatemala",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaGuayaquil,
  name: "America/Guayaquil",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EcuadorTime
});
({
  id: TimezoneRegions.AmericaGuyana,
  name: "America/Guyana",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaHalifax,
  name: "America/Halifax",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaHavana,
  name: "America/Havana",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.CubaStandardTime
});
({
  id: TimezoneRegions.AmericaHermosillo,
  name: "America/Hermosillo",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaIndianapolis,
  name: "America/Indiana/Indianapolis",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaKnox,
  name: "America/Indiana/Knox",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaMarengo,
  name: "America/Indiana/Marengo",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaPetersburg,
  name: "America/Indiana/Petersburg",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaTellCity,
  name: "America/Indiana/Tell_City",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaVevay,
  name: "America/Indiana/Vevay",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaVincennes,
  name: "America/Indiana/Vincennes",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaWinamac,
  name: "America/Indiana/Winamac",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaInuvik,
  name: "America/Inuvik",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaIqaluit,
  name: "America/Iqaluit",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaJamaica,
  name: "America/Jamaica",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaJuneau,
  name: "America/Juneau",
  offset: TimezoneOffset.UTC_MINUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaKentuckyLouisville,
  name: "America/Kentucky/Louisville",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaKentuckyMonticello,
  name: "America/Kentucky/Monticello",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaKralendijk,
  name: "America/Kralendijk",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaLaPaz,
  name: "America/La_Paz",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.BoliviaTime
});
({
  id: TimezoneRegions.AmericaLima,
  name: "America/Lima",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.PeruTime
});
({
  id: TimezoneRegions.AmericaLosAngeles,
  name: "America/Los_Angeles",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaLouisville,
  name: "America/Louisville",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaLowerPrinces,
  name: "America/Lower_Princes",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaMaceio,
  name: "America/Maceio",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaManagua,
  name: "America/Managua",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaManaus,
  name: "America/Manaus",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AmazonTime
});
({
  id: TimezoneRegions.AmericaMarigot,
  name: "America/Marigot",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaMartinique,
  name: "America/Martinique",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaMatamoros,
  name: "America/Matamoros",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaMazatlan,
  name: "America/Mazatlan",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaMenominee,
  name: "America/Menominee",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaMerida,
  name: "America/Merida",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaMetlakatla,
  name: "America/Metlakatla",
  offset: TimezoneOffset.UTC_MINUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaMexicoCity,
  name: "America/Mexico_City",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaMiquelon,
  name: "America/Miquelon",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.SaintPierreAndMiquelonStandardTime
});
({
  id: TimezoneRegions.AmericaMoncton,
  name: "America/Moncton",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaMonterrey,
  name: "America/Monterrey",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaMontevideo,
  name: "America/Montevideo",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.UruguayStandardTime
});
({
  id: TimezoneRegions.AmericaMontreal,
  name: "America/Montreal",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaMontserrat,
  name: "America/Montserrat",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaNassau,
  name: "America/Nassau",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaNewYork,
  name: "America/New_York",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaNipigon,
  name: "America/Nipigon",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaNome,
  name: "America/Nome",
  offset: TimezoneOffset.UTC_MINUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaNoronha,
  name: "America/Noronha",
  offset: TimezoneOffset.UTC_MINUS_2,
  timezone: Timezones.FernandoDeNoronhaTime
});
({
  id: TimezoneRegions.AmericaNorthDakotaBeulah,
  name: "America/North_Dakota/Beulah",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaNorthDakotaCenter,
  name: "America/North_Dakota/Center",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaNorthDakotaNewSalem,
  name: "America/North_Dakota/New_Salem",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaOjinaga,
  name: "America/Ojinaga",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaPanama,
  name: "America/Panama",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaPangnirtung,
  name: "America/Pangnirtung",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaParamaribo,
  name: "America/Paramaribo",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.SurinameTime
});
({
  id: TimezoneRegions.AmericaPhoenix,
  name: "America/Phoenix",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaPortAuPrince,
  name: "America/Port-au-Prince",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaPortOfSpain,
  name: "America/Port_of_Spain",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaPortoVelho,
  name: "America/Porto_Velho",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AmazonTime
});
({
  id: TimezoneRegions.AmericaPuertoRico,
  name: "America/Puerto_Rico",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaRainyRiver,
  name: "America/Rainy_River",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaRankinInlet,
  name: "America/Rankin_Inlet",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaRecife,
  name: "America/Recife",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaRegina,
  name: "America/Regina",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaResolute,
  name: "America/Resolute",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaRioBranco,
  name: "America/Rio_Branco",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.AcreTime
});
({
  id: TimezoneRegions.AmericaSantaIsabel,
  name: "America/Santa_Isabel",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaSantarem,
  name: "America/Santarem",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaSantiago,
  name: "America/Santiago",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.ChileStandardTime
});
({
  id: TimezoneRegions.AmericaSantoDomingo,
  name: "America/Santo_Domingo",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaSaoPaulo,
  name: "America/Sao_Paulo",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaScoresbysund,
  name: "America/Scoresbysund",
  offset: TimezoneOffset.UTC_MINUS_1,
  timezone: Timezones.EasternGreenlandTime
});
({
  id: TimezoneRegions.AmericaShiprock,
  name: "America/Shiprock",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaSitka,
  name: "America/Sitka",
  offset: TimezoneOffset.UTC_MINUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaStBarthelemy,
  name: "America/St_Barthelemy",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaStJohns,
  name: "America/St_Johns",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.NewfoundlandStandardTime
});
({
  id: TimezoneRegions.AmericaStKitts,
  name: "America/St_Kitts",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaStLucia,
  name: "America/St_Lucia",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaStThomas,
  name: "America/St_Thomas",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaStVincent,
  name: "America/St_Vincent",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaSwiftCurrent,
  name: "America/Swift_Current",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaTegucigalpa,
  name: "America/Tegucigalpa",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaThule,
  name: "America/Thule",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaThunderBay,
  name: "America/Thunder_Bay",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaTijuana,
  name: "America/Tijuana",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaToronto,
  name: "America/Toronto",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaTortola,
  name: "America/Tortola",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaVancouver,
  name: "America/Vancouver",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaWhitehorse,
  name: "America/Whitehorse",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaWinnipeg,
  name: "America/Winnipeg",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaYakutat,
  name: "America/Yakutat",
  offset: TimezoneOffset.UTC_MINUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaYellowknife,
  name: "America/Yellowknife",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AntarcticaCasey,
  name: "Antarctica/Casey",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.WesternStandardTime
});
({
  id: TimezoneRegions.AntarcticaDavis,
  name: "Antarctica/Davis",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.NewfoundlandStandardTime
});
({
  id: TimezoneRegions.AntarcticaDumontDUrville,
  name: "Antarctica/DumontDUrville",
  offset: TimezoneOffset.UTC_MINUS_10,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AntarcticaMacquarie,
  name: "Antarctica/Macquarie",
  offset: TimezoneOffset.UTC_MINUS_11,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AntarcticaMawson,
  name: "Antarctica/Mawson",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AntarcticaMcMurdo,
  name: "Antarctica/McMurdo",
  offset: TimezoneOffset.UTC_MINUS_12,
  timezone: Timezones.NewZealandStandardTime
});
({
  id: TimezoneRegions.AntarcticaPalmer,
  name: "Antarctica/Palmer",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.ChathamStandardTime
});
({
  id: TimezoneRegions.AntarcticaRothera,
  name: "Antarctica/Rothera",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.RotheraResearchStationTime
});
({
  id: TimezoneRegions.AntarcticaSyowa,
  name: "Antarctica/Syowa",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ShowaStationTime
});
({
  id: TimezoneRegions.AntarcticaTroll,
  name: "Antarctica/Troll",
  offset: TimezoneOffset.UTC_MINUS_2,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AntarcticaVostok,
  name: "Antarctica/Vostok",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.ArcticLongyearbyen,
  name: "Arctic/Longyearbyen",
  offset: TimezoneOffset.UTC_MINUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.AsiaAden,
  name: "Asia/Aden",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaAlmaty,
  name: "Asia/Almaty",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.AlmaAtaTime
});
({
  id: TimezoneRegions.AsiaAmman,
  name: "Asia/Amman",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaAnadyr,
  name: "Asia/Anadyr",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.NewCaledoniaTime
});
({
  id: TimezoneRegions.AsiaAqtau,
  name: "Asia/Aqtau",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.AqtobeTime
});
({
  id: TimezoneRegions.AsiaAqtobe,
  name: "Asia/Aqtobe",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.AqtobeTime
});
({
  id: TimezoneRegions.AsiaAshgabat,
  name: "Asia/Ashgabat",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.TurkmenistanTime
});
({
  id: TimezoneRegions.AsiaBaghdad,
  name: "Asia/Baghdad",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaBahrain,
  name: "Asia/Bahrain",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaBaku,
  name: "Asia/Baku",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.AzerbaijanTime
});
({
  id: TimezoneRegions.AsiaBangkok,
  name: "Asia/Bangkok",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.IndochinaTime
});
({
  id: TimezoneRegions.AsiaBarnaul,
  name: "Asia/Barnaul",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.KrasnoyarskTime
});
({
  id: TimezoneRegions.AsiaBeirut,
  name: "Asia/Beirut",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaBishkek,
  name: "Asia/Bishkek",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.KyrgyzstanTime
});
({
  id: TimezoneRegions.AsiaBrunei,
  name: "Asia/Brunei",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.BruneiTime
});
({
  id: TimezoneRegions.AsiaChita,
  name: "Asia/Chita",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.YakutskTime
});
({
  id: TimezoneRegions.AsiaChoibalsan,
  name: "Asia/Choibalsan",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.ChoibalsanStandardTime
});
({
  id: TimezoneRegions.AsiaColombo,
  name: "Asia/Colombo",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.IndianStandardTime
});
({
  id: TimezoneRegions.AsiaDamascus,
  name: "Asia/Damascus",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaDhaka,
  name: "Asia/Dhaka",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.BangladeshStandardTime
});
({
  id: TimezoneRegions.AsiaDili,
  name: "Asia/Dili",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.JapanStandardTime
});
({
  id: TimezoneRegions.AsiaDubai,
  name: "Asia/Dubai",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.GulfStandardTime
});
({
  id: TimezoneRegions.AsiaDushanbe,
  name: "Asia/Dushanbe",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.TajikistanTime
});
({
  id: TimezoneRegions.AsiaFamagusta,
  name: "Asia/Famagusta",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaGaza,
  name: "Asia/Gaza",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaHebron,
  name: "Asia/Hebron",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaHoChiMinh,
  name: "Asia/Ho_Chi_Minh",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.IndochinaTime
});
({
  id: TimezoneRegions.AsiaHongKong,
  name: "Asia/Hong_Kong",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.HongKongTime
});
({
  id: TimezoneRegions.AsiaHovd,
  name: "Asia/Hovd",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.HovdTime
});
({
  id: TimezoneRegions.AsiaIrkutsk,
  name: "Asia/Irkutsk",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.IrkutskTime
});
({
  id: TimezoneRegions.AsiaJakarta,
  name: "Asia/Jakarta",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.WesternIndonesianTime
});
({
  id: TimezoneRegions.AsiaJayapura,
  name: "Asia/Jayapura",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.JapanStandardTime
});
({
  id: TimezoneRegions.AsiaJerusalem,
  name: "Asia/Jerusalem",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaKabul,
  name: "Asia/Kabul",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.AfghanistanTime
});
({
  id: TimezoneRegions.AsiaKamchatka,
  name: "Asia/Kamchatka",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.KamchatkaTime
});
({
  id: TimezoneRegions.AsiaKarachi,
  name: "Asia/Karachi",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.PakistanStandardTime
});
({
  id: TimezoneRegions.AsiaKathmandu,
  name: "Asia/Kathmandu",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.NepalTime
});
({
  id: TimezoneRegions.AsiaKhandyga,
  name: "Asia/Khandyga",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.YakutskTime
});
({
  id: TimezoneRegions.AsiaKolkata,
  name: "Asia/Kolkata",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.IndianStandardTime
});
({
  id: TimezoneRegions.AsiaKrasnoyarsk,
  name: "Asia/Krasnoyarsk",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.KrasnoyarskTime
});
({
  id: TimezoneRegions.AsiaKualaLumpur,
  name: "Asia/Kuala_Lumpur",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.MalaysiaStandardTime
});
({
  id: TimezoneRegions.AsiaKuching,
  name: "Asia/Kuching",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.MalaysiaStandardTime
});
({
  id: TimezoneRegions.AsiaKuwait,
  name: "Asia/Kuwait",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaMacau,
  name: "Asia/Macau",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.ChinaStandardTime
});
({
  id: TimezoneRegions.AsiaMagadan,
  name: "Asia/Magadan",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.MagadanTime
});
({
  id: TimezoneRegions.AsiaMakassar,
  name: "Asia/Makassar",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.MalaysiaTime
});
({
  id: TimezoneRegions.AsiaManila,
  name: "Asia/Manila",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.PhilippineTime
});
({
  id: TimezoneRegions.AsiaMuscat,
  name: "Asia/Muscat",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.GulfStandardTime
});
({
  id: TimezoneRegions.AsiaNovokuznetsk,
  name: "Asia/Novokuznetsk",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.NovosibirskTime
});
({
  id: TimezoneRegions.AsiaNovosibirsk,
  name: "Asia/Novosibirsk",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.NovosibirskTime
});
({
  id: TimezoneRegions.AsiaOmsk,
  name: "Asia/Omsk",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.OmskTime
});
({
  id: TimezoneRegions.AsiaOral,
  name: "Asia/Oral",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.OralTime
});
({
  id: TimezoneRegions.AsiaPhnomPenh,
  name: "Asia/Phnom_Penh",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.IndochinaTime
});
({
  id: TimezoneRegions.AsiaPontianak,
  name: "Asia/Pontianak",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.WesternIndonesianTime
});
({
  id: TimezoneRegions.AsiaPyongyang,
  name: "Asia/Pyongyang",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.KoreaStandardTime
});
({
  id: TimezoneRegions.AsiaQatar,
  name: "Asia/Qatar",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaQyzylorda,
  name: "Asia/Qyzylorda",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.WestKazakhstanTime
});
({
  id: TimezoneRegions.AsiaRangoon,
  name: "Asia/Rangoon",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.MyanmarStandardTime
});
({
  id: TimezoneRegions.AsiaRiyadh,
  name: "Asia/Riyadh",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaSakhalin,
  name: "Asia/Sakhalin",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.SakhalinIslandTime
});
({
  id: TimezoneRegions.AsiaSamarkand,
  name: "Asia/Samarkand",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.UzbekistanTime
});
({
  id: TimezoneRegions.AsiaSeoul,
  name: "Asia/Seoul",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.KoreaStandardTime
});
({
  id: TimezoneRegions.AsiaShanghai,
  name: "Asia/Shanghai",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.ChinaStandardTime
});
({
  id: TimezoneRegions.AsiaSingapore,
  name: "Asia/Singapore",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.SingaporeStandardTime
});
({
  id: TimezoneRegions.AsiaSrednekolymsk,
  name: "Asia/Srednekolymsk",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.SrednekolymskTime
});
({
  id: TimezoneRegions.AsiaTaipei,
  name: "Asia/Taipei",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.ChinaStandardTime
});
({
  id: TimezoneRegions.AsiaTashkent,
  name: "Asia/Tashkent",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.UzbekistanTime
});
({
  id: TimezoneRegions.AsiaTbilisi,
  name: "Asia/Tbilisi",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.GeorgiaStandardTime
});
({
  id: TimezoneRegions.AsiaTehran,
  name: "Asia/Tehran",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.IranStandardTime
});
({
  id: TimezoneRegions.AsiaThimphu,
  name: "Asia/Thimphu",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.BhutanTime
});
({
  id: TimezoneRegions.AsiaTokyo,
  name: "Asia/Tokyo",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.JapanStandardTime
});
({
  id: TimezoneRegions.AsiaTomsk,
  name: "Asia/Tomsk",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.KrasnoyarskTime
});
({
  id: TimezoneRegions.AsiaUlaanbaatar,
  name: "Asia/Ulaanbaatar",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.UlaanbaatarStandardTime
});
({
  id: TimezoneRegions.AsiaUrumqi,
  name: "Asia/Urumqi",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.ChinaStandardTime
});
({
  id: TimezoneRegions.AsiaUstNera,
  name: "Asia/Ust-Nera",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.VladivostokTime
});
({
  id: TimezoneRegions.AsiaVientiane,
  name: "Asia/Vientiane",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.IndochinaTime
});
({
  id: TimezoneRegions.AsiaVladivostok,
  name: "Asia/Vladivostok",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.VladivostokTime
});
({
  id: TimezoneRegions.AsiaYakutsk,
  name: "Asia/Yakutsk",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.YakutskTime
});
({
  id: TimezoneRegions.AsiaYekaterinburg,
  name: "Asia/Yekaterinburg",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.YekaterinburgTime
});
({
  id: TimezoneRegions.AsiaYerevan,
  name: "Asia/Yerevan",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.ArmeniaTime
});
({
  id: TimezoneRegions.AtlanticAzores,
  name: "Atlantic/Azores",
  offset: TimezoneOffset.UTC_MINUS_1,
  timezone: Timezones.AzoresStandardTime
});
({
  id: TimezoneRegions.AtlanticBermuda,
  name: "Atlantic/Bermuda",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AtlanticCanary,
  name: "Atlantic/Canary",
  offset: TimezoneOffset.UTC_MINUS_1,
  timezone: Timezones.WesternEuropeanTime
});
({
  id: TimezoneRegions.AtlanticCapeVerde,
  name: "Atlantic/Cape_Verde",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CapeVerdeTime
});
({
  id: TimezoneRegions.AtlanticFaroe,
  name: "Atlantic/Faroe",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.AtlanticMadeira,
  name: "Atlantic/Madeira",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.WesternEuropeanTime
});
({
  id: TimezoneRegions.AtlanticReykjavik,
  name: "Atlantic/Reykjavik",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.AtlanticSouthGeorgia,
  name: "Atlantic/South_Georgia",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AtlanticStHelena,
  name: "Atlantic/St_Helena",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.AtlanticStanley,
  name: "Atlantic/Stanley",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.FalklandIslandsTime
});
({
  id: TimezoneRegions.AustraliaAdelaide,
  name: "Australia/Adelaide",
  offset: TimezoneOffset.UTC_PLUS_9_30,
  timezone: Timezones.AustralianCentralStandardTime
});
({
  id: TimezoneRegions.AustraliaBrisbane,
  name: "Australia/Brisbane",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaBrokenHill,
  name: "Australia/Broken_Hill",
  offset: TimezoneOffset.UTC_PLUS_9_30,
  timezone: Timezones.AustralianCentralStandardTime
});
({
  id: TimezoneRegions.AustraliaCanberra,
  name: "Australia/Canberra",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaCurrie,
  name: "Australia/Currie",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaDarwin,
  name: "Australia/Darwin",
  offset: TimezoneOffset.UTC_PLUS_9_30,
  timezone: Timezones.AustralianCentralStandardTime
});
({
  id: TimezoneRegions.AustraliaEucla,
  name: "Australia/Eucla",
  offset: TimezoneOffset.UTC_PLUS_8_45,
  timezone: Timezones.AustralianCentralWesternStandardTime
});
({
  id: TimezoneRegions.AustraliaHobart,
  name: "Australia/Hobart",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaLindeman,
  name: "Australia/Lindeman",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaLordHowe,
  name: "Australia/Lord_Howe",
  offset: TimezoneOffset.UTC_PLUS_10_30,
  timezone: Timezones.LordHoweStandardTime
});
({
  id: TimezoneRegions.AustraliaMelbourne,
  name: "Australia/Melbourne",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaPerth,
  name: "Australia/Perth",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.AustralianWesternStandardTime
});
({
  id: TimezoneRegions.AustraliaSydney,
  name: "Australia/Sydney",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.EuropeAmsterdam,
  name: "Europe/Amsterdam",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeAndorra,
  name: "Europe/Andorra",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeAthens,
  name: "Europe/Athens",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeBelgrade,
  name: "Europe/Belgrade",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeBerlin,
  name: "Europe/Berlin",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeBratislava,
  name: "Europe/Bratislava",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeBrussels,
  name: "Europe/Brussels",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeBucharest,
  name: "Europe/Bucharest",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeBudapest,
  name: "Europe/Budapest",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeBusingen,
  name: "Europe/Busingen",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeChisinau,
  name: "Europe/Chisinau",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeCopenhagen,
  name: "Europe/Copenhagen",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeDublin,
  name: "Europe/Dublin",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.EuropeGibraltar,
  name: "Europe/Gibraltar",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeGuernsey,
  name: "Europe/Guernsey",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeHelsinki,
  name: "Europe/Helsinki",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeIsleOfMan,
  name: "Europe/Isle_of_Man",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.EuropeIstanbul,
  name: "Europe/Istanbul",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeJersey,
  name: "Europe/Jersey",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeKaliningrad,
  name: "Europe/Kaliningrad",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeKiev,
  name: "Europe/Kiev",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeLisbon,
  name: "Europe/Lisbon",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.EuropeLjubljana,
  name: "Europe/Ljubljana",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeLondon,
  name: "Europe/London",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.EuropeLuxembourg,
  name: "Europe/Luxembourg",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeMadrid,
  name: "Europe/Madrid",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeMalta,
  name: "Europe/Malta",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeMariehamn,
  name: "Europe/Mariehamn",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeMinsk,
  name: "Europe/Minsk",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeMonaco,
  name: "Europe/Monaco",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeMoscow,
  name: "Europe/Moscow",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeOslo,
  name: "Europe/Oslo",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeParis,
  name: "Europe/Paris",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropePodgorica,
  name: "Europe/Podgorica",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropePrague,
  name: "Europe/Prague",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeRiga,
  name: "Europe/Riga",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeRome,
  name: "Europe/Rome",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeSamara,
  name: "Europe/Samara",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeSanMarino,
  name: "Europe/San_Marino",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeSarajevo,
  name: "Europe/Sarajevo",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeSimferopol,
  name: "Europe/Simferopol",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeSkopje,
  name: "Europe/Skopje",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeSofia,
  name: "Europe/Sofia",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeStockholm,
  name: "Europe/Stockholm",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeTallinn,
  name: "Europe/Tallinn",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeTirane,
  name: "Europe/Tirane",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeUzhgorod,
  name: "Europe/Uzhgorod",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeVaduz,
  name: "Europe/Vaduz",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeVatican,
  name: "Europe/Vatican",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeVienna,
  name: "Europe/Vienna",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeVilnius,
  name: "Europe/Vilnius",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeVolgograd,
  name: "Europe/Volgograd",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeWarsaw,
  name: "Europe/Warsaw",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeZagreb,
  name: "Europe/Zagreb",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeZaporozhye,
  name: "Europe/Zaporozhye",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeZurich,
  name: "Europe/Zurich",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.IndianAntananarivo,
  name: "Indian/Antananarivo",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.IndianChagos,
  name: "Indian/Chagos",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.IndianOceanTime
});
({
  id: TimezoneRegions.IndianChristmas,
  name: "Indian/Christmas",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.ChristmasIslandTime
});
({
  id: TimezoneRegions.IndianCocos,
  name: "Indian/Cocos",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.CocosIslandsTime
});
({
  id: TimezoneRegions.IndianComoro,
  name: "Indian/Comoro",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.IndianKerguelen,
  name: "Indian/Kerguelen",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.FrenchSouthernAndAntarcticTime
});
({
  id: TimezoneRegions.IndianMahe,
  name: "Indian/Mahe",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.SeychellesTime
});
({
  id: TimezoneRegions.IndianMaldives,
  name: "Indian/Maldives",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.MaldivesTime
});
({
  id: TimezoneRegions.IndianMauritius,
  name: "Indian/Mauritius",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.MauritiusTime
});
({
  id: TimezoneRegions.IndianMayotte,
  name: "Indian/Mayotte",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.IndianReunion,
  name: "Indian/Reunion",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.ReunionTime
});
({
  id: TimezoneRegions.PacificApia,
  name: "Pacific/Apia",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.SamoaStandardTime
});
({
  id: TimezoneRegions.PacificAuckland,
  name: "Pacific/Auckland",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.NewZealandStandardTime
});
({
  id: TimezoneRegions.PacificChatham,
  name: "Pacific/Chatham",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.ChathamStandardTime
});
({
  id: TimezoneRegions.PacificEaster,
  name: "Pacific/Easter",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.EasterIslandStandardTime
});
({
  id: TimezoneRegions.PacificEfate,
  name: "Pacific/Efate",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.VanuatuTime
});
({
  id: TimezoneRegions.PacificEnderbury,
  name: "Pacific/Enderbury",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.TongaTime
});
({
  id: TimezoneRegions.PacificFakaofo,
  name: "Pacific/Fakaofo",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.TongaTime
});
({
  id: TimezoneRegions.PacificFiji,
  name: "Pacific/Fiji",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.FijiTime
});
({
  id: TimezoneRegions.PacificFunafuti,
  name: "Pacific/Funafuti",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.TuvaluTime
});
({
  id: TimezoneRegions.PacificGalapagos,
  name: "Pacific/Galapagos",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.GalapagosTime
});
({
  id: TimezoneRegions.PacificGambier,
  name: "Pacific/Gambier",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.GambierIslandTime
});
({
  id: TimezoneRegions.PacificGuadalcanal,
  name: "Pacific/Guadalcanal",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.SolomonIslandsTime
});
({
  id: TimezoneRegions.PacificGuam,
  name: "Pacific/Guam",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.ChamorroStandardTime
});
({
  id: TimezoneRegions.PacificHonolulu,
  name: "Pacific/Honolulu",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions.PacificJohnston,
  name: "Pacific/Johnston",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions.PacificKiritimati,
  name: "Pacific/Kiritimati",
  offset: TimezoneOffset.UTC_PLUS_14,
  timezone: Timezones.LineIslandsTime
});
({
  id: TimezoneRegions.PacificKosrae,
  name: "Pacific/Kosrae",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.KosraeTime
});
({
  id: TimezoneRegions.PacificKwajalein,
  name: "Pacific/Kwajalein",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.MarshallIslandsTime
});
({
  id: TimezoneRegions.PacificMajuro,
  name: "Pacific/Majuro",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.MarshallIslandsTime
});
({
  id: TimezoneRegions.PacificMarquesas,
  name: "Pacific/Marquesas",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.MarquesasIslandsTime
});
({
  id: TimezoneRegions.PacificMidway,
  name: "Pacific/Midway",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.SamoaStandardTime
});
({
  id: TimezoneRegions.PacificNauru,
  name: "Pacific/Nauru",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.NauruTime
});
({
  id: TimezoneRegions.PacificNiue,
  name: "Pacific/Niue",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.NiueTime
});
({
  id: TimezoneRegions.PacificNorfolk,
  name: "Pacific/Norfolk",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.NorfolkIslandTime
});
({
  id: TimezoneRegions.PacificNoumea,
  name: "Pacific/Noumea",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.NewCaledoniaTime
});
({
  id: TimezoneRegions.PacificPagoPago,
  name: "Pacific/Pago_Pago",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.SamoaStandardTime
});
({
  id: TimezoneRegions.PacificPalau,
  name: "Pacific/Palau",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.PalauTime
});
({
  id: TimezoneRegions.PacificPitcairn,
  name: "Pacific/Pitcairn",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.PitcairnTime
});
({
  id: TimezoneRegions.PacificPonape,
  name: "Pacific/Ponape",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.PohnpeiStandardTime
});
({
  id: TimezoneRegions.PacificPortMoresby,
  name: "Pacific/Port_Moresby",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.PapuaNewGuineaTime
});
({
  id: TimezoneRegions.PacificRarotonga,
  name: "Pacific/Rarotonga",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.CookIslandTime
});
({
  id: TimezoneRegions.PacificSaipan,
  name: "Pacific/Saipan",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.ChamorroStandardTime
});
({
  id: TimezoneRegions.PacificTahiti,
  name: "Pacific/Tahiti",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.TahitiTime
});
({
  id: TimezoneRegions.PacificTarawa,
  name: "Pacific/Tarawa",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.GilbertIslandTime
});
({
  id: TimezoneRegions.PacificTongatapu,
  name: "Pacific/Tongatapu",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.TongaTime
});
({
  id: TimezoneRegions.PacificChuuk,
  name: "Pacific/Chuuk",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.ChuukTime
});
({
  id: TimezoneRegions.PacificPohnpei,
  name: "Pacific/Pohnpei",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.PohnpeiStandardTime
});
({
  id: TimezoneRegions.PacificYap,
  name: "Pacific/Yap",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.ChuukTime
});
const o$1 = { id: "dev", type: EnvironmentType.Development, public: false, name: "Development", description: "Development environment" }, t$3 = { id: "test", type: EnvironmentType.NonProduction, public: false, name: "Test", description: "Test environment" }, i$4 = { id: "prod", type: EnvironmentType.Production, public: true, name: "Production", description: "Production environment" };
function s$3() {
  if (window) {
    const n2 = window.location.hostname;
    return n2.includes("localhost") || n2.includes("127.0.0.1") ? o$1 : n2.includes("test") ? t$3 : i$4;
  }
  return t$3;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var r$5, B$1 = r$5 || (r$5 = {});
B$1.Pop = "POP";
B$1.Push = "PUSH";
B$1.Replace = "REPLACE";
var C$2 = function(b2) {
  return b2;
};
function E$1(b2) {
  b2.preventDefault();
  b2.returnValue = "";
}
function F$2() {
  var b2 = [];
  return { get length() {
    return b2.length;
  }, push: function(h2) {
    b2.push(h2);
    return function() {
      b2 = b2.filter(function(e2) {
        return e2 !== h2;
      });
    };
  }, call: function(h2) {
    b2.forEach(function(e2) {
      return e2 && e2(h2);
    });
  } };
}
function H$2() {
  return Math.random().toString(36).substr(2, 8);
}
function I$2(b2) {
  var h2 = b2.pathname;
  h2 = h2 === void 0 ? "/" : h2;
  var e2 = b2.search;
  e2 = e2 === void 0 ? "" : e2;
  b2 = b2.hash;
  b2 = b2 === void 0 ? "" : b2;
  e2 && e2 !== "?" && (h2 += e2.charAt(0) === "?" ? e2 : "?" + e2);
  b2 && b2 !== "#" && (h2 += b2.charAt(0) === "#" ? b2 : "#" + b2);
  return h2;
}
function J$1(b2) {
  var h2 = {};
  if (b2) {
    var e2 = b2.indexOf("#");
    0 <= e2 && (h2.hash = b2.substr(e2), b2 = b2.substr(0, e2));
    e2 = b2.indexOf("?");
    0 <= e2 && (h2.search = b2.substr(e2), b2 = b2.substr(0, e2));
    b2 && (h2.pathname = b2);
  }
  return h2;
}
function createBrowserHistory(b2) {
  function h2() {
    var c2 = p2.location, a2 = m2.state || {};
    return [a2.idx, C$2({ pathname: c2.pathname, search: c2.search, hash: c2.hash, state: a2.usr || null, key: a2.key || "default" })];
  }
  function e2(c2) {
    return typeof c2 === "string" ? c2 : I$2(c2);
  }
  function x2(c2, a2) {
    a2 === void 0 && (a2 = null);
    return C$2(_extends({ pathname: q2.pathname, hash: "", search: "" }, typeof c2 === "string" ? J$1(c2) : c2, { state: a2, key: H$2() }));
  }
  function z2(c2) {
    t2 = c2;
    c2 = h2();
    v2 = c2[0];
    q2 = c2[1];
    d2.call({ action: t2, location: q2 });
  }
  function A2(c2, a2) {
    function f2() {
      A2(c2, a2);
    }
    var l2 = r$5.Push, k2 = x2(c2, a2);
    if (!g2.length || (g2.call({ action: l2, location: k2, retry: f2 }), false)) {
      var n2 = [{ usr: k2.state, key: k2.key, idx: v2 + 1 }, e2(k2)];
      k2 = n2[0];
      n2 = n2[1];
      try {
        m2.pushState(k2, "", n2);
      } catch (G2) {
        p2.location.assign(n2);
      }
      z2(l2);
    }
  }
  function y2(c2, a2) {
    function f2() {
      y2(c2, a2);
    }
    var l2 = r$5.Replace, k2 = x2(c2, a2);
    g2.length && (g2.call({ action: l2, location: k2, retry: f2 }), 1) || (k2 = [{ usr: k2.state, key: k2.key, idx: v2 }, e2(k2)], m2.replaceState(k2[0], "", k2[1]), z2(l2));
  }
  function w2(c2) {
    m2.go(c2);
  }
  b2 === void 0 && (b2 = {});
  b2 = b2.window;
  var p2 = b2 === void 0 ? document.defaultView : b2, m2 = p2.history, u2 = null;
  p2.addEventListener("popstate", function() {
    if (u2)
      g2.call(u2), u2 = null;
    else {
      var c2 = r$5.Pop, a2 = h2(), f2 = a2[0];
      a2 = a2[1];
      if (g2.length)
        if (f2 != null) {
          var l2 = v2 - f2;
          l2 && (u2 = { action: c2, location: a2, retry: function() {
            w2(-1 * l2);
          } }, w2(l2));
        } else
          ;
      else
        z2(c2);
    }
  });
  var t2 = r$5.Pop;
  b2 = h2();
  var v2 = b2[0], q2 = b2[1], d2 = F$2(), g2 = F$2();
  v2 == null && (v2 = 0, m2.replaceState(_extends({}, m2.state, { idx: v2 }), ""));
  return { get action() {
    return t2;
  }, get location() {
    return q2;
  }, createHref: e2, push: A2, replace: y2, go: w2, back: function() {
    w2(-1);
  }, forward: function() {
    w2(1);
  }, listen: function(c2) {
    return d2.push(c2);
  }, block: function(c2) {
    var a2 = g2.push(c2);
    g2.length === 1 && p2.addEventListener("beforeunload", E$1);
    return function() {
      a2();
      g2.length || p2.removeEventListener("beforeunload", E$1);
    };
  } };
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getAugmentedNamespace(n2) {
  if (n2.__esModule)
    return n2;
  var a2 = Object.defineProperty({}, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k2) {
    var d2 = Object.getOwnPropertyDescriptor(n2, k2);
    Object.defineProperty(a2, k2, d2.get ? d2 : {
      enumerable: true,
      get: function() {
        return n2[k2];
      }
    });
  });
  return a2;
}
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var ReactReduxContext = /* @__PURE__ */ React.createContext(null);
function defaultNoopBatch(callback) {
  callback();
}
var batch$1 = defaultNoopBatch;
var setBatch = function setBatch2(newBatch) {
  return batch$1 = newBatch;
};
var getBatch = function getBatch2() {
  return batch$1;
};
function createListenerCollection() {
  var batch2 = getBatch();
  var first = null;
  var last = null;
  return {
    clear: function clear2() {
      first = null;
      last = null;
    },
    notify: function notify2() {
      batch2(function() {
        var listener = first;
        while (listener) {
          listener.callback();
          listener = listener.next;
        }
      });
    },
    get: function get5() {
      var listeners2 = [];
      var listener = first;
      while (listener) {
        listeners2.push(listener);
        listener = listener.next;
      }
      return listeners2;
    },
    subscribe: function subscribe(callback) {
      var isSubscribed = true;
      var listener = last = {
        callback,
        next: null,
        prev: last
      };
      if (listener.prev) {
        listener.prev.next = listener;
      } else {
        first = listener;
      }
      return function unsubscribe() {
        if (!isSubscribed || first === null)
          return;
        isSubscribed = false;
        if (listener.next) {
          listener.next.prev = listener.prev;
        } else {
          last = listener.prev;
        }
        if (listener.prev) {
          listener.prev.next = listener.next;
        } else {
          first = listener.next;
        }
      };
    }
  };
}
var nullListeners = {
  notify: function notify() {
  },
  get: function get() {
    return [];
  }
};
function createSubscription(store, parentSub) {
  var unsubscribe;
  var listeners2 = nullListeners;
  function addNestedSub(listener) {
    trySubscribe();
    return listeners2.subscribe(listener);
  }
  function notifyNestedSubs() {
    listeners2.notify();
  }
  function handleChangeWrapper() {
    if (subscription.onStateChange) {
      subscription.onStateChange();
    }
  }
  function isSubscribed() {
    return Boolean(unsubscribe);
  }
  function trySubscribe() {
    if (!unsubscribe) {
      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
      listeners2 = createListenerCollection();
    }
  }
  function tryUnsubscribe() {
    if (unsubscribe) {
      unsubscribe();
      unsubscribe = void 0;
      listeners2.clear();
      listeners2 = nullListeners;
    }
  }
  var subscription = {
    addNestedSub,
    notifyNestedSubs,
    handleChangeWrapper,
    isSubscribed,
    trySubscribe,
    tryUnsubscribe,
    getListeners: function getListeners() {
      return listeners2;
    }
  };
  return subscription;
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? useLayoutEffect : useEffect;
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2["_" + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
      return test2[n2];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
shouldUseNative() ? Object.assign : function(target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s2 = 1; s2 < arguments.length; s2++) {
    from = Object(arguments[s2]);
    for (var key in from) {
      if (hasOwnProperty$3.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};
/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f$2 = React, g$3 = 60103;
reactJsxRuntime_production_min.Fragment = 60107;
if (typeof Symbol === "function" && Symbol.for) {
  var h$3 = Symbol.for;
  g$3 = h$3("react.element");
  reactJsxRuntime_production_min.Fragment = h$3("react.fragment");
}
var m$3 = f$2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, n$5 = Object.prototype.hasOwnProperty, p$5 = { key: true, ref: true, __self: true, __source: true };
function q$3(c2, a2, k2) {
  var b2, d2 = {}, e2 = null, l2 = null;
  k2 !== void 0 && (e2 = "" + k2);
  a2.key !== void 0 && (e2 = "" + a2.key);
  a2.ref !== void 0 && (l2 = a2.ref);
  for (b2 in a2)
    n$5.call(a2, b2) && !p$5.hasOwnProperty(b2) && (d2[b2] = a2[b2]);
  if (c2 && c2.defaultProps)
    for (b2 in a2 = c2.defaultProps, a2)
      d2[b2] === void 0 && (d2[b2] = a2[b2]);
  return { $$typeof: g$3, type: c2, key: e2, ref: l2, props: d2, _owner: m$3.current };
}
reactJsxRuntime_production_min.jsx = q$3;
reactJsxRuntime_production_min.jsxs = q$3;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
const jsx = jsxRuntime.exports.jsx;
function Provider(_ref) {
  var store = _ref.store, context = _ref.context, children = _ref.children;
  var contextValue = useMemo(function() {
    var subscription = createSubscription(store);
    subscription.onStateChange = subscription.notifyNestedSubs;
    return {
      store,
      subscription
    };
  }, [store]);
  var previousState = useMemo(function() {
    return store.getState();
  }, [store]);
  useIsomorphicLayoutEffect(function() {
    var subscription = contextValue.subscription;
    subscription.trySubscribe();
    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }
    return function() {
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
    };
  }, [contextValue, previousState]);
  var Context = context || ReactReduxContext;
  return /* @__PURE__ */ jsx(Context.Provider, {
    value: contextValue,
    children
  });
}
var reactIs$1 = { exports: {} };
var reactIs_production_min$1 = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b$2 = typeof Symbol === "function" && Symbol.for, c$2 = b$2 ? Symbol.for("react.element") : 60103, d$2 = b$2 ? Symbol.for("react.portal") : 60106, e$4 = b$2 ? Symbol.for("react.fragment") : 60107, f$1 = b$2 ? Symbol.for("react.strict_mode") : 60108, g$2 = b$2 ? Symbol.for("react.profiler") : 60114, h$2 = b$2 ? Symbol.for("react.provider") : 60109, k$2 = b$2 ? Symbol.for("react.context") : 60110, l$3 = b$2 ? Symbol.for("react.async_mode") : 60111, m$2 = b$2 ? Symbol.for("react.concurrent_mode") : 60111, n$4 = b$2 ? Symbol.for("react.forward_ref") : 60112, p$4 = b$2 ? Symbol.for("react.suspense") : 60113, q$2 = b$2 ? Symbol.for("react.suspense_list") : 60120, r$4 = b$2 ? Symbol.for("react.memo") : 60115, t$2 = b$2 ? Symbol.for("react.lazy") : 60116, v$2 = b$2 ? Symbol.for("react.block") : 60121, w$2 = b$2 ? Symbol.for("react.fundamental") : 60117, x$3 = b$2 ? Symbol.for("react.responder") : 60118, y$2 = b$2 ? Symbol.for("react.scope") : 60119;
function z$3(a2) {
  if (typeof a2 === "object" && a2 !== null) {
    var u2 = a2.$$typeof;
    switch (u2) {
      case c$2:
        switch (a2 = a2.type, a2) {
          case l$3:
          case m$2:
          case e$4:
          case g$2:
          case f$1:
          case p$4:
            return a2;
          default:
            switch (a2 = a2 && a2.$$typeof, a2) {
              case k$2:
              case n$4:
              case t$2:
              case r$4:
              case h$2:
                return a2;
              default:
                return u2;
            }
        }
      case d$2:
        return u2;
    }
  }
}
function A$1(a2) {
  return z$3(a2) === m$2;
}
reactIs_production_min$1.AsyncMode = l$3;
reactIs_production_min$1.ConcurrentMode = m$2;
reactIs_production_min$1.ContextConsumer = k$2;
reactIs_production_min$1.ContextProvider = h$2;
reactIs_production_min$1.Element = c$2;
reactIs_production_min$1.ForwardRef = n$4;
reactIs_production_min$1.Fragment = e$4;
reactIs_production_min$1.Lazy = t$2;
reactIs_production_min$1.Memo = r$4;
reactIs_production_min$1.Portal = d$2;
reactIs_production_min$1.Profiler = g$2;
reactIs_production_min$1.StrictMode = f$1;
reactIs_production_min$1.Suspense = p$4;
reactIs_production_min$1.isAsyncMode = function(a2) {
  return A$1(a2) || z$3(a2) === l$3;
};
reactIs_production_min$1.isConcurrentMode = A$1;
reactIs_production_min$1.isContextConsumer = function(a2) {
  return z$3(a2) === k$2;
};
reactIs_production_min$1.isContextProvider = function(a2) {
  return z$3(a2) === h$2;
};
reactIs_production_min$1.isElement = function(a2) {
  return typeof a2 === "object" && a2 !== null && a2.$$typeof === c$2;
};
reactIs_production_min$1.isForwardRef = function(a2) {
  return z$3(a2) === n$4;
};
reactIs_production_min$1.isFragment = function(a2) {
  return z$3(a2) === e$4;
};
reactIs_production_min$1.isLazy = function(a2) {
  return z$3(a2) === t$2;
};
reactIs_production_min$1.isMemo = function(a2) {
  return z$3(a2) === r$4;
};
reactIs_production_min$1.isPortal = function(a2) {
  return z$3(a2) === d$2;
};
reactIs_production_min$1.isProfiler = function(a2) {
  return z$3(a2) === g$2;
};
reactIs_production_min$1.isStrictMode = function(a2) {
  return z$3(a2) === f$1;
};
reactIs_production_min$1.isSuspense = function(a2) {
  return z$3(a2) === p$4;
};
reactIs_production_min$1.isValidElementType = function(a2) {
  return typeof a2 === "string" || typeof a2 === "function" || a2 === e$4 || a2 === m$2 || a2 === g$2 || a2 === f$1 || a2 === p$4 || a2 === q$2 || typeof a2 === "object" && a2 !== null && (a2.$$typeof === t$2 || a2.$$typeof === r$4 || a2.$$typeof === h$2 || a2.$$typeof === k$2 || a2.$$typeof === n$4 || a2.$$typeof === w$2 || a2.$$typeof === x$3 || a2.$$typeof === y$2 || a2.$$typeof === v$2);
};
reactIs_production_min$1.typeOf = z$3;
{
  reactIs$1.exports = reactIs_production_min$1;
}
var reactIs = reactIs$1.exports;
var FORWARD_REF_STATICS = {
  "$$typeof": true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  "$$typeof": true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
var reactIs_production_min = {};
/** @license React v17.0.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b$1 = 60103, c$1 = 60106, d$1 = 60107, e$3 = 60108, f = 60114, g$1 = 60109, h$1 = 60110, k$1 = 60112, l$2 = 60113, m$1 = 60120, n$3 = 60115, p$3 = 60116, q$1 = 60121, r$3 = 60122, u$1 = 60117, v$1 = 60129, w$1 = 60131;
if (typeof Symbol === "function" && Symbol.for) {
  var x$2 = Symbol.for;
  b$1 = x$2("react.element");
  c$1 = x$2("react.portal");
  d$1 = x$2("react.fragment");
  e$3 = x$2("react.strict_mode");
  f = x$2("react.profiler");
  g$1 = x$2("react.provider");
  h$1 = x$2("react.context");
  k$1 = x$2("react.forward_ref");
  l$2 = x$2("react.suspense");
  m$1 = x$2("react.suspense_list");
  n$3 = x$2("react.memo");
  p$3 = x$2("react.lazy");
  q$1 = x$2("react.block");
  r$3 = x$2("react.server.block");
  u$1 = x$2("react.fundamental");
  v$1 = x$2("react.debug_trace_mode");
  w$1 = x$2("react.legacy_hidden");
}
function y$1(a2) {
  if (typeof a2 === "object" && a2 !== null) {
    var t2 = a2.$$typeof;
    switch (t2) {
      case b$1:
        switch (a2 = a2.type, a2) {
          case d$1:
          case f:
          case e$3:
          case l$2:
          case m$1:
            return a2;
          default:
            switch (a2 = a2 && a2.$$typeof, a2) {
              case h$1:
              case k$1:
              case p$3:
              case n$3:
              case g$1:
                return a2;
              default:
                return t2;
            }
        }
      case c$1:
        return t2;
    }
  }
}
var z$2 = g$1, A = b$1, B = k$1, C$1 = d$1, D$1 = p$3, E = n$3, F$1 = c$1, G$2 = f, H$1 = e$3, I$1 = l$2;
reactIs_production_min.ContextConsumer = h$1;
reactIs_production_min.ContextProvider = z$2;
reactIs_production_min.Element = A;
reactIs_production_min.ForwardRef = B;
reactIs_production_min.Fragment = C$1;
reactIs_production_min.Lazy = D$1;
reactIs_production_min.Memo = E;
reactIs_production_min.Portal = F$1;
reactIs_production_min.Profiler = G$2;
reactIs_production_min.StrictMode = H$1;
reactIs_production_min.Suspense = I$1;
reactIs_production_min.isAsyncMode = function() {
  return false;
};
reactIs_production_min.isConcurrentMode = function() {
  return false;
};
reactIs_production_min.isContextConsumer = function(a2) {
  return y$1(a2) === h$1;
};
reactIs_production_min.isContextProvider = function(a2) {
  return y$1(a2) === g$1;
};
reactIs_production_min.isElement = function(a2) {
  return typeof a2 === "object" && a2 !== null && a2.$$typeof === b$1;
};
reactIs_production_min.isForwardRef = function(a2) {
  return y$1(a2) === k$1;
};
reactIs_production_min.isFragment = function(a2) {
  return y$1(a2) === d$1;
};
reactIs_production_min.isLazy = function(a2) {
  return y$1(a2) === p$3;
};
reactIs_production_min.isMemo = function(a2) {
  return y$1(a2) === n$3;
};
reactIs_production_min.isPortal = function(a2) {
  return y$1(a2) === c$1;
};
reactIs_production_min.isProfiler = function(a2) {
  return y$1(a2) === f;
};
reactIs_production_min.isStrictMode = function(a2) {
  return y$1(a2) === e$3;
};
reactIs_production_min.isSuspense = function(a2) {
  return y$1(a2) === l$2;
};
reactIs_production_min.isValidElementType = function(a2) {
  return typeof a2 === "string" || typeof a2 === "function" || a2 === d$1 || a2 === f || a2 === v$1 || a2 === e$3 || a2 === l$2 || a2 === m$1 || a2 === w$1 || typeof a2 === "object" && a2 !== null && (a2.$$typeof === p$3 || a2.$$typeof === n$3 || a2.$$typeof === g$1 || a2.$$typeof === h$1 || a2.$$typeof === k$1 || a2.$$typeof === u$1 || a2.$$typeof === q$1 || a2[0] === r$3) ? true : false;
};
reactIs_production_min.typeOf = y$1;
function useReduxContext() {
  var contextValue = useContext(ReactReduxContext);
  return contextValue;
}
function createStoreHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useReduxContext$1 = context === ReactReduxContext ? useReduxContext : function() {
    return useContext(context);
  };
  return function useStore2() {
    var _useReduxContext = useReduxContext$1(), store = _useReduxContext.store;
    return store;
  };
}
var useStore = /* @__PURE__ */ createStoreHook();
function createDispatchHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useStore$1 = context === ReactReduxContext ? useStore : createStoreHook(context);
  return function useDispatch2() {
    var store = useStore$1();
    return store.dispatch;
  };
}
var useDispatch = /* @__PURE__ */ createDispatchHook();
var refEquality = function refEquality2(a2, b2) {
  return a2 === b2;
};
function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
  var _useReducer = useReducer(function(s2) {
    return s2 + 1;
  }, 0), forceRender = _useReducer[1];
  var subscription = useMemo(function() {
    return createSubscription(store, contextSub);
  }, [store, contextSub]);
  var latestSubscriptionCallbackError = useRef();
  var latestSelector = useRef();
  var latestStoreState = useRef();
  var latestSelectedState = useRef();
  var storeState = store.getState();
  var selectedState;
  try {
    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
      var newSelectedState = selector(storeState);
      if (latestSelectedState.current === void 0 || !equalityFn(newSelectedState, latestSelectedState.current)) {
        selectedState = newSelectedState;
      } else {
        selectedState = latestSelectedState.current;
      }
    } else {
      selectedState = latestSelectedState.current;
    }
  } catch (err) {
    if (latestSubscriptionCallbackError.current) {
      err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
    }
    throw err;
  }
  useIsomorphicLayoutEffect(function() {
    latestSelector.current = selector;
    latestStoreState.current = storeState;
    latestSelectedState.current = selectedState;
    latestSubscriptionCallbackError.current = void 0;
  });
  useIsomorphicLayoutEffect(function() {
    function checkForUpdates() {
      try {
        var newStoreState = store.getState();
        if (newStoreState === latestStoreState.current) {
          return;
        }
        var _newSelectedState = latestSelector.current(newStoreState);
        if (equalityFn(_newSelectedState, latestSelectedState.current)) {
          return;
        }
        latestSelectedState.current = _newSelectedState;
        latestStoreState.current = newStoreState;
      } catch (err) {
        latestSubscriptionCallbackError.current = err;
      }
      forceRender();
    }
    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    return function() {
      return subscription.tryUnsubscribe();
    };
  }, [store, subscription]);
  return selectedState;
}
function createSelectorHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useReduxContext$1 = context === ReactReduxContext ? useReduxContext : function() {
    return useContext(context);
  };
  return function useSelector2(selector, equalityFn) {
    if (equalityFn === void 0) {
      equalityFn = refEquality;
    }
    var _useReduxContext = useReduxContext$1(), store = _useReduxContext.store, contextSub = _useReduxContext.subscription;
    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
    useDebugValue(selectedState);
    return selectedState;
  };
}
var useSelector = /* @__PURE__ */ createSelectorHook();
setBatch(unstable_batchedUpdates);
const contextMiddleware = (store) => (next) => (action) => {
  return next(action);
};
var cn = Object.defineProperty;
var un = (a2, u2, A2) => u2 in a2 ? cn(a2, u2, { enumerable: true, configurable: true, writable: true, value: A2 }) : a2[u2] = A2;
var s$2 = (a2, u2, A2) => (un(a2, typeof u2 != "symbol" ? u2 + "" : u2, A2), A2);
var ja$1;
(function(a2) {
  a2.Comment = "comment", a2.Create = "create", a2.Delete = "delete", a2.Edit = "edit", a2.Invoice = "invoice", a2.Message = "message", a2.PageView = "pageView", a2.Paid = "paid", a2.Payment = "payment", a2.Purchase = "purchase", a2.Referral = "referral", a2.Renewal = "renewal", a2.Signup = "signup", a2.Subscription = "subscription", a2.Upgrade = "upgrade";
})(ja$1 || (ja$1 = {}));
var Ra$1;
(function(a2) {
  a2.Business = "business", a2.Engineering = "engineering", a2.Exception = "exception", a2.LogMessage = "log-message", a2.Marketing = "marketing", a2.PageLeave = "page-leave", a2.PageView = "page-view", a2.Product = "product", a2.QualityManagement = "quality-management", a2.UserAccess = "user-access", a2.UserLogin = "user-login", a2.UserLogout = "user-logout", a2.UserSignup = "user-signup", a2.UserPreferencesChanged = "user-preferences-changed", a2.WebsiteVisit = "website-visit";
})(Ra$1 || (Ra$1 = {}));
var za$1;
(function(a2) {
  a2.CloseTab = "close-tab", a2.ExternalLink = "external-link", a2.NavigateAway = "navigate-away", a2.Unknown = "unknown";
})(za$1 || (za$1 = {}));
var Wa$1;
(function(a2) {
  a2.Ecs = "Ecs";
})(Wa$1 || (Wa$1 = {}));
var Va$1;
(function(a2) {
  a2.Finished = "Finished", a2.Queued = "Queued", a2.Running = "Running", a2.Started = "Started";
})(Va$1 || (Va$1 = {}));
var Ja$1;
(function(a2) {
  a2.Mobile = "mobile", a2.TV = "tv", a2.Watch = "watch", a2.Web = "web";
})(Ja$1 || (Ja$1 = {}));
var Ya$1;
(function(a2) {
  a2.Development = "Development", a2.NonProduction = "NonProduction", a2.Production = "Production";
})(Ya$1 || (Ya$1 = {}));
var Za$1;
(function(a2) {
  a2.Completed = "completed", a2.Started = "started", a2.Uncompleted = "uncompleted";
})(Za$1 || (Za$1 = {}));
var Qa$1;
(function(a2) {
  a2.Build = "Build", a2.Deployment = "Deployment", a2.Test = "Test";
})(Qa$1 || (Qa$1 = {}));
var $a$1;
(function(a2) {
  a2.Canceled = "Canceled", a2.Completed = "Completed", a2.Failed = "Failed", a2.Running = "Running", a2.Queued = "Queued", a2.Waiting = "Waiting";
})($a$1 || ($a$1 = {}));
var Xa$1;
(function(a2) {
  a2.Canceled = "Canceled", a2.Completed = "Completed", a2.Failed = "Failed", a2.Running = "Running", a2.Queued = "Queued", a2.Waiting = "Waiting";
})(Xa$1 || (Xa$1 = {}));
var Ca$1;
(function(a2) {
  a2.ForgotPassword = "forgot_password", a2.Index = "index", a2.Login = "login", a2.PageNotFound = "404", a2.Signup = "signup", a2.VerifyCode = "verify_code";
})(Ca$1 || (Ca$1 = {}));
var ae$1;
(function(a2) {
  a2.Info = "info", a2.Warning = "warning", a2.Error = "error", a2.Success = "success";
})(ae$1 || (ae$1 = {}));
var ee$1;
(function(a2) {
  a2.Details = "details", a2.Dialog = "dialog";
})(ee$1 || (ee$1 = {}));
var ie$1;
(function(a2) {
  a2.Info = "info", a2.Warning = "warning", a2.Error = "error", a2.Success = "success";
})(ie$1 || (ie$1 = {}));
var ne$1;
(function(a2) {
  a2.AccountBalance = "AccountBalance", a2.UserAssets = "UserAssets", a2.UserCreditCardDebt = "UserCreditCardDebt", a2.UserCreditLimit = "UserCreditLimit", a2.UserCreditUtilization = "UserCreditUtilization", a2.UserDebt = "UserDebt", a2.UserInvestments = "UserInvestments", a2.UserRetirement = "UserRetirement", a2.UserSavings = "UserSavings";
})(ne$1 || (ne$1 = {}));
var te$1;
(function(a2) {
  a2.DateTime = "date_time", a2.True = "true", a2.False = "false", a2.UniqueId = "unique_id";
})(te$1 || (te$1 = {}));
var re$1;
(function(a2) {
  a2.DomainModel = "domain_entity", a2.GenericModel = "generic_entity";
})(re$1 || (re$1 = {}));
var se$1;
(function(a2) {
  a2.AirportCode = "airport-code", a2.BankIDCode = "bank-id-code", a2.BitcoinAddress = "bitcoin-address", a2.Boolean = "boolean", a2.City = "city", a2.Color = "color", a2.CountryCode = "country-code", a2.CreditCard = "credit-card", a2.CurrencyAmount = "currency-amount", a2.CurrencyCode = "currency-code", a2.DataURI = "data-uri", a2.Date = "date", a2.DateRange = "date-range", a2.DateTime = "date-time", a2.DayOfMonth = "day-of-month", a2.DomainName = "domain-name", a2.EmailAddress = "email-address", a2.EthereumAddress = "ethereum-address", a2.EAN = "european-article-number", a2.EIN = "employer-identification-number", a2.Float = "float", a2.GeographicCoordinate = "geographic-coordinate", a2.GeographicCoordinates = "geographic-coordinates", a2.GitRepositoryURL = "git-repository-url", a2.HSLColor = "hsl-color", a2.HexColor = "hex-color", a2.Hexadecimal = "hexadecimal", a2.IBAN = "international-bank-account-number", a2.IMEI = "international-mobile-equipment-identifier", a2.IPAddress = "ip-address", a2.IPAddressRange = "ip-address-range", a2.ISBN = "international-standard-book-number", a2.ISIN = "international-stock-number", a2.ISMN = "international-standard-music-number", a2.ISSN = "international-standard-serial-number", a2.ISO8601 = "iso-8601", a2.ISO31661Alpha2 = "iso-31661-alpha-2", a2.ISO31661Alpha3 = "iso-31661-alpha-3", a2.ISO4217 = "iso-4217", a2.Image = "image", a2.Integer = "integer", a2.JSON = "json", a2.LanguageCode = "language-code", a2.LicensePlateNumber = "license-plate-number", a2.LongText = "long-text", a2.MD5 = "md5", a2.Markdown = "markdown", a2.Menu = "menu", a2.Number = "number", a2.MACAddress = "mac-address", a2.MagnetURI = "magnet-uri", a2.MimeType = "mime-type", a2.Month = "month", a2.Password = "password", a2.PassportNumber = "passport-number", a2.Percent = "percent", a2.PhoneNumber = "phone-number", a2.Port = "port", a2.PostalCode = "postal-code", a2.Province = "province", a2.RFC3339 = "rfc-3339", a2.RGBColor = "rgb-color", a2.SemanticVersion = "semantic-version", a2.SSN = "social-security-number", a2.State = "state", a2.StreetAddress = "street-address", a2.String = "string", a2.Tags = "tags", a2.TaxIDNumber = "tax-id-number", a2.Time = "time", a2.TimeOfDay = "time-of-day", a2.TimeRange = "time-range", a2.TimezoneRegion = "timezone-region", a2.URL = "url", a2.URLPath = "url-path", a2.UUID = "uuid", a2.VATIDNumber = "value-added-tax-id-number", a2.VerificationCode = "verification-code", a2.Video = "video", a2.Weekday = "weekday", a2.Year = "year";
})(se$1 || (se$1 = {}));
var oe$1;
(function(a2) {
  a2.Critical = "Critical", a2.Error = "Error", a2.Fatal = "Fatal", a2.Warning = "Warning";
})(oe$1 || (oe$1 = {}));
var le$1;
(function(a2) {
  a2.Contains = "contains", a2.HasCharacterCount = "has-character-count", a2.HasNumberCount = "has-number-count", a2.HasLetterCount = "has-letter-count", a2.HasLowercaseCount = "has-lowercase-count", a2.HasSpacesCount = "has-spaces-count", a2.HasSymbolCount = "has-symbol-count", a2.HasUppercaseCount = "has-uppercase-count", a2.IsAfter = "is-after", a2.IsAfterOrEqual = "is-after-or-equal", a2.IsAirport = "is-airport", a2.IsAlpha = "is-alpha", a2.IsAlphanumeric = "is-alphanumeric", a2.IsAlgorithmHash = "is-algorithm-hash", a2.IsAscii = "is-ascii", a2.IsBase64 = "is-base-64", a2.IsBefore = "is-before", a2.IsBeforeOrAfter = "is-before-or-after", a2.IsBeforeOrEqual = "is-before-or-equal", a2.IsBetween = "is-between", a2.IsBIC = "is-bic", a2.IsBitcoinAddress = "is-bitcoin-address", a2.IsBoolean = "is-boolean", a2.IsColor = "is-color", a2.IsComplexEnough = "is-complex-enough", a2.IsCountry = "is-country", a2.IsCreditCard = "is-credit-card", a2.IsCurrency = "is-currency", a2.IsDataURI = "is-data-uri", a2.IsDate = "is-date", a2.IsDateRange = "is-date-range", a2.IsDateTime = "is-date-time", a2.IsDayOfMonth = "is-day-of-month", a2.IsDecimal = "is-decimal", a2.IsDivisibleBy = "is-divisible-by", a2.IsDomainName = "is-domain-name", a2.IsEmailAddress = "is-email-address", a2.IsEthereumAddress = "is-ethereum-address", a2.IsEAN = "is-ean", a2.IsEIN = "is-ein", a2.IsEqual = "is-equal", a2.IsEvenNumber = "is-even-number", a2.IsFloat = "is-float", a2.IsIBAN = "is-iban", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsHSLColor = "is-hsl-color", a2.IsHexColor = "is-hex-color", a2.IsHexadecimal = "is-hexadecimal", a2.IsIdentityCardCode = "is-identity-card-code", a2.IsIMEI = "is-imei", a2.IsInIPAddressRange = "is-in-ip-address-range", a2.IsInList = "is-in-list", a2.IsInTheLast = "is-in-the-last", a2.IsInteger = "is-integer", a2.IsIPAddress = "is-ip-address", a2.IsIPAddressRange = "is-ip-address-range", a2.IsISBN = "is-isbn", a2.IsISIN = "is-isin", a2.IsISMN = "is-ismn", a2.IsISRC = "is-isrc", a2.IsISSN = "is-issn", a2.IsISO4217 = "is-iso-4217", a2.IsISO8601 = "is-iso-8601", a2.IsISO31661Alpha2 = "is-iso-31661-alpha-2", a2.IsISO31661Alpha3 = "is-iso-31661-alpha-3", a2.IsJSON = "is-json", a2.IsLanguage = "is-language", a2.IsLatitude = "is-latitude", a2.IsLongitude = "is-longitude", a2.IsLengthEqual = "is-length-equal", a2.IsLengthGreaterThan = "is-length-greater-than", a2.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal", a2.IsLengthLessThan = "is-length-less-than", a2.IsLengthLessThanOrEqual = "is-length-less-than-or-equal", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsLicensePlateNumber = "is-license-plate-number", a2.IsLowercase = "is-lowercase", a2.IsOctal = "is-octal", a2.IsMACAddress = "is-mac-address", a2.IsMD5 = "is-md5", a2.IsMagnetURI = "is-magnet-uri", a2.IsMarkdown = "is-markdown", a2.IsMimeType = "is-mime-type", a2.IsMonth = "is-month", a2.IsNegativeNumber = "is-negative-number", a2.IsNotDate = "is-not-date", a2.IsNotEqual = "is-not-equal", a2.IsNotInIPAddressRange = "is-not-in-ip-address-range", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsNotRegexMatch = "is-not-regex-match", a2.IsNotToday = "is-not-today", a2.IsNumber = "is-number", a2.IsNumeric = "is-numeric", a2.IsOddNumber = "is-odd-number", a2.IsPassportNumber = "is-passport-number", a2.IsPhoneNumber = "is-phone-number", a2.IsPort = "is-port", a2.IsPositiveNumber = "is-positive-number", a2.IsPostalCode = "is-postal-code", a2.IsProvince = "is-province", a2.IsRGBColor = "is-rgb-color", a2.IsRegexMatch = "is-regex-match", a2.IsRequired = "is-required", a2.IsSemanticVersion = "is-semantic-version", a2.IsSlug = "is-slug", a2.IsSSN = "is-ssn", a2.IsState = "is-state", a2.IsStreetAddress = "is-street-address", a2.IsString = "is-string", a2.IsStrongPassword = "is-strong-password", a2.IsTags = "is-tags", a2.IsTaxIDNumber = "is-tax-id-number", a2.IsThisMonth = "is-this-month", a2.IsThisQuarter = "is-this-quarter", a2.IsThisWeek = "is-this-week", a2.IsThisWeekend = "is-this-weekend", a2.IsThisYear = "is-this-year", a2.IsTime = "is-time", a2.IsTimeOfDay = "is-time-of-day", a2.IsTimeRange = "is-time-range", a2.IsToday = "is-today", a2.IsURL = "is-url", a2.IsUUID = "is-uuid", a2.IsUppercase = "is-uppercase", a2.IsUsernameAvailable = "is-username-available", a2.IsValidStreetAddress = "is-valid-street-address", a2.IsVATIDNumber = "is-vat-id-number", a2.IsWeekday = "is-weekday", a2.IsWeekend = "is-weekend", a2.IsYear = "is-year";
})(le$1 || (le$1 = {}));
var me$1;
(function(a2) {
  a2.IsAuthenticated = "is-authenticated", a2.IsNotAuthenticated = "is-not-authenticated", a2.IsUsernameAvailable = "is-username-available", a2.PasswordMismatch = "password-mismatch";
})(me$1 || (me$1 = {}));
var ce$1;
(function(a2) {
  a2.IsHSLColor = "is-hsl-color", a2.IsHexColor = "is-hex-color", a2.IsNotNull = "is-not-null", a2.IsRGBColor = "is-rgb-color", a2.IsString = "is-string";
})(ce$1 || (ce$1 = {}));
var ue$1;
(function(a2) {
  a2.IsBetween = "is-between", a2.IsCurrency = "is-currency", a2.IsDecimal = "is-decimal", a2.IsDivisibleBy = "is-divisible-by", a2.IsEvenNumber = "is-even-number", a2.IsFloat = "is-float", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsInteger = "is-integer", a2.IsISO8601 = "is-iso-8601", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsNegativeNumber = "is-negative-number", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNumber = "is-number", a2.IsOddNumber = "is-odd-number", a2.IsPositiveNumber = "is-positive-number";
})(ue$1 || (ue$1 = {}));
var de$1;
(function(a2) {
  a2.IsBitcoinAddress = "is-bitcoin-address", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null";
})(de$1 || (de$1 = {}));
var pe$1;
(function(a2) {
  a2.IsEthereumAddress = "is-ethereum-address", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null";
})(pe$1 || (pe$1 = {}));
var Ae$1;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsJSON = "is-json", a2.IsLanguage = "is-language", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null";
})(Ae$1 || (Ae$1 = {}));
var ge$1;
(function(a2) {
  a2.IsAlpha = "is-alpha", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(ge$1 || (ge$1 = {}));
var fe$1;
(function(a2) {
  a2.IsAlpha = "is-alpha", a2.IsCountry = "is-country", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(fe$1 || (fe$1 = {}));
var he$1;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsFloat = "is-float", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNumeric = "is-numeric";
})(he$1 || (he$1 = {}));
var _e$1;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsFloat = "is-float", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNumeric = "is-numeric";
})(_e$1 || (_e$1 = {}));
var Se$1;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsPostalCode = "is-postal-code", a2.IsNotNull = "is-not-null";
})(Se$1 || (Se$1 = {}));
var Te$1;
(function(a2) {
  a2.IsAlpha = "is-alpha", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsProvince = "is-province", a2.IsString = "is-string";
})(Te$1 || (Te$1 = {}));
var ve$1;
(function(a2) {
  a2.IsAlpha = "is-alpha", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsState = "is-state", a2.IsString = "is-string";
})(ve$1 || (ve$1 = {}));
var be$1;
(function(a2) {
  a2.IsAlphanumeric = "is-alphanumeric", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsString = "is-string", a2.IsStreetAddress = "is-street-address";
})(be$1 || (be$1 = {}));
var Ee$1;
(function(a2) {
  a2.IsAirport = "is-airport", a2.IsAlpha = "is-alpha", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(Ee$1 || (Ee$1 = {}));
var Ie$1;
(function(a2) {
  a2.IsAlgorithmHash = "is-algorithm-hash", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(Ie$1 || (Ie$1 = {}));
var xe$1;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsSemanticVersion = "is-semantic-version", a2.IsString = "is-string";
})(xe$1 || (xe$1 = {}));
var Ue$1;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string", a2.IsUUID = "is-uuid";
})(Ue$1 || (Ue$1 = {}));
var ye$1;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsMD5 = "is-md5", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(ye$1 || (ye$1 = {}));
var Pe$1;
(function(a2) {
  a2.IsBoolean = "is-boolean", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null";
})(Pe$1 || (Pe$1 = {}));
var ke$1;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsAfterOrEqual = "is-after-or-equal", a2.IsBefore = "is-before", a2.IsBeforeOrEqual = "is-before-or-equal", a2.IsBetween = "is-between", a2.IsDate = "is-date", a2.IsEqual = "is-equal", a2.IsNotDate = "is-not-date", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNotToday = "is-not-today", a2.IsThisWeek = "is-this-week", a2.IsThisMonth = "is-this-month", a2.IsThisQuarter = "is-this-quarter", a2.IsThisYear = "is-this-year", a2.IsToday = "is-today", a2.IsWeekend = "is-weekend";
})(ke$1 || (ke$1 = {}));
var Me$1;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsBefore = "is-before", a2.IsBeforeOrAfter = "is-before-or-after", a2.IsBetween = "is-between", a2.IsDate = "is-date", a2.IsDateRange = "is-date-range", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null";
})(Me$1 || (Me$1 = {}));
var Ne$1;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsAfterOrEqual = "is-after-or-equal", a2.IsBefore = "is-before", a2.IsBeforeOrEqual = "is-before-or-equal", a2.IsBetween = "is-between", a2.IsDate = "is-date", a2.IsEqual = "is-equal", a2.IsNotDate = "is-not-date", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNotToday = "is-not-today", a2.IsThisWeek = "is-this-week", a2.IsThisMonth = "is-this-month", a2.IsThisQuarter = "is-this-quarter", a2.IsThisYear = "is-this-year", a2.IsToday = "is-today", a2.IsWeekend = "is-weekend";
})(Ne$1 || (Ne$1 = {}));
var Le$1;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsAfterOrEqual = "is-after-or-equal", a2.IsBefore = "is-before", a2.IsBeforeOrEqual = "is-before-or-equal", a2.IsBetween = "is-between", a2.IsDayOfMonth = "is-day-of-month", a2.IsEvenNumber = "is-even-number", a2.IsEqual = "is-equal", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsInteger = "is-integer", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNumber = "is-number", a2.IsOddNumber = "is-odd-number", a2.IsToday = "is-today", a2.IsWeekday = "is-weekday", a2.IsWeekend = "is-weekend";
})(Le$1 || (Le$1 = {}));
var Be$1;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsAfterOrEqual = "is-after-or-equal", a2.IsBefore = "is-before", a2.IsBeforeOrEqual = "is-before-or-equal", a2.IsBetween = "is-between", a2.IsEvenNumber = "is-even-number", a2.IsEqual = "is-equal", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsInteger = "is-integer", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsMonth = "is-month", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNumber = "is-number", a2.IsOddNumber = "is-odd-number", a2.IsThisMonth = "is-this-month";
})(Be$1 || (Be$1 = {}));
var we;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsAfterOrEqual = "is-after-or-equal", a2.IsBefore = "is-before", a2.IsBeforeOrEqual = "is-before-or-equal", a2.IsBetween = "is-between", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsTime = "is-time";
})(we || (we = {}));
var De$1;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsBefore = "is-before", a2.IsBeforeOrAfter = "is-before-or-after", a2.IsBetween = "is-between", a2.IsTime = "is-time", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsTimeRange = "is-time-range";
})(De$1 || (De$1 = {}));
var Ge$1;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsBefore = "is-before", a2.IsBeforeOrAfter = "is-before-or-after", a2.IsBetween = "is-between", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsTimeOfDay = "is-time-of-day", a2.IsTimeRange = "is-time-range";
})(Ge$1 || (Ge$1 = {}));
var Ke;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsAfterOrEqual = "is-after-or-equal", a2.IsBefore = "is-before", a2.IsBeforeOrEqual = "is-before-or-equal", a2.IsBetween = "is-between", a2.IsEvenNumber = "is-even-number", a2.IsEqual = "is-equal", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNumber = "is-number", a2.IsOddNumber = "is-odd-number", a2.IsWeekday = "is-weekday", a2.IsWeekend = "is-weekend";
})(Ke || (Ke = {}));
var qe;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsAfterOrEqual = "is-after-or-equal", a2.IsBefore = "is-before", a2.IsBeforeOrEqual = "is-before-or-equal", a2.IsBetween = "is-between", a2.IsEvenNumber = "is-even-number", a2.IsEqual = "is-equal", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsInteger = "is-integer", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNumber = "is-number", a2.IsOddNumber = "is-odd-number", a2.IsThisYear = "is-this-year", a2.IsYear = "is-year";
})(qe || (qe = {}));
var Fe$1;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsHexadecimal = "is-hexadecimal", a2.IsLengthEqual = "is-length-equal", a2.IsLengthGreaterThan = "is-length-greater-than", a2.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal", a2.IsLengthLessThan = "is-length-less-than", a2.IsLengthLessThanOrEqual = "is-length-less-than-or-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(Fe$1 || (Fe$1 = {}));
var He$1;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsJSON = "is-json", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null";
})(He$1 || (He$1 = {}));
var Oe;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsMarkdown = "is-markdown", a2.IsString = "is-string";
})(Oe || (Oe = {}));
var je;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null";
})(je || (je = {}));
var Re$1;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null";
})(Re$1 || (Re$1 = {}));
var ze;
(function(a2) {
  a2.Contains = "contains", a2.IsDataURI = "is-data-uri", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(ze || (ze = {}));
var We$1;
(function(a2) {
  a2.Contains = "contains", a2.IsDomainName = "is-domain-name", a2.IsEqual = "is-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(We$1 || (We$1 = {}));
var Ve;
(function(a2) {
  a2.Contains = "contains", a2.IsEmailAddress = "is-email-address", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(Ve || (Ve = {}));
var Je;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsIPAddress = "is-ip-address", a2.IsInIPAddressRange = "is-in-ip-address-range", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotInIPAddressRange = "is-not-in-ip-address-range", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(Je || (Je = {}));
var Ye;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsIPAddressRange = "is-ip-address-range", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotInIPAddressRange = "is-not-in-ip-address-range", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(Ye || (Ye = {}));
var Ze;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsInteger = "is-integer", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null";
})(Ze || (Ze = {}));
var Qe;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsMACAddress = "is-mac-address", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(Qe || (Qe = {}));
var $e;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsMagnetURI = "is-magnet-uri", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})($e || ($e = {}));
var Xe;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsMimeType = "is-mime-type", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(Xe || (Xe = {}));
var Ce;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string", a2.IsSlug = "is-slug";
})(Ce || (Ce = {}));
var ai;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string", a2.IsURL = "is-url";
})(ai || (ai = {}));
var ei;
(function(a2) {
  a2.IsAfter = "is-after", a2.IsAfterOrEqual = "is-after-or-equal", a2.IsBefore = "is-before", a2.IsBeforeOrEqual = "is-before-or-equal", a2.IsBetween = "is-between", a2.IsDecimal = "is-decimal", a2.IsDivisibleBy = "is-divisible-by", a2.IsEAN = "is-ean", a2.IsEIN = "is-ein", a2.IsEqual = "is-equal", a2.IsEvenNumber = "is-even-number", a2.IsFloat = "is-float", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsInt = "is-integer", a2.IsISBN = "is-isbn", a2.IsISMN = "is-ismn", a2.IsISSN = "is-issn", a2.IsLatitude = "is-latitude", a2.IsLongitude = "is-longitude", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsMACAddress = "is-mac-address", a2.IsNumber = "is-number", a2.IsNegativeNumber = "is-negative-number", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsOddNumber = "is-odd-number", a2.IsPassportNumber = "is-passport-number", a2.IsPhoneNumber = "is-phone-number", a2.IsPort = "is-port", a2.IsPositiveNumber = "is-positive-number", a2.IsPostalCode = "is-postal-code", a2.IsSemanticVersion = "is-semantic-version", a2.IsSSN = "is-ssn", a2.IsTaxIDNumber = "is-tax-id-number", a2.IsUUID = "is-uuid", a2.IsVATIDNumber = "is-vat-id-number";
})(ei || (ei = {}));
var ii;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsFloat = "is-float", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNumber = "is-number", a2.IsNumeric = "is-numeric";
})(ii || (ii = {}));
var ni;
(function(a2) {
  a2.IsEqual = "is-equal", a2.IsInteger = "is-integer", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsNumber = "is-number", a2.IsNumeric = "is-numeric";
})(ni || (ni = {}));
var ti$1;
(function(a2) {
  a2.IsCreditCard = "is-credit-card", a2.IsEqual = "is-equal", a2.IsLengthEqual = "is-length-equal", a2.IsLengthGreaterThan = "is-length-greater-than", a2.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal", a2.IsLengthLessThan = "is-length-less-than", a2.IsLengthLessThanOrEqual = "is-length-less-than-or-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotNull = "is-not-null", a2.IsRegexMatch = "is-regex-match", a2.IsNotRegexMatch = "is-not-regex-match";
})(ti$1 || (ti$1 = {}));
var ri$1;
(function(a2) {
  a2.isEmailAddress = "is-email-address", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsLengthEqual = "is-length-equal", a2.IsLengthGreaterThan = "is-length-greater-than", a2.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal", a2.IsLengthLessThan = "is-length-less-than", a2.IsLengthLessThanOrEqual = "is-length-less-than-or-equal", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsRegexMatch = "is-regex-match", a2.IsNotRegexMatch = "is-not-regex-match";
})(ri$1 || (ri$1 = {}));
var zi;
(function(a2) {
  a2.IsLicensePlateNumber = "is-license-plate-number", a2.IsNotNull = "is-not-null", a2.IsNotRegexMatch = "is-not-regex-match", a2.IsString = "is-string", a2.IsRegexMatch = "is-regex-match";
})(zi || (zi = {}));
var si$1;
(function(a2) {
  a2.IsNotNull = "is-not-null", a2.IsPassportNumber = "is-passport-number", a2.IsString = "is-string", a2.IsRegexMatch = "is-regex-match";
})(si$1 || (si$1 = {}));
var oi$1;
(function(a2) {
  a2.IsComplexEnough = "is-complex-enough", a2.IsInList = "is-in-list", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsNotRegexMatch = "is-not-regex-match", a2.IsLengthGreaterThan = "is-length-greater-than", a2.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal", a2.IsLengthLessThan = "is-length-less-than", a2.IsLengthLessThanOrEqual = "is-length-less-than-or-equal", a2.IsStrongPassword = "is-strong-password", a2.IsString = "is-string", a2.IsRegexMatch = "is-regex-match";
})(oi$1 || (oi$1 = {}));
var li$1;
(function(a2) {
  a2.IsNotNull = "is-not-null", a2.IsNotRegexMatch = "is-not-regex-match", a2.IsNumber = "is-number", a2.IsPhoneNumber = "is-phone-number", a2.IsRegexMatch = "is-regex-match";
})(li$1 || (li$1 = {}));
var mi$1;
(function(a2) {
  a2.IsNotNull = "is-not-null", a2.IsSSN = "is-ssn", a2.IsString = "is-string", a2.IsRegexMatch = "is-regex-match";
})(mi$1 || (mi$1 = {}));
var ci$1;
(function(a2) {
  a2.Contains = "contains", a2.IsBIC = "is-bic", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(ci$1 || (ci$1 = {}));
var ui$2;
(function(a2) {
  a2.Contains = "contains", a2.IsEAN = "is-ean", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(ui$2 || (ui$2 = {}));
var di$1;
(function(a2) {
  a2.Contains = "contains", a2.IsEIN = "is-ein", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(di$1 || (di$1 = {}));
var pi$1;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsIBAN = "is-iban", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(pi$1 || (pi$1 = {}));
var Ai$1;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsISBN = "is-isbn", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(Ai$1 || (Ai$1 = {}));
var gi;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsISIN = "is-isin", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(gi || (gi = {}));
var fi;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsISMN = "is-ismn", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(fi || (fi = {}));
var hi;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsISSN = "is-issn", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string";
})(hi || (hi = {}));
var _i;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string", a2.IsTaxIDNumber = "is-tax-id-number";
})(_i || (_i = {}));
var Si$1;
(function(a2) {
  a2.Contains = "contains", a2.IsEqual = "is-equal", a2.IsInList = "is-in-list", a2.IsNotEqual = "is-not-equal", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsString = "is-string", a2.IsVATIDNumber = "is-vat-id-number";
})(Si$1 || (Si$1 = {}));
var Ti$1;
(function(a2) {
  a2.Contains = "contains", a2.HasNumberCount = "has-number-count", a2.HasLowercaseCount = "has-lowercase-count", a2.HasLetterCount = "has-letter-count", a2.HasSpacesCount = "has-spaces-count", a2.HasSymbolCount = "has-symbol-count", a2.HasUppercaseCount = "has-uppercase-count", a2.IsAlpha = "is-alpha", a2.IsAlphanumeric = "is-alphanumeric", a2.IsAscii = "is-ascii", a2.IsBase64 = "is-base-64", a2.IsColor = "is-color", a2.IsComplexEnough = "is-complex-enough", a2.IsCreditCard = "is-credit-card", a2.IsDataURI = "is-data-uri", a2.IsDomainName = "is-domain-name", a2.IsEmailAddress = "is-email-address", a2.IsEthereumAddress = "is-ethereum-address", a2.IsEAN = "is-ean", a2.IsEIN = "is-ein", a2.IsEqual = "is-equal", a2.IsIBAN = "is-iban", a2.IsHSLColor = "is-hsl-color", a2.IsHexColor = "is-hex-color", a2.IsHexadecimal = "is-hexadecimal", a2.IsIdentityCardCode = "is-identity-card-code", a2.IsIMEI = "is-imei", a2.IsInList = "is-in-list", a2.IsIPAddress = "is-ip-address", a2.IsInIPAddressRange = "is-in-ip-address-range", a2.IsISBN = "is-isbn", a2.IsISIN = "is-isin", a2.IsISMN = "is-ismn", a2.IsISRC = "is-isrc", a2.IsISSN = "is-issn", a2.IsLanguage = "is-language", a2.IsLatitude = "is-latitude", a2.IsLongitude = "is-longitude", a2.IsLengthEqual = "is-length-equal", a2.IsLengthGreaterThan = "is-length-greater-than", a2.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal", a2.IsLengthLessThan = "is-length-less-than", a2.IsLengthLessThanOrEqual = "is-length-less-than-or-equal", a2.IsLicensePlateNumber = "is-license-plate-number", a2.IsLowercase = "is-lowercase", a2.IsOctal = "is-octal", a2.IsMACAddress = "is-mac-address", a2.IsMD5 = "is-md5", a2.IsMagnetURI = "is-magnet-uri", a2.IsMarkdown = "is-markdown", a2.IsMimeType = "is-mime-type", a2.IsMonth = "is-month", a2.IsNotInIPAddressRange = "is-not-in-ip-address-range", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsNotRegexMatch = "is-not-regex-match", a2.IsNumber = "is-number", a2.IsNumeric = "is-numeric", a2.IsPassportNumber = "is-passport-number", a2.IsPhoneNumber = "is-phone-number", a2.IsPort = "is-port", a2.IsPostalCode = "is-postal-code", a2.IsProvince = "is-province", a2.IsRegexMatch = "is-regex-match", a2.IsSemanticVersion = "is-semantic-version", a2.IsSlug = "is-slug", a2.IsSSN = "is-ssn", a2.IsState = "is-state", a2.IsStreetAddress = "is-street-address", a2.IsString = "is-string", a2.IsTaxIDNumber = "is-tax-id-number", a2.IsURL = "is-url", a2.IsUUID = "is-uuid", a2.IsUppercase = "is-uppercase", a2.IsVATIDNumber = "is-vat-id-number", a2.IsWeekday = "is-weekday", a2.IsWeekend = "is-weekend", a2.IsYear = "is-year";
})(Ti$1 || (Ti$1 = {}));
var vi;
(function(a2) {
  a2.Contains = "contains", a2.IsAlpha = "is-alpha", a2.IsAlphanumeric = "is-alphanumeric", a2.IsInList = "is-in-list", a2.IsMarkdown = "is-markdown", a2.IsNotInList = "is-not-in-list", a2.IsNumeric = "is-numeric", a2.IsLowercase = "is-lowercase", a2.IsString = "is-string", a2.IsUppercase = "is-uppercase";
})(vi || (vi = {}));
var bi;
(function(a2) {
  a2.InvalidCharacters = "invalid-characters", a2.InvalidPattern = "invalid-pattern", a2.NotComplexEnough = "not-complex-enough", a2.NotUnique = "not-unique", a2.NotValidEmail = "not-valid-email", a2.TooLong = "too-long", a2.TooShort = "too-short", a2.Required = "required";
})(bi || (bi = {}));
var Ei;
(function(a2) {
  a2[a2.Allowed = 0] = "Allowed", a2[a2.Blocked = 1] = "Blocked";
})(Ei || (Ei = {}));
var Ii;
(function(a2) {
  a2.Canceled = "Canceled", a2.Completed = "Completed", a2.Created = "Created", a2.Faulted = "Faulted", a2.Queued = "Queued", a2.Running = "Running", a2.Waiting = "Waiting";
})(Ii || (Ii = {}));
var xi;
(function(a2) {
  a2.Archived = "ARCHIVED", a2.Compromised = "COMPROMISED", a2.Confirmed = "CONFIRMED", a2.ForcePasswordChange = "FORCE_CHANGE_PASSWORD", a2.ResetRequired = "RESET_REQUIRED", a2.Unconfirmed = "UNCONFIRMED", a2.Unknown = "UNKNOWN";
})(xi || (xi = {}));
var Wi;
(function(a2) {
  a2.Code = "code", a2.Link = "link";
})(Wi || (Wi = {}));
var Ui;
(function(a2) {
  a2.Owner = "Owner", a2.Admin = "Admin", a2.User = "User", a2.Visitor = "Visitor";
})(Ui || (Ui = {}));
var yi;
(function(a2) {
  a2.RequiresPaymentMethod = "requires_payment_method", a2.RequiresConfirmation = "requires_confirmation", a2.RequiresAction = "requires_action", a2.Processing = "processing", a2.RequiresCapture = "requires_capture", a2.Canceled = "canceled", a2.Succeeded = "succeeded";
})(yi || (yi = {}));
var Pi;
(function(a2) {
  a2.Incomplete = "incomplete", a2.IncompleteExpired = "incomplete_expired", a2.Trialing = "trialing", a2.Active = "active", a2.PastDue = "past_due", a2.Canceled = "canceled", a2.Unpaid = "unpaid";
})(Pi || (Pi = {}));
var ki;
(function(a2) {
  a2.Monthly = "monthly", a2.Quarterly = "quarterly", a2.Yearly = "yearly", a2.Lifetime = "lifetime";
})(ki || (ki = {}));
var Mi;
(function(a2) {
  a2.Delivered = "delivered", a2.Read = "read", a2.Sending = "sending", a2.Sent = "sent";
})(Mi || (Mi = {}));
var Ni;
(function(a2) {
  a2.Audio = "audio", a2.File = "file", a2.Image = "image", a2.Text = "text", a2.Video = "video";
})(Ni || (Ni = {}));
var Li;
(function(a2) {
  a2.Audio = "audio", a2.File = "file", a2.Image = "image", a2.Video = "video";
})(Li || (Li = {}));
var Bi;
(function(a2) {
  a2.Angry = "angry", a2.Laugh = "laugh", a2.Like = "like", a2.Love = "love", a2.Sad = "sad", a2.Wow = "wow", a2.Wink = "wink", a2.Yay = "yay";
})(Bi || (Bi = {}));
var wi;
(function(a2) {
  a2.Email = "email", a2.PhoneNumber = "phone_number";
})(wi || (wi = {}));
var c;
(function(a2) {
  a2.Analytics = "analytics", a2.Critical = "critical", a2.Debug = "debug", a2.Exception = "exception", a2.Http = "http", a2.Info = "info", a2.Warning = "warning";
})(c || (c = {}));
var Di;
(function(a2) {
  a2.Delete = "delete", a2.Get = "get", a2.Head = "head", a2.Patch = "patch", a2.Post = "post", a2.Put = "put";
})(Di || (Di = {}));
var Gi;
(function(a2) {
  a2[a2.CONTINUE = 100] = "CONTINUE", a2[a2.SWITCHING_PROTOCOLS = 101] = "SWITCHING_PROTOCOLS", a2[a2.PROCESSING = 102] = "PROCESSING", a2[a2.OK = 200] = "OK", a2[a2.CREATED = 201] = "CREATED", a2[a2.ACCEPTED = 202] = "ACCEPTED", a2[a2.NON_AUTHORITATIVE_INFORMATION = 203] = "NON_AUTHORITATIVE_INFORMATION", a2[a2.NO_CONTENT = 204] = "NO_CONTENT", a2[a2.RESET_CONTENT = 205] = "RESET_CONTENT", a2[a2.PARTIAL_CONTENT = 206] = "PARTIAL_CONTENT", a2[a2.MULTI_STATUS = 207] = "MULTI_STATUS", a2[a2.ALREADY_REPORTED = 208] = "ALREADY_REPORTED", a2[a2.IM_USED = 226] = "IM_USED", a2[a2.MULTIPLE_CHOICES = 300] = "MULTIPLE_CHOICES", a2[a2.MOVED_PERMANENTLY = 301] = "MOVED_PERMANENTLY", a2[a2.FOUND = 302] = "FOUND", a2[a2.SEE_OTHER = 303] = "SEE_OTHER", a2[a2.NOT_MODIFIED = 304] = "NOT_MODIFIED", a2[a2.USE_PROXY = 305] = "USE_PROXY", a2[a2.SWITCH_PROXY = 306] = "SWITCH_PROXY", a2[a2.TEMPORARY_REDIRECT = 307] = "TEMPORARY_REDIRECT", a2[a2.PERMANENT_REDIRECT = 308] = "PERMANENT_REDIRECT", a2[a2.BAD_REQUEST = 400] = "BAD_REQUEST", a2[a2.UNAUTHORIZED = 401] = "UNAUTHORIZED", a2[a2.PAYMENT_REQUIRED = 402] = "PAYMENT_REQUIRED", a2[a2.FORBIDDEN = 403] = "FORBIDDEN", a2[a2.NOT_FOUND = 404] = "NOT_FOUND", a2[a2.METHOD_NOT_ALLOWED = 405] = "METHOD_NOT_ALLOWED", a2[a2.NOT_ACCEPTABLE = 406] = "NOT_ACCEPTABLE", a2[a2.PROXY_AUTHENTICATION_REQUIRED = 407] = "PROXY_AUTHENTICATION_REQUIRED", a2[a2.REQUEST_TIMEOUT = 408] = "REQUEST_TIMEOUT", a2[a2.CONFLICT = 409] = "CONFLICT", a2[a2.GONE = 410] = "GONE", a2[a2.LENGTH_REQUIRED = 411] = "LENGTH_REQUIRED", a2[a2.PRECONDITION_FAILED = 412] = "PRECONDITION_FAILED", a2[a2.PAYLOAD_TOO_LARGE = 413] = "PAYLOAD_TOO_LARGE", a2[a2.URI_TOO_LONG = 414] = "URI_TOO_LONG", a2[a2.UNSUPPORTED_MEDIA_TYPE = 415] = "UNSUPPORTED_MEDIA_TYPE", a2[a2.RANGE_NOT_SATISFIABLE = 416] = "RANGE_NOT_SATISFIABLE", a2[a2.EXPECTATION_FAILED = 417] = "EXPECTATION_FAILED", a2[a2.I_AM_A_TEAPOT = 418] = "I_AM_A_TEAPOT", a2[a2.MISDIRECTED_REQUEST = 421] = "MISDIRECTED_REQUEST", a2[a2.UNPROCESSABLE_ENTITY = 422] = "UNPROCESSABLE_ENTITY", a2[a2.LOCKED = 423] = "LOCKED", a2[a2.FAILED_DEPENDENCY = 424] = "FAILED_DEPENDENCY", a2[a2.TOO_EARLY = 425] = "TOO_EARLY", a2[a2.UPGRADE_REQUIRED = 426] = "UPGRADE_REQUIRED", a2[a2.PRECONDITION_REQUIRED = 428] = "PRECONDITION_REQUIRED", a2[a2.TOO_MANY_REQUESTS = 429] = "TOO_MANY_REQUESTS", a2[a2.REQUEST_HEADER_FIELDS_TOO_LARGE = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE", a2[a2.UNAVAILABLE_FOR_LEGAL_REASONS = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS", a2[a2.INTERNAL_SERVER_ERROR = 500] = "INTERNAL_SERVER_ERROR", a2[a2.NOT_IMPLEMENTED = 501] = "NOT_IMPLEMENTED", a2[a2.BAD_GATEWAY = 502] = "BAD_GATEWAY", a2[a2.SERVICE_UNAVAILABLE = 503] = "SERVICE_UNAVAILABLE", a2[a2.GATEWAY_TIMEOUT = 504] = "GATEWAY_TIMEOUT", a2[a2.HTTP_VERSION_NOT_SUPPORTED = 505] = "HTTP_VERSION_NOT_SUPPORTED", a2[a2.VARIANT_ALSO_NEGOTIATES = 506] = "VARIANT_ALSO_NEGOTIATES", a2[a2.INSUFFICIENT_STORAGE = 507] = "INSUFFICIENT_STORAGE", a2[a2.LOOP_DETECTED = 508] = "LOOP_DETECTED", a2[a2.BANDWIDTH_LIMIT_EXCEEDED = 509] = "BANDWIDTH_LIMIT_EXCEEDED", a2[a2.NOT_EXTENDED = 510] = "NOT_EXTENDED", a2[a2.NETWORK_AUTHENTICATION_REQUIRED = 511] = "NETWORK_AUTHENTICATION_REQUIRED";
})(Gi || (Gi = {}));
var r$2;
(function(a2) {
  a2.Afghanistan = "AF", a2.Albania = "AL", a2.Algeria = "DZ", a2.AmericanSamoa = "AS", a2.Andorra = "AD", a2.Angola = "AO", a2.Anguilla = "AI", a2.Antarctica = "AQ", a2.AntiguaAndBarbuda = "AG", a2.Argentina = "AR", a2.Armenia = "AM", a2.Aruba = "AW", a2.Australia = "AU", a2.Austria = "AT", a2.Azerbaijan = "AZ", a2.Bahamas = "BS", a2.Bahrain = "BH", a2.Bangladesh = "BD", a2.Barbados = "BB", a2.Belarus = "BY", a2.Belgium = "BE", a2.Belize = "BZ", a2.Benin = "BJ", a2.Bermuda = "BM", a2.Bhutan = "BT", a2.Bolivia = "BO", a2.BosniaAndHerzegovina = "BA", a2.Botswana = "BW", a2.BouvetIsland = "BV", a2.Brazil = "BR", a2.BritishIndianOceanTerritory = "IO", a2.Brunei = "BN", a2.Bulgaria = "BG", a2.BurkinaFaso = "BF", a2.Burundi = "BI", a2.Cambodia = "KH", a2.Cameroon = "CM", a2.Canada = "CA", a2.CapeVerde = "CV", a2.CaymanIslands = "KY", a2.CentralAfricanRepublic = "CF", a2.Chad = "TD", a2.Chile = "CL", a2.China = "CN", a2.ChristmasIsland = "CX", a2.CocosKeelingIslands = "CC", a2.Colombia = "CO", a2.Comoros = "KM", a2.Congo = "CG", a2.CongoTheDemocraticRepublicOfThe = "CD", a2.CookIslands = "CK", a2.CostaRica = "CR", a2.CoteDIvoire = "CI", a2.Croatia = "HR", a2.Cuba = "CU", a2.Cyprus = "CY", a2.CzechRepublic = "CZ", a2.Denmark = "DK", a2.Djibouti = "DJ", a2.Dominica = "DM", a2.DominicanRepublic = "DO", a2.Ecuador = "EC", a2.Egypt = "EG", a2.ElSalvador = "SV", a2.EquatorialGuinea = "GQ", a2.Eritrea = "ER", a2.Estonia = "EE", a2.Ethiopia = "ET", a2.FalklandIslands = "FK", a2.FaroeIslands = "FO", a2.Fiji = "FJ", a2.Finland = "FI", a2.France = "FR", a2.FrenchGuiana = "GF", a2.FrenchPolynesia = "PF", a2.FrenchSouthernTerritories = "TF", a2.Gabon = "GA", a2.Gambia = "GM", a2.Georgia = "GE", a2.Germany = "DE", a2.Ghana = "GH", a2.Gibraltar = "GI", a2.Greece = "GR", a2.Greenland = "GL", a2.Grenada = "GD", a2.Guadeloupe = "GP", a2.Guam = "GU", a2.Guatemala = "GT", a2.Guernsey = "GG", a2.Guinea = "GN", a2.GuineaBissau = "GW", a2.Guyana = "GY", a2.Haiti = "HT", a2.HeardIslandMcdonaldIslands = "HM", a2.HolySeeVaticanCityState = "VA", a2.Honduras = "HN", a2.HongKong = "HK", a2.Hungary = "HU", a2.Iceland = "IS", a2.India = "IN", a2.Indonesia = "ID", a2.Iran = "IR", a2.Iraq = "IQ", a2.Ireland = "IE", a2.IsleOfMan = "IM", a2.Israel = "IL", a2.Italy = "IT", a2.Jamaica = "JM", a2.Japan = "JP", a2.Jersey = "JE", a2.Jordan = "JO", a2.Kazakhstan = "KZ", a2.Kenya = "KE", a2.Kiribati = "KI", a2.Kuwait = "KW", a2.Kyrgyzstan = "KG", a2.Laos = "LA", a2.Latvia = "LV", a2.Lebanon = "LB", a2.Lesotho = "LS", a2.Liberia = "LR", a2.Libya = "LY", a2.Liechtenstein = "LI", a2.Lithuania = "LT", a2.Luxembourg = "LU", a2.Macau = "MO", a2.Madagascar = "MG", a2.Malawi = "MW", a2.Malaysia = "MY", a2.Maldives = "MV", a2.Mali = "ML", a2.Malta = "MT", a2.MarshallIslands = "MH", a2.Martinique = "MQ", a2.Mauritania = "MR", a2.Mauritius = "MU", a2.Mayotte = "YT", a2.Mexico = "MX", a2.MicronesiaFederatedStatesOf = "FM", a2.Moldova = "MD", a2.Monaco = "MC", a2.Mongolia = "MN", a2.Montenegro = "ME", a2.Montserrat = "MS", a2.Morocco = "MA", a2.Mozambique = "MZ", a2.Myanmar = "MM", a2.Namibia = "NA", a2.Nauru = "NR", a2.Nepal = "NP", a2.Netherlands = "NL", a2.NetherlandsAntilles = "AN", a2.NewCaledonia = "NC", a2.NewZealand = "NZ", a2.NorthKorea = "KP", a2.Nicaragua = "NI", a2.Niger = "NE", a2.Nigeria = "NG", a2.Niue = "NU", a2.NorfolkIsland = "NF", a2.NorthMacedonia = "MK", a2.NorthernMarianaIslands = "MP", a2.Norway = "NO", a2.Oman = "OM", a2.Pakistan = "PK", a2.Palau = "PW", a2.PalestinianTerritoryOccupied = "PS", a2.Panama = "PA", a2.PapuaNewGuinea = "PG", a2.Paraguay = "PY", a2.Peru = "PE", a2.Philippines = "PH", a2.Pitcairn = "PN", a2.Poland = "PL", a2.Portugal = "PT", a2.PuertoRico = "PR", a2.Qatar = "QA", a2.Reunion = "RE", a2.Romania = "RO", a2.RussianFederation = "RU", a2.Rwanda = "RW", a2.SaintBarthelemy = "BL", a2.SaintHelena = "SH", a2.SaintKittsAndNevis = "KN", a2.SaintLucia = "LC", a2.SaintMartin = "MF", a2.SaintPierreAndMiquelon = "PM", a2.SaintVincentAndTheGrenadines = "VC", a2.Samoa = "WS", a2.SanMarino = "SM", a2.SaoTomeAndPrincipe = "ST", a2.SaudiArabia = "SA", a2.Senegal = "SN", a2.Serbia = "RS", a2.SerbiaAndMontenegro = "CS", a2.Seychelles = "SC", a2.SierraLeone = "SL", a2.Singapore = "SG", a2.Slovakia = "SK", a2.Slovenia = "SI", a2.SolomonIslands = "SB", a2.Somalia = "SO", a2.SouthAfrica = "ZA", a2.SouthGeorgiaAndTheSouthSandwichIslands = "GS", a2.SouthKorea = "KR", a2.Spain = "ES", a2.SriLanka = "LK", a2.Sudan = "SD", a2.Suriname = "SR", a2.SvalbardAndJanMayen = "SJ", a2.Swaziland = "SZ", a2.Sweden = "SE", a2.Switzerland = "CH", a2.Syria = "SY", a2.Taiwan = "TW", a2.Tajikistan = "TJ", a2.Tanzania = "TZ", a2.Thailand = "TH", a2.TimorLeste = "TL", a2.Togo = "TG", a2.Tokelau = "TK", a2.Tonga = "TO", a2.TrinidadAndTobago = "TT", a2.Tunisia = "TN", a2.Turkey = "TR", a2.Turkmenistan = "TM", a2.TurksAndCaicosIslands = "TC", a2.Tuvalu = "TV", a2.Uganda = "UG", a2.Ukraine = "UA", a2.UnitedArabEmirates = "AE", a2.UnitedKingdom = "GB", a2.UnitedStates = "US", a2.UnitedStatesMinorOutlyingIslands = "UM", a2.Uruguay = "UY", a2.Uzbekistan = "UZ", a2.Vanuatu = "VU", a2.Venezuela = "VE", a2.Vietnam = "VN", a2.VirginIslandsBritish = "VG", a2.VirginIslandsUS = "VI", a2.WallisAndFutuna = "WF", a2.WesternSahara = "EH", a2.Yemen = "YE", a2.Zambia = "ZM", a2.Zimbabwe = "ZW";
})(r$2 || (r$2 = {}));
var l$1;
(function(a2) {
  a2.AfghanistanAfghani = "AFN", a2.AlbaniaLek = "ALL", a2.ArmeniaDram = "AMD", a2.AlgeriaDinar = "DZD", a2.AmericanSamoaTala = "WST", a2.AngolaKwanza = "AOA", a2.ArgentinaPeso = "ARS", a2.AustraliaDollar = "AUD", a2.ArubaFlorin = "AWG", a2.AzerbaijanNewManat = "AZN", a2.BosniaAndHerzegovinaConvertibleMark = "BAM", a2.BahrainDinar = "BHD", a2.BarbadosDollar = "BBD", a2.BangladeshTaka = "BDT", a2.BelgiumFranc = "BGN", a2.BermudaDollar = "BMD", a2.BruneiDollar = "BND", a2.BoliviaBoliviano = "BOB", a2.BrazilReal = "BRL", a2.BahamasDollar = "BSD", a2.BhutanNgultrum = "BTN", a2.BotswanaPula = "BWP", a2.BelarusRuble = "BYN", a2.BelizeDollar = "BZD", a2.BulgariaLev = "BGN", a2.BurundiFranc = "BIF", a2.BritishPound = "GBP", a2.CanadaDollar = "CAD", a2.CambodiaRiel = "KHR", a2.ComorosFranc = "KMF", a2.CaymanIslandsDollar = "KYD", a2.ChilePeso = "CLP", a2.ChinaYuan = "CNY", a2.ColombiaPeso = "COP", a2.CostaRicaColon = "CRC", a2.CroatiaKuna = "HRK", a2.CubaConvertiblePeso = "CUC", a2.CubaPeso = "CUP", a2.CapeVerdeEscudo = "CVE", a2.CyprusPound = "CYP", a2.CzechRepublicKoruna = "CZK", a2.DjiboutiFranc = "DJF", a2.DenmarkKrone = "DKK", a2.DominicaDollar = "XCD", a2.DominicanRepublicPeso = "DOP", a2.EastCaribbeanDollar = "XCD", a2.EgyptPound = "EGP", a2.ElSalvadorColon = "SVC", a2.EquatorialGuineaEkwele = "GQE", a2.EritreaNakfa = "ERN", a2.EstoniaKroon = "EEK", a2.EthiopiaBirr = "ETB", a2.Euro = "EUR", a2.FijiDollar = "FJD", a2.FalklandIslandsPound = "FKP", a2.GambiaDalasi = "GMD", a2.GabonFranc = "GMD", a2.GeorgiaLari = "GEL", a2.GhanaCedi = "GHS", a2.GibraltarPound = "GIP", a2.GuatemalaQuetzal = "GTQ", a2.GuernseyPound = "GGP", a2.GuineaBissauPeso = "GWP", a2.GuyanaDollar = "GYD", a2.HongKongDollar = "HKD", a2.HondurasLempira = "HNL", a2.HaitiGourde = "HTG", a2.HungaryForint = "HUF", a2.IndonesiaRupiah = "IDR", a2.IsleOfManPound = "IMP", a2.IsraelNewShekel = "ILS", a2.IndiaRupee = "INR", a2.IraqDinar = "IQD", a2.IranRial = "IRR", a2.IcelandKrona = "ISK", a2.JamaicaDollar = "JMD", a2.JapanYen = "JPY", a2.JerseyPound = "JEP", a2.JordanDinar = "JOD", a2.KazakhstanTenge = "KZT", a2.KenyaShilling = "KES", a2.KyrgyzstanSom = "KGS", a2.NorthKoreaWon = "KPW", a2.SouthKoreaWon = "KRW", a2.KuwaitDinar = "KWD", a2.LaosKip = "LAK", a2.LebanonPound = "LBP", a2.LiberiaDollar = "LRD", a2.LesothoLoti = "LSL", a2.LibyanDinar = "LYD", a2.LithuaniaLitas = "LTL", a2.LatviaLats = "LVL", a2.LibyaDinar = "LYD", a2.MacauPataca = "MOP", a2.MaldivesRufiyaa = "MVR", a2.MalawiKwacha = "MWK", a2.MaltaLira = "MTL", a2.MauritiusRupee = "MUR", a2.MongoliaTughrik = "MNT", a2.MoroccoDirham = "MAD", a2.MoldovaLeu = "MDL", a2.MozambiqueMetical = "MZN", a2.MadagascarAriary = "MGA", a2.MacedoniaDenar = "MKD", a2.MexicoPeso = "MXN", a2.MalaysiaRinggit = "MYR", a2.MyanmarKyat = "MMK", a2.MicronesiaFederatedStatesDollar = "USD", a2.NicaraguaCordoba = "NIO", a2.NamibiaDollar = "NAD", a2.NetherlandsAntillesGuilder = "ANG", a2.NewCaledoniaFranc = "XPF", a2.NigeriaNaira = "NGN", a2.NicaraguaCordobaOro = "NIO", a2.NigerCFAFranc = "XOF", a2.NorwayKrone = "NOK", a2.NepalRupee = "NPR", a2.NewZealandDollar = "NZD", a2.OmanRial = "OMR", a2.PanamaBalboa = "PAB", a2.PeruNuevoSol = "PEN", a2.PapuaNewGuineaKina = "PGK", a2.PhilippinesPeso = "PHP", a2.PakistanRupee = "PKR", a2.PeruNuevo = "PEN", a2.PolandZloty = "PLN", a2.ParaguayGuarani = "PYG", a2.QatarRial = "QAR", a2.RomaniaNewLeu = "RON", a2.SerbiaDinar = "RSD", a2.SriLankaRupee = "LKR", a2.RussiaRuble = "RUB", a2.RwandaFranc = "RWF", a2.SaudiArabiaRiyal = "SAR", a2.SlovakiaKoruna = "SKK", a2.SloveniaTolar = "SIT", a2.SolomonIslandsDollar = "SBD", a2.SeychellesRupee = "SCR", a2.SudanPound = "SDG", a2.SwedenKrona = "SEK", a2.SingaporeDollar = "SGD", a2.SaintHelenaPound = "SHP", a2.SierraLeoneLeone = "SLL", a2.SomaliaShilling = "SOS", a2.SurinameDollar = "SRD", a2.SintMaartenPound = "SXD", a2.SyriaPound = "SYP", a2.SwazilandLilangeni = "SZL", a2.SwitzerlandFranc = "CHF", a2.ThailandBaht = "THB", a2.TajikistanSomoni = "TJS", a2.TurkmenistanManat = "TMT", a2.TunisiaDinar = "TND", a2.TongaPaanga = "TOP", a2.TurkeyLira = "TRY", a2.TrinidadAndTobagoDollar = "TTD", a2.TaiwanNewDollar = "TWD", a2.TanzaniaShilling = "TZS", a2.UnitedArabEmiratesDirham = "AED", a2.UkraineHryvnia = "UAH", a2.UgandaShilling = "UGX", a2.UnitedKingdomPound = "GBP", a2.UnitedStatesDollar = "USD", a2.UruguayPeso = "UYU", a2.UzbekistanSom = "UZS", a2.VenezuelaBolivar = "VEF", a2.VietnamDong = "VND", a2.VanuatuVatu = "VUV", a2.SamoaTala = "WST", a2.YemenRial = "YER", a2.SouthAfricaRand = "ZAR", a2.ZambiaKwacha = "ZMW", a2.ZimbabweDollar = "ZWL";
})(l$1 || (l$1 = {}));
({ AfghanistanAfghani: { code: l$1.AfghanistanAfghani, countries: [r$2.Afghanistan], decimal_digits: 2, decimal_separator: ".", name: "Afghan Afghani", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u060B", symbol_native: "\u060B", symbol_placement: "before", thousands_separator: "," }, AlbaniaLek: { code: l$1.AlbaniaLek, countries: [r$2.Albania], decimal_digits: 2, decimal_separator: ",", name: "Albanian Lek", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Lek", symbol_native: "Lek", symbol_placement: "before", thousands_separator: "." }, AlgeriaDinar: { code: l$1.AlgeriaDinar, countries: [r$2.Algeria], decimal_digits: 2, decimal_separator: ".", name: "Algerian Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u062F.\u062C", symbol_native: "\u062F.\u062C", symbol_placement: "before", thousands_separator: "," }, ArgentinaPeso: { code: l$1.ArgentinaPeso, countries: [r$2.Argentina], decimal_digits: 2, decimal_separator: ".", name: "Argentine Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, ArmeniaDram: { code: l$1.ArmeniaDram, countries: [r$2.Armenia], decimal_digits: 2, decimal_separator: ",", name: "Armenian Dram", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0564\u0580.", symbol_native: "\u0564\u0580.", symbol_placement: "before", thousands_separator: "." }, ArubaFlorin: { code: l$1.ArubaFlorin, countries: [r$2.Aruba], decimal_digits: 2, decimal_separator: ".", name: "Aruban Florin", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0192", symbol_native: "\u0192", symbol_placement: "before", thousands_separator: "," }, AustraliaDollar: { code: l$1.AustraliaDollar, countries: [r$2.Australia], decimal_digits: 2, decimal_separator: ".", name: "Australian Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, AzerbaijanManat: { code: l$1.AzerbaijanNewManat, countries: [r$2.Azerbaijan], decimal_digits: 2, decimal_separator: ".", name: "Azerbaijani Manat", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u043C\u0430\u043D", symbol_native: "\u043C\u0430\u043D", symbol_placement: "before", thousands_separator: "," }, BahrainDinar: { code: l$1.BahrainDinar, countries: [r$2.Bahrain], decimal_digits: 3, decimal_separator: ".", name: "Bahraini Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: ".\u062F.\u0628", symbol_native: ".\u062F.\u0628", symbol_placement: "before", thousands_separator: "," }, BangladeshTaka: { code: l$1.BangladeshTaka, countries: [r$2.Bangladesh], decimal_digits: 2, decimal_separator: ".", name: "Bangladeshi Taka", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u09F3", symbol_native: "\u09F3", symbol_placement: "before", thousands_separator: "," }, BarbadosDollar: { code: l$1.BarbadosDollar, countries: [r$2.Barbados], decimal_digits: 2, decimal_separator: ".", name: "Barbadian Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, BelarusRuble: { code: l$1.BelarusRuble, countries: [r$2.Belarus], decimal_digits: 2, decimal_separator: ".", name: "Belarusian Ruble", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Br", symbol_native: "Br", symbol_placement: "before", thousands_separator: "." }, BelizeDollar: { code: l$1.BelizeDollar, countries: [r$2.Belize], decimal_digits: 2, decimal_separator: ".", name: "Belize Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "BZ$", symbol_native: "BZ$", symbol_placement: "before", thousands_separator: "," }, BermudaDollar: { code: l$1.BermudaDollar, countries: [r$2.Bermuda], decimal_digits: 2, decimal_separator: ".", name: "Bermudian Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, BoliviaBoliviano: { code: l$1.BoliviaBoliviano, countries: [r$2.Bolivia], decimal_digits: 2, decimal_separator: ".", name: "Bolivian Boliviano", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$b", symbol_native: "$b", symbol_placement: "before", thousands_separator: "," }, BosniaAndHerzegovinaConvertibleMarka: { code: l$1.BosniaAndHerzegovinaConvertibleMark, countries: [r$2.BosniaAndHerzegovina], decimal_digits: 2, decimal_separator: ",", name: "Bosnia and Herzegovina Convertible Marka", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "KM", symbol_native: "KM", symbol_placement: "before", thousands_separator: "." }, BotswanaPula: { code: l$1.BotswanaPula, countries: [r$2.Botswana], decimal_digits: 2, decimal_separator: ".", name: "Botswana Pula", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "P", symbol_native: "P", symbol_placement: "before", thousands_separator: "," }, BrazilReal: { code: l$1.BrazilReal, countries: [r$2.Brazil], decimal_digits: 2, decimal_separator: ",", name: "Brazilian Real", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "R$", symbol_native: "R$", symbol_placement: "before", thousands_separator: "." }, BruneiDollar: { code: l$1.BruneiDollar, countries: [r$2.Brunei], decimal_digits: 2, decimal_separator: ".", name: "Brunei Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, BulgariaLev: { code: l$1.BulgariaLev, countries: [r$2.Bulgaria], decimal_digits: 2, decimal_separator: ".", name: "Bulgarian Lev", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u043B\u0432", symbol_native: "\u043B\u0432", symbol_placement: "before", thousands_separator: "." }, BurundiFranc: { code: l$1.BurundiFranc, countries: [r$2.Burundi], decimal_digits: 0, decimal_separator: ".", name: "Burundian Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "FBu", symbol_native: "FBu", symbol_placement: "before", thousands_separator: "," }, CambodiaRiel: { code: l$1.CambodiaRiel, countries: [r$2.Cambodia], decimal_digits: 2, decimal_separator: ",", name: "Cambodian Riel", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u17DB", symbol_native: "\u17DB", symbol_placement: "before", thousands_separator: "." }, CanadaDollar: { code: l$1.CanadaDollar, countries: [r$2.Canada], decimal_digits: 2, decimal_separator: ".", name: "Canadian Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, CapeVerdeEscudo: { code: l$1.CapeVerdeEscudo, countries: [r$2.CapeVerde], decimal_digits: 2, decimal_separator: ".", name: "Cape Verde Escudo", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Esc", symbol_native: "Esc", symbol_placement: "before", thousands_separator: "," }, CaymanIslandsDollar: { code: l$1.CaymanIslandsDollar, countries: [r$2.CaymanIslands], decimal_digits: 2, decimal_separator: ".", name: "Cayman Islands Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, ChilePeso: { code: l$1.ChilePeso, countries: [r$2.Chile], decimal_digits: 0, decimal_separator: ".", name: "Chilean Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, ChinaYuanRenminbi: { code: l$1.ChinaYuan, countries: [r$2.China], decimal_digits: 2, decimal_separator: ".", name: "Chinese Yuan", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA5", symbol_native: "\xA5", symbol_placement: "before", thousands_separator: "," }, ColombiaPeso: { code: l$1.ColombiaPeso, countries: [r$2.Colombia], decimal_digits: 2, decimal_separator: ".", name: "Colombian Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, ComorosFranc: { code: l$1.ComorosFranc, countries: [r$2.Comoros], decimal_digits: 0, decimal_separator: ".", name: "Comoros Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "CF", symbol_native: "CF", symbol_placement: "before", thousands_separator: "," }, CostaRicaColon: { code: l$1.CostaRicaColon, countries: [r$2.CostaRica], decimal_digits: 2, decimal_separator: ".", name: "Costa Rican Colon", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A1", symbol_native: "\u20A1", symbol_placement: "before", thousands_separator: "," }, CroatiaKuna: { code: l$1.CroatiaKuna, countries: [r$2.Croatia], decimal_digits: 2, decimal_separator: ",", name: "Croatian Kuna", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kn", symbol_native: "kn", symbol_placement: "before", thousands_separator: "." }, CubaConvertiblePeso: { code: l$1.CubaConvertiblePeso, countries: [r$2.Cuba], decimal_digits: 2, decimal_separator: ",", name: "Cuba Convertible Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, CubaPeso: { code: l$1.CubaPeso, countries: [r$2.Cuba], decimal_digits: 2, decimal_separator: ",", name: "Cuba Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, CyprusPound: { code: l$1.CyprusPound, countries: [r$2.Cyprus], decimal_digits: 2, decimal_separator: ",", name: "Cyprus Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, CzechRepublicKoruna: { code: l$1.CzechRepublicKoruna, countries: [r$2.CzechRepublic], decimal_digits: 2, decimal_separator: ",", name: "Czech Republic Koruna", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "K\u010D", symbol_native: "K\u010D", symbol_placement: "before", thousands_separator: "." }, DenmarkKrone: { code: l$1.DenmarkKrone, countries: [r$2.Denmark], decimal_digits: 2, decimal_separator: ",", name: "Denmark Krone", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kr", symbol_native: "kr", symbol_placement: "before", thousands_separator: "." }, DjiboutiFranc: { code: l$1.DjiboutiFranc, countries: [r$2.Djibouti], decimal_digits: 0, decimal_separator: ".", name: "Djibouti Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Fdj", symbol_native: "Fdj", symbol_placement: "before", thousands_separator: "," }, DominicanRepublicPeso: { code: l$1.DominicanRepublicPeso, countries: [r$2.DominicanRepublic], decimal_digits: 2, decimal_separator: ",", name: "Dominican Republic Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "RD$", symbol_native: "RD$", symbol_placement: "before", thousands_separator: "." }, EastCaribbeanDollar: { code: l$1.EastCaribbeanDollar, countries: [r$2.AntiguaAndBarbuda, r$2.Dominica, r$2.Grenada, r$2.SaintKittsAndNevis, r$2.SaintLucia, r$2.SaintVincentAndTheGrenadines], decimal_digits: 2, decimal_separator: ".", name: "East Caribbean Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, EgyptPound: { code: l$1.EgyptPound, countries: [r$2.Egypt], decimal_digits: 2, decimal_separator: ".", name: "Egypt Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "," }, ElSalvadorColon: { code: l$1.ElSalvadorColon, countries: [r$2.ElSalvador], decimal_digits: 2, decimal_separator: ",", name: "El Salvador Colon", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A1", symbol_native: "\u20A1", symbol_placement: "before", thousands_separator: "." }, EquatorialGuineaEkwele: { code: l$1.EquatorialGuineaEkwele, countries: [r$2.EquatorialGuinea], decimal_digits: 0, decimal_separator: ".", name: "Equatorial Guinea Ekwele", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "GQE", symbol_native: "GQE", symbol_placement: "before", thousands_separator: "," }, EritreaNakfa: { code: l$1.EritreaNakfa, countries: [r$2.Eritrea], decimal_digits: 2, decimal_separator: ",", name: "Eritrea Nakfa", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Nfk", symbol_native: "Nfk", symbol_placement: "before", thousands_separator: "." }, EstoniaKroon: { code: l$1.EstoniaKroon, countries: [r$2.Estonia], decimal_digits: 2, decimal_separator: ",", name: "Estonia Kroon", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kr", symbol_native: "kr", symbol_placement: "before", thousands_separator: "." }, EthiopiaBirr: { code: l$1.EthiopiaBirr, countries: [r$2.Ethiopia], decimal_digits: 2, decimal_separator: ",", name: "Ethiopia Birr", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Br", symbol_native: "Br", symbol_placement: "before", thousands_separator: "." }, Euro: { code: l$1.Euro, countries: [r$2.Andorra, r$2.Austria, r$2.Belgium, r$2.Cyprus, r$2.Estonia, r$2.Finland, r$2.France, r$2.Germany, r$2.Greece, r$2.Ireland, r$2.Italy, r$2.Latvia, r$2.Lithuania, r$2.Luxembourg, r$2.Malta, r$2.Monaco, r$2.Netherlands, r$2.Portugal, r$2.Spain, r$2.Sweden, r$2.UnitedKingdom], decimal_digits: 2, decimal_separator: ",", name: "Euro", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AC", symbol_native: "\u20AC", symbol_placement: "before", thousands_separator: "." }, FalklandIslandsPound: { code: l$1.FalklandIslandsPound, countries: [r$2.FalklandIslands], decimal_digits: 2, decimal_separator: ",", name: "Equatorial Guinea Ekwele", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, FijiDollar: { code: l$1.FijiDollar, countries: [r$2.Fiji], decimal_digits: 2, decimal_separator: ",", name: "Fiji Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, GambiaDalasi: { code: l$1.GambiaDalasi, countries: [r$2.Gambia], decimal_digits: 2, decimal_separator: ",", name: "Gambia Dalasi", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "D", symbol_native: "D", symbol_placement: "before", thousands_separator: "." }, GeorgiaLari: { code: l$1.GeorgiaLari, countries: [r$2.Georgia], decimal_digits: 2, decimal_separator: ",", name: "Georgia Lari", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20BE", symbol_native: "\u20BE", symbol_placement: "before", thousands_separator: "." }, GhanaCedi: { code: l$1.GhanaCedi, countries: [r$2.Ghana], decimal_digits: 2, decimal_separator: ",", name: "Ghana Cedi", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B5", symbol_native: "\u20B5", symbol_placement: "before", thousands_separator: "." }, GibraltarPound: { code: l$1.GibraltarPound, countries: [r$2.Gibraltar], decimal_digits: 2, decimal_separator: ",", name: "Gibraltar Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, GuatemalaQuetzal: { code: l$1.GuatemalaQuetzal, countries: [r$2.Guatemala], decimal_digits: 2, decimal_separator: ",", name: "Guatemala Quetzal", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Q", symbol_native: "Q", symbol_placement: "before", thousands_separator: "." }, GuernseyPound: { code: l$1.GuernseyPound, countries: [r$2.Guernsey], decimal_digits: 2, decimal_separator: ",", name: "Guernsey Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, GuineaBissauPeso: { code: l$1.GuineaBissauPeso, countries: [r$2.GuineaBissau], decimal_digits: 2, decimal_separator: ",", name: "Guinea-Bissau Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B5", symbol_native: "\u20B5", symbol_placement: "before", thousands_separator: "." }, GuyanaDollar: { code: l$1.GuyanaDollar, countries: [r$2.Guyana], decimal_digits: 2, decimal_separator: ",", name: "Guyana Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, HaitiGourde: { code: l$1.HaitiGourde, countries: [r$2.Haiti], decimal_digits: 2, decimal_separator: ",", name: "Haiti Gourde", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "G", symbol_native: "G", symbol_placement: "before", thousands_separator: "." }, HondurasLempira: { code: l$1.HondurasLempira, countries: [r$2.Honduras], decimal_digits: 2, decimal_separator: ",", name: "Honduras Lempira", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "L", symbol_native: "L", symbol_placement: "before", thousands_separator: "." }, HongKongDollar: { code: l$1.HongKongDollar, countries: [r$2.HongKong], decimal_digits: 2, decimal_separator: ",", name: "Hong Kong Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, HungaryForint: { code: l$1.HungaryForint, countries: [r$2.Hungary], decimal_digits: 2, decimal_separator: ",", name: "Hungary Forint", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Ft", symbol_native: "Ft", symbol_placement: "before", thousands_separator: "." }, IcelandKrona: { code: l$1.IcelandKrona, countries: [r$2.Iceland], decimal_digits: 0, decimal_separator: ",", name: "Iceland Krona", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kr", symbol_native: "kr", symbol_placement: "before", thousands_separator: "." }, IndianRupee: { code: l$1.IndiaRupee, countries: [r$2.India, r$2.Bhutan], decimal_digits: 2, decimal_separator: ",", name: "Indian Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B9", symbol_native: "\u20B9", symbol_placement: "before", thousands_separator: "." }, IndonesiaRupiah: { code: l$1.IndonesiaRupiah, countries: [r$2.Indonesia], decimal_digits: 0, decimal_separator: ",", name: "Indonesia Rupiah", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Rp", symbol_native: "Rp", symbol_placement: "before", thousands_separator: "." }, IranRial: { code: l$1.IranRial, countries: [r$2.Iran], decimal_digits: 0, decimal_separator: ",", name: "Iran Rial", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, IsleOfManPound: { code: l$1.IsleOfManPound, countries: [r$2.IsleOfMan], decimal_digits: 2, decimal_separator: ",", name: "Isle of Man Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, IsraeliShekel: { code: l$1.IsraelNewShekel, countries: [r$2.Israel], decimal_digits: 2, decimal_separator: ",", name: "Israeli Shekel", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AA", symbol_native: "\u20AA", symbol_placement: "before", thousands_separator: "." }, JamaicaDollar: { code: l$1.JamaicaDollar, countries: [r$2.Jamaica], decimal_digits: 2, decimal_separator: ",", name: "Jamaica Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "J$", symbol_native: "J$", symbol_placement: "before", thousands_separator: "." }, JapanYen: { code: l$1.JapanYen, countries: [r$2.Japan], decimal_digits: 0, decimal_separator: ",", name: "Japan Yen", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA5", symbol_native: "\uFFE5", symbol_placement: "before", thousands_separator: "." }, JerseyPound: { code: l$1.JerseyPound, countries: [r$2.Jersey], decimal_digits: 2, decimal_separator: ",", name: "Jersey Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, JordanDinar: { code: l$1.JordanDinar, countries: [r$2.Jordan], decimal_digits: 3, decimal_separator: ",", name: "Jordan Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "JD", symbol_native: "JD", symbol_placement: "before", thousands_separator: "." }, KazakhstanTenge: { code: l$1.KazakhstanTenge, countries: [r$2.Kazakhstan], decimal_digits: 2, decimal_separator: ",", name: "Kazakhstan Tenge", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B8", symbol_native: "\u20B8", symbol_placement: "before", thousands_separator: "." }, KenyaShilling: { code: l$1.KenyaShilling, countries: [r$2.Kenya], decimal_digits: 2, decimal_separator: ",", name: "Kenya Shilling", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "KSh", symbol_native: "KSh", symbol_placement: "before", thousands_separator: "." }, KuwaitDinar: { code: l$1.KuwaitDinar, countries: [r$2.Kuwait], decimal_digits: 3, decimal_separator: ",", name: "Kuwait Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "KD", symbol_native: "KD", symbol_placement: "before", thousands_separator: "." }, KyrgyzstanSom: { code: l$1.KyrgyzstanSom, countries: [r$2.Kyrgyzstan], decimal_digits: 2, decimal_separator: ",", name: "Kyrgyzstan Som", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "KGS", symbol_native: "KGS", symbol_placement: "before", thousands_separator: "." }, LaosKip: { code: l$1.LaosKip, countries: [r$2.Laos], decimal_digits: 0, decimal_separator: ",", name: "Laos Kip", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AD", symbol_native: "\u20AD", symbol_placement: "before", thousands_separator: "." }, LatviaLats: { code: l$1.LatviaLats, countries: [r$2.Latvia], decimal_digits: 2, decimal_separator: ",", name: "Latvia Lat", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Ls", symbol_native: "Ls", symbol_placement: "before", thousands_separator: "." }, LebanonPound: { code: l$1.LebanonPound, countries: [r$2.Lebanon], decimal_digits: 0, decimal_separator: ",", name: "Lebanon Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, LesothoLoti: { code: l$1.LesothoLoti, countries: [r$2.Lesotho], decimal_digits: 2, decimal_separator: ",", name: "Lesotho Loti", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "M", symbol_native: "M", symbol_placement: "before", thousands_separator: "." }, LiberiaDollar: { code: l$1.LiberiaDollar, countries: [r$2.Liberia], decimal_digits: 2, decimal_separator: ",", name: "Liberia Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, LibyanDinar: { code: l$1.LibyanDinar, countries: [r$2.Libya], decimal_digits: 3, decimal_separator: ",", name: "Libyan Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "LD", symbol_native: "LD", symbol_placement: "before", thousands_separator: "." }, LithuaniaLitas: { code: l$1.LithuaniaLitas, countries: [r$2.Lithuania], decimal_digits: 2, decimal_separator: ",", name: "Lithuania Litas", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Lt", symbol_native: "Lt", symbol_placement: "before", thousands_separator: "." }, MacauPataca: { code: l$1.MacauPataca, countries: [r$2.Macau], decimal_digits: 2, decimal_separator: ",", name: "Macau Pataca", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "MOP$", symbol_native: "MOP$", symbol_placement: "before", thousands_separator: "." }, MacedoniaDenar: { code: l$1.MacedoniaDenar, countries: [r$2.NorthMacedonia], decimal_digits: 2, decimal_separator: ",", name: "Macedonia Denar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0434\u0435\u043D", symbol_native: "\u0434\u0435\u043D", symbol_placement: "before", thousands_separator: "." }, MadagascarAriary: { code: l$1.MadagascarAriary, countries: [r$2.Madagascar], decimal_digits: 0, decimal_separator: ",", name: "Madagascar Ariary", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Ar", symbol_native: "Ar", symbol_placement: "before", thousands_separator: "." }, MalawiKwacha: { code: l$1.MalawiKwacha, countries: [r$2.Malawi], decimal_digits: 2, decimal_separator: ",", name: "Malawi Kwacha", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "MK", symbol_native: "MK", symbol_placement: "before", thousands_separator: "." }, MalaysiaRinggit: { code: l$1.MalaysiaRinggit, countries: [r$2.Malaysia], decimal_digits: 2, decimal_separator: ",", name: "Malaysia Ringgit", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "RM", symbol_native: "RM", symbol_placement: "before", thousands_separator: "." }, MaldivesRufiyaa: { code: l$1.MaldivesRufiyaa, countries: [r$2.Maldives], decimal_digits: 2, decimal_separator: ",", name: "Maldives Rufiyaa", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Rf", symbol_native: "Rf", symbol_placement: "before", thousands_separator: "." }, MaltaLira: { code: l$1.MaltaLira, countries: [r$2.Malta], decimal_digits: 2, decimal_separator: ",", name: "Malta Lira", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Lm", symbol_native: "Lm", symbol_placement: "before", thousands_separator: "." }, MauritiusRupee: { code: l$1.MauritiusRupee, countries: [r$2.Mauritius], decimal_digits: 2, decimal_separator: ",", name: "Mauritius Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A8", symbol_native: "\u20A8", symbol_placement: "before", thousands_separator: "." }, MexicoPeso: { code: l$1.MexicoPeso, countries: [r$2.Mexico], decimal_digits: 2, decimal_separator: ",", name: "Mexico Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, MoldovaLeu: { code: l$1.MoldovaLeu, countries: [r$2.Moldova], decimal_digits: 2, decimal_separator: ",", name: "Moldova Leu", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "L", symbol_native: "L", symbol_placement: "before", thousands_separator: "." }, MongoliaTughrik: { code: l$1.MongoliaTughrik, countries: [r$2.Mongolia], decimal_digits: 2, decimal_separator: ",", name: "Mongolia Tughrik", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AE", symbol_native: "\u20AE", symbol_placement: "before", thousands_separator: "." }, MoroccoDirham: { code: l$1.MoroccoDirham, countries: [r$2.Morocco], decimal_digits: 2, decimal_separator: ",", name: "Morocco Dirham", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "DH", symbol_native: "DH", symbol_placement: "before", thousands_separator: "." }, MozambiqueMetical: { code: l$1.MozambiqueMetical, countries: [r$2.Mozambique], decimal_digits: 2, decimal_separator: ",", name: "Mozambique Metical", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "MT", symbol_native: "MT", symbol_placement: "before", thousands_separator: "." }, MyanmarKyat: { code: l$1.MyanmarKyat, countries: [r$2.Myanmar], decimal_digits: 0, decimal_separator: ",", name: "Myanmar Kyat", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "K", symbol_native: "K", symbol_placement: "before", thousands_separator: "." }, NamibiaDollar: { code: l$1.NamibiaDollar, countries: [r$2.Namibia], decimal_digits: 2, decimal_separator: ",", name: "Namibia Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, NepalRupee: { code: l$1.NepalRupee, countries: [r$2.Nepal], decimal_digits: 2, decimal_separator: ",", name: "Nepal Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A8", symbol_native: "\u20A8", symbol_placement: "before", thousands_separator: "." }, NetherlandsAntillesGuilder: { code: l$1.NetherlandsAntillesGuilder, countries: [r$2.NetherlandsAntilles], decimal_digits: 2, decimal_separator: ",", name: "Netherlands Antilles Guilder", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0192", symbol_native: "\u0192", symbol_placement: "before", thousands_separator: "." }, NewCaledoniaFranc: { code: l$1.NewCaledoniaFranc, countries: [r$2.NewCaledonia], decimal_digits: 0, decimal_separator: ",", name: "New Caledonia Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A3", symbol_native: "\u20A3", symbol_placement: "before", thousands_separator: "." }, NewZealandDollar: { code: l$1.NewZealandDollar, countries: [r$2.NewZealand], decimal_digits: 2, decimal_separator: ",", name: "New Zealand Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, NicaraguaCordoba: { code: l$1.NicaraguaCordoba, countries: [r$2.Nicaragua], decimal_digits: 2, decimal_separator: ",", name: "Nicaragua Cordoba", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "C$", symbol_native: "C$", symbol_placement: "before", thousands_separator: "." }, NigerCFAFranc: { code: l$1.NigerCFAFranc, countries: [r$2.Niger], decimal_digits: 0, decimal_separator: ",", name: "Niger CFA Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "CFA", symbol_native: "CFA", symbol_placement: "before", thousands_separator: "." }, NigeriaNaira: { code: l$1.NigeriaNaira, countries: [r$2.Nigeria], decimal_digits: 2, decimal_separator: ",", name: "Nigeria Naira", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A6", symbol_native: "\u20A6", symbol_placement: "before", thousands_separator: "." }, NorthKoreaWon: { code: l$1.NorthKoreaWon, countries: [r$2.NorthKorea], decimal_digits: 0, decimal_separator: ",", name: "North Korea Won", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A9", symbol_native: "\u20A9", symbol_placement: "before", thousands_separator: "." }, NorwayKrone: { code: l$1.NorwayKrone, countries: [r$2.Norway], decimal_digits: 2, decimal_separator: ",", name: "Norway Krone", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kr", symbol_native: "kr", symbol_placement: "before", thousands_separator: "." }, OmanRial: { code: l$1.OmanRial, countries: [r$2.Oman], decimal_digits: 3, decimal_separator: ",", name: "Oman Rial", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, PakistanRupee: { code: l$1.PakistanRupee, countries: [r$2.Pakistan], decimal_digits: 2, decimal_separator: ",", name: "Pakistan Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A8", symbol_native: "\u20A8", symbol_placement: "before", thousands_separator: "." }, PanamaBalboa: { code: l$1.PanamaBalboa, countries: [r$2.Panama], decimal_digits: 2, decimal_separator: ",", name: "Panama Balboa", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "B/.", symbol_native: "B/.", symbol_placement: "before", thousands_separator: "." }, ParaguayGuarani: { code: l$1.ParaguayGuarani, countries: [r$2.Paraguay], decimal_digits: 0, decimal_separator: ",", name: "Paraguay Guarani", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Gs", symbol_native: "Gs", symbol_placement: "before", thousands_separator: "." }, PeruvianNuevo: { code: l$1.PeruNuevo, countries: [r$2.Peru], decimal_digits: 2, decimal_separator: ",", name: "Peruvian Nuevo", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "S/.", symbol_native: "S/.", symbol_placement: "before", thousands_separator: "." }, PhilippinesPeso: { code: l$1.PhilippinesPeso, countries: [r$2.Philippines], decimal_digits: 2, decimal_separator: ",", name: "Philippines Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B1", symbol_native: "\u20B1", symbol_placement: "before", thousands_separator: "." }, PolandZloty: { code: l$1.PolandZloty, countries: [r$2.Poland], decimal_digits: 2, decimal_separator: ",", name: "Poland Zloty", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "z\u0142", symbol_native: "z\u0142", symbol_placement: "before", thousands_separator: "." }, QatarRial: { code: l$1.QatarRial, countries: [r$2.Qatar], decimal_digits: 2, decimal_separator: ",", name: "Qatar Rial", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, RomaniaNewLeu: { code: l$1.RomaniaNewLeu, countries: [r$2.Romania], decimal_digits: 2, decimal_separator: ",", name: "Romania New Leu", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "lei", symbol_native: "lei", symbol_placement: "before", thousands_separator: "." }, RussiaRuble: { code: l$1.RussiaRuble, countries: [r$2.RussianFederation], decimal_digits: 2, decimal_separator: ",", name: "Russia Ruble", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20BD", symbol_native: "\u20BD", symbol_placement: "before", thousands_separator: "." }, RwandaFranc: { code: l$1.RwandaFranc, countries: [r$2.Rwanda], decimal_digits: 0, decimal_separator: ",", name: "Rwanda Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "RF", symbol_native: "RF", symbol_placement: "before", thousands_separator: "." }, SaudiArabiaRiyal: { code: l$1.SaudiArabiaRiyal, countries: [r$2.SaudiArabia], decimal_digits: 2, decimal_separator: ",", name: "Saudi Arabia Riyal", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, SerbiaDinar: { code: l$1.SerbiaDinar, countries: [r$2.Serbia], decimal_digits: 0, decimal_separator: ",", name: "Serbia Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0414\u0438\u043D.", symbol_native: "\u0414\u0438\u043D.", symbol_placement: "before", thousands_separator: "." }, SeychellesRupee: { code: l$1.SeychellesRupee, countries: [r$2.Seychelles], decimal_digits: 2, decimal_separator: ",", name: "Seychelles Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A8", symbol_native: "\u20A8", symbol_placement: "before", thousands_separator: "." }, SingaporeDollar: { code: l$1.SingaporeDollar, countries: [r$2.Singapore], decimal_digits: 2, decimal_separator: ",", name: "Singapore Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, SlovakiaKoruna: { code: l$1.SlovakiaKoruna, countries: [r$2.Slovakia], decimal_digits: 2, decimal_separator: ",", name: "Slovakia Koruna", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Sk", symbol_native: "Sk", symbol_placement: "before", thousands_separator: "." }, SloveniaTolar: { code: l$1.SloveniaTolar, countries: [r$2.Slovenia], decimal_digits: 2, decimal_separator: ",", name: "Slovenia Tolar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "SIT", symbol_native: "SIT", symbol_placement: "before", thousands_separator: "." }, SolomonIslandsDollar: { code: l$1.SolomonIslandsDollar, countries: [r$2.SolomonIslands], decimal_digits: 2, decimal_separator: ",", name: "Solomon Islands Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, SomaliaShilling: { code: l$1.SomaliaShilling, countries: [r$2.Somalia], decimal_digits: 0, decimal_separator: ",", name: "Somalia Shilling", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "S", symbol_native: "S", symbol_placement: "before", thousands_separator: "." }, SouthAfricaRand: { code: l$1.SouthAfricaRand, countries: [r$2.SouthAfrica], decimal_digits: 2, decimal_separator: ",", name: "South Africa Rand", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "R", symbol_native: "R", symbol_placement: "before", thousands_separator: "." }, SouthKoreaWon: { code: l$1.SouthKoreaWon, countries: [r$2.SouthKorea], decimal_digits: 0, decimal_separator: ",", name: "South Korea Won", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A9", symbol_native: "\u20A9", symbol_placement: "before", thousands_separator: "." }, SriLankaRupee: { code: l$1.SriLankaRupee, countries: [r$2.SriLanka], decimal_digits: 2, decimal_separator: ",", name: "Sri Lanka Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A8", symbol_native: "\u20A8", symbol_placement: "before", thousands_separator: "." }, SudanPound: { code: l$1.SudanPound, countries: [r$2.Sudan], decimal_digits: 2, decimal_separator: ",", name: "Sudan Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, SurinameDollar: { code: l$1.SurinameDollar, countries: [r$2.Suriname], decimal_digits: 2, decimal_separator: ",", name: "Suriname Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, SwazilandLilangeni: { code: l$1.SwazilandLilangeni, countries: [r$2.Swaziland], decimal_digits: 2, decimal_separator: ",", name: "Swaziland Lilangeni", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "E", symbol_native: "E", symbol_placement: "before", thousands_separator: "." }, SwedenKrona: { code: l$1.SwedenKrona, countries: [r$2.Sweden], decimal_digits: 2, decimal_separator: ",", name: "Sweden Krona", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kr", symbol_native: "kr", symbol_placement: "before", thousands_separator: "." }, SwitzerlandFranc: { code: l$1.SwitzerlandFranc, countries: [r$2.Switzerland], decimal_digits: 2, decimal_separator: ",", name: "Switzerland Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "CHF", symbol_native: "CHF", symbol_placement: "before", thousands_separator: "." }, SyriaPound: { code: l$1.SyriaPound, countries: [r$2.Syria], decimal_digits: 2, decimal_separator: ",", name: "Syria Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, TaiwanNewDollar: { code: l$1.TaiwanNewDollar, countries: [r$2.Taiwan], decimal_digits: 2, decimal_separator: ",", name: "Taiwan New Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "NT$", symbol_native: "NT$", symbol_placement: "before", thousands_separator: "." }, TajikistanSomoni: { code: l$1.TajikistanSomoni, countries: [r$2.Tajikistan], decimal_digits: 2, decimal_separator: ",", name: "Tajikistan Somoni", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "TJS", symbol_native: "TJS", symbol_placement: "before", thousands_separator: "." }, TanzaniaShilling: { code: l$1.TanzaniaShilling, countries: [r$2.Tanzania], decimal_digits: 2, decimal_separator: ",", name: "Tanzania Shilling", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "TSh", symbol_native: "TSh", symbol_placement: "before", thousands_separator: "." }, ThailandBaht: { code: l$1.ThailandBaht, countries: [r$2.Thailand], decimal_digits: 2, decimal_separator: ",", name: "Thailand Baht", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0E3F", symbol_native: "\u0E3F", symbol_placement: "before", thousands_separator: "." }, TunisiaDinar: { code: l$1.TunisiaDinar, countries: [r$2.Tunisia], decimal_digits: 3, decimal_separator: ",", name: "Tunisia Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u062F.\u062A", symbol_native: "\u062F.\u062A", symbol_placement: "before", thousands_separator: "." }, TurkeyLira: { code: l$1.TurkeyLira, countries: [r$2.Turkey], decimal_digits: 2, decimal_separator: ",", name: "Turkey Lira", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20BA", symbol_native: "\u20BA", symbol_placement: "before", thousands_separator: "." }, TurkmenistanManat: { code: l$1.TurkmenistanManat, countries: [r$2.Turkmenistan], decimal_digits: 2, decimal_separator: ",", name: "Turkmenistan Manat", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "m", symbol_native: "m", symbol_placement: "before", thousands_separator: "." }, UgandaShilling: { code: l$1.UgandaShilling, countries: [r$2.Uganda], decimal_digits: 0, decimal_separator: ",", name: "Uganda Shilling", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "USh", symbol_native: "USh", symbol_placement: "before", thousands_separator: "." }, UkraineHryvnia: { code: l$1.UkraineHryvnia, countries: [r$2.Ukraine], decimal_digits: 2, decimal_separator: ",", name: "Ukraine Hryvnia", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B4", symbol_native: "\u20B4", symbol_placement: "before", thousands_separator: "." }, UnitedArabEmiratesDirham: { code: l$1.UnitedArabEmiratesDirham, countries: [r$2.UnitedArabEmirates], decimal_digits: 2, decimal_separator: ",", name: "United Arab Emirates Dirham", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u062F.\u0625", symbol_native: "\u062F.\u0625", symbol_placement: "before", thousands_separator: "." }, UnitedKingdomPound: { code: l$1.UnitedKingdomPound, countries: [r$2.UnitedKingdom], decimal_digits: 2, decimal_separator: ",", name: "United Kingdom Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, UnitedStatesDollar: { code: l$1.UnitedStatesDollar, countries: [r$2.UnitedStates], decimal_digits: 2, decimal_separator: ",", name: "United States Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, UruguayPeso: { code: l$1.UruguayPeso, countries: [r$2.Uruguay], decimal_digits: 2, decimal_separator: ",", name: "Uruguay Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$U", symbol_native: "$U", symbol_placement: "before", thousands_separator: "." }, UzbekistanSom: { code: l$1.UzbekistanSom, countries: [r$2.Uzbekistan], decimal_digits: 2, decimal_separator: ",", name: "Uzbekistan Som", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "UZS", symbol_native: "UZS", symbol_placement: "before", thousands_separator: "." }, VanuatuVatu: { code: l$1.VanuatuVatu, countries: [r$2.Vanuatu], decimal_digits: 0, decimal_separator: ",", name: "Vanuatu Vatu", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "VT", symbol_native: "VT", symbol_placement: "before", thousands_separator: "." }, VenezuelaBolivar: { code: l$1.VenezuelaBolivar, countries: [r$2.Venezuela], decimal_digits: 2, decimal_separator: ",", name: "Venezuela Bolivar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Bs. F", symbol_native: "Bs. F", symbol_placement: "before", thousands_separator: "." }, VietnamDong: { code: l$1.VietnamDong, countries: [r$2.Vietnam], decimal_digits: 0, decimal_separator: ",", name: "Vietnam Dong", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AB", symbol_native: "\u20AB", symbol_placement: "before", thousands_separator: "." }, YemenRial: { code: l$1.YemenRial, countries: [r$2.Yemen], decimal_digits: 2, decimal_separator: ",", name: "Yemen Rial", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, ZambiaKwacha: { code: l$1.ZambiaKwacha, countries: [r$2.Zambia], decimal_digits: 2, decimal_separator: ",", name: "Zambia Kwacha", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "ZK", symbol_native: "ZK", symbol_placement: "before", thousands_separator: "." }, ZimbabweDollar: { code: l$1.ZimbabweDollar, countries: [r$2.Zimbabwe], decimal_digits: 2, decimal_separator: ",", name: "Zimbabwe Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AB", symbol_native: "\u20AB", symbol_placement: "before", thousands_separator: "." } });
var Ki;
(function(a2) {
  a2.Bitcoin = "BTC", a2.Ethereum = "ETH", a2.Litecoin = "LTC", a2.Ripple = "XRP", a2.Dash = "DASH", a2.Zcash = "ZEC", a2.Dogecoin = "DOGE", a2.Monero = "XMR", a2.BitcoinCash = "BCH", a2.EOS = "EOS", a2.Binance = "BNB", a2.Stellar = "XLM", a2.Cardano = "ADA", a2.IOTA = "IOTA", a2.Tezos = "XTZ", a2.NEO = "NEO", a2.TRON = "TRX", a2.EOSClassic = "EOSC", a2.Ontology = "ONT", a2.VeChain = "VEN", a2.QTUM = "QTUM", a2.Lisk = "LSK", a2.Waves = "WAVES", a2.OmiseGO = "OMG", a2.Zilliqa = "ZIL", a2.BitcoinGold = "BTG", a2.Decred = "DCR", a2.Stratis = "STRAT", a2.Populous = "PPT", a2.Augur = "REP", a2.Golem = "GNT", a2.Siacoin = "SC", a2.BasicAttentionToken = "BAT", a2.ZCoin = "XZC", a2.StratisHedged = "SNT", a2.VeChainHedged = "VEN", a2.PowerLedger = "POWR", a2.WavesHedged = "WAVE", a2.ZilliqaHedged = "ZRX", a2.BitcoinDiamond = "BCD", a2.DigiByte = "DGB", a2.DigiByteHedged = "DGB", a2.Bytecoin = "BCN", a2.BytecoinHedged = "BCN";
})(Ki || (Ki = {}));
var o;
(function(a2) {
  a2.Afrikaans = "af", a2.Albanian = "sq", a2.Amharic = "am", a2.Arabic = "ar", a2.Armenian = "hy", a2.Azerbaijani = "az", a2.Bashkir = "ba", a2.Basque = "eu", a2.Belarusian = "be", a2.Bengali = "bn", a2.Berber = "ber", a2.Bhutani = "dz", a2.Bihari = "bh", a2.Bislama = "bi", a2.Bosnian = "bs", a2.Breten = "br", a2.Bulgarian = "bg", a2.Burmese = "my", a2.Cantonese = "yue", a2.Catalan = "ca", a2.Chinese = "zh", a2.Chuvash = "cv", a2.Corsican = "co", a2.Croatian = "hr", a2.Czech = "cs", a2.Danish = "da", a2.Dari = "prs", a2.Divehi = "dv", a2.Dutch = "nl", a2.English = "en", a2.Esperanto = "eo", a2.Estonian = "et", a2.Faroese = "fo", a2.Farsi = "fa", a2.Filipino = "fil", a2.Finnish = "fi", a2.French = "fr", a2.Frisian = "fy", a2.Galician = "gl", a2.Georgian = "ka", a2.German = "de", a2.Greek = "el", a2.Greenlandic = "kl", a2.Gujarati = "gu", a2.Haitian = "ht", a2.Hausa = "ha", a2.Hebrew = "he", a2.Hindi = "hi", a2.Hungarian = "hu", a2.Icelandic = "is", a2.Igbo = "ig", a2.Indonesian = "id", a2.Irish = "ga", a2.Italian = "it", a2.Japanese = "ja", a2.Javanese = "jv", a2.Kannada = "kn", a2.Karelian = "krl", a2.Kazakh = "kk", a2.Khmer = "km", a2.Komi = "kv", a2.Konkani = "kok", a2.Korean = "ko", a2.Kurdish = "ku", a2.Kyrgyz = "ky", a2.Lao = "lo", a2.Latin = "la", a2.Latvian = "lv", a2.Lithuanian = "lt", a2.Luxembourgish = "lb", a2.Ossetian = "os", a2.Macedonian = "mk", a2.Malagasy = "mg", a2.Malay = "ms", a2.Malayalam = "ml", a2.Maltese = "mt", a2.Maori = "mi", a2.Marathi = "mr", a2.Mari = "mhr", a2.Mongolian = "mn", a2.Montenegrin = "me", a2.Nepali = "ne", a2.NorthernSotho = "nso", a2.Norwegian = "no", a2.NorwegianBokmal = "nb", a2.NorwegianNynorsk = "nn", a2.Oriya = "or", a2.Pashto = "ps", a2.Persian = "fa", a2.Polish = "pl", a2.Portuguese = "pt", a2.Punjabi = "pa", a2.Quechua = "qu", a2.Romanian = "ro", a2.Russian = "ru", a2.Sakha = "sah", a2.Sami = "se", a2.Samoan = "sm", a2.Sanskrit = "sa", a2.Scots = "gd", a2.Serbian = "sr", a2.SerbianCyrillic = "sr-Cyrl", a2.Sesotho = "st", a2.Shona = "sn", a2.Sindhi = "sd", a2.Sinhala = "si", a2.Slovak = "sk", a2.Slovenian = "sl", a2.Somali = "so", a2.Spanish = "es", a2.Sudanese = "su", a2.Sutu = "sx", a2.Swahili = "sw", a2.Swedish = "sv", a2.Syriac = "syr", a2.Tagalog = "tl", a2.Tajik = "tg", a2.Tamazight = "tmh", a2.Tamil = "ta", a2.Tatar = "tt", a2.Telugu = "te", a2.Thai = "th", a2.Tibetan = "bo", a2.Tsonga = "ts", a2.Tswana = "tn", a2.Turkish = "tr", a2.Turkmen = "tk", a2.Ukrainian = "uk", a2.Urdu = "ur", a2.Uzbek = "uz", a2.Vietnamese = "vi", a2.Welsh = "cy", a2.Xhosa = "xh", a2.Yiddish = "yi", a2.Yoruba = "yo", a2.Zulu = "zu";
})(o || (o = {}));
var e$2;
(function(a2) {
  a2.Afrikaans = "af", a2.AfrikaansSouthAfrica = "af-ZA", a2.Albanian = "sq", a2.AlbanianAlbania = "sq-AL", a2.Amharic = "am", a2.AmharicEthiopia = "am-ET", a2.Arabic = "ar", a2.ArabicAlgeria = "ar-DZ", a2.ArabicBahrain = "ar-BH", a2.ArabicEgypt = "ar-EG", a2.ArabicIraq = "ar-IQ", a2.ArabicJordan = "ar-JO", a2.ArabicKuwait = "ar-KW", a2.ArabicLebanon = "ar-LB", a2.ArabicLibya = "ar-LY", a2.ArabicMorocco = "ar-MA", a2.ArabicOman = "ar-OM", a2.ArabicQatar = "ar-QA", a2.ArabicSaudiArabia = "ar-SA", a2.ArabicSyria = "ar-SY", a2.ArabicTunisia = "ar-TN", a2.ArabicUnitedArabEmirates = "ar-AE", a2.ArabicYemen = "ar-YE", a2.Armenian = "hy", a2.ArmenianArmenia = "hy-AM", a2.Azerbaijani = "az", a2.AzerbaijaniAzerbaijan = "az-AZ", a2.AzerbaijaniCyrillicAzerbaijan = "az-Cyrl-AZ", a2.Bashkir = "ba", a2.Basque = "eu", a2.BasqueSpain = "eu-ES", a2.Belarusian = "be", a2.BelarusianBelarus = "be-BY", a2.Bengali = "bn", a2.BengaliBangladesh = "bn-BD", a2.BengaliIndia = "bn-IN", a2.Berber = "ber", a2.Bhutani = "dz", a2.BhutaniBhutan = "dz-BT", a2.Bosnian = "bs", a2.BosnianBosniaAndHerzegovina = "bs-BA", a2.Breton = "br", a2.Bulgarian = "bg", a2.BulgarianBosniaAndHerzegovina = "bg-BG", a2.BulgarianBulgaria = "bg-BG", a2.Burmese = "my", a2.BurmeseMyanmar = "my-MM", a2.Cantonese = "yue", a2.CantoneseHongKong = "yue-HK", a2.Catalan = "ca", a2.CatalanSpain = "ca-ES", a2.Chechen = "ce", a2.Cherokee = "chr", a2.Chinese = "zh", a2.ChineseSimplified = "zh-Hans", a2.ChineseSimplifiedChina = "zh-Hans-CN", a2.ChineseSimplifiedHongKong = "zh-Hans-HK", a2.ChineseSimplifiedMacau = "zh-Hans-MO", a2.ChineseSimplifiedSingapore = "zh-Hans-SG", a2.ChineseTraditional = "zh-Hant", a2.ChineseTraditionalHongKong = "zh-Hant-HK", a2.ChineseTraditionalMacau = "zh-Hant-MO", a2.ChineseTraditionalSingapore = "zh-Hant-SG", a2.ChineseTraditionalTaiwan = "zh-Hant-TW", a2.Chuvash = "cv", a2.CorsicanFrance = "co-FR", a2.Croatian = "hr", a2.CroatianBosniaAndHerzegovina = "hr-BA", a2.CroatianCroatia = "hr-HR", a2.Czech = "cs", a2.CzechCzechRepublic = "cs-CZ", a2.Danish = "da", a2.DanishDenmark = "da-DK", a2.Dari = "prs", a2.DariAfghanistan = "prs-AF", a2.Divehi = "dv", a2.DivehiMaldives = "dv-MV", a2.Dutch = "nl", a2.DutchBelgium = "nl-BE", a2.DutchNetherlands = "nl-NL", a2.English = "en", a2.EnglishAustralia = "en-AU", a2.EnglishBelgium = "en-BE", a2.EnglishBelize = "en-BZ", a2.EnglishCanada = "en-CA", a2.EnglishCaribbean = "en-029", a2.EnglishIreland = "en-IE", a2.EnglishJamaica = "en-JM", a2.EnglishNewZealand = "en-NZ", a2.EnglishPhilippines = "en-PH", a2.EnglishSingapore = "en-SG", a2.EnglishSouthAfrica = "en-ZA", a2.EnglishTrinidadAndTobago = "en-TT", a2.EnglishUnitedKingdom = "en-GB", a2.EnglishUnitedStates = "en-US", a2.EnglishZimbabwe = "en-ZW", a2.Esperanto = "eo", a2.Estonian = "et", a2.EstonianEstonia = "et-EE", a2.Faroese = "fo", a2.FaroeseFaroeIslands = "fo-FO", a2.Farsi = "fa", a2.FarsiIran = "fa-IR", a2.Filipino = "fil", a2.FilipinoPhilippines = "fil-PH", a2.Finnish = "fi", a2.FinnishFinland = "fi-FI", a2.French = "fr", a2.FrenchBelgium = "fr-BE", a2.FrenchCanada = "fr-CA", a2.FrenchFrance = "fr-FR", a2.FrenchLuxembourg = "fr-LU", a2.FrenchMonaco = "fr-MC", a2.FrenchReunion = "fr-RE", a2.FrenchSwitzerland = "fr-CH", a2.Frisian = "fy", a2.FrisianNetherlands = "fy-NL", a2.Galician = "gl", a2.GalicianSpain = "gl-ES", a2.Georgian = "ka", a2.GeorgianGeorgia = "ka-GE", a2.German = "de", a2.GermanAustria = "de-AT", a2.GermanBelgium = "de-BE", a2.GermanGermany = "de-DE", a2.GermanLiechtenstein = "de-LI", a2.GermanLuxembourg = "de-LU", a2.GermanSwitzerland = "de-CH", a2.Greenlandic = "kl", a2.GreenlandicGreenland = "kl-GL", a2.Greek = "el", a2.GreekGreece = "el-GR", a2.Gujarati = "gu", a2.GujaratiIndia = "gu-IN", a2.Haitian = "ht", a2.Hausa = "ha", a2.HausaGhana = "ha-GH", a2.HausaNiger = "ha-NE", a2.HausaNigeria = "ha-NG", a2.Hebrew = "he", a2.HebrewIsrael = "he-IL", a2.Hindi = "hi", a2.HindiIndia = "hi-IN", a2.Hungarian = "hu", a2.HungarianHungary = "hu-HU", a2.Icelandic = "is", a2.IcelandicIceland = "is-IS", a2.Igbo = "ig", a2.IgboNigeria = "ig-NG", a2.Indonesian = "id", a2.IndonesianIndonesia = "id-ID", a2.Irish = "ga", a2.IrishIreland = "ga-IE", a2.Italian = "it", a2.ItalianItaly = "it-IT", a2.ItalianSwitzerland = "it-CH", a2.Japanese = "ja", a2.JapaneseJapan = "ja-JP", a2.Javanese = "jv", a2.Kannada = "kn", a2.KannadaIndia = "kn-IN", a2.Karelian = "krl", a2.Kazakh = "kk", a2.KazakhKazakhstan = "kk-KZ", a2.Khmer = "km", a2.KhmerCambodia = "km-KH", a2.KinyarwandaRwanda = "rw-RW", a2.Komi = "kv", a2.Konkani = "kok", a2.KonkaniIndia = "kok-IN", a2.Korean = "ko", a2.KoreanSouthKorea = "ko-KR", a2.Kurdish = "ku", a2.KurdishIraq = "ku-IQ", a2.KurdishTurkey = "ku-TR", a2.Kyrgyz = "ky", a2.KyrgyzKyrgyzstan = "ky-KG", a2.Lao = "lo", a2.LaoLaos = "lo-LA", a2.Latin = "la", a2.Latvian = "lv", a2.LatvianLatvia = "lv-LV", a2.Lithuanian = "lt", a2.LithuanianLithuania = "lt-LT", a2.Luxembourgish = "lb", a2.LuxembourgishBelgium = "lb-LU", a2.LuxembourgishLuxembourg = "lb-LU", a2.Macedonian = "mk", a2.MacedonianNorthMacedonia = "mk-MK", a2.Malagasy = "mg", a2.Malay = "ms", a2.MalayBrunei = "ms-BN", a2.MalayIndia = "ms-IN", a2.MalayMalaysia = "ms-MY", a2.MalaySingapore = "ms-SG", a2.Malayalam = "ml", a2.MalayalamIndia = "ml-IN", a2.Maltese = "mt", a2.MalteseMalta = "mt-MT", a2.Maori = "mi", a2.MaoriNewZealand = "mi-NZ", a2.Marathi = "mr", a2.MarathiIndia = "mr-IN", a2.Mari = "chm", a2.Mongolian = "mn", a2.MongolianMongolia = "mn-MN", a2.Montenegrin = "me", a2.MontenegrinMontenegro = "me-ME", a2.Nepali = "ne", a2.NepaliNepal = "ne-NP", a2.NorthernSotho = "ns", a2.NorthernSothoSouthAfrica = "ns-ZA", a2.Norwegian = "nb", a2.NorwegianBokmalNorway = "nb-NO", a2.NorwegianNynorskNorway = "nn-NO", a2.Oriya = "or", a2.OriyaIndia = "or-IN", a2.Ossetian = "os", a2.Pashto = "ps", a2.PashtoAfghanistan = "ps-AF", a2.Persian = "fa", a2.PersianIran = "fa-IR", a2.Polish = "pl", a2.PolishPoland = "pl-PL", a2.Portuguese = "pt", a2.PortugueseBrazil = "pt-BR", a2.PortuguesePortugal = "pt-PT", a2.Punjabi = "pa", a2.PunjabiIndia = "pa-IN", a2.PunjabiPakistan = "pa-PK", a2.Quechua = "qu", a2.QuechuaBolivia = "qu-BO", a2.QuechuaEcuador = "qu-EC", a2.QuechuaPeru = "qu-PE", a2.Romanian = "ro", a2.RomanianRomania = "ro-RO", a2.Russian = "ru", a2.RussianKazakhstan = "ru-KZ", a2.RussianKyrgyzstan = "ru-KG", a2.RussianRussia = "ru-RU", a2.RussianUkraine = "ru-UA", a2.Sakha = "sah", a2.Sanskrit = "sa", a2.SanskritIndia = "sa-IN", a2.Sami = "se", a2.SamiNorway = "se-NO", a2.SamiSweden = "se-SE", a2.SamiFinland = "se-FI", a2.Samoan = "sm", a2.SamoanSamoa = "sm-WS", a2.Scots = "gd", a2.Serbian = "sr", a2.SerbianBosniaAndHerzegovina = "sr-BA", a2.SerbianSerbiaAndMontenegro = "sr-SP", a2.SerbianCyrillic = "sr-SP-Cyrl", a2.SerbianCyrillicBosniaAndHerzegovina = "sr-Cyrl-BA", a2.SerbianCyrillicSerbiaAndMontenegro = "sr-Cyrl-SP", a2.Sesotho = "st", a2.SesothoSouthAfrica = "st-ZA", a2.Shona = "sn", a2.ShonaZimbabwe = "sn-ZW", a2.Sindhi = "sd", a2.SindhiPakistan = "sd-PK", a2.Sinhala = "si", a2.SinhalaSriLanka = "si-LK", a2.Slovak = "sk", a2.SlovakSlovakia = "sk-SK", a2.Slovenian = "sl", a2.SlovenianSlovenia = "sl-SI", a2.Somali = "so", a2.SomaliSomalia = "so-SO", a2.Spanish = "es", a2.SpanishArgentina = "es-AR", a2.SpanishBolivia = "es-BO", a2.SpanishChile = "es-CL", a2.SpanishColombia = "es-CO", a2.SpanishCostaRica = "es-CR", a2.SpanishCuba = "es-CU", a2.SpanishDominicanRepublic = "es-DO", a2.SpanishEcuador = "es-EC", a2.SpanishEquatorialGuinea = "es-GQ", a2.SpanishElSalvador = "es-SV", a2.SpanishGuatemala = "es-GT", a2.SpanishHonduras = "es-HN", a2.SpanishMexico = "es-MX", a2.SpanishNicaragua = "es-NI", a2.SpanishPanama = "es-PA", a2.SpanishParaguay = "es-PY", a2.SpanishPeru = "es-PE", a2.SpanishPuertoRico = "es-PR", a2.SpanishSpain = "es-ES", a2.SpanishUnitedStates = "es-US", a2.SpanishUruguay = "es-UY", a2.SpanishVenezuela = "es-VE", a2.Sudanese = "su", a2.Sutu = "st", a2.SutuSouthAfrica = "st-ZA", a2.Swahili = "sw", a2.SwahiliKenya = "sw-KE", a2.Swedish = "sv", a2.SwedishFinland = "sv-FI", a2.SwedishSweden = "sv-SE", a2.Syriac = "syr", a2.SyriacSyria = "syr-SY", a2.Tajik = "tg", a2.TajikTajikistan = "tg-TJ", a2.Tagalog = "tl", a2.TagalogPhilippines = "tl-PH", a2.Tamazight = "tmh", a2.Tamil = "ta", a2.TamilIndia = "ta-IN", a2.Tatar = "tt", a2.Telugu = "te", a2.TeluguIndia = "te-IN", a2.Thai = "th", a2.ThaiThailand = "th-TH", a2.Tibetan = "bo", a2.TibetanBhutan = "bo-BT", a2.TibetanChina = "bo-CN", a2.TibetanIndia = "bo-IN", a2.Tsonga = "ts", a2.Tswana = "tn", a2.TswanaSouthAfrica = "tn-ZA", a2.Turkish = "tr", a2.TurkishTurkey = "tr-TR", a2.Turkmen = "tk", a2.Ukrainian = "uk", a2.UkrainianUkraine = "uk-UA", a2.Urdu = "ur", a2.UrduAfghanistan = "ur-AF", a2.UrduIndia = "ur-IN", a2.UrduPakistan = "ur-PK", a2.Uzbek = "uz", a2.UzbekCyrillic = "uz-Cyrl-UZ", a2.UzbekLatin = "uz-Latn-UZ", a2.UzbekUzbekistan = "uz-UZ", a2.Vietnamese = "vi", a2.VietnameseVietnam = "vi-VN", a2.Welsh = "cy", a2.WelshUnitedKingdom = "cy-GB", a2.Xhosa = "xh", a2.XhosaSouthAfrica = "xh-ZA", a2.Yiddish = "yi", a2.Yoruba = "yo", a2.YorubaNigeria = "yo-NG", a2.ZhuyinMandarinChina = "yue-Hant-CN", a2.Zulu = "zu", a2.ZuluSouthAfrica = "zu-ZA";
})(e$2 || (e$2 = {}));
var t$1;
(function(a2) {
  a2.AfricaAbidjan = "Africa/Abidjan", a2.AfricaAccra = "Africa/Accra", a2.AfricaAddisAbaba = "Africa/Addis_Ababa", a2.AfricaAlgiers = "Africa/Algiers", a2.AfricaAsmara = "Africa/Asmara", a2.AfricaBamako = "Africa/Bamako", a2.AfricaBangui = "Africa/Bangui", a2.AfricaBanjul = "Africa/Banjul", a2.AfricaBissau = "Africa/Bissau", a2.AfricaBlantyre = "Africa/Blantyre", a2.AfricaBrazzaville = "Africa/Brazzaville", a2.AfricaBujumbura = "Africa/Bujumbura", a2.AfricaCairo = "Africa/Cairo", a2.AfricaCasablanca = "Africa/Casablanca", a2.AfricaCeuta = "Africa/Ceuta", a2.AfricaConakry = "Africa/Conakry", a2.AfricaDakar = "Africa/Dakar", a2.AfricaDarEsSalaam = "Africa/Dar_es_Salaam", a2.AfricaDjibouti = "Africa/Djibouti", a2.AfricaDouala = "Africa/Douala", a2.AfricaElAaiun = "Africa/El_Aaiun", a2.AfricaFreetown = "Africa/Freetown", a2.AfricaGaborone = "Africa/Gaborone", a2.AfricaHarare = "Africa/Harare", a2.AfricaJohannesburg = "Africa/Johannesburg", a2.AfricaJuba = "Africa/Juba", a2.AfricaKampala = "Africa/Kampala", a2.AfricaKhartoum = "Africa/Khartoum", a2.AfricaKigali = "Africa/Kigali", a2.AfricaKinshasa = "Africa/Kinshasa", a2.AfricaLagos = "Africa/Lagos", a2.AfricaLibreville = "Africa/Libreville", a2.AfricaLome = "Africa/Lome", a2.AfricaLuanda = "Africa/Luanda", a2.AfricaLubumbashi = "Africa/Lubumbashi", a2.AfricaLusaka = "Africa/Lusaka", a2.AfricaMalabo = "Africa/Malabo", a2.AfricaMaputo = "Africa/Maputo", a2.AfricaMaseru = "Africa/Maseru", a2.AfricaMbabane = "Africa/Mbabane", a2.AfricaMogadishu = "Africa/Mogadishu", a2.AfricaMonrovia = "Africa/Monrovia", a2.AfricaNairobi = "Africa/Nairobi", a2.AfricaNdjamena = "Africa/Ndjamena", a2.AfricaNiamey = "Africa/Niamey", a2.AfricaNouakchott = "Africa/Nouakchott", a2.AfricaOuagadougou = "Africa/Ouagadougou", a2.AfricaPortoNovo = "Africa/Porto-Novo", a2.AfricaSaoTome = "Africa/Sao_Tome", a2.AfricaTripoli = "Africa/Tripoli", a2.AfricaTunis = "Africa/Tunis", a2.AfricaWindhoek = "Africa/Windhoek", a2.AmericaAdak = "America/Adak", a2.AmericaAnchorage = "America/Anchorage", a2.AmericaAnguilla = "America/Anguilla", a2.AmericaAntigua = "America/Antigua", a2.AmericaAraguaina = "America/Araguaina", a2.AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires", a2.AmericaArgentinaCatamarca = "America/Argentina/Catamarca", a2.AmericaArgentinaCordoba = "America/Argentina/Cordoba", a2.AmericaArgentinaJujuy = "America/Argentina/Jujuy", a2.AmericaArgentinaLaRioja = "America/Argentina/La_Rioja", a2.AmericaArgentinaMendoza = "America/Argentina/Mendoza", a2.AmericaArgentinaRioGallegos = "America/Argentina/Rio_Gallegos", a2.AmericaArgentinaSalta = "America/Argentina/Salta", a2.AmericaArgentinaSanJuan = "America/Argentina/San_Juan", a2.AmericaArgentinaSanLuis = "America/Argentina/San_Luis", a2.AmericaArgentinaTucuman = "America/Argentina/Tucuman", a2.AmericaArgentinaUshuaia = "America/Argentina/Ushuaia", a2.AmericaAruba = "America/Aruba", a2.AmericaAsuncion = "America/Asuncion", a2.AmericaAtikokan = "America/Atikokan", a2.AmericaAtka = "America/Atka", a2.AmericaBahia = "America/Bahia", a2.AmericaBahiaBanderas = "America/Bahia_Banderas", a2.AmericaBarbados = "America/Barbados", a2.AmericaBelem = "America/Belem", a2.AmericaBelize = "America/Belize", a2.AmericaBlancSablon = "America/Blanc-Sablon", a2.AmericaBoaVista = "America/Boa_Vista", a2.AmericaBogota = "America/Bogota", a2.AmericaBoise = "America/Boise", a2.AmericaCambridgeBay = "America/Cambridge_Bay", a2.AmericaCampoGrande = "America/Campo_Grande", a2.AmericaCancun = "America/Cancun", a2.AmericaCaracas = "America/Caracas", a2.AmericaCayenne = "America/Cayenne", a2.AmericaCayman = "America/Cayman", a2.AmericaChicago = "America/Chicago", a2.AmericaChihuahua = "America/Chihuahua", a2.AmericaCoralHarbour = "America/Coral_Harbour", a2.AmericaCordoba = "America/Cordoba", a2.AmericaCostaRica = "America/Costa_Rica", a2.AmericaCreston = "America/Creston", a2.AmericaCuiaba = "America/Cuiaba", a2.AmericaCuracao = "America/Curacao", a2.AmericaDanmarkshavn = "America/Danmarkshavn", a2.AmericaDawson = "America/Dawson", a2.AmericaDawsonCreek = "America/Dawson_Creek", a2.AmericaDenver = "America/Denver", a2.AmericaDetroit = "America/Detroit", a2.AmericaDominica = "America/Dominica", a2.AmericaEdmonton = "America/Edmonton", a2.AmericaEirunepe = "America/Eirunepe", a2.AmericaElSalvador = "America/El_Salvador", a2.AmericaFortaleza = "America/Fortaleza", a2.AmericaGlaceBay = "America/Glace_Bay", a2.AmericaGodthab = "America/Godthab", a2.AmericaGooseBay = "America/Goose_Bay", a2.AmericaGrandTurk = "America/Grand_Turk", a2.AmericaGrenada = "America/Grenada", a2.AmericaGuadeloupe = "America/Guadeloupe", a2.AmericaGuatemala = "America/Guatemala", a2.AmericaGuayaquil = "America/Guayaquil", a2.AmericaGuyana = "America/Guyana", a2.AmericaHalifax = "America/Halifax", a2.AmericaHavana = "America/Havana", a2.AmericaHermosillo = "America/Hermosillo", a2.AmericaIndianaIndianapolis = "America/Indiana/Indianapolis", a2.AmericaIndianaKnox = "America/Indiana/Knox", a2.AmericaIndianaMarengo = "America/Indiana/Marengo", a2.AmericaIndianaPetersburg = "America/Indiana/Petersburg", a2.AmericaIndianaTellCity = "America/Indiana/Tell_City", a2.AmericaIndianaVevay = "America/Indiana/Vevay", a2.AmericaIndianaVincennes = "America/Indiana/Vincennes", a2.AmericaIndianaWinamac = "America/Indiana/Winamac", a2.AmericaInuvik = "America/Inuvik", a2.AmericaIqaluit = "America/Iqaluit", a2.AmericaJamaica = "America/Jamaica", a2.AmericaJuneau = "America/Juneau", a2.AmericaKentuckyLouisville = "America/Kentucky/Louisville", a2.AmericaKentuckyMonticello = "America/Kentucky/Monticello", a2.AmericaKralendijk = "America/Kralendijk", a2.AmericaLaPaz = "America/La_Paz", a2.AmericaLima = "America/Lima", a2.AmericaLosAngeles = "America/Los_Angeles", a2.AmericaLouisville = "America/Louisville", a2.AmericaLowerPrinces = "America/Lower_Princes", a2.AmericaMaceio = "America/Maceio", a2.AmericaManagua = "America/Managua", a2.AmericaManaus = "America/Manaus", a2.AmericaMarigot = "America/Marigot", a2.AmericaMartinique = "America/Martinique", a2.AmericaMatamoros = "America/Matamoros", a2.AmericaMazatlan = "America/Mazatlan", a2.AmericaMenominee = "America/Menominee", a2.AmericaMerida = "America/Merida", a2.AmericaMetlakatla = "America/Metlakatla", a2.AmericaMexicoCity = "America/Mexico_City", a2.AmericaMiquelon = "America/Miquelon", a2.AmericaMoncton = "America/Moncton", a2.AmericaMonterrey = "America/Monterrey", a2.AmericaMontevideo = "America/Montevideo", a2.AmericaMontserrat = "America/Montserrat", a2.AmericaMontreal = "America/Montreal", a2.AmericaNassau = "America/Nassau", a2.AmericaNewYork = "America/New_York", a2.AmericaNipigon = "America/Nipigon", a2.AmericaNome = "America/Nome", a2.AmericaNoronha = "America/Noronha", a2.AmericaNorthDakotaBeulah = "America/North_Dakota/Beulah", a2.AmericaNorthDakotaCenter = "America/North_Dakota/Center", a2.AmericaNorthDakotaNewSalem = "America/North_Dakota/New_Salem", a2.AmericaOjinaga = "America/Ojinaga", a2.AmericaPanama = "America/Panama", a2.AmericaPangnirtung = "America/Pangnirtung", a2.AmericaParamaribo = "America/Paramaribo", a2.AmericaPhoenix = "America/Phoenix", a2.AmericaPortAuPrince = "America/Port-au-Prince", a2.AmericaPortOfSpain = "America/Port_of_Spain", a2.AmericaPortoVelho = "America/Porto_Velho", a2.AmericaPuertoRico = "America/Puerto_Rico", a2.AmericaRainyRiver = "America/Rainy_River", a2.AmericaRankinInlet = "America/Rankin_Inlet", a2.AmericaRecife = "America/Recife", a2.AmericaRegina = "America/Regina", a2.AmericaResolute = "America/Resolute", a2.AmericaRioBranco = "America/Rio_Branco", a2.AmericaSantaIsabel = "America/Santa_Isabel", a2.AmericaSantarem = "America/Santarem", a2.AmericaSantiago = "America/Santiago", a2.AmericaSantoDomingo = "America/Santo_Domingo", a2.AmericaSaoPaulo = "America/Sao_Paulo", a2.AmericaScoresbysund = "America/Scoresbysund", a2.AmericaShiprock = "America/Shiprock", a2.AmericaSitka = "America/Sitka", a2.AmericaStBarthelemy = "America/St_Barthelemy", a2.AmericaStJohns = "America/St_Johns", a2.AmericaStKitts = "America/St_Kitts", a2.AmericaStLucia = "America/St_Lucia", a2.AmericaStThomas = "America/St_Thomas", a2.AmericaStVincent = "America/St_Vincent", a2.AmericaSwiftCurrent = "America/Swift_Current", a2.AmericaTegucigalpa = "America/Tegucigalpa", a2.AmericaThule = "America/Thule", a2.AmericaThunderBay = "America/Thunder_Bay", a2.AmericaTijuana = "America/Tijuana", a2.AmericaToronto = "America/Toronto", a2.AmericaTortola = "America/Tortola", a2.AmericaVancouver = "America/Vancouver", a2.AmericaWhitehorse = "America/Whitehorse", a2.AmericaWinnipeg = "America/Winnipeg", a2.AmericaYakutat = "America/Yakutat", a2.AmericaYellowknife = "America/Yellowknife", a2.AntarcticaCasey = "Antarctica/Casey", a2.AntarcticaDavis = "Antarctica/Davis", a2.AntarcticaDumontDUrville = "Antarctica/DumontDUrville", a2.AntarcticaMacquarie = "Antarctica/Macquarie", a2.AntarcticaMawson = "Antarctica/Mawson", a2.AntarcticaMcMurdo = "Antarctica/McMurdo", a2.AntarcticaPalmer = "Antarctica/Palmer", a2.AntarcticaRothera = "Antarctica/Rothera", a2.AntarcticaSyowa = "Antarctica/Syowa", a2.AntarcticaTroll = "Antarctica/Troll", a2.AntarcticaVostok = "Antarctica/Vostok", a2.ArcticLongyearbyen = "Arctic/Longyearbyen", a2.AsiaAden = "Asia/Aden", a2.AsiaAlmaty = "Asia/Almaty", a2.AsiaAmman = "Asia/Amman", a2.AsiaAnadyr = "Asia/Anadyr", a2.AsiaAqtau = "Asia/Aqtau", a2.AsiaAqtobe = "Asia/Aqtobe", a2.AsiaAshgabat = "Asia/Ashgabat", a2.AsiaBaghdad = "Asia/Baghdad", a2.AsiaBahrain = "Asia/Bahrain", a2.AsiaBaku = "Asia/Baku", a2.AsiaBangkok = "Asia/Bangkok", a2.AsiaBarnaul = "Asia/Barnaul", a2.AsiaBeirut = "Asia/Beirut", a2.AsiaBishkek = "Asia/Bishkek", a2.AsiaBrunei = "Asia/Brunei", a2.AsiaChita = "Asia/Chita", a2.AsiaChoibalsan = "Asia/Choibalsan", a2.AsiaColombo = "Asia/Colombo", a2.AsiaDamascus = "Asia/Damascus", a2.AsiaDhaka = "Asia/Dhaka", a2.AsiaDili = "Asia/Dili", a2.AsiaDubai = "Asia/Dubai", a2.AsiaDushanbe = "Asia/Dushanbe", a2.AsiaFamagusta = "Asia/Famagusta", a2.AsiaGaza = "Asia/Gaza", a2.AsiaHebron = "Asia/Hebron", a2.AsiaHoChiMinh = "Asia/Ho_Chi_Minh", a2.AsiaHongKong = "Asia/Hong_Kong", a2.AsiaHovd = "Asia/Hovd", a2.AsiaIrkutsk = "Asia/Irkutsk", a2.AsiaJakarta = "Asia/Jakarta", a2.AsiaJayapura = "Asia/Jayapura", a2.AsiaJerusalem = "Asia/Jerusalem", a2.AsiaKabul = "Asia/Kabul", a2.AsiaKamchatka = "Asia/Kamchatka", a2.AsiaKarachi = "Asia/Karachi", a2.AsiaKathmandu = "Asia/Kathmandu", a2.AsiaKhandyga = "Asia/Khandyga", a2.AsiaKolkata = "Asia/Kolkata", a2.AsiaKrasnoyarsk = "Asia/Krasnoyarsk", a2.AsiaKualaLumpur = "Asia/Kuala_Lumpur", a2.AsiaKuching = "Asia/Kuching", a2.AsiaKuwait = "Asia/Kuwait", a2.AsiaMacau = "Asia/Macau", a2.AsiaMagadan = "Asia/Magadan", a2.AsiaMakassar = "Asia/Makassar", a2.AsiaManila = "Asia/Manila", a2.AsiaMuscat = "Asia/Muscat", a2.AsiaNicosia = "Asia/Nicosia", a2.AsiaNovokuznetsk = "Asia/Novokuznetsk", a2.AsiaNovosibirsk = "Asia/Novosibirsk", a2.AsiaOmsk = "Asia/Omsk", a2.AsiaOral = "Asia/Oral", a2.AsiaPhnomPenh = "Asia/Phnom_Penh", a2.AsiaPontianak = "Asia/Pontianak", a2.AsiaPyongyang = "Asia/Pyongyang", a2.AsiaQatar = "Asia/Qatar", a2.AsiaQyzylorda = "Asia/Qyzylorda", a2.AsiaRangoon = "Asia/Rangoon", a2.AsiaRiyadh = "Asia/Riyadh", a2.AsiaSakhalin = "Asia/Sakhalin", a2.AsiaSamarkand = "Asia/Samarkand", a2.AsiaSeoul = "Asia/Seoul", a2.AsiaShanghai = "Asia/Shanghai", a2.AsiaSingapore = "Asia/Singapore", a2.AsiaSrednekolymsk = "Asia/Srednekolymsk", a2.AsiaTaipei = "Asia/Taipei", a2.AsiaTashkent = "Asia/Tashkent", a2.AsiaTbilisi = "Asia/Tbilisi", a2.AsiaTehran = "Asia/Tehran", a2.AsiaThimphu = "Asia/Thimphu", a2.AsiaTokyo = "Asia/Tokyo", a2.AsiaTomsk = "Asia/Tomsk", a2.AsiaUlaanbaatar = "Asia/Ulaanbaatar", a2.AsiaUrumqi = "Asia/Urumqi", a2.AsiaUstNera = "Asia/Ust-Nera", a2.AsiaVientiane = "Asia/Vientiane", a2.AsiaVladivostok = "Asia/Vladivostok", a2.AsiaYakutsk = "Asia/Yakutsk", a2.AsiaYekaterinburg = "Asia/Yekaterinburg", a2.AsiaYerevan = "Asia/Yerevan", a2.AtlanticAzores = "Atlantic/Azores", a2.AtlanticBermuda = "Atlantic/Bermuda", a2.AtlanticCanary = "Atlantic/Canary", a2.AtlanticCapeVerde = "Atlantic/Cape_Verde", a2.AtlanticFaroe = "Atlantic/Faroe", a2.AtlanticMadeira = "Atlantic/Madeira", a2.AtlanticReykjavik = "Atlantic/Reykjavik", a2.AtlanticSouthGeorgia = "Atlantic/South_Georgia", a2.AtlanticStHelena = "Atlantic/St_Helena", a2.AtlanticStanley = "Atlantic/Stanley", a2.AustraliaAdelaide = "Australia/Adelaide", a2.AustraliaBrisbane = "Australia/Brisbane", a2.AustraliaBrokenHill = "Australia/Broken_Hill", a2.AustraliaCanberra = "Australia/Canberra", a2.AustraliaCurrie = "Australia/Currie", a2.AustraliaDarwin = "Australia/Darwin", a2.AustraliaEucla = "Australia/Eucla", a2.AustraliaHobart = "Australia/Hobart", a2.AustraliaLindeman = "Australia/Lindeman", a2.AustraliaLordHowe = "Australia/Lord_Howe", a2.AustraliaMelbourne = "Australia/Melbourne", a2.AustraliaPerth = "Australia/Perth", a2.AustraliaSydney = "Australia/Sydney", a2.EuropeAmsterdam = "Europe/Amsterdam", a2.EuropeAndorra = "Europe/Andorra", a2.EuropeAthens = "Europe/Athens", a2.EuropeBelgrade = "Europe/Belgrade", a2.EuropeBerlin = "Europe/Berlin", a2.EuropeBratislava = "Europe/Bratislava", a2.EuropeBrussels = "Europe/Brussels", a2.EuropeBucharest = "Europe/Bucharest", a2.EuropeBudapest = "Europe/Budapest", a2.EuropeBusingen = "Europe/Busingen", a2.EuropeChisinau = "Europe/Chisinau", a2.EuropeCopenhagen = "Europe/Copenhagen", a2.EuropeDublin = "Europe/Dublin", a2.EuropeGibraltar = "Europe/Gibraltar", a2.EuropeGuernsey = "Europe/Guernsey", a2.EuropeHelsinki = "Europe/Helsinki", a2.EuropeIsleOfMan = "Europe/Isle_of_Man", a2.EuropeIstanbul = "Europe/Istanbul", a2.EuropeJersey = "Europe/Jersey", a2.EuropeKaliningrad = "Europe/Kaliningrad", a2.EuropeKiev = "Europe/Kiev", a2.EuropeKirov = "Europe/Kirov", a2.EuropeLisbon = "Europe/Lisbon", a2.EuropeLjubljana = "Europe/Ljubljana", a2.EuropeLondon = "Europe/London", a2.EuropeLuxembourg = "Europe/Luxembourg", a2.EuropeMadrid = "Europe/Madrid", a2.EuropeMalta = "Europe/Malta", a2.EuropeMariehamn = "Europe/Mariehamn", a2.EuropeMinsk = "Europe/Minsk", a2.EuropeMonaco = "Europe/Monaco", a2.EuropeMoscow = "Europe/Moscow", a2.EuropeOslo = "Europe/Oslo", a2.EuropeParis = "Europe/Paris", a2.EuropePodgorica = "Europe/Podgorica", a2.EuropePrague = "Europe/Prague", a2.EuropeRiga = "Europe/Riga", a2.EuropeRome = "Europe/Rome", a2.EuropeSamara = "Europe/Samara", a2.EuropeSanMarino = "Europe/San_Marino", a2.EuropeSarajevo = "Europe/Sarajevo", a2.EuropeSimferopol = "Europe/Simferopol", a2.EuropeSkopje = "Europe/Skopje", a2.EuropeSofia = "Europe/Sofia", a2.EuropeStockholm = "Europe/Stockholm", a2.EuropeTallinn = "Europe/Tallinn", a2.EuropeTirane = "Europe/Tirane", a2.EuropeUzhgorod = "Europe/Uzhgorod", a2.EuropeVaduz = "Europe/Vaduz", a2.EuropeVatican = "Europe/Vatican", a2.EuropeVienna = "Europe/Vienna", a2.EuropeVilnius = "Europe/Vilnius", a2.EuropeVolgograd = "Europe/Volgograd", a2.EuropeWarsaw = "Europe/Warsaw", a2.EuropeZagreb = "Europe/Zagreb", a2.EuropeZaporozhye = "Europe/Zaporozhye", a2.EuropeZurich = "Europe/Zurich", a2.GMT = "GMT", a2.IndianAntananarivo = "Indian/Antananarivo", a2.IndianChagos = "Indian/Chagos", a2.IndianChristmas = "Indian/Christmas", a2.IndianCocos = "Indian/Cocos", a2.IndianComoro = "Indian/Comoro", a2.IndianKerguelen = "Indian/Kerguelen", a2.IndianMahe = "Indian/Mahe", a2.IndianMaldives = "Indian/Maldives", a2.IndianMauritius = "Indian/Mauritius", a2.IndianMayotte = "Indian/Mayotte", a2.IndianReunion = "Indian/Reunion", a2.PacificApia = "Pacific/Apia", a2.PacificAuckland = "Pacific/Auckland", a2.PacificBougainville = "Pacific/Bougainville", a2.PacificChatham = "Pacific/Chatham", a2.PacificChuuk = "Pacific/Chuuk", a2.PacificEaster = "Pacific/Easter", a2.PacificEfate = "Pacific/Efate", a2.PacificEnderbury = "Pacific/Enderbury", a2.PacificFakaofo = "Pacific/Fakaofo", a2.PacificFiji = "Pacific/Fiji", a2.PacificFunafuti = "Pacific/Funafuti", a2.PacificGalapagos = "Pacific/Galapagos", a2.PacificGambier = "Pacific/Gambier", a2.PacificGuadalcanal = "Pacific/Guadalcanal", a2.PacificGuam = "Pacific/Guam", a2.PacificHonolulu = "Pacific/Honolulu", a2.PacificJohnston = "Pacific/Johnston", a2.PacificKiritimati = "Pacific/Kiritimati", a2.PacificKosrae = "Pacific/Kosrae", a2.PacificKwajalein = "Pacific/Kwajalein", a2.PacificMajuro = "Pacific/Majuro", a2.PacificMarquesas = "Pacific/Marquesas", a2.PacificMidway = "Pacific/Midway", a2.PacificNauru = "Pacific/Nauru", a2.PacificNiue = "Pacific/Niue", a2.PacificNorfolk = "Pacific/Norfolk", a2.PacificNoumea = "Pacific/Noumea", a2.PacificPagoPago = "Pacific/Pago_Pago", a2.PacificPalau = "Pacific/Palau", a2.PacificPitcairn = "Pacific/Pitcairn", a2.PacificPohnpei = "Pacific/Pohnpei", a2.PacificPonape = "Pacific/Ponape", a2.PacificPortMoresby = "Pacific/Port_Moresby", a2.PacificRarotonga = "Pacific/Rarotonga", a2.PacificSaipan = "Pacific/Saipan", a2.PacificSamoa = "Pacific/Samoa", a2.PacificTahiti = "Pacific/Tahiti", a2.PacificTarawa = "Pacific/Tarawa", a2.PacificTongatapu = "Pacific/Tongatapu", a2.PacificTruk = "Pacific/Truk", a2.PacificWake = "Pacific/Wake", a2.PacificWallis = "Pacific/Wallis", a2.PacificYap = "Pacific/Yap";
})(t$1 || (t$1 = {}));
var i$3;
(function(a2) {
  a2.UTC_MINUS_12 = "UTC-12", a2.UTC_MINUS_11_30 = "UTC-11:30", a2.UTC_MINUS_11 = "UTC-11", a2.UTC_MINUS_10_30 = "UTC-10:30", a2.UTC_MINUS_10 = "UTC-10", a2.UTC_MINUS_9_30 = "UTC-9:30", a2.UTC_MINUS_9 = "UTC-09", a2.UTC_MINUS_8_45 = "UTC-8:45", a2.UTC_MINUS_8 = "UTC-08", a2.UTC_MINUS_7 = "UTC-07", a2.UTC_MINUS_6_30 = "UTC-6:30", a2.UTC_MINUS_6 = "UTC-06", a2.UTC_MINUS_5_45 = "UTC-5:45", a2.UTC_MINUS_5_30 = "UTC-5:30", a2.UTC_MINUS_5 = "UTC-05", a2.UTC_MINUS_4_30 = "UTC-4:30", a2.UTC_MINUS_4 = "UTC-04", a2.UTC_MINUS_3_30 = "UTC-3:30", a2.UTC_MINUS_3 = "UTC-03", a2.UTC_MINUS_2_30 = "UTC-2:30", a2.UTC_MINUS_2 = "UTC-02", a2.UTC_MINUS_1 = "UTC-01", a2.UTC_0 = "UTC+00", a2.UTC_PLUS_1 = "UTC+01", a2.UTC_PLUS_2 = "UTC+02", a2.UTC_PLUS_3 = "UTC+03", a2.UTC_PLUS_3_30 = "UTC+3:30", a2.UTC_PLUS_4 = "UTC+04", a2.UTC_PLUS_4_30 = "UTC+4:30", a2.UTC_PLUS_5 = "UTC+05", a2.UTC_PLUS_5_30 = "UTC+5:30", a2.UTC_PLUS_5_45 = "UTC+5:45", a2.UTC_PLUS_6 = "UTC+06", a2.UTC_PLUS_6_30 = "UTC+6:30", a2.UTC_PLUS_7 = "UTC+07", a2.UTC_PLUS_8 = "UTC+08", a2.UTC_PLUS_8_45 = "UTC+8:45", a2.UTC_PLUS_9 = "UTC+09", a2.UTC_PLUS_9_30 = "UTC+9:30", a2.UTC_PLUS_10 = "UTC+10", a2.UTC_PLUS_10_30 = "UTC+10:30", a2.UTC_PLUS_11 = "UTC+11", a2.UTC_PLUS_11_30 = "UTC+11:30", a2.UTC_PLUS_12 = "UTC+12", a2.UTC_PLUS_12_45 = "UTC+12:45", a2.UTC_PLUS_13 = "UTC+13", a2.UTC_PLUS_13_45 = "UTC+13:45", a2.UTC_PLUS_14 = "UTC+14";
})(i$3 || (i$3 = {}));
var n$2;
(function(a2) {
  a2.AcreTime = "ACT", a2.AfghanistanTime = "AFT", a2.AIXCentralEuropeanTime = "DFT", a2.AlaskaDaylightTime = "AKDT", a2.AlaskaStandardTime = "AKST", a2.AlmaAtaTime = "ALMT", a2.AmazonSummerTime = "AMST", a2.AmazonTime = "AMT", a2.AnadyrTime = "ANAT", a2.AqtobeTime = "AQTT", a2.ArabiaStandardTime = "AST", a2.ArgentinaTime = "ART", a2.ArmeniaTime = "AMT", a2.ASEANCommonTime = "ASEAN", a2.AtlanticDaylightTime = "ADT", a2.AtlanticStandardTime = "AST", a2.AustralianCentralDaylightSavingTime = "ACDT", a2.AustralianCentralStandardTime = "ACST", a2.AustralianCentralWesternStandardTime = "ACWST", a2.AustralianEasternDaylightSavingTime = "AEDT", a2.AustralianEasternStandardTime = "AEST", a2.AustralianEasternTime = "AET", a2.AustralianWesternStandardTime = "AWST", a2.AzerbaijanTime = "AZT", a2.AzoresStandardTime = "AZOT", a2.AzoresSummerTime = "AZOST", a2.BakerIslandTime = "BIT", a2.BangladeshStandardTime = "BST", a2.BhutanTime = "BTT", a2.BoliviaTime = "BOT", a2.BougainvilleStandardTime = "BST", a2.BrasiliaSummerTime = "BRST", a2.BrasiliaTime = "BRT", a2.BritishIndianOceanTime = "BIOT", a2.BritishSummerTime = "BST", a2.BruneiTime = "BNT", a2.CapeVerdeTime = "CVT", a2.CentralAfricaTime = "CAT", a2.CentralDaylightTime = "CDT", a2.CentralEuropeanSummerTime = "CEST", a2.CentralEuropeanTime = "CET", a2.CentralIndonesiaTime = "WITA", a2.CentralStandardTime = "CST", a2.CentralTime = "CT", a2.CentralWesternStandardTime = "CWST", a2.ChamorroStandardTime = "CHST", a2.ChathamDaylightTime = "CHADT", a2.ChathamStandardTime = "CHAST", a2.ChileStandardTime = "CLT", a2.ChileSummerTime = "CLST", a2.ChinaStandardTime = "CST", a2.ChoibalsanStandardTime = "CHOT", a2.ChoibalsanSummerTime = "CHOST", a2.ChristmasIslandTime = "CXT", a2.ChuukTime = "CHUT", a2.ClipptertonIslandStandardTime = "CIST", a2.CocosIslandsTime = "CCT", a2.ColombiaSummerTime = "COST", a2.ColombiaTime = "COT", a2.CookIslandTime = "CKT", a2.CoordinatedUniversalTime = "UTC", a2.CubaDaylightTime = "CDT", a2.CubaStandardTime = "CST", a2.DavisTime = "DAVT", a2.DumontDUrvilleTime = "DDUT", a2.EastAfricaTime = "EAT", a2.EasterIslandStandardTime = "EAST", a2.EasterIslandSummerTime = "EASST", a2.EasternCaribbeanTime = "ECT", a2.EasternDaylightTime = "EDT", a2.EasternEuropeanSummerTime = "EEST", a2.EasternEuropeanTime = "EET", a2.EasternGreenlandSummerTime = "EGST", a2.EasternGreenlandTime = "EGT", a2.EasternIndonesianTime = "WIT", a2.EasternStandardTime = "EST", a2.EasternTime = "ET", a2.EcuadorTime = "ECT", a2.FalklandIslandsSummerTime = "FKST", a2.FalklandIslandsTime = "FKT", a2.FernandoDeNoronhaTime = "FNT", a2.FijiTime = "FJT", a2.FrenchGuianaTime = "GFT", a2.FrenchSouthernAndAntarcticTime = "TFT", a2.FurtherEasternEuropeanTime = "FET", a2.GalapagosTime = "GALT", a2.GambierIslandTime = "GIT", a2.GambierIslandsTime = "GAMT", a2.GeorgiaStandardTime = "GET", a2.GilbertIslandTime = "GILT", a2.GreenwichMeanTime = "GMT", a2.GulfStandardTime = "GST", a2.GuyanaTime = "GYT", a2.HawaiiAleutianDaylightTime = "HDT", a2.HawaiiAleutianStandardTime = "HST", a2.HeardAndMcDonaldIslandsTime = "HMT", a2.HeureAvanceeDEuropeCentraleTime = "HAEC", a2.HongKongTime = "HKT", a2.HovdSummerTime = "HOVST", a2.HovdTime = "HOVT", a2.IndianOceanTime = "IOT", a2.IndianStandardTime = "IST", a2.IndochinaTime = "ICT", a2.InternationalDayLineWestTime = "IDLW", a2.IranDaylightTime = "IRDT", a2.IranStandardTime = "IRST", a2.IrishStandardTime = "IST", a2.IrkutskSummerTime = "IRKST", a2.IrkutskTime = "IRKT", a2.IsraelDaylightTime = "IDT", a2.IsraelStandardTime = "IST", a2.JapanStandardTime = "JST", a2.KaliningradTime = "KALT", a2.KamchatkaTime = "KAMT", a2.KoreaStandardTime = "KST", a2.KosraeTime = "KOST", a2.KrasnoyarskSummerTime = "KRAST", a2.KrasnoyarskTime = "KRAT", a2.KyrgyzstanTime = "KGT", a2.LineIslandsTime = "LINT", a2.KazakhstanStandardTime = "KAST", a2.LordHoweStandardTime = "LHST", a2.LordHoweSummerTime = "LHST", a2.MacquarieIslandStationTime = "MIST", a2.MagadanTime = "MAGT", a2.MalaysiaStandardTime = "MST", a2.MalaysiaTime = "MYT", a2.MaldivesTime = "MVT", a2.MarquesasIslandsTime = "MART", a2.MarshallIslandsTime = "MHT", a2.MauritiusTime = "MUT", a2.MawsonStationTime = "MAWT", a2.MiddleEuropeanSummerTime = "MEDT", a2.MiddleEuropeanTime = "MET", a2.MoscowTime = "MSK", a2.MountainDaylightTime = "MDT", a2.MountainStandardTime = "MST", a2.MyanmarStandardTime = "MMT", a2.NepalTime = "NCT", a2.NauruTime = "NRT", a2.NewCaledoniaTime = "NCT", a2.NewZealandDaylightTime = "NZDT", a2.NewZealandStandardTime = "NZST", a2.NewfoundlandDaylightTime = "NDT", a2.NewfoundlandStandardTime = "NST", a2.NewfoundlandTime = "NT", a2.NiueTime = "NUT", a2.NorfolkIslandTime = "NFT", a2.NovosibirskTime = "NOVT", a2.OmskTime = "OMST", a2.OralTime = "ORAT", a2.PacificDaylightTime = "PDT", a2.PacificStandardTime = "PST", a2.PakistanStandardTime = "PKT", a2.PalauTime = "PWT", a2.PapuaNewGuineaTime = "PGT", a2.ParaguaySummerTime = "PYST", a2.ParaguayTime = "PYT", a2.PeruTime = "PET", a2.PhilippineStandardTime = "PHST", a2.PhilippineTime = "PHT", a2.PhoenixIslandTime = "PHOT", a2.PitcairnTime = "PST", a2.PohnpeiStandardTime = "PONT", a2.ReunionTime = "RET", a2.RotheraResearchStationTime = "ROTT", a2.SaintPierreAndMiquelonDaylightTime = "PMDT", a2.SaintPierreAndMiquelonStandardTime = "PMST", a2.SakhalinIslandTime = "SAKT", a2.SamaraTime = "SAMT", a2.SamoaDaylightTime = "SDT", a2.SamoaStandardTime = "SST", a2.SeychellesTime = "SCT", a2.ShowaStationTime = "SYOT", a2.SingaporeStandardTime = "SST", a2.SingaporeTime = "SGT", a2.SolomonIslandsTime = "SBT", a2.SouthAfricanStandardTime = "SAST", a2.SouthGeorgiaAndTheSouthSandwichIslandsTime = "GST", a2.SrednekolymskTime = "SRET", a2.SriLankaStandardTime = "SLST", a2.SurinameTime = "SRT", a2.TahitiTime = "TAHT", a2.TajikistanTime = "TJT", a2.ThailandStandardTime = "THA", a2.TimorLesteTime = "TLT", a2.TokelauTime = "TKT", a2.TongaTime = "TOT", a2.TurkeyTime = "TRT", a2.TurkmenistanTime = "TMT", a2.TuvaluTime = "TVT", a2.UlaanbaatarStandardTime = "ULAT", a2.UlaanbaatarSummerTime = "ULAST", a2.UruguayStandardTime = "UYT", a2.UruguaySummerTime = "UYST", a2.UzbekistanTime = "UZT", a2.VanuatuTime = "VUT", a2.VenezuelaStandardTime = "VET", a2.VladivostokTime = "VLAT", a2.VolgogradTime = "VOLT", a2.VostokStationTime = "VOST", a2.WakeIslandTime = "WAKT", a2.WestAfricaSummerTime = "WAST", a2.WestAfricaTime = "WAT", a2.WestGreenlandSummerTime = "WGST", a2.WestGreenlandTime = "WGT", a2.WestKazakhstanTime = "WKT", a2.WesternEuropeanSummerTime = "WEDT", a2.WesternEuropeanTime = "WET", a2.WesternIndonesianTime = "WIT", a2.WesternStandardTime = "WST", a2.YakutskTime = "YAKT", a2.YekaterinburgTime = "YEKT";
})(n$2 || (n$2 = {}));
({ dst: { is: false, uses: true }, id: n$2.AcreTime, name: "Acre Time", offset: i$3.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: n$2.AfghanistanTime, name: "Afghanistan Time", offset: i$3.UTC_PLUS_4_30 });
({ dst: { is: false, uses: true }, id: n$2.AIXCentralEuropeanTime, name: "AIX Central European Time", offset: i$3.UTC_PLUS_1 });
({ dst: { is: true, uses: true }, id: n$2.AlaskaDaylightTime, name: "Alaska Daylight Time", offset: i$3.UTC_MINUS_8 });
({ dst: { is: false, uses: true }, id: n$2.AlaskaStandardTime, name: "Alaska Standard Time", offset: i$3.UTC_MINUS_9 });
({ dst: { is: false, uses: true }, id: n$2.AlmaAtaTime, name: "Alma-Ata Time", offset: i$3.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: n$2.AmazonSummerTime, name: "Amazon Summer Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.AmazonTime, name: "Amazon Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: n$2.AnadyrTime, name: "Anadyr Time", offset: i$3.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: n$2.AqtobeTime, name: "Aqtobe Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.ArabiaStandardTime, name: "Arabia Standard Time", offset: i$3.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: n$2.ArgentinaTime, name: "Argentina Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.ArmeniaTime, name: "Armenia Time", offset: i$3.UTC_PLUS_4 });
({ dst: { is: true, uses: true }, id: n$2.AtlanticDaylightTime, name: "Atlantic Daylight Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.AtlanticStandardTime, name: "Atlantic Standard Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: true, uses: true }, id: n$2.AustralianCentralDaylightSavingTime, name: "Australian Central Daylight Saving Time", offset: i$3.UTC_PLUS_10_30 });
({ dst: { is: false, uses: true }, id: n$2.AustralianCentralStandardTime, name: "Australian Central Standard Time", offset: i$3.UTC_PLUS_9_30 });
({ dst: { is: false, uses: true }, id: n$2.AustralianCentralWesternStandardTime, name: "Australian Central Western Standard Time", offset: i$3.UTC_PLUS_8_45 });
({ dst: { is: true, uses: true }, id: n$2.AustralianEasternDaylightSavingTime, name: "Australian Eastern Daylight Saving Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.AustralianEasternStandardTime, name: "Australian Eastern Standard Time", offset: i$3.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: n$2.AustralianEasternTime, name: "Australian Eastern Time", offset: i$3.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: n$2.AustralianWesternStandardTime, name: "Australian Western Standard Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.AzerbaijanTime, name: "Azerbaijan Time", offset: i$3.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: n$2.AzoresStandardTime, name: "Azores Standard Time", offset: i$3.UTC_MINUS_1 });
({ dst: { is: true, uses: true }, id: n$2.AzoresSummerTime, name: "Azores Summer Time", offset: i$3.UTC_0 });
({ dst: { is: false, uses: true }, id: n$2.BakerIslandTime, name: "Baker Island Time", offset: i$3.UTC_MINUS_12 });
({ dst: { is: false, uses: true }, id: n$2.BangladeshStandardTime, name: "Bangladesh Standard Time", offset: i$3.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: n$2.BhutanTime, name: "Bhutan Time", offset: i$3.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: n$2.BoliviaTime, name: "Bolivia Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: n$2.BougainvilleStandardTime, name: "Bougainville Standard Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: true, uses: true }, id: n$2.BrasiliaSummerTime, name: "Brasilia Summer Time", offset: i$3.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: n$2.BrasiliaTime, name: "Brasilia Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.BritishIndianOceanTime, name: "British Indian Ocean Time", offset: i$3.UTC_PLUS_6 });
({ dst: { is: true, uses: true }, id: n$2.BritishSummerTime, name: "British Summer Time", offset: i$3.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: n$2.BruneiTime, name: "Brunei Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.CapeVerdeTime, name: "Cape Verde Time", offset: i$3.UTC_MINUS_1 });
({ dst: { is: false, uses: true }, id: n$2.CentralAfricaTime, name: "Central Africa Time", offset: i$3.UTC_PLUS_2 });
({ dst: { is: true, uses: true }, id: n$2.CentralDaylightTime, name: "Central Daylight Time", offset: i$3.UTC_MINUS_5 });
({ dst: { is: true, uses: true }, id: n$2.CentralEuropeanSummerTime, name: "Central European Summer Time", offset: i$3.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: n$2.CentralEuropeanTime, name: "Central European Time", offset: i$3.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: n$2.CentralIndonesiaTime, name: "Central Indonesia Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.CentralStandardTime, name: "Central Standard Time", offset: i$3.UTC_MINUS_6 });
({ dst: { is: false, uses: true }, id: n$2.CentralTime, name: "Central Time", offset: i$3.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: n$2.CentralWesternStandardTime, name: "Central Western Standard Time", offset: i$3.UTC_PLUS_8_45 });
({ dst: { is: false, uses: true }, id: n$2.ChamorroStandardTime, name: "Chamorro Standard Time", offset: i$3.UTC_PLUS_10 });
({ dst: { is: true, uses: true }, id: n$2.ChathamDaylightTime, name: "Chatham Daylight Time", offset: i$3.UTC_PLUS_13_45 });
({ dst: { is: false, uses: true }, id: n$2.ChathamStandardTime, name: "Chatham Standard Time", offset: i$3.UTC_PLUS_12_45 });
({ dst: { is: false, uses: true }, id: n$2.ChileStandardTime, name: "Chile Standard Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: true, uses: true }, id: n$2.ChileSummerTime, name: "Chile Summer Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.ChinaStandardTime, name: "China Standard Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.ChoibalsanStandardTime, name: "Choibalsan Standard Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: true, uses: true }, id: n$2.ChoibalsanSummerTime, name: "Choibalsan Summer Time", offset: i$3.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: n$2.ChristmasIslandTime, name: "Christmas Island Time", offset: i$3.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: n$2.ChuukTime, name: "Chuuk Time", offset: i$3.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: n$2.ClipptertonIslandStandardTime, name: "Clippterton Island Standard Time", offset: i$3.UTC_MINUS_8 });
({ dst: { is: false, uses: true }, id: n$2.CocosIslandsTime, name: "Cocos Standard Time", offset: i$3.UTC_PLUS_6_30 });
({ dst: { is: true, uses: true }, id: n$2.ColombiaSummerTime, name: "Colombia Summer Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: n$2.ColombiaTime, name: "Colombia Time", offset: i$3.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: n$2.CookIslandTime, name: "Cook Island Time", offset: i$3.UTC_MINUS_10 });
({ dst: { is: false, uses: true }, id: n$2.CoordinatedUniversalTime, name: "Coordinated Universal Time", offset: i$3.UTC_0 });
({ dst: { is: true, uses: true }, id: n$2.CubaDaylightTime, name: "Cuba Daylight Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: n$2.CubaStandardTime, name: "Cuba Standard Time", offset: i$3.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: n$2.DavisTime, name: "Davis Time", offset: i$3.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: n$2.DumontDUrvilleTime, name: "Dumont D'Urville Time", offset: i$3.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: n$2.EastAfricaTime, name: "East Africa Time", offset: i$3.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: n$2.EasterIslandStandardTime, name: "Easter Island Standard Time", offset: i$3.UTC_MINUS_6 });
({ dst: { is: true, uses: true }, id: n$2.EasterIslandSummerTime, name: "Easter Island Summer Time", offset: i$3.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: n$2.EasternCaribbeanTime, name: "Eastern Caribbean Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: true, uses: true }, id: n$2.EasternDaylightTime, name: "Eastern Daylight Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: true, uses: true }, id: n$2.EasternEuropeanSummerTime, name: "Eastern European Summer Time", offset: i$3.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: n$2.EasternEuropeanTime, name: "Eastern European Time", offset: i$3.UTC_PLUS_2 });
({ dst: { is: true, uses: true }, id: n$2.EasternGreenlandSummerTime, name: "Eastern Greenland Summer Time", offset: i$3.UTC_0 });
({ dst: { is: false, uses: true }, id: n$2.EasternGreenlandTime, name: "Eastern Greenland Time", offset: i$3.UTC_MINUS_1 });
({ dst: { is: false, uses: true }, id: n$2.EasternIndonesianTime, name: "Eastern Indonesian Time", offset: i$3.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: n$2.EasternStandardTime, name: "Eastern Standard Time", offset: i$3.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: n$2.EasternTime, name: "Eastern Time", offset: i$3.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: n$2.EcuadorTime, name: "Ecuador Time", offset: i$3.UTC_MINUS_5 });
({ dst: { is: true, uses: true }, id: n$2.FalklandIslandsSummerTime, name: "Falkland Islands Summer Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.FalklandIslandsTime, name: "Falkland Islands Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: n$2.FernandoDeNoronhaTime, name: "Fernando de Noronha Time", offset: i$3.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: n$2.FijiTime, name: "Fiji Time", offset: i$3.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: n$2.FrenchGuianaTime, name: "French Guiana Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.FrenchSouthernAndAntarcticTime, name: "French Southern and Antarctic Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.FurtherEasternEuropeanTime, name: "Further Eastern European Time", offset: i$3.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: n$2.GalapagosTime, name: "Galapagos Time", offset: i$3.UTC_MINUS_6 });
({ dst: { is: false, uses: true }, id: n$2.GambierIslandTime, name: "Gambier Island Time", offset: i$3.UTC_MINUS_9 });
({ dst: { is: false, uses: true }, id: n$2.GambierIslandsTime, name: "Gambier Islands Time", offset: i$3.UTC_MINUS_9 });
({ dst: { is: false, uses: true }, id: n$2.GeorgiaStandardTime, name: "Georgia Standard Time", offset: i$3.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: n$2.GilbertIslandTime, name: "Gilbert Island Time", offset: i$3.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: n$2.GreenwichMeanTime, name: "Greenwich Mean Time", offset: i$3.UTC_0 });
({ dst: { is: false, uses: true }, id: n$2.GulfStandardTime, name: "Gulf Standard Time", offset: i$3.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: n$2.GuyanaTime, name: "Guyana Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: true, uses: true }, id: n$2.HawaiiAleutianDaylightTime, name: "Hawaii-Aleutian Daylight Time", offset: i$3.UTC_MINUS_9 });
({ dst: { is: false, uses: true }, id: n$2.HawaiiAleutianStandardTime, name: "Hawaii-Aleutian Standard Time", offset: i$3.UTC_MINUS_10 });
({ dst: { is: false, uses: true }, id: n$2.HeardAndMcDonaldIslandsTime, name: "Heard and McDonald Islands Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.HongKongTime, name: "Hong Kong Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: true, uses: true }, id: n$2.HovdSummerTime, name: "Hovd Summer Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.HovdTime, name: "Hovd Time", offset: i$3.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: n$2.IndianOceanTime, name: "Indian Ocean Time", offset: i$3.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: n$2.IndianStandardTime, name: "Indian Standard Time", offset: i$3.UTC_PLUS_5_30 });
({ dst: { is: false, uses: true }, id: n$2.IndochinaTime, name: "Indochina Time", offset: i$3.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: n$2.InternationalDayLineWestTime, name: "International Day Line West Time", offset: i$3.UTC_MINUS_12 });
({ dst: { is: true, uses: true }, id: n$2.IranDaylightTime, name: "Iran Daylight Time", offset: i$3.UTC_PLUS_4_30 });
({ dst: { is: false, uses: true }, id: n$2.IranStandardTime, name: "Iran Standard Time", offset: i$3.UTC_PLUS_3_30 });
({ dst: { is: false, uses: true }, id: n$2.IrishStandardTime, name: "Irish Standard Time", offset: i$3.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: n$2.IrkutskTime, name: "Irkutsk Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: true, uses: true }, id: n$2.IsraelDaylightTime, name: "Israel Daylight Time", offset: i$3.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: n$2.IsraelStandardTime, name: "Israel Standard Time", offset: i$3.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: n$2.JapanStandardTime, name: "Japan Standard Time", offset: i$3.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: n$2.KaliningradTime, name: "Kaliningrad Time", offset: i$3.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: n$2.KamchatkaTime, name: "Kamchatka Time", offset: i$3.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: n$2.KoreaStandardTime, name: "Korea Standard Time", offset: i$3.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: n$2.KosraeTime, name: "Kosrae Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.KrasnoyarskTime, name: "Krasnoyarsk Time", offset: i$3.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: n$2.KyrgyzstanTime, name: "Kyrgyzstan Time", offset: i$3.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: n$2.LineIslandsTime, name: "Line Islands Time", offset: i$3.UTC_PLUS_14 });
({ dst: { is: false, uses: true }, id: n$2.LordHoweStandardTime, name: "Lord Howe Standard Time", offset: i$3.UTC_PLUS_10_30 });
({ dst: { is: false, uses: true }, id: n$2.LordHoweSummerTime, name: "Lord Howe Summer Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.MacquarieIslandStationTime, name: "Macquarie Island Station Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.MagadanTime, name: "Magadan Time", offset: i$3.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: n$2.MalaysiaStandardTime, name: "Malaysia Standard Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.MalaysiaTime, name: "Malaysia Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.MaldivesTime, name: "Maldives Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.MarquesasIslandsTime, name: "Marquesas Islands Time", offset: i$3.UTC_PLUS_9_30 });
({ dst: { is: false, uses: true }, id: n$2.MarshallIslandsTime, name: "Marshall Islands Time", offset: i$3.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: n$2.MauritiusTime, name: "Mauritius Time", offset: i$3.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: n$2.MawsonStationTime, name: "Mawson Station Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.MiddleEuropeanSummerTime, name: "Middle European Summer Time", offset: i$3.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: n$2.MiddleEuropeanTime, name: "Middle European Time", offset: i$3.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: n$2.MoscowTime, name: "Moscow Time", offset: i$3.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: n$2.MountainDaylightTime, name: "Mountain Daylight Time", offset: i$3.UTC_MINUS_6 });
({ dst: { is: false, uses: true }, id: n$2.MountainStandardTime, name: "Mountain Standard Time", offset: i$3.UTC_MINUS_7 });
({ dst: { is: false, uses: true }, id: n$2.MyanmarStandardTime, name: "Myanmar Standard Time", offset: i$3.UTC_PLUS_6_30 });
({ dst: { is: false, uses: true }, id: n$2.NepalTime, name: "Nepal Time", offset: i$3.UTC_PLUS_5_45 });
({ dst: { is: false, uses: true }, id: n$2.NauruTime, name: "Nauru Time", offset: i$3.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: n$2.NewCaledoniaTime, name: "New Caledonia Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.NewZealandDaylightTime, name: "New Zealand Daylight Time", offset: i$3.UTC_PLUS_13 });
({ dst: { is: false, uses: true }, id: n$2.NewZealandStandardTime, name: "New Zealand Standard Time", offset: i$3.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: n$2.NewfoundlandDaylightTime, name: "Newfoundland Daylight Time", offset: i$3.UTC_MINUS_2_30 });
({ dst: { is: false, uses: true }, id: n$2.NewfoundlandTime, name: "Newfoundland Time", offset: i$3.UTC_MINUS_3_30 });
({ dst: { is: false, uses: true }, id: n$2.NiueTime, name: "Niue Time", offset: i$3.UTC_MINUS_11 });
({ dst: { is: false, uses: true }, id: n$2.NorfolkIslandTime, name: "Norfolk Island Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.NovosibirskTime, name: "Novosibirsk Time", offset: i$3.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: n$2.OmskTime, name: "Omsk Time", offset: i$3.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: n$2.OralTime, name: "Oral Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.PacificDaylightTime, name: "Pacific Daylight Time", offset: i$3.UTC_MINUS_7 });
({ dst: { is: false, uses: true }, id: n$2.PacificStandardTime, name: "Pacific Standard Time", offset: i$3.UTC_MINUS_8 });
({ dst: { is: false, uses: true }, id: n$2.PakistanStandardTime, name: "Pakistan Standard Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.PalauTime, name: "Palau Time", offset: i$3.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: n$2.PapuaNewGuineaTime, name: "Papua New Guinea Time", offset: i$3.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: n$2.ParaguaySummerTime, name: "Paraguay Summer Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.ParaguayTime, name: "Paraguay Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: n$2.PeruTime, name: "Peru Time", offset: i$3.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: n$2.PhilippineStandardTime, name: "Philippine Standard Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.PhilippineTime, name: "Philippine Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.PhoenixIslandTime, name: "Phoenix Island Time", offset: i$3.UTC_PLUS_13 });
({ dst: { is: false, uses: true }, id: n$2.PitcairnTime, name: "Pitcairn Time", offset: i$3.UTC_MINUS_8 });
({ dst: { is: false, uses: true }, id: n$2.PohnpeiStandardTime, name: "Pohnpei Standard Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.ReunionTime, name: "Reunion Time", offset: i$3.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: n$2.RotheraResearchStationTime, name: "Rothera Research Station Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.SaintPierreAndMiquelonDaylightTime, name: "Saint Pierre and Miquelon Daylight Time", offset: i$3.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: n$2.SaintPierreAndMiquelonStandardTime, name: "Saint Pierre and Miquelon Standard Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.SakhalinIslandTime, name: "Sakhalin Island Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.SamaraTime, name: "Samara Time", offset: i$3.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: n$2.SamoaDaylightTime, name: "Samoa Daylight Time", offset: i$3.UTC_MINUS_10 });
({ dst: { is: false, uses: true }, id: n$2.SamoaStandardTime, name: "Samoa Standard Time", offset: i$3.UTC_MINUS_11 });
({ dst: { is: false, uses: true }, id: n$2.SeychellesTime, name: "Seychelles Time", offset: i$3.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: n$2.ShowaStationTime, name: "Showa Station Time", offset: i$3.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: n$2.SingaporeStandardTime, name: "Singapore Standard Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.SingaporeTime, name: "Singapore Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.SolomonIslandsTime, name: "Solomon Islands Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.SouthAfricanStandardTime, name: "South African Standard Time", offset: i$3.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: n$2.SouthGeorgiaAndTheSouthSandwichIslandsTime, name: "South Georgia and the South Sandwich Islands Time", offset: i$3.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: n$2.SrednekolymskTime, name: "Srednekolymsk Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.SriLankaStandardTime, name: "Sri Lanka Standard Time", offset: i$3.UTC_PLUS_5_30 });
({ dst: { is: false, uses: true }, id: n$2.SurinameTime, name: "Suriname Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.TahitiTime, name: "Tahiti Time", offset: i$3.UTC_MINUS_10 });
({ dst: { is: false, uses: true }, id: n$2.TajikistanTime, name: "Tajikistan Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.ThailandStandardTime, name: "Thailand Standard Time", offset: i$3.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: n$2.TimorLesteTime, name: "Timor-Leste Time", offset: i$3.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: n$2.TokelauTime, name: "Tokelau Time", offset: i$3.UTC_PLUS_13 });
({ dst: { is: false, uses: true }, id: n$2.TongaTime, name: "Tonga Time", offset: i$3.UTC_PLUS_13 });
({ dst: { is: false, uses: true }, id: n$2.TurkeyTime, name: "Turkey Time", offset: i$3.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: n$2.TurkmenistanTime, name: "Turkmenistan Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.TuvaluTime, name: "Tuvalu Time", offset: i$3.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: n$2.UlaanbaatarStandardTime, name: "Ulaanbaatar Standard Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.UlaanbaatarSummerTime, name: "Ulaanbaatar Summer Time", offset: i$3.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: n$2.UruguayStandardTime, name: "Uruguay Standard Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.UruguaySummerTime, name: "Uruguay Summer Time", offset: i$3.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: n$2.UzbekistanTime, name: "Uzbekistan Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.VanuatuTime, name: "Vanuatu Time", offset: i$3.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: n$2.VenezuelaStandardTime, name: "Venezuela Standard Time", offset: i$3.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: n$2.VladivostokTime, name: "Vladivostok Time", offset: i$3.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: n$2.VolgogradTime, name: "Volgograd Time", offset: i$3.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: n$2.VostokStationTime, name: "Vostok Station Time", offset: i$3.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: n$2.WakeIslandTime, name: "Wake Island Time", offset: i$3.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: n$2.WestAfricaSummerTime, name: "West Africa Summer Time", offset: i$3.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: n$2.WestAfricaTime, name: "West Africa Time", offset: i$3.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: n$2.WestGreenlandSummerTime, name: "West Greenland Summer Time", offset: i$3.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: n$2.WestGreenlandTime, name: "West Greenland Time", offset: i$3.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: n$2.WestKazakhstanTime, name: "West Kazakhstan Time", offset: i$3.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: n$2.WesternEuropeanSummerTime, name: "Western European Summer Time", offset: i$3.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: n$2.WesternEuropeanTime, name: "Western European Time", offset: i$3.UTC_0 });
({ dst: { is: false, uses: true }, id: n$2.WesternIndonesianTime, name: "Western Indonesian Time", offset: i$3.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: n$2.WesternStandardTime, name: "Western Standard Time", offset: i$3.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: n$2.YakutskTime, name: "Yakutsk Time", offset: i$3.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: n$2.YekaterinburgTime, name: "Yekaterinburg Time", offset: i$3.UTC_PLUS_5 });
var I;
(function(a2) {
  a2.Africa = "Africa", a2.Americas = "Americas", a2.Asia = "Asia", a2.Europe = "Europe", a2.Oceania = "Oceania", a2.Polar = "Polar";
})(I || (I = {}));
var x$1;
(function(a2) {
  a2.CentralAmerica = "Central America", a2.EasternAsia = "Eastern Asia", a2.EasternEurope = "Eastern Europe", a2.EasternAfrica = "Eastern Africa", a2.MiddleAfrica = "Middle Africa", a2.MiddleEast = "Middle East", a2.NorthernAfrica = "Northern Africa", a2.NorthernAmerica = "Northern America", a2.NorthernEurope = "Northern Europe", a2.Polynesia = "Polynesia", a2.SouthAmerica = "South America", a2.SouthernAfrica = "Southern Africa", a2.SouthernAsia = "Southern Asia", a2.SouthernEurope = "Southern Europe", a2.WesternAfrica = "Western Africa", a2.WesternAsia = "Western Asia", a2.WesternEurope = "Western Europe", a2.WesternAustralia = "Western Australia";
})(x$1 || (x$1 = {}));
({ Afghanistan: { i18n: { calling_codes: [93], currencies: [l$1.AfghanistanAfghani], languages: [e$2.Pashto, e$2.Dari, e$2.Turkmen, e$2.Uzbek], tz: { offsets: [i$3.UTC_PLUS_4_30], regions: [t$1.AsiaKabul], timezones: [n$2.AfghanistanTime] } }, id: r$2.Afghanistan, info: { flag: { emoji: "\u{1F1E6}\u{1F1EB}", emoji_unicode: "U+1F1E6 U+1F1EB", svg: "https://www.countryflags.io/af/flat/64.svg" }, tld: [".af"] }, iso: { alpha2: r$2.Afghanistan, alpha3: "AFG", numeric: "004" }, name: { alt_spellings: ["AF", "Af\u0121\u0101nist\u0101n"], demonym: "Afghan", native: { endonym: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646" }, official: "Islamic Republic of Afghanistan", short: "Afghanistan", translations: { [e$2.Afrikaans]: "Afghanistan", [e$2.Albanian]: "Shqip\xEBri", [e$2.Amharic]: "\u12A0\u134D\u130B\u1295", [e$2.Arabic]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", [e$2.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576", [e$2.Azerbaijani]: "Az\u0259rbaycan", [e$2.Bashkir]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Basque]: "Afganist\xE1n", [e$2.Belarusian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Bengali]: "\u0986\u09AB\u0997\u09BE\u09A8\u09BF\u09B8\u09CD\u09A4\u09BE\u09A8", [e$2.Berber]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", [e$2.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F51\u0F7C\u0F53\u0F0B\u0F63\u0F7A\u0F0B\u0F66\u0F90\u0F51\u0F0B\u0F46\u0F0D", [e$2.Bosnian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Breton]: "Afganistan", [e$2.Bulgarian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Burmese]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A", [e$2.Catalan]: "Afganistan", [e$2.Chinese]: "\u963F\u5BCC\u6C57", [e$2.Croatian]: "Afganistan", [e$2.Czech]: "Afganistan", [e$2.Danish]: "Afghanistan", [e$2.Dutch]: "Afghanistan", [e$2.English]: "Afghanistan", [e$2.Esperanto]: "Afganistan", [e$2.Estonian]: "Afganistan", [e$2.Finnish]: "Afghanistan", [e$2.French]: "Afghanistan", [e$2.Frisian]: "Afghanistan", [e$2.Galician]: "Afganist\xE1n", [e$2.Georgian]: "\u10D0\u10D5\u10E6\u10D0\u10DC\u10D4\u10D7\u10D8", [e$2.German]: "Afghanistan", [e$2.Greenlandic]: "Afghanistan", [e$2.Greek]: "\u0391\u03C6\u03B3\u03B1\u03BD\u03B9\u03C3\u03C4\u03AC\u03BD", [e$2.Gujarati]: "\u0A85\u0AAB\u0A97\u0ABE\u0AA8\u0ABF\u0AB8\u0ACD\u0AA4\u0ABE\u0AA8", [e$2.Haitian]: "Afghanistan", [e$2.Hausa]: "Afghanistan", [e$2.Hebrew]: "\u05D0\u05E4\u05D2\u05E0\u05D9\u05E1\u05D8\u05DF", [e$2.Hindi]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", [e$2.Hungarian]: "Afganistan", [e$2.Icelandic]: "Afghanistan", [e$2.Igbo]: "Afghanistan", [e$2.Indonesian]: "Afghanistan", [e$2.Irish]: "Afghanistan", [e$2.Italian]: "Afghanistan", [e$2.Japanese]: "\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3", [e$2.Javanese]: "Afghanistan", [e$2.Kannada]: "\u0C85\u0CAB\u0C97\u0CBE\u0CA8\u0CBF\u0CB8\u0CCD\u0CA4\u0CBE\u0CA8", [e$2.Kazakh]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Khmer]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17B7\u1780", [e$2.Korean]: "\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4", [e$2.Kurdish]: "Afghanistan", [e$2.Kyrgyz]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Lao]: "\u0EAD\u0EB2\u0E9F\u0EB2\u0EA5\u0EBD\u0E99", [e$2.Latin]: "Afghanistan", [e$2.Latvian]: "Afghanistan", [e$2.Lithuanian]: "Afganistanas", [e$2.Luxembourgish]: "Afghanistan", [e$2.Macedonian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Malagasy]: "Afghanistan", [e$2.Malay]: "Afghanistan", [e$2.Malayalam]: "\u0D05\u0D2B\u0D17\u0D3E\u0D28\u0D3F\u0D38\u0D4D\u0D24\u0D3E\u0D28", [e$2.Maltese]: "Afghanistan", [e$2.Maori]: "Afghanistan", [e$2.Marathi]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", [e$2.Mongolian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Nepali]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", [e$2.Norwegian]: "Afghanistan", [e$2.Pashto]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", [e$2.Persian]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", [e$2.Polish]: "Afganistan", [e$2.Portuguese]: "Afghanistan", [e$2.Punjabi]: "Afghanistan", [e$2.Romanian]: "Afghanistan", [e$2.Polish]: "Afganistan", [e$2.Russian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Samoan]: "Afghanistan", [e$2.Sanskrit]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", [e$2.Scots]: "Afghanistan", [e$2.Serbian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Sesotho]: "Afghanistan", [e$2.Shona]: "Afghanistan", [e$2.Sindhi]: "Afghanistan", [e$2.Sinhala]: "\u0D86\u0D9C\u0DCA\u200D\u0DBB\u0DDC\u0D9A\u0DCA\u0D9A\u0DD2\u0DBA\u0DCF\u0DC0", [e$2.Slovak]: "Afganistan", [e$2.Slovenian]: "Afganistan", [e$2.Somali]: "Afghanistan", [e$2.Spanish]: "Afganist\xE1n", [e$2.Sudanese]: "Afghanistan", [e$2.Swahili]: "Afghanistan", [e$2.Swedish]: "Afghanistan", [e$2.Tagalog]: "Afghanistan", [e$2.Tajik]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Tatar]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Tamil]: "\u0B86\u0BAA\u0BCD\u0BAA\u0B95\u0BBE\u0BA9\u0BBF\u0BB8\u0BCD\u0BA4\u0BBE\u0BA9\u0BCD", [e$2.Telugu]: "\u0C06\u0C2B\u0C4D\u0C18\u0C28\u0C3F\u0C38\u0C4D\u0C24\u0C3E\u0C28\u0C4D", [e$2.Thai]: "\u0E2D\u0E31\u0E1F\u0E01\u0E32\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19", [e$2.Tibetan]: "\u0F68\u0F55\u0F0B\u0F42\u0F7A\u0F0B\u0F53\u0F72\u0F66\u0F72\u0F0B\u0F4F\u0F7A\u0F53\u0F66\u0F72\u0F0D", [e$2.Turkish]: "Afganistan", [e$2.Ukrainian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Urdu]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", [e$2.Uzbek]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e$2.Vietnamese]: "Afghanistan", [e$2.Welsh]: "Afghanistan", [e$2.Xhosa]: "Afghanistan", [e$2.Yiddish]: "Afghanistan", [e$2.Yoruba]: "Afghanistan", [e$2.Zulu]: "Afghanistan" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Kabul", total: 341e5 } }, geography: { area: 652230, region: I.Asia, sub_region: x$1.SouthernAsia }, government: { capital: "Kabul", type: "Islamic Emirate" } } }, Albania: { i18n: { calling_codes: [355], currencies: [l$1.AlbaniaLek], languages: [e$2.Albanian, e$2.Greek, e$2.Turkish], tz: { offsets: [i$3.UTC_PLUS_1], regions: [t$1.EuropeBrussels], timezones: [n$2.CentralEuropeanTime] } }, id: r$2.Albania, info: { flag: { emoji: "\u{1F1E6}\u{1F1F1}", emoji_unicode: "U+1F1E6 U+1F1F1", svg: "https://www.countryflags.io/al/flat/64.svg" }, tld: [".al"] }, iso: { alpha2: r$2.Albania, alpha3: "ALB", numeric: "008" }, name: { alt_spellings: ["AL", "Shqip\xEBri", "Shqip\xEBria", "Shqipnia"], demonym: "Albanian", native: { endonym: "Shqip\xEBri" }, official: "Republic of Albania", short: "Albania", translations: { [e$2.Afrikaans]: "Albania", [e$2.Albanian]: "Albania", [e$2.Amharic]: "\u12A0\u120D\u1263\u1295\u12EB", [e$2.Arabic]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627", [e$2.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576", [e$2.Azerbaijani]: "Az\u0259rbaycan", [e$2.Bashkir]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e$2.Basque]: "Albania", [e$2.Belarusian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e$2.Bengali]: "\u0986\u09B2\u09AC\u09BE\u09A8\u09BF\u09AF\u09BC\u09BE", [e$2.Berber]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627", [e$2.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B", [e$2.Bosnian]: "Albanija", [e$2.Breton]: "Albania", [e$2.Bulgarian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e$2.Burmese]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A", [e$2.Catalan]: "Alb\xE0nia", [e$2.Chinese]: "\u963F\u5C14\u5DF4\u5C3C\u4E9A", [e$2.Croatian]: "Albanija", [e$2.Czech]: "Alb\xE1nie", [e$2.Danish]: "Albanien", [e$2.Dutch]: "Albani\xEB", [e$2.English]: "Albania", [e$2.Esperanto]: "Albanio", [e$2.Estonian]: "Albaania", [e$2.Finnish]: "Albania", [e$2.French]: "Albanie", [e$2.Frisian]: "Albani\xEB", [e$2.Galician]: "Alb\xE2nia", [e$2.Georgian]: "\u10D0\u10DA\u10D1\u10D0\u10DC\u10D8\u10D0", [e$2.German]: "Albanien", [e$2.Greenlandic]: "Albania", [e$2.Greek]: "\u0391\u03BB\u03B2\u03B1\u03BD\u03AF\u03B1", [e$2.Gujarati]: "\u0A85\u0AB2\u0AAC\u0AA8\u0ABF\u0AAF\u0ABE", [e$2.Haitian]: "Albanais", [e$2.Hausa]: "Albania", [e$2.Hebrew]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05D4", [e$2.Hindi]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E", [e$2.Hungarian]: "Alb\xE1nia", [e$2.Icelandic]: "Alb\xFAnir", [e$2.Igbo]: "Albania", [e$2.Indonesian]: "Albania", [e$2.Irish]: "Alb\xE1in", [e$2.Italian]: "Albania", [e$2.Japanese]: "\u30A2\u30EB\u30D0\u30CB\u30A2", [e$2.Javanese]: "Albania", [e$2.Kannada]: "\u0C85\u0CB2\u0CCD\u0CAC\u0CBE\u0CA8\u0CBF\u0CAF\u0CBE", [e$2.Kazakh]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e$2.Khmer]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17C1\u179F\u17CA\u17B8", [e$2.Korean]: "\uC54C\uBC14\uB2C8\uC544", [e$2.Kurdish]: "\u0622\u0644\u0628\u0627\u0646\u06CC\u0627", [e$2.Kyrgyz]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e$2.Lao]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E99\u0EB5", [e$2.Latin]: "Albania", [e$2.Latvian]: "Alb\u0101nija", [e$2.Lithuanian]: "Albanija", [e$2.Luxembourgish]: "Albani\xEB", [e$2.Macedonian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430", [e$2.Malagasy]: "Albania", [e$2.Malay]: "Albania", [e$2.Malayalam]: "\u0D05\u0D32\u0D4D\u0D2C\u0D3E\u0D28\u0D3F\u0D2F\u0D3E", [e$2.Maltese]: "Albania", [e$2.Maori]: "Albania", [e$2.Marathi]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E", [e$2.Mongolian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e$2.Nepali]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E", [e$2.Norwegian]: "Albania", [e$2.Pashto]: "\u0627\u0627\u0644\u0628\u0627\u0646\u06CC", [e$2.Persian]: "\u0622\u0644\u0628\u0627\u0646\u06CC", [e$2.Polish]: "Albania", [e$2.Portuguese]: "Alb\xE2nia", [e$2.Punjabi]: "\u0A05\u0A32\u0A2C\u0A28\u0A40\u0A06", [e$2.Romanian]: "Alb\u0103n", [e$2.Russian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e$2.Samoan]: "Albania", [e$2.Sanskrit]: "Albani", [e$2.Scots]: "Alb\xE0inia", [e$2.Serbian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430", [e$2.Sesotho]: "Albania", [e$2.Shona]: "Albania", [e$2.Sindhi]: "Albania", [e$2.Sinhala]: "\u0D87\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA", [e$2.Slovak]: "Alb\xE1nsko", [e$2.Slovenian]: "Albanija", [e$2.Somali]: "Albania", [e$2.Spanish]: "Albania", [e$2.Sudanese]: "Albania", [e$2.Swahili]: "Albania", [e$2.Swedish]: "Albanien", [e$2.Tagalog]: "Albania", [e$2.Tajik]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e$2.Tamil]: "\u0B85\u0BB2\u0BCD\u0BAA\u0BBE\u0BA9\u0BBF\u0BAF\u0BBE", [e$2.Tatar]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e$2.Telugu]: "\u0C05\u0C32\u0C4D\u0C2C\u0C3E\u0C28\u0C3F\u0C2F\u0C3E", [e$2.Thai]: "\u0E2D\u0E31\u0E25\u0E41\u0E1A\u0E19\u0E34\u0E19\u0E35", [e$2.Tibetan]: "\u0F68\u0F63\u0F0B\u0F56\u0F72\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F72", [e$2.Turkish]: "Albaniye", [e$2.Ukrainian]: "\u0410\u043B\u0431\u0430\u043D\u0456\u044F", [e$2.Urdu]: "\u0622\u0644\u0628\u0627\u0646\u06CC", [e$2.Uzbek]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e$2.Vietnamese]: "Albanie", [e$2.Welsh]: "Albania", [e$2.Xhosa]: "Albania", [e$2.Yiddish]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05E9", [e$2.Yoruba]: "Albania", [e$2.Zulu]: "Albania" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Tirana", total: 2853e3 } }, geography: { area: 28748, region: I.Europe, sub_region: x$1.SouthernEurope }, government: { capital: "Tirana", type: "Republic" } } }, Algeria: { i18n: { calling_codes: [213], currencies: [l$1.AlgeriaDinar], languages: [e$2.Arabic, e$2.French, e$2.Berber, e$2.Tamazight], tz: { offsets: [i$3.UTC_PLUS_1, i$3.UTC_PLUS_2], regions: [t$1.AfricaAlgiers], timezones: [n$2.CentralEuropeanTime] } }, id: r$2.Algeria, info: { flag: { emoji: "\u{1F1E9}\u{1F1FF}", emoji_unicode: "U+1F1E9 U+1F1FF", svg: "https://www.countryflags.io/dz/flat/64.svg" }, tld: [".dz", ".\u062C\u0632\u0627\u0626\u0631"] }, iso: { alpha2: r$2.Algeria, alpha3: "DZA", numeric: "012" }, name: { alt_spellings: ["DZ", "Dzayer", "Alg\xE9rie"], demonym: "Algerian", native: { endonym: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631" }, official: "People's Democratic Republic of Algeria", short: "Algeria", translations: { [e$2.Afrikaans]: "Algerije", [e$2.Albanian]: "Algeria", [e$2.Amharic]: "\u12A0\u120D\u1300\u122D\u1235", [e$2.Arabic]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631", [e$2.Armenian]: "\u0531\u056C\u0563\u0578\u0580\u056B\u0561", [e$2.Azerbaijani]: "Az\u0259rbaycan", [e$2.Bashkir]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Basque]: "Algeria", [e$2.Belarusian]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Bengali]: "\u0986\u09B2\u099C\u09C7\u09B0", [e$2.Berber]: "\u062C\u0632\u0627\u0626\u0631", [e$2.Bhutani]: "\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41", [e$2.Bosnian]: "Al\u017Eir", [e$2.Breton]: "Algeria", [e$2.Bulgarian]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Burmese]: "\u1021\u102C\u101B\u1015\u103A", [e$2.Catalan]: "Alg\xE8ria", [e$2.Chinese]: "\u963F\u5C14\u53CA\u5229\u4E9A", [e$2.Croatian]: "Al\u017Eir", [e$2.Czech]: "Al\u017E\xEDrsko", [e$2.Danish]: "Algeriet", [e$2.Dutch]: "Algerije", [e$2.English]: "Algeria", [e$2.Esperanto]: "Al\u011Derio", [e$2.Estonian]: "Al\u017Eira", [e$2.Finnish]: "Algeria", [e$2.French]: "Alg\xE9rie", [e$2.Frisian]: "Algeri\xEB", [e$2.Galician]: "Alxeria", [e$2.Georgian]: "\u10D0\u10DA\u10D2\u10D8\u10E3\u10E0\u10D8", [e$2.German]: "Algerien", [e$2.Greenlandic]: "Algeria", [e$2.Greek]: "\u0391\u03BB\u03B3\u03B5\u03C1\u03AF\u03B1", [e$2.Gujarati]: "\u0A86\u0AB2\u0AC7\u0A97\u0AB0\u0ABF\u0AAF\u0ABE", [e$2.Haitian]: "Alg\xE9rie", [e$2.Hausa]: "Algeria", [e$2.Hebrew]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4", [e$2.Hindi]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", [e$2.Hungarian]: "Alg\xE1r", [e$2.Icelandic]: "Alg\xFAra", [e$2.Igbo]: "Algeria", [e$2.Indonesian]: "Aljir", [e$2.Irish]: "Alg\xE9rie", [e$2.Italian]: "Algeria", [e$2.Japanese]: "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2", [e$2.Javanese]: "Aljir", [e$2.Kannada]: "\u0C86\u0CB2\u0CCD\u0C97\u0CC7\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD", [e$2.Kazakh]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Khmer]: "\u17A2\u17B6\u179B\u17CB\u1794\u17B6\u1793\u17B8", [e$2.Korean]: "\uC54C\uC81C\uB9AC", [e$2.Kurdish]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631", [e$2.Kyrgyz]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Lao]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E88\u0EB5\u0E99", [e$2.Latin]: "Algeria", [e$2.Latvian]: "Al\u017E\u012Brija", [e$2.Lithuanian]: "Al\u017Eyras", [e$2.Luxembourgish]: "Algeria", [e$2.Macedonian]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Malagasy]: "Alg\xE9rie", [e$2.Malay]: "Aljir", [e$2.Malayalam]: "\u0D06\u0D32\u0D02\u0D17\u0D47\u0D30\u0D3F\u0D2F\u0D7B", [e$2.Maltese]: "Alg\xE9rie", [e$2.Maori]: "Algeria", [e$2.Marathi]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", [e$2.Mongolian]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Nepali]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", [e$2.Norwegian]: "Algeria", [e$2.Pashto]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631", [e$2.Persian]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0639\u0631\u0628", [e$2.Polish]: "Algieria", [e$2.Portuguese]: "Alg\xE9ria", [e$2.Punjabi]: "\u0A06\u0A32\u0A47\u0A17\u0A40\u0A06", [e$2.Romanian]: "Algeria", [e$2.Russian]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Samoan]: "Algeria", [e$2.Sanskrit]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", [e$2.Scots]: "Algeria", [e$2.Serbian]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Sesotho]: "Algeria", [e$2.Shona]: "Algeria", [e$2.Sindhi]: "Algeria", [e$2.Sinhala]: "\u0D86\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA", [e$2.Slovak]: "Al\u017E\xEDrsko", [e$2.Slovenian]: "Al\u017Eir", [e$2.Somali]: "Algeria", [e$2.Spanish]: "Algeria", [e$2.Sudanese]: "Aljir", [e$2.Swahili]: "Aljir", [e$2.Swedish]: "Algeriet", [e$2.Tagalog]: "Algeria", [e$2.Tajik]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Tamil]: "\u0B86\u0BB2\u0BCD\u0B95\u0BC7\u0BB0\u0BBF\u0BAF\u0BBE", [e$2.Tatar]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Telugu]: "\u0C06\u0C32\u0C4D\u0C17\u0C47\u0C30\u0C3F\u0C2F\u0C3E", [e$2.Thai]: "\u0E2D\u0E32\u0E23\u0E32\u0E01\u0E2D\u0E19", [e$2.Tibetan]: "\u0F68\u0F63\u0F9F\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F61\u0F72", [e$2.Turkish]: "Cezayir", [e$2.Ukrainian]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Urdu]: "\u0622\u0644\u062C\u06CC\u0631", [e$2.Uzbek]: "\u0410\u043B\u0436\u0438\u0440", [e$2.Vietnamese]: "\u1EA2\u0301\u1EA1\u1EA3\u1EAD\u1EB5", [e$2.Welsh]: "Algeria", [e$2.Xhosa]: "Algeria", [e$2.Yiddish]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4", [e$2.Yoruba]: "Algeria", [e$2.Zulu]: "Algeria" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Oran", total: 371e5 } }, geography: { area: 2381740, region: I.Africa, sub_region: x$1.NorthernAfrica }, government: { capital: "Algiers", type: "Republic" } } }, AmericanSamoa: { i18n: { calling_codes: [1684], currencies: [l$1.AmericanSamoaTala], languages: [e$2.English, e$2.Samoan], tz: { offsets: [i$3.UTC_MINUS_11], regions: [t$1.PacificSamoa], timezones: [n$2.SamoaStandardTime] } }, id: r$2.AmericanSamoa, info: { flag: { emoji: "\u{1F1E6}\u{1F1F8}", emoji_unicode: "U+1F1E6 U+1F1F8", svg: "https://www.countryflags.io/as/flat/64.svg" }, tld: [".as"] }, iso: { alpha2: r$2.AmericanSamoa, alpha3: "ASM", numeric: "016" }, name: { alt_spellings: ["AS", "Amerika S\u0101moa", "Amelika S\u0101moa", "S\u0101moa Amelika"], demonym: "American Samoan", native: { endonym: "American Samoa" }, official: "American Samoa", short: "American Samoa", translations: { [e$2.Afrikaans]: "Amerikaans Samoa", [e$2.Albanian]: "Samoa Amerikane", [e$2.Amharic]: "\u1233\u121E\u12A0\u122D", [e$2.Arabic]: "\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629", [e$2.Armenian]: "\u054D\u0561\u0570\u0561\u0574\u0561\u056C\u056B\u0561", [e$2.Azerbaijani]: "Samoa Amerikana", [e$2.Bashkir]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0421\u0430\u043C\u043E\u0430", [e$2.Basque]: "Samoa Amerikana", [e$2.Belarusian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430", [e$2.Bengali]: "\u0986\u09AE\u09C7\u09B0\u09BF\u0995\u09BE\u09A8 \u09B8\u09BE\u09AE\u09CB\u09AF\u09BC\u09BE", [e$2.Berber]: "\u062C\u0632\u0631 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629", [e$2.Bhutani]: "\u0F68\u0F62\u0F92\u0FB1\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F58\u0F44\u0F66\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F66\u0F90\u0F56\u0F66\u0F0B\u0F62\u0F92\u0FB1\u0F74\u0F51\u0F0B\u0F46\u0F7A\u0F53\u0F0B\u0F54\u0F7C\u0F0D", [e$2.Bosnian]: "Ameri\u010Dka Samoa", [e$2.Breton]: "Samoa Amerikan", [e$2.Bulgarian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", [e$2.Burmese]: "\u1021\u1019\u1039\u1038\u1019\u101B\u102D\u102F\u1018\u102C\u101E\u102C", [e$2.Catalan]: "Samoa Americana", [e$2.Chinese]: "\u7F8E\u5C5E\u8428\u6469\u4E9A", [e$2.Croatian]: "Ameri\u010Dka Samoa", [e$2.Czech]: "Americk\xE1 Samoa", [e$2.Danish]: "Amerikansk Samoa", [e$2.Dutch]: "Amerikaans Samoa", [e$2.English]: "American Samoa", [e$2.Esperanto]: "Samoa Amerika", [e$2.Estonian]: "Ameerika Samoa", [e$2.Finnish]: "Amerikka Samoa", [e$2.French]: "American Samoa", [e$2.Frisian]: "Amerikaans Samoa", [e$2.Galician]: "Samoa Americana", [e$2.Georgian]: "\u10D0\u10DB\u10D4\u10E0\u10D8\u10D9\u10D8\u10E1 \u10E1\u10D0\u10DB\u10DD\u10D0", [e$2.German]: "Amerikanisch-Samoa", [e$2.Greenlandic]: "Amerikaans Samoa", [e$2.Greek]: "\u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AE \u03A3\u03B1\u03BC\u03CC\u03B1", [e$2.Gujarati]: "\u0A86\u0AAE\u0AC7\u0AB0\u0ABF\u0A95\u0AA8 \u0AB8\u0ABE\u0AAE\u0ACB\u0AAF\u0ABE", [e$2.Haitian]: "Amerikaans Samoa", [e$2.Hausa]: "Amerikaans Samoa", [e$2.Hebrew]: "\u05D0\u05DE\u05E8\u05D9\u05E7\u05E0\u05D9\u05D4 \u05E1\u05DE\u05D5\u05D0\u05D4", [e$2.Hindi]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", [e$2.Hungarian]: "Amerikai Szamoa", [e$2.Icelandic]: "Amerikai Szamoa", [e$2.Igbo]: "Ikina Amerika", [e$2.Indonesian]: "Samoa Amerika", [e$2.Irish]: "Samoa Amerikana", [e$2.Italian]: "Samoa Americane", [e$2.Japanese]: "\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2", [e$2.Javanese]: "Samoa Amerika", [e$2.Kannada]: "\u0C85\u0CAE\u0CC7\u0CB0\u0CBF\u0C95\u0CA8\u0CCD \u0CB8\u0CAE\u0CCB\u0C86", [e$2.Kazakh]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430", [e$2.Khmer]: "\u17A2\u17B6\u1798\u17C9\u17B6\u179A\u17B8\u179F\u17D2\u178F\u1784\u17CB", [e$2.Korean]: "\uC544\uBA54\uB9AC\uCE74 \uC0AC\uBAA8\uC544", [e$2.Kurdish]: "Amerikaans Samoa", [e$2.Kyrgyz]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430", [e$2.Lao]: "\u0EAD\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94", [e$2.Latin]: "Samoa Amerikana", [e$2.Latvian]: "Amerikas Samoa", [e$2.Lithuanian]: "Amerikos Samoa", [e$2.Luxembourgish]: "Amerikaans Samoa", [e$2.Macedonian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", [e$2.Malagasy]: "Samoa Amerika", [e$2.Malay]: "Amerika Samo", [e$2.Malayalam]: "\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D28\u0D4D\u0D31\u0D4D \u0D38\u0D2E\u0D4B\u0D06", [e$2.Maltese]: "Samoa Amerika", [e$2.Maori]: "Samoa Amerika", [e$2.Marathi]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", [e$2.Mongolian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430", [e$2.Nepali]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", [e$2.Norwegian]: "Amerikansk Samoa", [e$2.Pashto]: "\u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627", [e$2.Persian]: "\u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627", [e$2.Polish]: "Samoa Ameryka\u0144skie", [e$2.Portuguese]: "Samoa Americana", [e$2.Punjabi]: "\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40 \u0A38\u0A3E\u0A2E\u0A4B\u0A06", [e$2.Romanian]: "Samoa americane", [e$2.Russian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430", [e$2.Samoan]: "Samoa Amerika", [e$2.Sanskrit]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", [e$2.Scots]: "Amerikaans Samoa", [e$2.Serbian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", [e$2.Sesotho]: "Amerikaans Samoa", [e$2.Shona]: "Amerikaans Samoa", [e$2.Sindhi]: "Amerikaans Samoa", [e$2.Sinhala]: "\u0D86\u0DBB\u0DCA\u0DA2\u0DD2\u0DB1\u0DCF\u0DB1\u0DD4 \u0DC3\u0DD0\u0DB8\u0DD0\u0DBD\u0DCA\u0DC0", [e$2.Slovak]: "Amerikaans Samoa", [e$2.Slovenian]: "Amerikaans Samoa", [e$2.Somali]: "Amerikaans Samoa", [e$2.Spanish]: "Samoa Americana", [e$2.Sudanese]: "Amerikaans Samoa", [e$2.Swahili]: "Amerikaans Samoa", [e$2.Swedish]: "Amerikansk Samoa", [e$2.Tagalog]: "Amerikaans Samoa", [e$2.Tajik]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430", [e$2.Tamil]: "\u0B85\u0BAE\u0BC6\u0BB0\u0BBF\u0B95\u0BCD \u0B9A\u0BAE\u0BCB\u0BB5\u0BBE", [e$2.Tatar]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430", [e$2.Telugu]: "\u0C05\u0C2E\u0C46\u0C30\u0C3F\u0C15\u0C4D \u0C38\u0C2E\u0C4B\u0C35\u0C3E", [e$2.Thai]: "\u0E2A\u0E2B\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E41\u0E2D\u0E1F\u0E23\u0E34\u0E01\u0E32", [e$2.Tibetan]: "\u0F68\u0F7A\u0F0B\u0F62\u0F72\u0F0B\u0F40\u0F0B\u0F68\u0F7A\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F74\u0F0B\u0F61\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F40", [e$2.Turkish]: "Amerikan Samoas\u0131", [e$2.Ukrainian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", [e$2.Urdu]: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627", [e$2.Uzbek]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430", [e$2.Vietnamese]: "Amerikaans Samoa", [e$2.Welsh]: "Amerikaans Samoa", [e$2.Xhosa]: "Amerikaans Samoa", [e$2.Yiddish]: "Amerikaans Samoa", [e$2.Yoruba]: "Amerikaans Samoa", [e$2.Zulu]: "Amerikaans Samoa" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Pago Pago", total: 558e3 } }, geography: { area: 199, region: I.Oceania, sub_region: x$1.Polynesia }, government: { capital: "Pago Pago", type: "Nonmetropolitan Territory of the US" } } }, Andorra: { i18n: { calling_codes: [376], currencies: [l$1.Euro], languages: [e$2.Catalan, e$2.Spanish], tz: { offsets: [i$3.UTC_PLUS_1, i$3.UTC_PLUS_2], regions: [t$1.EuropeAndorra], timezones: [n$2.CentralEuropeanTime] } }, id: r$2.Andorra, info: { flag: { emoji: "\u{1F1E6}\u{1F1F4}", emoji_unicode: "U+1F1E6 U+1F1F4", svg: "https://www.countryflags.io/ad/flat/64.svg" }, tld: [".ad"] }, iso: { alpha2: r$2.Andorra, alpha3: "AND", numeric: "020" }, name: { alt_spellings: ["AD", "Principality of Andorra", "Principat d'Andorra"], demonym: "Andorran", native: { endonym: "Andorra" }, official: "Principality of Andorra", short: "Andorra", translations: { [e$2.Afrikaans]: "Andorra", [e$2.Albanian]: "Andorra", [e$2.Amharic]: "\u12A0\u1295\u12F6\u122B", [e$2.Arabic]: "\u0623\u0646\u062F\u0648\u0631\u0627", [e$2.Armenian]: "\u0540\u0561\u0576\u0564\u0561\u0580\u0561\u057E\u0561\u0575\u0584", [e$2.Azerbaijani]: "Andorra", [e$2.Bashkir]: "\u0410\u043D\u0434\u043E\u0440\u0430", [e$2.Basque]: "Andorra", [e$2.Belarusian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Bengali]: "\u0985\u09A8\u09CD\u09A1\u09CB\u09B0\u09BE", [e$2.Berber]: "\u0623\u0646\u062F\u0648\u0631\u0627", [e$2.Bhutani]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B", [e$2.Bosnian]: "Andora", [e$2.Breton]: "Andorra", [e$2.Bulgarian]: "\u0410\u043D\u0434\u043E\u0440\u0430", [e$2.Burmese]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102D\u102F\u1038", [e$2.Catalan]: "Andorra", [e$2.Chinese]: "\u5B89\u9053\u5C14", [e$2.Croatian]: "Andora", [e$2.Czech]: "Andorra", [e$2.Danish]: "Andorra", [e$2.Dutch]: "Andorra", [e$2.English]: "Andorra", [e$2.Esperanto]: "Andora", [e$2.Estonian]: "Andorra", [e$2.Finnish]: "Andorra", [e$2.French]: "Andorra", [e$2.Frisian]: "Andorra", [e$2.Galician]: "Andorra", [e$2.Georgian]: "\u12A0\u1295\u12F6\u122B", [e$2.German]: "Andorra", [e$2.Greek]: "\u0391\u03BD\u03B4\u03CC\u03C1\u03B1", [e$2.Hebrew]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4", [e$2.Hindi]: "\u0905\u0902\u0921\u094B\u0930\u093E", [e$2.Hungarian]: "Andorra", [e$2.Icelandic]: "Andorra", [e$2.Igbo]: "Andorra", [e$2.Indonesian]: "Andorra", [e$2.Irish]: "Andorra", [e$2.Italian]: "Andorra", [e$2.Japanese]: "\u30A2\u30F3\u30C9\u30E9", [e$2.Javanese]: "Andorra", [e$2.Kannada]: "\u0C85\u0C82\u0CA1\u0CCB\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD", [e$2.Kazakh]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Khmer]: "\u17A2\u1784\u17CB\u178A\u17B6\u179A\u17B6", [e$2.Korean]: "\uC548\uB3C4\uB77C", [e$2.Kurdish]: "Andorra", [e$2.Kyrgyz]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Lao]: "\u0EAD\u0EB1\u0E99\u0EC2\u0E94\u0EA3\u0EB2", [e$2.Latin]: "Andorra", [e$2.Latvian]: "Andora", [e$2.Lithuanian]: "Andora", [e$2.Luxembourgish]: "Andorra", [e$2.Macedonian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Malagasy]: "Andorra", [e$2.Malay]: "Andorra", [e$2.Malayalam]: "\u0D05\u0D02\u0D21\u0D4B\u0D30\u0D3F\u0D2F\u0D28\u0D4D", [e$2.Maltese]: "Andorra", [e$2.Maori]: "Andorra", [e$2.Marathi]: "\u0905\u0902\u0921\u094B\u0930\u093E", [e$2.Mongolian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Nepali]: "\u0905\u0902\u0921\u094B\u0930\u093E", [e$2.Norwegian]: "Andorra", [e$2.Pashto]: "\u0622\u0646\u062F\u0648\u0631\u0627", [e$2.Persian]: "\u0622\u0646\u062F\u0648\u0631\u0627", [e$2.Polish]: "Andora", [e$2.Portuguese]: "Andorra", [e$2.Punjabi]: "\u0A05\u0A70\u0A21\u0A4B\u0A30\u0A3E", [e$2.Romanian]: "Andorra", [e$2.Russian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Samoan]: "Andorra", [e$2.Sanskrit]: "\u0905\u0902\u0921\u094B\u0930\u093E", [e$2.Scots]: "Andorra", [e$2.Serbian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Sesotho]: "Andorra", [e$2.Shona]: "Andorra", [e$2.Sindhi]: "\u0905\u0902\u0921\u094B\u0930\u093E", [e$2.Sinhala]: "\u0D86\u0DB1\u0DCA\u0DAF\u0DDA", [e$2.Slovak]: "Andorra", [e$2.Slovenian]: "Andora", [e$2.Somali]: "Andorra", [e$2.Spanish]: "Andorra", [e$2.Sudanese]: "Andorra", [e$2.Swahili]: "Andorra", [e$2.Swedish]: "Andorra", [e$2.Tagalog]: "Andorra", [e$2.Tajik]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Tamil]: "\u0B85\u0BA9\u0BCB\u0BB0\u0BCD\u0B9F\u0BBE", [e$2.Tatar]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Telugu]: "\u0C05\u0C02\u0C21\u0C4B\u0C30\u0C4D\u0C30\u0C3E", [e$2.Thai]: "\u0E2D\u0E31\u0E19\u0E14\u0E2D\u0E23\u0E4C\u0E23\u0E32", [e$2.Tibetan]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B", [e$2.Turkish]: "Andora", [e$2.Ukrainian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Urdu]: "\u0622\u0646\u062F\u0648\u0631\u0627", [e$2.Uzbek]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e$2.Vietnamese]: "Andorra", [e$2.Welsh]: "Andorra", [e$2.Xhosa]: "Andorra", [e$2.Yiddish]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4", [e$2.Yoruba]: "Andorra", [e$2.Zulu]: "Andorra" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Andorra la Vella", total: 78e3 } }, geography: { area: 468, region: I.Europe, sub_region: x$1.SouthernEurope }, government: { capital: "Andorra la Vella", type: "Constitutional Monarchy" } } }, Angola: { i18n: { calling_codes: [244], currencies: [l$1.AngolaKwanza], languages: [e$2.Portuguese, e$2.Spanish, e$2.French, e$2.Italian, e$2.German, e$2.English], tz: { offsets: [i$3.UTC_0, i$3.UTC_PLUS_1, i$3.UTC_PLUS_2], regions: [t$1.AfricaLuanda], timezones: [n$2.WestAfricaTime] } }, id: r$2.Angola, info: { flag: { emoji: "\u{1F1E6}\u{1F1EC}", emoji_unicode: "U+1F1E6 U+1F1EC", svg: "https://www.countryflags.io/ao/flat/64.svg" }, tld: [".ao"] }, iso: { alpha2: r$2.Angola, alpha3: "AGO", numeric: "024" }, name: { alt_spellings: ["AO", "Rep\xFAblica de Angola", "\u0281\u025Bpublika de an"], demonym: "Angolan", native: { endonym: "Angola" }, official: "Republic of Angola", short: "Angola", translations: { [e$2.Afrikaans]: "Angola", [e$2.Albanian]: "Ang\xF2la", [e$2.Amharic]: "\u12A0\u1295\u130E\u120A\u12EB", [e$2.Arabic]: "\u0623\u0646\u063A\u0648\u0644\u0627", [e$2.Armenian]: "\u0540\u0561\u0576\u0563\u0561\u056C\u0561\u056F\u0561", [e$2.Azerbaijani]: "Ang\u0259l", [e$2.Bashkir]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Basque]: "Angola", [e$2.Belarusian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Bengali]: "\u0985\u0999\u09CD\u0997\u09B2\u09BE", [e$2.Berber]: "Angola", [e$2.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42", [e$2.Bosnian]: "Angola", [e$2.Breton]: "Angola", [e$2.Bulgarian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Burmese]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A", [e$2.Catalan]: "Angola", [e$2.Chinese]: "\u5B89\u54E5\u62C9", [e$2.Croatian]: "Angola", [e$2.Czech]: "Angola", [e$2.Danish]: "Angola", [e$2.Dutch]: "Angola", [e$2.English]: "Angola", [e$2.Esperanto]: "Angolo", [e$2.Estonian]: "Angola", [e$2.Finnish]: "Angola", [e$2.French]: "Angola", [e$2.Frisian]: "Angola", [e$2.Galician]: "Angola", [e$2.Georgian]: "\u10D0\u10DC\u10D2\u10DD\u10DA\u10D0", [e$2.German]: "Angola", [e$2.Greenlandic]: "Angola", [e$2.Greek]: "\u0391\u03B3\u03BA\u03CC\u03BB\u03B1", [e$2.Gujarati]: "\u0A85\u0A82\u0A97\u0ACB\u0AB2\u0ABE", [e$2.Haitian]: "Angola", [e$2.Hausa]: "Angola", [e$2.Hebrew]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4", [e$2.Hindi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", [e$2.Hungarian]: "Angola", [e$2.Icelandic]: "Angola", [e$2.Igbo]: "Angola", [e$2.Indonesian]: "Angola", [e$2.Irish]: "Angola", [e$2.Italian]: "Angola", [e$2.Japanese]: "\u30A2\u30F3\u30B4\u30E9", [e$2.Javanese]: "Anggol", [e$2.Kannada]: "\u0C85\u0C82\u0C97\u0CCB\u0CB2\u0CBE", [e$2.Kazakh]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Khmer]: "\u17A2\u1784\u17CB\u1780\u17B6\u179B\u17A2\u1784\u17CB\u1782\u17D2\u179B\u17C1\u179F", [e$2.Korean]: "\uC559\uACE8\uB77C", [e$2.Kurdish]: "Angola", [e$2.Kyrgyz]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Lao]: "\u0EAD\u0EB0\u0E99\u0EB2\u0E94\u0EB2", [e$2.Latin]: "Angola", [e$2.Latvian]: "Angola", [e$2.Lithuanian]: "Angola", [e$2.Luxembourgish]: "Angola", [e$2.Macedonian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Malagasy]: "Angola", [e$2.Malay]: "Angola", [e$2.Malayalam]: "\u0D05\u0D02\u0D17\u0D4B\u0D33\u0D3E", [e$2.Maltese]: "Angola", [e$2.Maori]: "Angola", [e$2.Marathi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", [e$2.Mongolian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Nepali]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", [e$2.Norwegian]: "Angola", [e$2.Pashto]: "\u0627\u0646\u06AB\u0648\u0644\u0627", [e$2.Persian]: "\u0622\u0646\u06AF\u0648\u0644\u0627", [e$2.Polish]: "Angola", [e$2.Portuguese]: "Angola", [e$2.Punjabi]: "\u0A05\u0A19\u0A4D\u0A17\u0A4B\u0A32\u0A3E", [e$2.Romanian]: "Angole", [e$2.Russian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Samoan]: "Angola", [e$2.Sanskrit]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", [e$2.Scots]: "Angola", [e$2.Serbian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Sesotho]: "Angola", [e$2.Shona]: "Angola", [e$2.Sindhi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", [e$2.Sinhala]: "\u0D86\u0D9C\u0DBD\u0DD2\u0DBA\u0DCF\u0DC0", [e$2.Slovak]: "Angola", [e$2.Slovenian]: "Angola", [e$2.Somali]: "Angola", [e$2.Spanish]: "Angola", [e$2.Sudanese]: "Angola", [e$2.Swahili]: "Angola", [e$2.Swedish]: "Angola", [e$2.Tagalog]: "Angola", [e$2.Tajik]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Tamil]: "\u0B85\u0B99\u0BCD\u0B95\u0BCB\u0BB2\u0BBE", [e$2.Tatar]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Telugu]: "\u0C05\u0C02\u0C17\u0C4B\u0C32\u0C3E", [e$2.Thai]: "\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E32\u0E23\u0E2D\u0E32\u0E19\u0E32\u0E21\u0E34\u0E2A\u0E16\u0E32\u0E19", [e$2.Tibetan]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B", [e$2.Turkish]: "Angola", [e$2.Ukrainian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e$2.Urdu]: "\u0627\u0646\u06AF\u0648\u0644\u0627", [e$2.Uzbek]: "Angola", [e$2.Vietnamese]: "Angola", [e$2.Xhosa]: "Angola", [e$2.Welsh]: "Angola", [e$2.Yiddish]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4", [e$2.Yoruba]: "Angola", [e$2.Zulu]: "Angola" } } }, Anguilla: { i18n: { calling_codes: [1264], currencies: [l$1.DominicaDollar, l$1.EastCaribbeanDollar, l$1.Euro, l$1.UnitedStatesDollar, l$1.BritishPound], languages: [e$2.English, e$2.Spanish], tz: { offsets: [i$3.UTC_MINUS_4], regions: [t$1.AmericaAnguilla], timezones: [n$2.AtlanticStandardTime] } }, id: r$2.Anguilla, info: { flag: { emoji: "\u{1F1E6}\u{1F1EC}", emoji_unicode: "U+1F1E6 U+1F1EC", svg: "https://www.countryflags.io/ai/flat/64.svg" }, tld: [".ai"] }, iso: { alpha2: r$2.Anguilla, alpha3: "AIA", numeric: "660" }, name: { alt_spellings: ["AI"], demonym: "Anguillian", native: { endonym: "Anguilla" }, official: "Anguilla", short: "Anguilla", translations: { [e$2.Afrikaans]: "Anguilla", [e$2.Albanian]: "Anguilla", [e$2.Amharic]: "\u12A0\u1295\u1309\u120B", [e$2.Arabic]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627", [e$2.Armenian]: "\u0531\u0576\u0563\u056B\u056C\u0561", [e$2.Azerbaijani]: "Az\u0259rbaycan", [e$2.Bashkir]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Basque]: "Angila", [e$2.Belarusian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Bengali]: "\u0985\u0999\u09CD\u0997\u09C0\u09B2\u09BE", [e$2.Berber]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627", [e$2.Bhutani]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B", [e$2.Bosnian]: "Angila", [e$2.Breton]: "Angila", [e$2.Bulgarian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Burmese]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A", [e$2.Catalan]: "Angilla", [e$2.Chinese]: "\u5B89\u572D\u62C9", [e$2.Croatian]: "Angila", [e$2.Czech]: "Anguilla", [e$2.Danish]: "Anguilla", [e$2.Dutch]: "Anguilla", [e$2.English]: "Anguilla", [e$2.Esperanto]: "Angila", [e$2.Estonian]: "Anguilla", [e$2.Finnish]: "Anguilla", [e$2.French]: "Anguilla", [e$2.Frisian]: "Angila", [e$2.Galician]: "Anguilla", [e$2.Georgian]: "\u10D0\u10DC\u10D2\u10D8\u10DA\u10D0", [e$2.German]: "Anguilla", [e$2.Greenlandic]: "Anguilla", [e$2.Greek]: "\u0391\u03BD\u03B3\u03BA\u03C5\u03BB\u03AC", [e$2.Gujarati]: "\u0A85\u0A82\u0A97\u0ACD\u0AAF\u0ABE\u0AB2\u0ABE", [e$2.Haitian]: "Anguilla", [e$2.Hausa]: "Anguilla", [e$2.Hebrew]: "\u05D0\u05E0\u05D2\u05D5\u05D9\u05D0\u05DC\u05D4", [e$2.Hindi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", [e$2.Hungarian]: "Anguilla", [e$2.Icelandic]: "Anguilla", [e$2.Igbo]: "Anguilla", [e$2.Indonesian]: "Anguilla", [e$2.Irish]: "Anguilla", [e$2.Italian]: "Anguilla", [e$2.Japanese]: "\u30A2\u30F3\u30AE\u30E9", [e$2.Javanese]: "Anguilla", [e$2.Kannada]: "\u0C85\u0C82\u0C97\u0CCD\u0CB5\u0CC7\u0CB2\u0CBE", [e$2.Kazakh]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Khmer]: "\u17A2\u1784\u17CB\u1780\u17B6\u179A\u17A0\u17D2\u1782\u17B8\u1798", [e$2.Korean]: "\uC575\uADC8\uB77C", [e$2.Kurdish]: "Anguilla", [e$2.Kyrgyz]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Lao]: "\u0EAD\u0EB0\u0E99\u0EB0\u0E88\u0EB3", [e$2.Latin]: "Anguilla", [e$2.Latvian]: "Anguilla", [e$2.Lithuanian]: "Anguilla", [e$2.Luxembourgish]: "Angilla", [e$2.Macedonian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Malagasy]: "Angila", [e$2.Malay]: "Anguilla", [e$2.Malayalam]: "\u0D05\u0D02\u0D17\u0D4D\u0D35\u0D47\u0D32\u0D3E", [e$2.Maltese]: "Anguilla", [e$2.Maori]: "Anguilla", [e$2.Marathi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", [e$2.Mongolian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Nepali]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", [e$2.Norwegian]: "Anguilla", [e$2.Pashto]: "\u0622\u0646\u06AF\u0648\u0644\u0627", [e$2.Persian]: "\u0622\u0646\u06AF\u0648\u0644\u0627", [e$2.Polish]: "Anguilla", [e$2.Portuguese]: "Anguilla", [e$2.Punjabi]: "\u0A05\u0A02\u0A17\u0A40\u0A32\u0A3E", [e$2.Romanian]: "Anguilla", [e$2.Russian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Samoan]: "Anguilla", [e$2.Sanskrit]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", [e$2.Scots]: "Anguilla", [e$2.Serbian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Sesotho]: "Anguilla", [e$2.Shona]: "Anguilla", [e$2.Sindhi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", [e$2.Sinhala]: "\u0D86\u0D82\u0D9C\u0DD2\u0DBD\u0DCF\u0DC0", [e$2.Slovak]: "Anguilla", [e$2.Slovenian]: "Anguilla", [e$2.Somali]: "Anguilla", [e$2.Spanish]: "Anguilla", [e$2.Sudanese]: "Anguilla", [e$2.Swahili]: "Anguilla", [e$2.Swedish]: "Anguilla", [e$2.Tagalog]: "Anguilla", [e$2.Tajik]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Tamil]: "\u0B85\u0B99\u0BCD\u0B95\u0BC8\u0BB2\u0BBE", [e$2.Tatar]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Telugu]: "\u0C05\u0C02\u0C17\u0C4D\u0C35\u0C47\u0C32\u0C3E", [e$2.Thai]: "\u0E2D\u0E31\u0E07\u0E01\u0E32\u0E25\u0E32", [e$2.Tibetan]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B", [e$2.Turkish]: "Anguilla", [e$2.Ukrainian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Urdu]: "\u0622\u0646\u06AF\u0648\u0644\u0627", [e$2.Uzbek]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e$2.Vietnamese]: "Anguilla", [e$2.Welsh]: "Anguilla", [e$2.Xhosa]: "Anguilla", [e$2.Yiddish]: "Anguilla", [e$2.Yoruba]: "Anguilla", [e$2.Zulu]: "Anguilla" } } }, Antarctica: { i18n: { calling_codes: [672], currencies: [l$1.UnitedStatesDollar, l$1.Euro], languages: [e$2.English, e$2.Spanish, e$2.French, e$2.Portuguese, e$2.Italian, e$2.Dutch, e$2.German, e$2.Swedish, e$2.Norwegian, e$2.Danish, e$2.Finnish], tz: { offsets: [i$3.UTC_PLUS_1, i$3.UTC_PLUS_2], regions: [t$1.AntarcticaCasey, t$1.AntarcticaDavis, t$1.AntarcticaMcMurdo, t$1.AntarcticaPalmer, t$1.AntarcticaRothera], timezones: [n$2.AtlanticStandardTime, n$2.CentralTime, n$2.EasternTime, n$2.AtlanticStandardTime, n$2.AzoresStandardTime, n$2.NewfoundlandStandardTime] } }, id: r$2.Antarctica, info: { flag: { emoji: "\u{1F1E6}\u{1F1F6}", emoji_unicode: "U+1F1E6 U+1F1F6", svg: "https://www.countryflags.io/aq/flat/64.svg" }, tld: [".aq"] }, iso: { alpha2: r$2.Antarctica, alpha3: "ATA", numeric: "010" }, name: { alt_spellings: ["AQ"], demonym: "Antarctican", native: { endonym: "Antarctica" }, official: "Antarctica", short: "Antarctica", translations: { [e$2.Afrikaans]: "Antarctica", [e$2.Albanian]: "Antarktika", [e$2.Amharic]: "\u12A0\u1295\u1272\u120D\u12AB\u1293", [e$2.Arabic]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627", [e$2.Armenian]: "\u0540\u0561\u0576\u0561\u0580\u0561\u057F\u056F\u0578", [e$2.Azerbaijani]: "Az\u0259rbaycan", [e$2.Bashkir]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Basque]: "Antarktika", [e$2.Belarusian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Bengali]: "\u0985\u09A8\u09CD\u09A4\u09B0\u09BE\u09B6\u09CD\u09AC\u09C0", [e$2.Berber]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627", [e$2.Bhutani]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B", [e$2.Bosnian]: "Antarktika", [e$2.Breton]: "Antarktika", [e$2.Bulgarian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Burmese]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102E\u1038\u101A\u102C\u1038", [e$2.Catalan]: "Ant\xE0rtida", [e$2.Chinese]: "\u5357\u6781\u6D32", [e$2.Croatian]: "Antarktika", [e$2.Czech]: "Antarktida", [e$2.Danish]: "Antarktis", [e$2.Dutch]: "Antarctica", [e$2.English]: "Antarctica", [e$2.Esperanto]: "Antarktika", [e$2.Estonian]: "Antarktika", [e$2.Finnish]: "Antarktis", [e$2.French]: "Antarctica", [e$2.Frisian]: "Antarktis", [e$2.Galician]: "Ant\xE1rtida", [e$2.Georgian]: "\u10D0\u10DC\u10E2\u10D0\u10E0\u10E5\u10E2\u10D8\u10D9\u10D0", [e$2.German]: "Antarktis", [e$2.Greenlandic]: "Antarktis", [e$2.Greek]: "\u0391\u03BD\u03C4\u03B1\u03C1\u03BA\u03C4\u03B9\u03BA\u03AE", [e$2.Gujarati]: "\u0A85\u0AA8\u0ACD\u0AA4\u0AB0\u0ABE\u0AB6\u0ACD\u0AB5\u0AC0", [e$2.Haitian]: "Antarctica", [e$2.Hausa]: "Antarktika", [e$2.Hebrew]: "\u05D0\u05E0\u05D8\u05E8\u05E7\u05D8\u05D9\u05E7\u05D4", [e$2.Hindi]: "\u0905\u0928\u094D\u0924\u0930\u0915\u094D\u0937\u0947\u0924\u094D\u0930", [e$2.Hungarian]: "Antarktika", [e$2.Icelandic]: "Antarktis", [e$2.Igbo]: "Antarktika", [e$2.Indonesian]: "Antarktika", [e$2.Irish]: "Antarktika", [e$2.Italian]: "Antartide", [e$2.Japanese]: "\u5357\u6975", [e$2.Javanese]: "Antarktika", [e$2.Kannada]: "\u0C85\u0CA8\u0CCD\u0CA4\u0CB0\u0CBE\u0CB6\u0CCD\u0CB5\u0CBF", [e$2.Kazakh]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Khmer]: "\u17A2\u1784\u17CB\u179F\u17D2\u1780\u179A\u17A2\u17B6\u1798\u17C9\u17BB\u1799", [e$2.Korean]: "\uC564\uD2F0\uCE74\uD1A0\uB2C9", [e$2.Kurdish]: "Antarktika", [e$2.Kyrgyz]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Lao]: "\u0EAD\u0EB0\u0E99\u0EAD\u0EA5\u0EB2\u0E81\u0EB4\u0EAA\u0EB0", [e$2.Latin]: "Antarctica", [e$2.Latvian]: "Antarktika", [e$2.Lithuanian]: "Antarktis", [e$2.Luxembourgish]: "Antarktis", [e$2.Macedonian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Malagasy]: "Antarctica", [e$2.Malay]: "Antarktika", [e$2.Malayalam]: "\u0D05\u0D28\u0D4D\u0D24\u0D30\u0D3E\u0D36\u0D4D\u0D35\u0D3F", [e$2.Maltese]: "Antarktika", [e$2.Maori]: "Antarktika", [e$2.Marathi]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E", [e$2.Mongolian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Nepali]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E", [e$2.Norwegian]: "Antarktis", [e$2.Pashto]: "\u0627\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627", [e$2.Persian]: "\u0622\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627", [e$2.Polish]: "Antarktyka", [e$2.Portuguese]: "Ant\xE1rtida", [e$2.Punjabi]: "\u0A05\u0A28\u0A4D\u0A24\u0A30\u0A3E\u0A36\u0A3F\u0A15\u0A3E", [e$2.Romanian]: "Antarctica", [e$2.Russian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Samoan]: "Antarktika", [e$2.Sanskrit]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E", [e$2.Scots]: "Antarktika", [e$2.Serbian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Sesotho]: "Antarktika", [e$2.Shona]: "Antarktika", [e$2.Sindhi]: "Antarktika", [e$2.Sinhala]: "\u0D86\u0DB1\u0DCA\u0DA7\u0DCA\u0DA7\u0DD2\u0D9A\u0DCF\u0DC0", [e$2.Slovak]: "Antarktika", [e$2.Slovenian]: "Antarktika", [e$2.Somali]: "Antarktika", [e$2.Spanish]: "Ant\xE1rtida", [e$2.Sudanese]: "Antarktika", [e$2.Swahili]: "Antarktika", [e$2.Swedish]: "Antarktis", [e$2.Tagalog]: "Antarktika", [e$2.Tajik]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Tamil]: "\u0B85\u0BA9\u0BCD\u0BA4\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BBF\u0B95\u0BCD", [e$2.Tatar]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Telugu]: "\u0C05\u0C28\u0C4D\u0C24\u0C30\u0C3E\u0C36\u0C4D\u0C35\u0C3F\u0C15\u0C3E", [e$2.Thai]: "\u0E20\u0E39\u0E21\u0E34\u0E20\u0E32\u0E04\u0E2D\u0E32\u0E19\u0E31\u0E19\u0E15\u0E34\u0E01\u0E32", [e$2.Tibetan]: "\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72\u0F0B\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72", [e$2.Turkish]: "Antarktika", [e$2.Ukrainian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Urdu]: "\u0627\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627", [e$2.Uzbek]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e$2.Vietnamese]: "\u0110\u1EA5t Antarktik", [e$2.Welsh]: "Antarktika", [e$2.Xhosa]: "Antarktika", [e$2.Yiddish]: "Antarktika", [e$2.Yoruba]: "Antarktika", [e$2.Zulu]: "Antarktika" } } }, Armenia: { i18n: { calling_codes: [374], currencies: [l$1.ArmeniaDram], languages: [e$2.Armenian], tz: { offsets: [i$3.UTC_PLUS_4], regions: [t$1.AsiaJakarta], timezones: [n$2.ArmeniaTime] } }, id: r$2.Armenia, info: { flag: { emoji: "\u{1F1E6}\u{1F1F2}", emoji_unicode: "U+1F1E6 U+1F1F2", svg: "https://www.countryflags.io/am/flat/64.svg" }, tld: [".am"] }, iso: { alpha2: r$2.Armenia, alpha3: "ARM", numeric: "051" }, name: { alt_spellings: ["AM", "Hayastan", "Republic of Armenia", "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"], demonym: "Armenian", native: { endonym: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576" }, official: "Republic of Armenia", short: "Armenia", translations: { [e$2.Afrikaans]: "Armeni\xEB", [e$2.Albanian]: "Armenia", [e$2.Amharic]: "\u12A0\u121B\u122D\u129B", [e$2.Arabic]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627", [e$2.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576", [e$2.Azerbaijani]: "Az\u0259rbaycan", [e$2.Bashkir]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e$2.Basque]: "Arm\xE9nia", [e$2.Belarusian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e$2.Bengali]: "\u0986\u09B0\u09CD\u09AE\u09C7\u09A8\u09BF", [e$2.Berber]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627", [e$2.Bhutani]: "\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42", [e$2.Bosnian]: "Armenija", [e$2.Breton]: "Armeni\xEB", [e$2.Bulgarian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e$2.Burmese]: "\u1021\u102C\u1019\u1010\u102D\u1010\u1039", [e$2.Catalan]: "Arm\xE8nia", [e$2.Chinese]: "\u4E9A\u7F8E\u5C3C\u4E9A", [e$2.Croatian]: "Armenija", [e$2.Czech]: "Arm\xE9nie", [e$2.Danish]: "Armenien", [e$2.Dutch]: "Armeni\xEB", [e$2.English]: "Armenia", [e$2.Esperanto]: "Armenia", [e$2.Estonian]: "Armeenia", [e$2.Finnish]: "Armenia", [e$2.French]: "Armenia", [e$2.Frisian]: "Armeenia", [e$2.Galician]: "Arm\xE9nia", [e$2.Georgian]: "\u10D0\u10E0\u10DB\u10DD\u10DC\u10D8", [e$2.German]: "Armenien", [e$2.Greenlandic]: "Armenia", [e$2.Greek]: "\u0391\u03C1\u03BC\u03B5\u03BD\u03AF\u03B1", [e$2.Gujarati]: "\u0A85\u0AB0\u0ACD\u0AAE\u0AC7\u0AA8\u0ABF", [e$2.Haitian]: "Armenia", [e$2.Hausa]: "Armenia", [e$2.Hebrew]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4", [e$2.Hindi]: "\u0905\u05E8\u05DE\u05E0\u093F\u092F\u093E", [e$2.Hungarian]: "\xD6rm\xE9nyorsz\xE1g", [e$2.Icelandic]: "Armenia", [e$2.Igbo]: "Armenia", [e$2.Indonesian]: "Armenia", [e$2.Irish]: "Armenia", [e$2.Italian]: "Armenia", [e$2.Japanese]: "\u30A2\u30EB\u30E1\u30CB\u30A2", [e$2.Javanese]: "Armenia", [e$2.Kannada]: "\u0C85\u0CB0\u0CCD\u0CAE\u0CC7\u0CA8\u0CBF", [e$2.Kazakh]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e$2.Khmer]: "\u17A2\u17B6\u1798\u17C9\u17C1\u179A\u17B8", [e$2.Korean]: "\uC544\uB974\uBA54\uB2C8\uC544", [e$2.Kurdish]: "Armenia", [e$2.Kyrgyz]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e$2.Lao]: "\u0EAD\u0EB2\u0EAB\u0EBC\u0E99\u0EB2", [e$2.Latin]: "Armenia", [e$2.Latvian]: "Armeenia", [e$2.Lithuanian]: "Arm\u0117nija", [e$2.Luxembourgish]: "Armenien", [e$2.Macedonian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430", [e$2.Malagasy]: "Armenia", [e$2.Malay]: "Armenia", [e$2.Malayalam]: "\u0D05\u0D30\u0D4D\u200D\u0D2E\u0D47\u0D28\u0D3F", [e$2.Maltese]: "Armenia", [e$2.Maori]: "Armenia", [e$2.Marathi]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F", [e$2.Mongolian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e$2.Nepali]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F", [e$2.Norwegian]: "Armenia", [e$2.Pashto]: "\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627", [e$2.Persian]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646", [e$2.Polish]: "Armenia", [e$2.Portuguese]: "Armenia", [e$2.Punjabi]: "\u0A05\u0A30\u0A2E\u0A40\u0A28\u0A40", [e$2.Romanian]: "Armenia", [e$2.Russian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e$2.Samoan]: "Armenia", [e$2.Sanskrit]: "Armenia", [e$2.Scots]: "Armenia", [e$2.Serbian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430", [e$2.Sesotho]: "Armenia", [e$2.Shona]: "Armenia", [e$2.Sindhi]: "Armenia", [e$2.Sinhala]: "\u0D86\u0DBB\u0DCA\u0DB8\u0DD3\u0DB1\u0DD2", [e$2.Slovak]: "Armenia", [e$2.Slovenian]: "Armenija", [e$2.Somali]: "Armenia", [e$2.Spanish]: "Armenia", [e$2.Sudanese]: "Armenia", [e$2.Swahili]: "Armenia", [e$2.Swedish]: "Armenien", [e$2.Tagalog]: "Armenia", [e$2.Tajik]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e$2.Tamil]: "\u0B85\u0BB0\u0BCD\u0BAE\u0BC7\u0BA9\u0BBF\u0BAF\u0BA9\u0BCD", [e$2.Tatar]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e$2.Telugu]: "\u0C05\u0C30\u0C4D\u0C2E\u0C47\u0C28\u0C3F", [e$2.Thai]: "\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E21\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19", [e$2.Tibetan]: "\u0F68\u0F62\u0F0B\u0F58\u0F7A\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F74\u0F0D", [e$2.Turkish]: "Ermenistan", [e$2.Ukrainian]: "\u0410\u0440\u043C\u0435\u043D\u0456\u044F", [e$2.Urdu]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646", [e$2.Uzbek]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e$2.Vietnamese]: "Armenia", [e$2.Welsh]: "Armenia", [e$2.Xhosa]: "Armenia", [e$2.Yiddish]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4", [e$2.Yoruba]: "Armenia", [e$2.Zulu]: "Armenia" } } }, SomeCountry: { i18n: { calling_codes: [], currencies: [], languages: [], tz: { offsets: [], regions: [], timezones: [] } }, id: r$2.AmericanSamoa, info: { flag: { emoji: "", emoji_unicode: "", svg: "" }, tld: [] }, iso: { alpha2: r$2.AmericanSamoa, alpha3: "", numeric: "" }, name: { alt_spellings: [], demonym: "", native: { endonym: "" }, official: "", short: "", translations: { [e$2.Afrikaans]: "", [e$2.Albanian]: "", [e$2.Amharic]: "", [e$2.Arabic]: "", [e$2.Armenian]: "", [e$2.Azerbaijani]: "", [e$2.Bashkir]: "", [e$2.Basque]: "", [e$2.Belarusian]: "", [e$2.Bengali]: "", [e$2.Berber]: "", [e$2.Bhutani]: "", [e$2.Bosnian]: "", [e$2.Breton]: "", [e$2.Bulgarian]: "", [e$2.Burmese]: "", [e$2.Catalan]: "", [e$2.Chinese]: "", [e$2.Croatian]: "", [e$2.Czech]: "", [e$2.Danish]: "", [e$2.Dutch]: "", [e$2.English]: "", [e$2.Esperanto]: "", [e$2.Estonian]: "", [e$2.Finnish]: "", [e$2.French]: "", [e$2.Frisian]: "", [e$2.Galician]: "", [e$2.Georgian]: "", [e$2.German]: "", [e$2.Greenlandic]: "", [e$2.Greek]: "", [e$2.Gujarati]: "", [e$2.Haitian]: "", [e$2.Hausa]: "", [e$2.Hebrew]: "", [e$2.Hindi]: "", [e$2.Hungarian]: "", [e$2.Icelandic]: "", [e$2.Igbo]: "", [e$2.Indonesian]: "", [e$2.Irish]: "", [e$2.Italian]: "", [e$2.Japanese]: "", [e$2.Javanese]: "", [e$2.Kannada]: "", [e$2.Kazakh]: "", [e$2.Khmer]: "", [e$2.Korean]: "", [e$2.Kurdish]: "", [e$2.Kyrgyz]: "", [e$2.Lao]: "", [e$2.Latin]: "", [e$2.Latvian]: "", [e$2.Lithuanian]: "", [e$2.Luxembourgish]: "", [e$2.Macedonian]: "", [e$2.Malagasy]: "", [e$2.Malay]: "", [e$2.Malayalam]: "", [e$2.Maltese]: "", [e$2.Maori]: "", [e$2.Marathi]: "", [e$2.Mongolian]: "", [e$2.Nepali]: "", [e$2.Norwegian]: "", [e$2.Pashto]: "", [e$2.Persian]: "", [e$2.Polish]: "", [e$2.Portuguese]: "", [e$2.Punjabi]: "", [e$2.Romanian]: "", [e$2.Russian]: "", [e$2.Samoan]: "", [e$2.Sanskrit]: "", [e$2.Scots]: "", [e$2.Serbian]: "", [e$2.Sesotho]: "", [e$2.Shona]: "", [e$2.Sindhi]: "", [e$2.Sinhala]: "", [e$2.Slovak]: "", [e$2.Slovenian]: "", [e$2.Somali]: "", [e$2.Spanish]: "", [e$2.Sudanese]: "", [e$2.Swahili]: "", [e$2.Swedish]: "", [e$2.Tagalog]: "", [e$2.Tajik]: "", [e$2.Tamil]: "", [e$2.Tatar]: "", [e$2.Telugu]: "", [e$2.Thai]: "", [e$2.Tibetan]: "", [e$2.Turkish]: "", [e$2.Ukrainian]: "", [e$2.Urdu]: "", [e$2.Uzbek]: "", [e$2.Vietnamese]: "", [e$2.Welsh]: "", [e$2.Xhosa]: "", [e$2.Yiddish]: "", [e$2.Yoruba]: "", [e$2.Zulu]: "" } } } });
({ id: e$2.Afrikaans, language: { code: o.Afrikaans, name: "Afrikaans", native: "Afrikaans" }, name: "Afrikaans", native_name: "Afrikaans", rtl: false });
({ country: { code: r$2.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e$2.AfrikaansSouthAfrica, language: { code: o.Afrikaans, name: "Afrikaans", native: "Afrikaans" }, name: "Afrikaans (South Africa)", native_name: "Afrikaans (Suid-Afrika)", rtl: false });
({ id: e$2.Albanian, language: { code: o.Albanian, name: "Albanian", native: "Shqip" }, name: "Albanian", native_name: "Shqip", rtl: false });
({ country: { code: r$2.Albania, name: "Albania", native: "Shqip\xEBria" }, id: e$2.AlbanianAlbania, language: { code: o.Albanian, name: "Albanian", native: "Shqip" }, name: "Albanian (Albania)", native_name: "Shqip (Shqip\xEBria)", rtl: false });
({ id: e$2.Amharic, language: { code: o.Amharic, name: "Amharic", native: "\u12A0\u121B\u122D\u129B" }, name: "Amharic", native_name: "\u12A0\u121B\u122D\u129B", rtl: false });
({ country: { code: r$2.Ethiopia, name: "Ethiopia", native: "\u12A2\u1275\u12EE\u1335\u12EB" }, id: e$2.AmharicEthiopia, language: { code: o.Amharic, name: "Amharic", native: "\u12A0\u121B\u122D\u129B" }, name: "Amharic (Ethiopia)", native_name: "\u12A0\u121B\u122D\u129B (\u12A2\u1275\u12EE\u1335\u12EB)", rtl: false });
({ id: e$2.Arabic, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629", rtl: true });
({ country: { code: r$2.Algeria, name: "Algeria", native: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631" }, id: e$2.ArabicAlgeria, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Algeria)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u062C\u0632\u0627\u0626\u0631)", rtl: true });
({ country: { code: r$2.Bahrain, name: "Bahrain", native: "\u0627\u0644\u0628\u062D\u0631\u064A\u0646" }, id: e$2.ArabicBahrain, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Bahrain)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0628\u062D\u0631\u064A\u0646)", rtl: true });
({ country: { code: r$2.Egypt, name: "Egypt", native: "\u0645\u0635\u0631" }, id: e$2.ArabicEgypt, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Egypt)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0645\u0635\u0631)", rtl: true });
({ country: { code: r$2.Iraq, name: "Iraq", native: "\u0627\u0644\u0639\u0631\u0627\u0642" }, id: e$2.ArabicIraq, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Iraq)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0639\u0631\u0627\u0642)", rtl: true });
({ country: { code: r$2.Jordan, name: "Jordan", native: "\u0627\u0644\u0623\u0631\u062F\u0646" }, id: e$2.ArabicJordan, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Jordan)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0623\u0631\u062F\u0646)", rtl: true });
({ country: { code: r$2.Kuwait, name: "Kuwait", native: "\u0627\u0644\u0643\u0648\u064A\u062A" }, id: e$2.ArabicKuwait, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Kuwait)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0643\u0648\u064A\u062A)", rtl: true });
({ country: { code: r$2.Lebanon, name: "Lebanon", native: "\u0644\u0628\u0646\u0627\u0646" }, id: e$2.ArabicLebanon, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Lebanon)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u0628\u0646\u0627\u0646)", rtl: true });
({ country: { code: r$2.Libya, name: "Libya", native: "\u0644\u064A\u0628\u064A\u0627" }, id: e$2.ArabicLibya, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Libya)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u064A\u0628\u064A\u0627)", rtl: true });
({ country: { code: r$2.Morocco, name: "Morocco", native: "\u0627\u0644\u0645\u063A\u0631\u0628" }, id: e$2.ArabicMorocco, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Morocco)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u063A\u0631\u0628)", rtl: true });
({ country: { code: r$2.Oman, name: "Oman", native: "\u0639\u0645\u0627\u0646" }, id: e$2.ArabicOman, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Oman)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0639\u0645\u0627\u0646)", rtl: true });
({ country: { code: r$2.Qatar, name: "Qatar", native: "\u0642\u0637\u0631" }, id: e$2.ArabicQatar, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Qatar)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0642\u0637\u0631)", rtl: true });
({ country: { code: r$2.SaudiArabia, name: "Saudi Arabia", native: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629" }, id: e$2.ArabicSaudiArabia, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Saudi Arabia)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629)", rtl: true });
({ country: { code: r$2.Tunisia, name: "Tunisia", native: "\u062A\u0648\u0646\u0633" }, id: e$2.ArabicTunisia, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Tunisia)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u062A\u0648\u0646\u0633)", rtl: true });
({ country: { code: r$2.UnitedArabEmirates, name: "United Arab Emirates", native: "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629" }, id: e$2.ArabicUnitedArabEmirates, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (United Arab Emirates)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629)", rtl: true });
({ country: { code: r$2.Yemen, name: "Yemen", native: "\u0627\u0644\u064A\u0645\u0646" }, id: e$2.ArabicYemen, language: { code: o.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Yemen)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u064A\u0645\u0646)", rtl: true });
({ id: e$2.Armenian, language: { code: o.Armenian, name: "Armenian", native: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576" }, name: "Armenian", native_name: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576", rtl: false });
({ country: { code: r$2.Armenia, name: "Armenia", native: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576" }, id: e$2.ArmenianArmenia, language: { code: o.Armenian, name: "Armenian", native: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576" }, name: "Armenian (Armenia)", native_name: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576 (\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576)", rtl: false });
({ id: e$2.Azerbaijani, language: { code: o.Azerbaijani, name: "Azeribaijani", native: "Az\u0259rbaycan" }, name: "Azeri", native_name: "Az\u0259rbaycan", rtl: false });
({ country: { code: r$2.Azerbaijan, name: "Azerbaijan", native: "Az\u0259rbaycan" }, id: e$2.AzerbaijaniAzerbaijan, language: { code: o.Azerbaijani, name: "Azerbaijani", native: "Az\u0259rbaycan" }, name: "Azeri (Azerbaijan)", native_name: "Az\u0259rbaycan (Az\u0259rbaycan)", rtl: false });
({ id: e$2.Basque, language: { code: o.Basque, name: "Basque", native: "Euskara" }, name: "Basque", native_name: "Euskara", rtl: false });
({ country: { code: r$2.Spain, name: "Spain", native: "Espa\xF1a" }, id: e$2.BasqueSpain, language: { code: o.Basque, name: "Basque", native: "Euskara" }, name: "Basque (Spain)", native_name: "Euskara (Espa\xF1a)", rtl: false });
({ id: e$2.Belarusian, language: { code: o.Belarusian, name: "Belarusian", native: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F" }, name: "Belarusian", native_name: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F", rtl: false });
({ country: { code: r$2.Belarus, name: "Belarus", native: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C" }, id: e$2.BelarusianBelarus, language: { code: o.Belarusian, name: "Belarusian", native: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F" }, name: "Belarusian (Belarus)", native_name: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C)", rtl: false });
({ id: e$2.Bengali, language: { code: o.Bengali, name: "Bengali", native: "\u09AC\u09BE\u0982\u09B2\u09BE" }, name: "Bengali", native_name: "\u09AC\u09BE\u0982\u09B2\u09BE", rtl: false });
({ country: { code: r$2.Bangladesh, name: "Bangladesh", native: "\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6" }, id: e$2.BengaliBangladesh, language: { code: o.Bengali, name: "Bengali", native: "\u09AC\u09BE\u0982\u09B2\u09BE" }, name: "Bengali (Bangladesh)", native_name: "\u09AC\u09BE\u0982\u09B2\u09BE (\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6)", rtl: false });
({ id: e$2.Bhutani, language: { code: o.Bhutani, name: "Bhutani", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Bhutani", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42", rtl: false });
({ country: { code: r$2.Bhutan, name: "Bhutan", native: "\u0F60\u0F56\u0FB2\u0F74\u0F42" }, id: e$2.BhutaniBhutan, language: { code: o.Bhutani, name: "Bhutani", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Bhutani (Bhutan)", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42)", rtl: false });
({ id: e$2.Bulgarian, language: { code: o.Bulgarian, name: "Bulgarian", native: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438" }, name: "Bulgarian", native_name: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438", rtl: false });
({ country: { code: r$2.Bulgaria, name: "Bulgaria", native: "\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F" }, id: e$2.BulgarianBulgaria, language: { code: o.Bulgarian, name: "Bulgarian", native: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438" }, name: "Bulgarian (Bulgaria)", native_name: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 (\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F)", rtl: false });
({ id: e$2.Burmese, language: { code: o.Burmese, name: "Burmese", native: "\u1017\u1019\u102C\u1005\u102C" }, name: "Burmese", native_name: "\u1017\u1019\u102C\u1005\u102C", rtl: false });
({ country: { code: r$2.Myanmar, name: "Myanmar", native: "\u1019\u103C\u1014\u103A\u1019\u102C" }, id: e$2.BurmeseMyanmar, language: { code: o.Burmese, name: "Burmese", native: "\u1017\u1019\u102C\u1005\u102C" }, name: "Burmese (Myanmar)", native_name: "\u1017\u1019\u102C\u1005\u102C (\u1019\u103C\u1014\u103A\u1019\u102C)", rtl: false });
({ id: e$2.Cantonese, language: { code: o.Cantonese, name: "Cantonese", native: "\u5EE3\u6771\u8A71" }, name: "Cantonese", native_name: "\u5EE3\u6771\u8A71", rtl: false });
({ country: { code: r$2.HongKong, name: "Hong Kong", native: "\u9999\u6E2F" }, id: e$2.CantoneseHongKong, language: { code: o.Cantonese, name: "Cantonese", native: "\u5EE3\u6771\u8A71" }, name: "Cantonese (Hong Kong)", native_name: "\u5EE3\u6771\u8A71 (\u9999\u6E2F)", rtl: false });
({ id: e$2.Catalan, language: { code: o.Catalan, name: "Catalan", native: "Catal\xE0" }, name: "Catalan", native_name: "Catal\xE0", rtl: false });
({ country: { code: r$2.Spain, name: "Spain", native: "Espa\xF1a" }, id: e$2.CatalanSpain, language: { code: o.Catalan, name: "Catalan", native: "Catal\xE0" }, name: "Catalan (Spain)", native_name: "Catal\xE0 (Espanya)", rtl: false });
({ id: e$2.ChineseSimplified, language: { code: o.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Simplified)", native_name: "\u4E2D\u6587", rtl: false });
({ country: { code: r$2.China, name: "China", native: "\u4E2D\u56FD" }, id: e$2.ChineseSimplifiedChina, language: { code: o.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Simplified/China)", native_name: "\u4E2D\u6587 (\u4E2D\u56FD)", rtl: false });
({ country: { code: r$2.HongKong, name: "Hong Kong", native: "\u9999\u6E2F" }, id: e$2.ChineseSimplifiedHongKong, language: { code: o.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Simplified/Hong Kong)", native_name: "\u4E2D\u6587 (\u9999\u6E2F)", rtl: false });
({ country: { code: r$2.Macau, name: "Macau", native: "\u6FB3\u9580" }, id: e$2.ChineseSimplifiedMacau, language: { code: o.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Simplified/Macau)", native_name: "\u4E2D\u6587 (\u6FB3\u9580)", rtl: false });
({ country: { code: r$2.Singapore, name: "Singapore", native: "\u65B0\u52A0\u5761" }, id: e$2.ChineseSimplifiedSingapore, language: { code: o.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Simplified/Singapore)", native_name: "\u4E2D\u6587 (\u65B0\u52A0\u5761)", rtl: false });
({ id: e$2.ChineseTraditional, language: { code: o.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Traditional)", native_name: "\u4E2D\u6587", rtl: false });
({ country: { code: r$2.HongKong, name: "Hong Kong", native: "\u9999\u6E2F" }, id: e$2.ChineseTraditionalHongKong, language: { code: o.Chinese, name: "Chinese (Traditional/Hong Kong)", native: "\u4E2D\u6587" }, name: "Chinese (Hong Kong)", native_name: "\u4E2D\u6587 (\u9999\u6E2F)", rtl: false });
({ country: { code: r$2.Macau, name: "Macau", native: "\u6FB3\u9580" }, id: e$2.ChineseTraditionalMacau, language: { code: o.Chinese, name: "Chinese (Traditional/Macau)", native: "\u4E2D\u6587" }, name: "Chinese (Macau)", native_name: "\u4E2D\u6587 (\u6FB3\u9580)", rtl: false });
({ country: { code: r$2.Singapore, name: "Singapore", native: "\u65B0\u52A0\u5761" }, id: e$2.ChineseTraditionalSingapore, language: { code: o.Chinese, name: "Chinese (Traditional/Singapore)", native: "\u4E2D\u6587" }, name: "Chinese (Singapore)", native_name: "\u4E2D\u6587 (\u65B0\u52A0\u5761)", rtl: false });
({ id: e$2.Croatian, language: { code: o.Croatian, name: "Croatian", native: "Hrvatski" }, name: "Croatian", native_name: "Hrvatski", rtl: false });
({ country: { code: r$2.BosniaAndHerzegovina, name: "Bosnia and Herzegovina", native: "Bosna i Hercegovina" }, id: e$2.CroatianBosniaAndHerzegovina, language: { code: o.Croatian, name: "Croatian", native: "Hrvatski" }, name: "Croatian (Bosnia and Herzegovina)", native_name: "Hrvatski (Bosna i Hercegovina)", rtl: false });
({ country: { code: r$2.Croatia, name: "Croatia", native: "Hrvatska" }, id: e$2.CroatianCroatia, language: { code: o.Croatian, name: "Croatian", native: "Hrvatski" }, name: "Croatian (Croatia)", native_name: "Hrvatski (Hrvatska)", rtl: false });
({ id: e$2.Czech, language: { code: o.Czech, name: "Czech", native: "\u010Ce\u0161tina" }, name: "Czech", native_name: "\u010Ce\u0161tina", rtl: false });
({ country: { code: r$2.CzechRepublic, name: "Czech Republic", native: "\u010Cesk\xE1 republika" }, id: e$2.CzechCzechRepublic, language: { code: o.Czech, name: "Czech", native: "\u010Ce\u0161tina" }, name: "Czech (Czech Republic)", native_name: "\u010Ce\u0161tina (\u010Cesk\xE1 republika)", rtl: false });
({ id: e$2.Danish, language: { code: o.Danish, name: "Danish", native: "Dansk" }, name: "Danish", native_name: "Dansk", rtl: false });
({ country: { code: r$2.Denmark, name: "Denmark", native: "Danmark" }, id: e$2.DanishDenmark, language: { code: o.Danish, name: "Danish", native: "Dansk" }, name: "Danish (Denmark)", native_name: "Dansk (Danmark)", rtl: false });
({ id: e$2.Divehi, language: { code: o.Divehi, name: "Divehi", native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0" }, name: "Divehi", native_name: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0", rtl: true });
({ country: { code: r$2.Maldives, name: "Maldives", native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC" }, id: e$2.DivehiMaldives, language: { code: o.Divehi, name: "Divehi", native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0" }, name: "Divehi (Maldives)", native_name: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0 (\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC)", rtl: true });
({ id: e$2.Dutch, language: { code: o.Dutch, name: "Dutch", native: "Nederlands" }, name: "Dutch", native_name: "Nederlands", rtl: false });
({ country: { code: r$2.Belgium, name: "Belgium", native: "Belgi\xEB" }, id: e$2.DutchBelgium, language: { code: o.Dutch, name: "Dutch", native: "Nederlands" }, name: "Dutch (Belgium)", native_name: "Nederlands (Belgi\xEB)", rtl: false });
({ country: { code: r$2.Netherlands, name: "Netherlands", native: "Nederland" }, id: e$2.DutchNetherlands, language: { code: o.Dutch, name: "Dutch", native: "Nederlands" }, name: "Dutch (Netherlands)", native_name: "Nederlands (Nederland)", rtl: false });
({ id: e$2.English, language: { code: o.English, name: "English", native: "English" }, name: "English", native_name: "English", rtl: false });
({ country: { code: r$2.Australia, name: "Australia", native: "Australia" }, id: e$2.EnglishAustralia, language: { code: o.English, name: "English", native: "English" }, name: "English (Australia)", native_name: "English (Australia)", rtl: false });
({ country: { code: r$2.Belgium, name: "Belgium", native: "Belgi\xEB" }, id: e$2.EnglishBelgium, language: { code: o.English, name: "English", native: "English" }, name: "English (Belgium)", native_name: "English (Belgi\xEB)", rtl: false });
({ country: { code: r$2.Canada, name: "Canada", native: "Canada" }, id: e$2.EnglishCanada, language: { code: o.English, name: "English", native: "English" }, name: "English (Canada)", native_name: "English (Canada)", rtl: false });
({ country: { code: r$2.Ireland, name: "Ireland", native: "\xC9ire" }, id: e$2.EnglishIreland, language: { code: o.English, name: "English", native: "English" }, name: "English (Ireland)", native_name: "English (\xC9ire)", rtl: false });
({ country: { code: r$2.Jamaica, name: "Jamaica", native: "Jamaica" }, id: e$2.EnglishJamaica, language: { code: o.English, name: "English", native: "English" }, name: "English (Jamaica)", native_name: "English (Jamaica)", rtl: false });
({ country: { code: r$2.NewZealand, name: "New Zealand", native: "New Zealand" }, id: e$2.EnglishNewZealand, language: { code: o.English, name: "English", native: "English" }, name: "English (New Zealand)", native_name: "English (New Zealand)", rtl: false });
({ country: { code: r$2.Philippines, name: "Philippines", native: "Philippines" }, id: e$2.EnglishPhilippines, language: { code: o.English, name: "English", native: "English" }, name: "English (Philippines)", native_name: "English (Philippines)", rtl: false });
({ country: { code: r$2.Singapore, name: "Singapore", native: "Singapore" }, id: e$2.EnglishSingapore, language: { code: o.English, name: "English", native: "English" }, name: "English (Singapore)", native_name: "English (Singapore)", rtl: false });
({ country: { code: r$2.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e$2.EnglishSouthAfrica, language: { code: o.English, name: "English", native: "English" }, name: "English (South Africa)", native_name: "English (South Africa)", rtl: false });
({ country: { code: r$2.TrinidadAndTobago, name: "Trinidad and Tobago", native: "Trinidad and Tobago" }, id: e$2.EnglishTrinidadAndTobago, language: { code: o.English, name: "English", native: "English" }, name: "English (Trinidad and Tobago)", native_name: "English (Trinidad and Tobago)", rtl: false });
({ country: { code: r$2.UnitedKingdom, name: "United Kingdom", native: "United Kingdom" }, id: e$2.EnglishUnitedKingdom, language: { code: o.English, name: "English", native: "English" }, name: "English (United Kingdom)", native_name: "English (United Kingdom)", rtl: false });
({ country: { code: r$2.UnitedStates, name: "United States", native: "United States" }, id: e$2.EnglishUnitedStates, language: { code: o.English, name: "English", native: "English" }, name: "English (United States)", native_name: "English (United States)", rtl: false });
({ country: { code: r$2.Zimbabwe, name: "Zimbabwe", native: "Zimbabwe" }, id: e$2.EnglishZimbabwe, language: { code: o.English, name: "English", native: "English" }, name: "English (Zimbabwe)", native_name: "English (Zimbabwe)", rtl: false });
({ id: e$2.Esperanto, language: { code: o.Esperanto, name: "Esperanto", native: "Esperanto" }, name: "Esperanto", native_name: "Esperanto", rtl: false });
({ id: e$2.Estonian, language: { code: o.Estonian, name: "Estonian", native: "Eesti" }, name: "Estonian", native_name: "Eesti", rtl: false });
({ country: { code: r$2.Estonia, name: "Estonia", native: "Eesti" }, id: e$2.EstonianEstonia, language: { code: o.Estonian, name: "Estonian", native: "Eesti" }, name: "Estonian (Estonia)", native_name: "Eesti (Eesti)", rtl: false });
({ id: e$2.Faroese, language: { code: o.Faroese, name: "Faroese", native: "F\xF8royskt" }, name: "Faroese", native_name: "F\xF8royskt", rtl: false });
({ country: { code: r$2.FaroeIslands, name: "Faroe Islands", native: "F\xF8royar" }, id: e$2.FaroeseFaroeIslands, language: { code: o.Faroese, name: "Faroese", native: "F\xF8royskt" }, name: "Faroese (Faroe Islands)", native_name: "F\xF8royskt (F\xF8royar)", rtl: false });
({ id: e$2.Farsi, language: { code: o.Farsi, name: "Farsi", native: "\u0641\u0627\u0631\u0633\u06CC" }, name: "Farsi", native_name: "\u0641\u0627\u0631\u0633\u06CC", rtl: true });
({ country: { code: r$2.Iran, name: "Iran", native: "\u0627\u06CC\u0631\u0627\u0646" }, id: e$2.FarsiIran, language: { code: o.Farsi, name: "Farsi", native: "\u0641\u0627\u0631\u0633\u06CC" }, name: "Farsi (Iran)", native_name: "\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)", rtl: true });
({ id: e$2.Filipino, language: { code: o.Filipino, name: "Filipino", native: "Filipino" }, name: "Filipino", native_name: "Filipino", rtl: false });
({ country: { code: r$2.Philippines, name: "Philippines", native: "Pilipinas" }, id: e$2.FilipinoPhilippines, language: { code: o.Filipino, name: "Filipino", native: "Filipino" }, name: "Filipino (Philippines)", native_name: "Filipino (Pilipinas)", rtl: false });
({ id: e$2.Finnish, language: { code: o.Finnish, name: "Finnish", native: "Suomi" }, name: "Finnish", native_name: "Suomi", rtl: false });
({ country: { code: r$2.Finland, name: "Finland", native: "Suomi" }, id: e$2.FinnishFinland, language: { code: o.Finnish, name: "Finnish", native: "Suomi" }, name: "Finnish (Finland)", native_name: "Suomi (Suomi)", rtl: false });
({ id: e$2.French, language: { code: o.French, name: "French", native: "Fran\xE7ais" }, name: "French", native_name: "Fran\xE7ais", rtl: false });
({ country: { code: r$2.Belgium, name: "Belgium", native: "Belgique" }, id: e$2.FrenchBelgium, language: { code: o.French, name: "French", native: "Fran\xE7ais" }, name: "French (Belgium)", native_name: "Fran\xE7ais (Belgique)", rtl: false });
({ country: { code: r$2.Canada, name: "Canada", native: "Canada" }, id: e$2.FrenchCanada, language: { code: o.French, name: "French", native: "Fran\xE7ais" }, name: "French (Canada)", native_name: "Fran\xE7ais (Canada)", rtl: false });
({ country: { code: r$2.France, name: "France", native: "France" }, id: e$2.FrenchFrance, language: { code: o.French, name: "French", native: "Fran\xE7ais" }, name: "French (France)", native_name: "Fran\xE7ais (France)", rtl: false });
({ country: { code: r$2.Luxembourg, name: "Luxembourg", native: "Luxembourg" }, id: e$2.FrenchLuxembourg, language: { code: o.French, name: "French", native: "Fran\xE7ais" }, name: "French (Luxembourg)", native_name: "Fran\xE7ais (Luxembourg)", rtl: false });
({ country: { code: r$2.Monaco, name: "Monaco", native: "Monaco" }, id: e$2.FrenchMonaco, language: { code: o.French, name: "French", native: "Fran\xE7ais" }, name: "French (Monaco)", native_name: "Fran\xE7ais (Monaco)", rtl: false });
({ country: { code: r$2.Reunion, name: "Reunion", native: "La R\xE9union" }, id: e$2.FrenchReunion, language: { code: o.French, name: "French", native: "Fran\xE7ais" }, name: "French (Reunion)", native_name: "Fran\xE7ais (La R\xE9union)", rtl: false });
({ country: { code: r$2.Switzerland, name: "Switzerland", native: "Suisse" }, id: e$2.FrenchSwitzerland, language: { code: o.French, name: "French", native: "Fran\xE7ais" }, name: "French (Switzerland)", native_name: "Fran\xE7ais (Suisse)", rtl: false });
({ id: e$2.Frisian, language: { code: o.Frisian, name: "Frisian", native: "Frysk" }, name: "Frisian", native_name: "Frysk", rtl: false });
({ country: { code: r$2.Netherlands, name: "Netherlands", native: "Nederland" }, id: e$2.FrisianNetherlands, language: { code: o.Frisian, name: "Frisian", native: "Frysk" }, name: "Frisian (Netherlands)", native_name: "Frysk (Nederland)", rtl: false });
({ id: e$2.Galician, language: { code: o.Galician, name: "Galician", native: "Galego" }, name: "Galician", native_name: "Galego", rtl: false });
({ country: { code: r$2.Spain, name: "Spain", native: "Espa\xF1a" }, id: e$2.GalicianSpain, language: { code: o.Galician, name: "Galician", native: "Galego" }, name: "Galician (Spain)", native_name: "Galego (Espa\xF1a)", rtl: false });
({ id: e$2.Georgian, language: { code: o.Georgian, name: "Georgian", native: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8" }, name: "Georgian", native_name: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8", rtl: false });
({ country: { code: r$2.Georgia, name: "Georgia", native: "\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD" }, id: e$2.GeorgianGeorgia, language: { code: o.Georgian, name: "Georgian", native: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8" }, name: "Georgian (Georgia)", native_name: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8 (\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD)", rtl: false });
({ id: e$2.German, language: { code: o.German, name: "German", native: "Deutsch" }, name: "German", native_name: "Deutsch", rtl: false });
({ country: { code: r$2.Austria, name: "Austria", native: "\xD6sterreich" }, id: e$2.GermanAustria, language: { code: o.German, name: "German", native: "Deutsch" }, name: "German (Austria)", native_name: "Deutsch (\xD6sterreich)", rtl: false });
({ country: { code: r$2.Belgium, name: "Belgium", native: "Belgi\xEB" }, id: e$2.GermanBelgium, language: { code: o.German, name: "German", native: "Deutsch" }, name: "German (Belgium)", native_name: "Deutsch (Belgi\xEB)", rtl: false });
({ country: { code: r$2.Switzerland, name: "Switzerland", native: "Suisse" }, id: e$2.GermanSwitzerland, language: { code: o.German, name: "German", native: "Deutsch" }, name: "German (Switzerland)", native_name: "Deutsch (Suisse)", rtl: false });
({ country: { code: r$2.Liechtenstein, name: "Liechtenstein", native: "Liechtenstein" }, id: e$2.GermanLiechtenstein, language: { code: o.German, name: "German", native: "Deutsch" }, name: "German (Liechtenstein)", native_name: "Deutsch (Liechtenstein)", rtl: false });
({ country: { code: r$2.Luxembourg, name: "Luxembourg", native: "Luxembourg" }, id: e$2.GermanLuxembourg, language: { code: o.German, name: "German", native: "Deutsch" }, name: "German (Luxembourg)", native_name: "Deutsch (Luxembourg)", rtl: false });
({ id: e$2.Greek, language: { code: o.Greek, name: "Greek", native: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC" }, name: "Greek", native_name: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC", rtl: false });
({ country: { code: r$2.Greece, name: "Greece", native: "\u0395\u03BB\u03BB\u03AC\u03B4\u03B1" }, id: e$2.GreekGreece, language: { code: o.Greek, name: "Greek", native: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC" }, name: "Greek (Greece)", native_name: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC (\u0395\u03BB\u03BB\u03AC\u03B4\u03B1)", rtl: false });
({ id: e$2.Greenlandic, language: { code: o.Greenlandic, name: "Greenlandic", native: "Kalaallisut" }, name: "Greenlandic", native_name: "Kalaallisut", rtl: false });
({ country: { code: r$2.Greenland, name: "Greenland", native: "Kalaallit Nunaat" }, id: e$2.GreenlandicGreenland, language: { code: o.Greenlandic, name: "Greenlandic", native: "Kalaallisut" }, name: "Greenlandic (Greenland)", native_name: "Kalaallisut (Kalaallit Nunaat)", rtl: false });
({ id: e$2.Gujarati, language: { code: o.Gujarati, name: "Gujarati", native: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0" }, name: "Gujarati", native_name: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e$2.GujaratiIndia, language: { code: o.Gujarati, name: "Gujarati", native: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0" }, name: "Gujarati (India)", native_name: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0 (\u092D\u093E\u0930\u0924)", rtl: false });
({ id: e$2.Hausa, language: { code: o.Hausa, name: "Hausa", native: "\u0647\u064E\u0648\u064F\u0633\u064E" }, name: "Hausa", native_name: "\u0647\u064E\u0648\u064F\u0633\u064E", rtl: false });
({ country: { code: r$2.Ghana, name: "Ghana", native: "Ghana" }, id: e$2.HausaGhana, language: { code: o.Hausa, name: "Hausa", native: "\u0647\u064E\u0648\u064F\u0633\u064E" }, name: "Hausa (Ghana)", native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Ghana)", rtl: false });
({ country: { code: r$2.Niger, name: "Niger", native: "Niger" }, id: e$2.HausaNiger, language: { code: o.Hausa, name: "Hausa", native: "\u0647\u064E\u0648\u064F\u0633\u064E" }, name: "Hausa (Niger)", native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Niger)", rtl: false });
({ country: { code: r$2.Nigeria, name: "Nigeria", native: "Nigeria" }, id: e$2.HausaNigeria, language: { code: o.Hausa, name: "Hausa", native: "\u0647\u064E\u0648\u064F\u0633\u064E" }, name: "Hausa (Nigeria)", native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Nigeria)", rtl: false });
({ id: e$2.Hebrew, language: { code: o.Hebrew, name: "Hebrew", native: "\u05E2\u05D1\u05E8\u05D9\u05EA" }, name: "Hebrew", native_name: "\u05E2\u05D1\u05E8\u05D9\u05EA", rtl: true });
({ country: { code: r$2.Israel, name: "Hebrew", native: "" }, id: e$2.HebrewIsrael, language: { code: o.Hebrew, name: "Hebrew", native: "" }, name: "Hebrew (Israel)", native_name: "", rtl: true });
({ id: e$2.Hindi, language: { code: o.Hindi, name: "Hindi", native: "\u0939\u093F\u0928\u094D\u0926\u0940" }, name: "Hindi", native_name: "\u0939\u093F\u0928\u094D\u0926\u0940", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e$2.HindiIndia, language: { code: o.Hindi, name: "Hindi", native: "\u092D\u093E\u0930\u0924\u0940\u092F" }, name: "Hindi (India)", native_name: "\u092D\u093E\u0930\u0924\u0940\u092F", rtl: false });
({ id: e$2.Hungarian, language: { code: o.Hungarian, name: "Hungarian", native: "Magyar" }, name: "Hungarian", native_name: "Magyar", rtl: false });
({ country: { code: r$2.Hungary, name: "Hungary", native: "Magyarorsz\xE1g" }, id: e$2.HungarianHungary, language: { code: o.Hungarian, name: "Hungarian", native: "Magyar" }, name: "Hungarian (Hungary)", native_name: "Magyar (Magyarorsz\xE1g)", rtl: false });
({ id: e$2.Icelandic, language: { code: o.Icelandic, name: "Icelandic", native: "\xCDslenska" }, name: "Icelandic", native_name: "\xCDslenska", rtl: false });
({ country: { code: r$2.Iceland, name: "Iceland", native: "\xCDsland" }, id: e$2.IcelandicIceland, language: { code: o.Icelandic, name: "Icelandic", native: "\xCDslenska" }, name: "Icelandic (Iceland)", native_name: "\xCDslenska (\xCDsland)", rtl: false });
({ id: e$2.Igbo, language: { code: o.Igbo, name: "Igbo", native: "Igbo" }, name: "Igbo", native_name: "Igbo", rtl: false });
({ id: e$2.Indonesian, language: { code: o.Indonesian, name: "Indonesian", native: "Bahasa Indonesia" }, name: "Indonesian", native_name: "Bahasa Indonesia", rtl: false });
({ country: { code: r$2.Indonesia, name: "Indonesia", native: "Indonesia" }, id: e$2.IndonesianIndonesia, language: { code: o.Indonesian, name: "Indonesian", native: "Bahasa Indonesia" }, name: "Indonesian (Indonesia)", native_name: "Bahasa Indonesia (Indonesia)", rtl: false });
({ id: e$2.Irish, language: { code: o.Irish, name: "Irish", native: "Gaeilge" }, name: "Irish", native_name: "Gaeilge", rtl: false });
({ country: { code: r$2.Ireland, name: "Ireland", native: "\xC9ire" }, id: e$2.IrishIreland, language: { code: o.Irish, name: "Irish", native: "Gaeilge" }, name: "Irish (Ireland)", native_name: "Gaeilge (\xC9ire)", rtl: false });
({ id: e$2.Italian, language: { code: o.Italian, name: "Italian", native: "Italiano" }, name: "Italian", native_name: "Italiano", rtl: false });
({ country: { code: r$2.Italy, name: "Italy", native: "Italia" }, id: e$2.ItalianItaly, language: { code: o.Italian, name: "Italian", native: "Italiano" }, name: "Italian (Italy)", native_name: "Italiano (Italia)", rtl: false });
({ country: { code: r$2.Switzerland, name: "Switzerland", native: "Schweiz" }, id: e$2.ItalianSwitzerland, language: { code: o.Italian, name: "Italian", native: "Italiano" }, name: "Italian (Switzerland)", native_name: "Italiano (Svizzera)", rtl: false });
({ id: e$2.Japanese, language: { code: o.Japanese, name: "Japanese", native: "\u65E5\u672C\u8A9E" }, name: "Japanese", native_name: "\u65E5\u672C\u8A9E", rtl: false });
({ country: { code: r$2.Japan, name: "Japan", native: "\u65E5\u672C" }, id: e$2.JapaneseJapan, language: { code: o.Japanese, name: "Japanese", native: "\u65E5\u672C\u8A9E" }, name: "Japanese (Japan)", native_name: "\u65E5\u672C\u8A9E (\u65E5\u672C)", rtl: false });
({ id: e$2.Kannada, language: { code: o.Kannada, name: "Kannada", native: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1" }, name: "Kannada", native_name: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u0CAD\u0CBE\u0CB0\u0CA4" }, id: e$2.KannadaIndia, language: { code: o.Kannada, name: "Kannada", native: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1" }, name: "Kannada (India)", native_name: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1 (\u0CAD\u0CBE\u0CB0\u0CA4)", rtl: false });
({ id: e$2.Kazakh, language: { code: o.Kazakh, name: "Kazakh", native: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456" }, name: "Kazakh", native_name: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456", rtl: false });
({ country: { code: r$2.Kazakhstan, name: "Kazakhstan", native: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D" }, id: e$2.KazakhKazakhstan, language: { code: o.Kazakh, name: "Kazakh", native: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456" }, name: "Kazakh (Kazakhstan)", native_name: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)", rtl: false });
({ id: e$2.Khmer, language: { code: o.Khmer, name: "Khmer", native: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A" }, name: "Khmer", native_name: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A", rtl: false });
({ country: { code: r$2.Cambodia, name: "Cambodia", native: "\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6" }, id: e$2.KhmerCambodia, language: { code: o.Khmer, name: "Khmer", native: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A" }, name: "Khmer (Cambodia)", native_name: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A (\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6)", rtl: false });
({ id: e$2.Konkani, language: { code: o.Konkani, name: "Konkani", native: "\u0915\u094B\u0902\u0915\u0923\u0940" }, name: "Konkani", native_name: "\u0915\u094B\u0902\u0915\u0923\u0940", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e$2.KonkaniIndia, language: { code: o.Konkani, name: "Konkani", native: "\u0915\u094B\u0902\u0915\u0923\u0940" }, name: "Konkani (India)", native_name: "\u0915\u094B\u0902\u0915\u0923\u0940 (\u092D\u093E\u0930\u0924)", rtl: false });
({ id: e$2.Korean, language: { code: o.Korean, name: "Korean", native: "\uD55C\uAD6D\uC5B4" }, name: "Korean", native_name: "\uD55C\uAD6D\uC5B4", rtl: false });
({ country: { code: r$2.SouthKorea, name: "South Korea", native: "\uB300\uD55C\uBBFC\uAD6D" }, id: e$2.KoreanSouthKorea, language: { code: o.Korean, name: "Korean", native: "\uD55C\uAD6D\uC5B4" }, name: "Korean (South Korea)", native_name: "\uD55C\uAD6D\uC5B4 (\uB300\uD55C\uBBFC\uAD6D)", rtl: false });
({ id: e$2.Kurdish, language: { code: o.Kurdish, name: "Kurdish", native: "Kurd\xEE" }, name: "Kurdish", native_name: "Kurd\xEE", rtl: false });
({ country: { code: r$2.Iraq, name: "Iraq", native: "\u0627\u0644\u0639\u0631\u0627\u0642" }, id: e$2.KurdishIraq, language: { code: o.Kurdish, name: "Kurdish", native: "Kurd\xEE" }, name: "Kurdish (Iraq)", native_name: "Kurd\xEE (\u0627\u0644\u0639\u0631\u0627\u0642)", rtl: false });
({ country: { code: r$2.Turkey, name: "Turkey", native: "T\xFCrkiye" }, id: e$2.KurdishTurkey, language: { code: o.Kurdish, name: "Kurdish", native: "Kurd\xEE" }, name: "Kurdish (Turkey)", native_name: "Kurd\xEE (T\xFCrkiye)", rtl: false });
({ id: e$2.Kyrgyz, language: { code: o.Kyrgyz, name: "Kyrgyz", native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430" }, name: "Kyrgyz", native_name: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430", rtl: false });
({ country: { code: r$2.Kyrgyzstan, name: "Kyrgyzstan", native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D" }, id: e$2.KyrgyzKyrgyzstan, language: { code: o.Kyrgyz, name: "Kyrgyz", native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430" }, name: "Kyrgyz (Kyrgyzstan)", native_name: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430 (\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D)", rtl: false });
({ id: e$2.Lao, language: { code: o.Lao, name: "Lao", native: "\u0EA5\u0EB2\u0EA7" }, name: "Lao", native_name: "\u0EA5\u0EB2\u0EA7", rtl: false });
({ country: { code: r$2.Laos, name: "Laos", native: "\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95" }, id: e$2.LaoLaos, language: { code: o.Lao, name: "Lao", native: "\u0EA5\u0EB2\u0EA7" }, name: "Lao (Laos)", native_name: "\u0EA5\u0EB2\u0EA7 (\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95)", rtl: false });
({ id: e$2.Latvian, language: { code: o.Latvian, name: "Latvian", native: "Latvie\u0161u" }, name: "Latvian", native_name: "Latvie\u0161u", rtl: false });
({ country: { code: r$2.Latvia, name: "Latvia", native: "Latvija" }, id: e$2.LatvianLatvia, language: { code: o.Latvian, name: "Latvian", native: "Latvie\u0161u" }, name: "Latvian (Latvia)", native_name: "Latvie\u0161u (Latvija)", rtl: false });
({ id: e$2.Lithuanian, language: { code: o.Lithuanian, name: "Lithuanian", native: "Lietuvi\u0173" }, name: "Lithuanian", native_name: "Lietuvi\u0173", rtl: false });
({ country: { code: r$2.Lithuania, name: "Lithuania", native: "Lietuva" }, id: e$2.LithuanianLithuania, language: { code: o.Lithuanian, name: "Lithuanian", native: "Lietuvi\u0173" }, name: "Lithuanian (Lithuania)", native_name: "Lietuvi\u0173 (Lietuva)", rtl: false });
({ id: e$2.Luxembourgish, language: { code: o.Luxembourgish, name: "Luxembourgish", native: "L\xEBtzebuergesch" }, name: "Luxembourgish", native_name: "L\xEBtzebuergesch", rtl: false });
({ country: { code: r$2.Belgium, name: "Belgium", native: "Belgi\xEB" }, id: e$2.LuxembourgishBelgium, language: { code: o.Luxembourgish, name: "Luxembourgish", native: "L\xEBtzebuergesch" }, name: "Luxembourgish (Belgium)", native_name: "L\xEBtzebuergesch (Belgi\xEB)", rtl: false });
({ country: { code: r$2.Luxembourg, name: "Luxembourg", native: "Luxembourg" }, id: e$2.LuxembourgishLuxembourg, language: { code: o.Luxembourgish, name: "Luxembourgish", native: "L\xEBtzebuergesch" }, name: "Luxembourgish (Luxembourg)", native_name: "L\xEBtzebuergesch (Luxembourg)", rtl: false });
({ id: e$2.Macedonian, language: { code: o.Macedonian, name: "Macedonian", native: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438" }, name: "Macedonian", native_name: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438", rtl: false });
({ country: { code: r$2.NorthMacedonia, name: "Macedonia", native: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430" }, id: e$2.MacedonianNorthMacedonia, language: { code: o.Macedonian, name: "Macedonian", native: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438" }, name: "Macedonian (North Macedonia)", native_name: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 (\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430)", rtl: false });
({ id: e$2.Malay, language: { code: o.Malay, name: "Malay", native: "Bahasa Melayu" }, name: "Malay", native_name: "Bahasa Melayu", rtl: false });
({ country: { code: r$2.Brunei, name: "Brunei", native: "Negara Brunei Darussalam" }, id: e$2.MalayBrunei, language: { code: o.Malay, name: "Malay", native: "Bahasa Melayu" }, name: "Malay (Brunei)", native_name: "Bahasa Melayu (Negara Brunei Darussalam)", rtl: false });
({ country: { code: r$2.Malaysia, name: "Malaysia", native: "Malaysia" }, id: e$2.MalayMalaysia, language: { code: o.Malay, name: "Malay", native: "Bahasa Melayu" }, name: "Malay (Malaysia)", native_name: "Bahasa Melayu (Malaysia)", rtl: false });
({ country: { code: r$2.Singapore, name: "Singapore", native: "Singapore" }, id: e$2.MalaySingapore, language: { code: o.Malay, name: "Malay", native: "Bahasa Melayu" }, name: "Malay (Singapore)", native_name: "Bahasa Melayu (Singapore)", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e$2.MalayIndia, language: { code: o.Malay, name: "Malay", native: "Bahasa Melayu" }, name: "Malay (India)", native_name: "Bahasa Melayu (\u092D\u093E\u0930\u0924)", rtl: false });
({ id: e$2.Maltese, language: { code: o.Maltese, name: "Maltese", native: "Malti" }, name: "Maltese", native_name: "Malti", rtl: false });
({ country: { code: r$2.Malta, name: "Malta", native: "Malta" }, id: e$2.MalteseMalta, language: { code: o.Maltese, name: "Maltese", native: "Malti" }, name: "Maltese (Malta)", native_name: "Malti (Malta)", rtl: false });
({ id: e$2.Maori, language: { code: o.Maori, name: "Maori", native: "M\u0101ori" }, name: "Maori", native_name: "M\u0101ori", rtl: false });
({ country: { code: r$2.NewZealand, name: "New Zealand", native: "New Zealand" }, id: e$2.MaoriNewZealand, language: { code: o.Maori, name: "Maori", native: "M\u0101ori" }, name: "Maori (New Zealand)", native_name: "M\u0101ori (New Zealand)", rtl: false });
({ id: e$2.Marathi, language: { code: o.Marathi, name: "Marathi", native: "\u092E\u0930\u093E\u0920\u0940" }, name: "Marathi", native_name: "\u092E\u0930\u093E\u0920\u0940", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e$2.MarathiIndia, language: { code: o.Marathi, name: "Marathi", native: "\u092E\u0930\u093E\u0920\u0940" }, name: "Marathi (India)", native_name: "\u092E\u0930\u093E\u0920\u0940 (\u092D\u093E\u0930\u0924)", rtl: false });
({ id: e$2.Mongolian, language: { code: o.Mongolian, name: "Mongolian", native: "\u041C\u043E\u043D\u0433\u043E\u043B" }, name: "Mongolian", native_name: "\u041C\u043E\u043D\u0433\u043E\u043B", rtl: false });
({ country: { code: r$2.Mongolia, name: "Mongolia", native: "\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441" }, id: e$2.MongolianMongolia, language: { code: o.Mongolian, name: "Mongolian", native: "\u041C\u043E\u043D\u0433\u043E\u043B" }, name: "Mongolian (Mongolia)", native_name: "\u041C\u043E\u043D\u0433\u043E\u043B (\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441)", rtl: false });
({ id: e$2.Montenegrin, language: { code: o.Montenegrin, name: "Montenegrin", native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A" }, name: "Montenegrin", native_name: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A", rtl: false });
({ country: { code: r$2.Montenegro, name: "Montenegro", native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A" }, id: e$2.MontenegrinMontenegro, language: { code: o.Montenegrin, name: "Montenegrin", native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A" }, name: "Montenegrin (Montenegro)", native_name: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A (\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A)", rtl: false });
({ id: e$2.Nepali, language: { code: o.Nepali, name: "Nepali", native: "\u0928\u0947\u092A\u093E\u0932\u0940" }, name: "Nepali", native_name: "\u0928\u0947\u092A\u093E\u0932\u0940", rtl: false });
({ country: { code: r$2.Nepal, name: "Nepal", native: "\u0928\u0947\u092A\u093E\u0932" }, id: e$2.NepaliNepal, language: { code: o.Nepali, name: "Nepali", native: "\u0928\u0947\u092A\u093E\u0932\u0940" }, name: "Nepali (Nepal)", native_name: "\u0928\u0947\u092A\u093E\u0932\u0940 (\u0928\u0947\u092A\u093E\u0932)", rtl: false });
({ id: e$2.NorthernSotho, language: { code: o.NorthernSotho, name: "Northern Sotho", native: "Sesotho sa Leboa" }, name: "Northern Sotho", native_name: "Sesotho sa Leboa", rtl: false });
({ country: { code: r$2.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e$2.NorthernSothoSouthAfrica, language: { code: o.NorthernSotho, name: "Northern Sotho", native: "Sesotho sa Leboa" }, name: "Northern Sotho (South Africa)", native_name: "Sesotho sa Leboa (South Africa)", rtl: false });
({ id: e$2.Norwegian, language: { code: o.Norwegian, name: "Norwegian", native: "Norsk" }, name: "Norwegian", native_name: "Norsk", rtl: false });
({ country: { code: r$2.Norway, name: "Norway", native: "Norge" }, id: e$2.NorwegianBokmalNorway, language: { code: o.NorwegianBokmal, name: "Norwegian", native: "Norsk" }, name: "Norwegian (Bokmal)", native_name: "Norsk (Bokm\xE5l)", rtl: false });
({ country: { code: r$2.Norway, name: "Norway", native: "Norge" }, id: e$2.NorwegianNynorskNorway, language: { code: o.NorwegianNynorsk, name: "Norwegian", native: "Norsk" }, name: "Norwegian (Nynorsk)", native_name: "Norsk (Nynorsk)", rtl: false });
({ id: e$2.Oriya, language: { code: o.Oriya, name: "Oriya", native: "\u0B13\u0B21\u0B3C\u0B3F\u0B06" }, name: "Oriya", native_name: "\u0B13\u0B21\u0B3C\u0B3F\u0B06", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE" }, id: e$2.OriyaIndia, language: { code: o.Oriya, name: "Oriya", native: "\u0B13\u0B21\u0B3C\u0B3F\u0B06" }, name: "Oriya (India)", native_name: "\u0B13\u0B21\u0B3C\u0B3F\u0B06 (\u0B2D\u0B3E\u0B30\u0B24)", rtl: false });
({ id: e$2.Pashto, language: { code: o.Pashto, name: "Pashto", native: "\u067E\u069A\u062A\u0648" }, name: "Pashto", native_name: "\u067E\u069A\u062A\u0648", rtl: true });
({ country: { code: r$2.Afghanistan, name: "Afghanistan", native: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646" }, id: e$2.PashtoAfghanistan, language: { code: o.Pashto, name: "Pashto", native: "\u067E\u069A\u062A\u0648" }, name: "Pashto (Afghanistan)", native_name: "\u067E\u069A\u062A\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)", rtl: true });
({ id: e$2.Persian, language: { code: o.Persian, name: "Persian", native: "\u0641\u0627\u0631\u0633\u06CC" }, name: "Persian", native_name: "\u0641\u0627\u0631\u0633\u06CC", rtl: true });
({ country: { code: r$2.Iran, name: "Iran", native: "\u0627\u06CC\u0631\u0627\u0646" }, id: e$2.PersianIran, language: { code: o.Persian, name: "Persian", native: "\u0641\u0627\u0631\u0633\u06CC" }, name: "Persian (Iran)", native_name: "\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)", rtl: true });
({ id: e$2.Polish, language: { code: o.Polish, name: "Polish", native: "Polski" }, name: "Polish", native_name: "Polski", rtl: false });
({ country: { code: r$2.Poland, name: "Poland", native: "Polska" }, id: e$2.PolishPoland, language: { code: o.Polish, name: "Polish", native: "Polski" }, name: "Polish (Poland)", native_name: "Polski (Polska)", rtl: false });
({ id: e$2.Portuguese, language: { code: o.Portuguese, name: "Portuguese", native: "Portugu\xEAs" }, name: "Portuguese", native_name: "Portugu\xEAs", rtl: false });
({ country: { code: r$2.Brazil, name: "Brazil", native: "Brasil" }, id: e$2.PortugueseBrazil, language: { code: o.Portuguese, name: "Portuguese", native: "Portugu\xEAs" }, name: "Portuguese (Brazil)", native_name: "Portugu\xEAs (Brasil)", rtl: false });
({ country: { code: r$2.Portugal, name: "Portugal", native: "Portugal" }, id: e$2.PortuguesePortugal, language: { code: o.Portuguese, name: "Portuguese", native: "Portugu\xEAs" }, name: "Portuguese (Portugal)", native_name: "Portugu\xEAs (Portugal)", rtl: false });
({ id: e$2.Punjabi, language: { code: o.Punjabi, name: "Punjabi", native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40" }, name: "Punjabi", native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40", rtl: true });
({ country: { code: r$2.Pakistan, name: "Pakistan", native: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646" }, id: e$2.PunjabiPakistan, language: { code: o.Punjabi, name: "Punjabi", native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40" }, name: "Punjabi (Pakistan)", native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)", rtl: true });
({ country: { code: r$2.India, name: "India", native: "\u0A2D\u0A3E\u0A30\u0A24" }, id: e$2.PunjabiIndia, language: { code: o.Punjabi, name: "Punjabi", native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40" }, name: "Punjabi (India)", native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u0A2D\u0A3E\u0A30\u0A24)", rtl: true });
({ id: e$2.Quechua, language: { code: o.Quechua, name: "Quechua", native: "Runa Simi" }, name: "Quechua", native_name: "Runa Simi", rtl: false });
({ country: { code: r$2.Bolivia, name: "Bolivia", native: "Bolivia" }, id: e$2.QuechuaBolivia, language: { code: o.Quechua, name: "Quechua", native: "Runa Simi" }, name: "Quechua (Bolivia)", native_name: "Runa Simi (Bolivia)", rtl: false });
({ country: { code: r$2.Ecuador, name: "Ecuador", native: "Ecuador" }, id: e$2.QuechuaEcuador, language: { code: o.Quechua, name: "Quechua", native: "Runa Simi" }, name: "Quechua (Ecuador)", native_name: "Runa Simi (Ecuador)", rtl: false });
({ country: { code: r$2.Peru, name: "Peru", native: "Per\xFA" }, id: e$2.QuechuaPeru, language: { code: o.Quechua, name: "Quechua", native: "Runa Simi" }, name: "Quechua (Peru)", native_name: "Runa Simi (Per\xFA)", rtl: false });
({ id: e$2.Romanian, language: { code: o.Romanian, name: "Romanian", native: "Rom\xE2n\u0103" }, name: "Romanian", native_name: "Rom\xE2n\u0103", rtl: false });
({ country: { code: r$2.Romania, name: "Romania", native: "Rom\xE2nia" }, id: e$2.RomanianRomania, language: { code: o.Romanian, name: "Romanian", native: "Rom\xE2n\u0103" }, name: "Romanian (Romania)", native_name: "Rom\xE2n\u0103 (Rom\xE2nia)", rtl: false });
({ id: e$2.Russian, language: { code: o.Russian, name: "Russian", native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }, name: "Russian", native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439", rtl: false });
({ country: { code: r$2.RussianFederation, name: "Russian Federation", native: "\u0420\u043E\u0441\u0441\u0438\u044F" }, id: e$2.RussianRussia, language: { code: o.Russian, name: "Russian", native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }, name: "Russian (Russia)", native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0420\u043E\u0441\u0441\u0438\u044F)", rtl: false });
({ country: { code: r$2.Ukraine, name: "Ukraine", native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430" }, id: e$2.RussianUkraine, language: { code: o.Russian, name: "Russian", native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }, name: "Russian (Ukraine)", native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)", rtl: false });
({ country: { code: r$2.Kazakhstan, name: "Kazakhstan", native: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D" }, id: e$2.RussianKazakhstan, language: { code: o.Russian, name: "Russian", native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }, name: "Russian (Kazakhstan)", native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)", rtl: false });
({ country: { code: r$2.Kyrgyzstan, name: "Kyrgyzstan", native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430" }, id: e$2.RussianKyrgyzstan, language: { code: o.Russian, name: "Russian", native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }, name: "Russian (Kyrgyzstan)", native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430)", rtl: false });
({ id: e$2.Sanskrit, language: { code: o.Sanskrit, name: "Sanskrit", native: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D" }, name: "Sanskrit", native_name: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e$2.SanskritIndia, language: { code: o.Sanskrit, name: "Sanskrit", native: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D" }, name: "Sanskrit (India)", native_name: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D (\u092D\u093E\u0930\u0924)", rtl: false });
({ id: e$2.Sami, language: { code: o.Sami, name: "Sami", native: "S\xE1megiella" }, name: "Sami", native_name: "S\xE1megiella", rtl: false });
({ country: { code: r$2.Finland, name: "Finland", native: "Suomi" }, id: e$2.SamiFinland, language: { code: o.Sami, name: "Sami", native: "S\xE1megiella" }, name: "Sami (Finland)", native_name: "S\xE1megiella (Suomi)", rtl: false });
({ country: { code: r$2.Norway, name: "Norway", native: "Norge" }, id: e$2.SamiNorway, language: { code: o.Sami, name: "Sami", native: "S\xE1megiella" }, name: "Sami (Norway)", native_name: "S\xE1megiella (Norge)", rtl: false });
({ country: { code: r$2.Sweden, name: "Sweden", native: "Sverige" }, id: e$2.SamiSweden, language: { code: o.Sami, name: "Sami", native: "S\xE1megiella" }, name: "Sami (Sweden)", native_name: "S\xE1megiella (Sverige)", rtl: false });
({ id: e$2.Samoan, language: { code: o.Samoan, name: "Samoan", native: "Gagana fa\u2019a S\u0101moa" }, name: "Samoan", native_name: "Gagana fa\u2019a S\u0101moa", rtl: false });
({ country: { code: r$2.Samoa, name: "Samoa", native: "Samoa" }, id: e$2.SamoanSamoa, language: { code: o.Samoan, name: "Samoan", native: "Gagana fa\u2019a S\u0101moa" }, name: "Samoan (Samoa)", native_name: "Gagana fa\u2019a S\u0101moa (Samoa)", rtl: false });
({ id: e$2.Serbian, language: { code: o.Serbian, name: "Serbian (Latin)", native: "Srpski (Latinica)" }, name: "Serbian (Latin)", native_name: "Srpski (Latinica)", rtl: false });
({ country: { code: r$2.BosniaAndHerzegovina, name: "Bosnia and Herzegovina", native: "Bosna i Hercegovina" }, id: e$2.SerbianBosniaAndHerzegovina, language: { code: o.Serbian, name: "Serbian (Latin)", native: "Srpski (Latinica)" }, name: "Serbian (Latin) (Bosnia and Herzegovina)", native_name: "Srpski (Latinica) (Bosna i Hercegovina)", rtl: false });
({ country: { code: r$2.SerbiaAndMontenegro, name: "Serbia and Montenegro", native: "Srbija i Crna Gora" }, id: e$2.SerbianSerbiaAndMontenegro, language: { code: o.Serbian, name: "Serbian (Latin)", native: "Srpski (Latinica)" }, name: "Serbian (Latin) (Serbia and Montenegro)", native_name: "Srpski (Latinica) (Srbija i Crna Gora)", rtl: false });
({ id: e$2.SerbianCyrillic, language: { code: o.SerbianCyrillic, name: "Serbian", native: "\u0421\u0440\u043F\u0441\u043A\u0438" }, name: "Serbian (Cyrillic)", native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430)", rtl: false });
({ country: { code: r$2.BosniaAndHerzegovina, name: "Bosnia and Herzegovina", native: "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430" }, id: e$2.SerbianCyrillicBosniaAndHerzegovina, language: { code: o.SerbianCyrillic, name: "Serbian", native: "\u0421\u0440\u043F\u0441\u043A\u0438" }, name: "Serbian (Cyrillic, Bosnia and Herzegovina)", native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430)", rtl: false });
({ country: { code: r$2.SerbiaAndMontenegro, name: "Serbia and Montenegro", native: "\u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430" }, id: e$2.SerbianCyrillicSerbiaAndMontenegro, language: { code: o.SerbianCyrillic, name: "Serbian", native: "\u0421\u0440\u043F\u0441\u043A\u0438" }, name: "Serbian (Cyrillic, Serbia and Montenegro)", native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430)", rtl: false });
({ id: e$2.Slovak, language: { code: o.Slovak, name: "Slovak", native: "Sloven\u010Dina" }, name: "Slovak", native_name: "Sloven\u010Dina", rtl: false });
({ country: { code: r$2.Slovakia, name: "Slovakia", native: "Slovensko" }, id: e$2.SlovakSlovakia, language: { code: o.Slovak, name: "Slovak", native: "Sloven\u010Dina" }, name: "Slovak (Slovakia)", native_name: "Sloven\u010Dina (Slovensko)", rtl: false });
({ id: e$2.Slovenian, language: { code: o.Slovenian, name: "Slovenian", native: "Sloven\u0161\u010Dina" }, name: "Slovenian", native_name: "Sloven\u0161\u010Dina", rtl: false });
({ country: { code: r$2.Slovenia, name: "Slovenia", native: "Slovenija" }, id: e$2.SlovenianSlovenia, language: { code: o.Slovenian, name: "Slovenian", native: "Sloven\u0161\u010Dina" }, name: "Slovenian (Slovenia)", native_name: "Sloven\u0161\u010Dina (Slovenija)", rtl: false });
({ id: e$2.Somali, language: { code: o.Somali, name: "Somali", native: "Soomaaliga" }, name: "Somali", native_name: "Soomaaliga", rtl: true });
({ country: { code: r$2.Somalia, name: "Somalia", native: "Soomaaliya" }, id: e$2.SomaliSomalia, language: { code: o.Somali, name: "Somali", native: "Soomaaliga" }, name: "Somali (Somalia)", native_name: "Soomaaliga (Soomaaliya)", rtl: true });
({ id: e$2.Spanish, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish", native_name: "Espa\xF1ol", rtl: false });
({ country: { code: r$2.Argentina, name: "Argentina", native: "Argentina" }, id: e$2.SpanishArgentina, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Argentina)", native_name: "Espa\xF1ol (Argentina)", rtl: false });
({ country: { code: r$2.Bolivia, name: "Bolivia", native: "Bolivia" }, id: e$2.SpanishBolivia, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Bolivia)", native_name: "Espa\xF1ol (Bolivia)", rtl: false });
({ country: { code: r$2.Chile, name: "Chile", native: "Chile" }, id: e$2.SpanishChile, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Chile)", native_name: "Espa\xF1ol (Chile)", rtl: false });
({ country: { code: r$2.Colombia, name: "Colombia", native: "Colombia" }, id: e$2.SpanishColombia, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Colombia)", native_name: "Espa\xF1ol (Colombia)", rtl: false });
({ country: { code: r$2.CostaRica, name: "Costa Rica", native: "Costa Rica" }, id: e$2.SpanishCostaRica, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Costa Rica)", native_name: "Espa\xF1ol (Costa Rica)", rtl: false });
({ country: { code: r$2.Cuba, name: "Cuba", native: "Cuba" }, id: e$2.SpanishCuba, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Cuba)", native_name: "Espa\xF1ol (Cuba)", rtl: false });
({ country: { code: r$2.DominicanRepublic, name: "Dominican Republic", native: "Rep\xFAblica Dominicana" }, id: e$2.SpanishDominicanRepublic, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Dominican Republic)", native_name: "Espa\xF1ol (Rep\xFAblica Dominicana)", rtl: false });
({ country: { code: r$2.Ecuador, name: "Ecuador", native: "Ecuador" }, id: e$2.SpanishEcuador, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Ecuador)", native_name: "Espa\xF1ol (Ecuador)", rtl: false });
({ country: { code: r$2.ElSalvador, name: "El Salvador", native: "El Salvador" }, id: e$2.SpanishElSalvador, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (El Salvador)", native_name: "Espa\xF1ol (El Salvador)", rtl: false });
({ country: { code: r$2.EquatorialGuinea, name: "Equatorial Guinea", native: "Guinea Ecuatorial" }, id: e$2.SpanishEquatorialGuinea, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Equatorial Guinea)", native_name: "Espa\xF1ol (Guinea Ecuatorial)", rtl: false });
({ country: { code: r$2.Guatemala, name: "Guatemala", native: "Guatemala" }, id: e$2.SpanishGuatemala, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Guatemala)", native_name: "Espa\xF1ol (Guatemala)", rtl: false });
({ country: { code: r$2.Honduras, name: "Honduras", native: "Honduras" }, id: e$2.SpanishHonduras, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Honduras)", native_name: "Espa\xF1ol (Honduras)", rtl: false });
({ country: { code: r$2.Mexico, name: "Mexico", native: "M\xE9xico" }, id: e$2.SpanishMexico, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Mexico)", native_name: "Espa\xF1ol (M\xE9xico)", rtl: false });
({ country: { code: r$2.Nicaragua, name: "Nicaragua", native: "Nicaragua" }, id: e$2.SpanishNicaragua, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Nicaragua)", native_name: "Espa\xF1ol (Nicaragua)", rtl: false });
({ country: { code: r$2.Panama, name: "Panama", native: "Panam\xE1" }, id: e$2.SpanishPanama, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Panama)", native_name: "Espa\xF1ol (Panam\xE1)", rtl: false });
({ country: { code: r$2.Paraguay, name: "Paraguay", native: "Paraguay" }, id: e$2.SpanishParaguay, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Paraguay)", native_name: "Espa\xF1ol (Paraguay)", rtl: false });
({ country: { code: r$2.Peru, name: "Peru", native: "Per\xFA" }, id: e$2.SpanishPeru, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Peru)", native_name: "Espa\xF1ol (Per\xFA)", rtl: false });
({ country: { code: r$2.PuertoRico, name: "Puerto Rico", native: "Puerto Rico" }, id: e$2.SpanishPuertoRico, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Puerto Rico)", native_name: "Espa\xF1ol (Puerto Rico)", rtl: false });
({ country: { code: r$2.Uruguay, name: "Uruguay", native: "Uruguay" }, id: e$2.SpanishUruguay, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Uruguay)", native_name: "Espa\xF1ol (Uruguay)", rtl: false });
({ country: { code: r$2.Venezuela, name: "Venezuela", native: "Venezuela" }, id: e$2.SpanishVenezuela, language: { code: o.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Venezuela)", native_name: "Espa\xF1ol (Venezuela)", rtl: false });
({ country: { code: r$2.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e$2.SutuSouthAfrica, language: { code: o.Sutu, name: "Sutu", native: "Sesotho" }, name: "Sutu (South Africa)", native_name: "Sesotho (Afrika Borwa)", rtl: false });
({ id: e$2.Swahili, language: { code: o.Swahili, name: "Swahili", native: "Kiswahili" }, name: "Swahili", native_name: "Kiswahili", rtl: false });
({ country: { code: r$2.Kenya, name: "Kenya", native: "Kenya" }, id: e$2.SwahiliKenya, language: { code: o.Swahili, name: "Swahili", native: "Kiswahili" }, name: "Swahili (Kenya)", native_name: "Kiswahili (Kenya)", rtl: false });
({ id: e$2.Swedish, language: { code: o.Swedish, name: "Swedish", native: "Svenska" }, name: "Swedish", native_name: "Svenska", rtl: false });
({ country: { code: r$2.Finland, name: "Finland", native: "Suomi" }, id: e$2.SwedishFinland, language: { code: o.Swedish, name: "Swedish", native: "Svenska" }, name: "Swedish (Finland)", native_name: "Svenska (Finland)", rtl: false });
({ country: { code: r$2.Sweden, name: "Sweden", native: "Sverige" }, id: e$2.SwedishSweden, language: { code: o.Swedish, name: "Swedish", native: "Svenska" }, name: "Swedish (Sweden)", native_name: "Svenska (Sverige)", rtl: false });
({ id: e$2.Syriac, language: { code: o.Syriac, name: "Syriac", native: "\u0723\u0718\u072A\u071D\u071D\u0710" }, name: "Syriac", native_name: "\u0723\u0718\u072A\u071D\u071D\u0710", rtl: true });
({ country: { code: r$2.Syria, name: "Syria", native: "\u0633\u0648\u0631\u064A\u0627" }, id: e$2.SyriacSyria, language: { code: o.Syriac, name: "Syriac", native: "\u0723\u0718\u072A\u071D\u071D\u0710" }, name: "Syriac (Syria)", native_name: "\u0723\u0718\u072A\u071D\u071D\u0710 (\u0633\u0648\u0631\u064A\u0627)", rtl: true });
({ id: e$2.Tajik, language: { code: o.Tajik, name: "Tajik", native: "\u0422\u043E\u04B7\u0438\u043A\u04E3" }, name: "Tajik", native_name: "\u0422\u043E\u04B7\u0438\u043A\u04E3", rtl: false });
({ country: { code: r$2.Tajikistan, name: "Tajikistan", native: "\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D" }, id: e$2.TajikTajikistan, language: { code: o.Tajik, name: "Tajik", native: "\u0422\u043E\u04B7\u0438\u043A\u04E3" }, name: "Tajik (Tajikistan)", native_name: "\u0422\u043E\u04B7\u0438\u043A\u04E3 (\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D)", rtl: false });
({ id: e$2.Tagalog, language: { code: o.Tagalog, name: "Tagalog", native: "Tagalog" }, name: "Tagalog", native_name: "Tagalog", rtl: false });
({ country: { code: r$2.Philippines, name: "Philippines", native: "Pilipinas" }, id: e$2.TagalogPhilippines, language: { code: o.Tagalog, name: "Tagalog", native: "Tagalog" }, name: "Tagalog (Philippines)", native_name: "Tagalog (Pilipinas)", rtl: false });
({ id: e$2.Tamil, language: { code: o.Tamil, name: "Tamil", native: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD" }, name: "Tamil", native_name: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE" }, id: e$2.TamilIndia, language: { code: o.Tamil, name: "Tamil", native: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD" }, name: "Tamil (India)", native_name: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)", rtl: false });
({ id: e$2.Telugu, language: { code: o.Telugu, name: "Telugu", native: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41" }, name: "Telugu", native_name: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02" }, id: e$2.TeluguIndia, language: { code: o.Telugu, name: "Telugu", native: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41" }, name: "Telugu (India)", native_name: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41 (\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02)", rtl: false });
({ id: e$2.Thai, language: { code: o.Thai, name: "Thai", native: "\u0E44\u0E17\u0E22" }, name: "Thai", native_name: "\u0E44\u0E17\u0E22", rtl: false });
({ country: { code: r$2.Thailand, name: "Thailand", native: "\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22" }, id: e$2.ThaiThailand, language: { code: o.Thai, name: "Thai", native: "\u0E44\u0E17\u0E22" }, name: "Thai (Thailand)", native_name: "\u0E44\u0E17\u0E22 (\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22)", rtl: false });
({ id: e$2.Tibetan, language: { code: o.Tibetan, name: "Tibetan", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Tibetan", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42", rtl: false });
({ country: { code: r$2.China, name: "China", native: "\u4E2D\u56FD" }, id: e$2.TibetanChina, language: { code: o.Tibetan, name: "Tibetan", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Tibetan (China)", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42)", rtl: false });
({ country: { code: r$2.Bhutan, name: "Bhutan", native: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D" }, id: e$2.TibetanBhutan, language: { code: o.Tibetan, name: "Tibetan", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Tibetan (Bhutan)", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D)", rtl: false });
({ country: { code: r$2.India, name: "India", native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE" }, id: e$2.TibetanIndia, language: { code: o.Tibetan, name: "Tibetan", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Tibetan (India)", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)", rtl: false });
({ id: e$2.Tsonga, language: { code: o.Tsonga, name: "Tsonga", native: "Xitsonga" }, name: "Tsonga", native_name: "Xitsonga", rtl: false });
({ id: e$2.Tswana, language: { code: o.Tswana, name: "Tswana", native: "Setswana" }, name: "Tswana", native_name: "Setswana", rtl: false });
({ country: { code: r$2.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e$2.TswanaSouthAfrica, language: { code: o.Tswana, name: "Tswana", native: "Setswana" }, name: "Tswana (South Africa)", native_name: "Setswana (South Africa)", rtl: false });
({ id: e$2.Turkish, language: { code: o.Turkish, name: "Turkish", native: "T\xFCrk\xE7e" }, name: "Turkish", native_name: "T\xFCrk\xE7e", rtl: false });
({ country: { code: r$2.Turkey, name: "Turkey", native: "T\xFCrkiye" }, id: e$2.TurkishTurkey, language: { code: o.Turkish, name: "Turkish", native: "T\xFCrk\xE7e" }, name: "Turkish (Turkey)", native_name: "T\xFCrk\xE7e (T\xFCrkiye)", rtl: false });
({ id: e$2.Ukrainian, language: { code: o.Ukrainian, name: "Ukrainian", native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430" }, name: "Ukrainian", native_name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430", rtl: false });
({ country: { code: r$2.Ukraine, name: "Ukraine", native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430" }, id: e$2.UkrainianUkraine, language: { code: o.Ukrainian, name: "Ukrainian", native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430" }, name: "Ukrainian (Ukraine)", native_name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)", rtl: false });
({ id: e$2.Urdu, language: { code: o.Urdu, name: "Urdu", native: "\u0627\u0631\u062F\u0648" }, name: "Urdu", native_name: "\u0627\u0631\u062F\u0648", rtl: true });
({ country: { code: r$2.Afghanistan, name: "Afghanistan", native: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646" }, id: e$2.UrduAfghanistan, language: { code: o.Urdu, name: "Urdu", native: "\u0627\u0631\u062F\u0648" }, name: "Urdu (Afghanistan)", native_name: "\u0627\u0631\u062F\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)", rtl: true });
({ country: { code: r$2.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e$2.UrduIndia, language: { code: o.Urdu, name: "Urdu", native: "\u0627\u0631\u062F\u0648" }, name: "Urdu (India)", native_name: "\u0627\u0631\u062F\u0648 (\u092D\u093E\u0930\u0924)", rtl: true });
({ country: { code: r$2.Pakistan, name: "Pakistan", native: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646" }, id: e$2.UrduPakistan, language: { code: o.Urdu, name: "Urdu", native: "\u0627\u0631\u062F\u0648" }, name: "Urdu (Pakistan)", native_name: "\u0627\u0631\u062F\u0648 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)", rtl: true });
({ id: e$2.Uzbek, language: { code: o.Uzbek, name: "Uzbek", native: "O\u02BBzbekcha" }, name: "Uzbek", native_name: "O\u02BBzbekcha", rtl: false });
({ country: { code: r$2.Uzbekistan, name: "Uzbekistan", native: "O\u02BBzbekiston" }, id: e$2.UzbekUzbekistan, language: { code: o.Uzbek, name: "Uzbek", native: "O\u02BBzbekcha" }, name: "Uzbek (Latin, Uzbekistan)", native_name: "O\u02BBzbekcha (O\u02BBzbekiston)", rtl: false });
({ country: { code: r$2.Uzbekistan, name: "Uzbekistan", native: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D" }, id: e$2.UzbekCyrillic, language: { code: o.Uzbek, name: "Uzbek", native: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D" }, name: "Uzbek (Cyrillic)", native_name: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D (\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D)", rtl: false });
({ id: e$2.Vietnamese, language: { code: o.Vietnamese, name: "Vietnamese", native: "Ti\u1EBFng Vi\u1EC7t" }, name: "Vietnamese", native_name: "Ti\u1EBFng Vi\u1EC7t", rtl: false });
({ country: { code: r$2.Vietnam, name: "Vietnam", native: "Vi\u1EC7t Nam" }, id: e$2.VietnameseVietnam, language: { code: o.Vietnamese, name: "Vietnamese", native: "Ti\u1EBFng Vi\u1EC7t" }, name: "Vietnamese (Vietnam)", native_name: "Ti\u1EBFng Vi\u1EC7t (Vi\u1EC7t Nam)", rtl: false });
({ id: e$2.Welsh, language: { code: o.Welsh, name: "Welsh", native: "Cymraeg" }, name: "Welsh", native_name: "Cymraeg", rtl: false });
({ country: { code: r$2.UnitedKingdom, name: "United Kingdom", native: "United Kingdom" }, id: e$2.WelshUnitedKingdom, language: { code: o.Welsh, name: "Welsh", native: "Cymraeg" }, name: "Welsh (United Kingdom)", native_name: "Cymraeg (United Kingdom)", rtl: false });
({ id: e$2.Xhosa, language: { code: o.Xhosa, name: "Xhosa", native: "isiXhosa" }, name: "Xhosa", native_name: "isiXhosa", rtl: false });
({ country: { code: r$2.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e$2.XhosaSouthAfrica, language: { code: o.Xhosa, name: "Xhosa", native: "isiXhosa" }, name: "Xhosa (South Africa)", native_name: "isiXhosa (South Africa)", rtl: false });
({ id: e$2.Yiddish, language: { code: o.Yiddish, name: "Yiddish", native: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9" }, name: "Yiddish", native_name: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9", rtl: false });
({ id: e$2.Yoruba, language: { code: o.Yoruba, name: "Yoruba", native: "Yor\xF9b\xE1" }, name: "Yoruba", native_name: "Yor\xF9b\xE1", rtl: false });
({ country: { code: r$2.Nigeria, name: "Nigeria", native: "Nigeria" }, id: e$2.YorubaNigeria, language: { code: o.Yoruba, name: "Yoruba", native: "Yor\xF9b\xE1" }, name: "Yoruba (Nigeria)", native_name: "Yor\xF9b\xE1 (Nigeria)", rtl: false });
({ id: e$2.Zulu, language: { code: o.Zulu, name: "Zulu", native: "isiZulu" }, name: "Zulu", native_name: "isiZulu", rtl: false });
({ country: { code: r$2.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e$2.ZuluSouthAfrica, language: { code: o.Zulu, name: "Zulu", native: "isiZulu" }, name: "Zulu (South Africa)", native_name: "isiZulu (South Africa)", rtl: false });
({ id: t$1.AfricaAbidjan, name: "Africa/Abidjan", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaAccra, name: "Africa/Accra", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaAddisAbaba, name: "Africa/Addis_Ababa", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.AfricaAlgiers, name: "Africa/Algiers", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.AfricaAsmara, name: "Africa/Asmara", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.AfricaBamako, name: "Africa/Bamako", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaBangui, name: "Africa/Bangui", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaBanjul, name: "Africa/Banjul", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaBissau, name: "Africa/Bissau", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaBlantyre, name: "Africa/Blantyre", offset: i$3.UTC_PLUS_2, timezone: n$2.CentralAfricaTime });
({ id: t$1.AfricaBrazzaville, name: "Africa/Brazzaville", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaBujumbura, name: "Africa/Bujumbura", offset: i$3.UTC_PLUS_2, timezone: n$2.CentralAfricaTime });
({ id: t$1.AfricaCairo, name: "Africa/Cairo", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.AfricaCasablanca, name: "Africa/Casablanca", offset: i$3.UTC_PLUS_1, timezone: n$2.WesternEuropeanTime });
({ id: t$1.AfricaCeuta, name: "Africa/Ceuta", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.AfricaConakry, name: "Africa/Conakry", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaDakar, name: "Africa/Dakar", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaDarEsSalaam, name: "Africa/Dar_es_Salaam", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.AfricaDjibouti, name: "Africa/Djibouti", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.AfricaDouala, name: "Africa/Douala", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaElAaiun, name: "Africa/El_Aaiun", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaFreetown, name: "Africa/Freetown", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaGaborone, name: "Africa/Gaborone", offset: i$3.UTC_PLUS_2, timezone: n$2.CentralAfricaTime });
({ id: t$1.AfricaHarare, name: "Africa/Harare", offset: i$3.UTC_PLUS_2, timezone: n$2.CentralAfricaTime });
({ id: t$1.AfricaJohannesburg, name: "Africa/Johannesburg", offset: i$3.UTC_PLUS_2, timezone: n$2.SouthAfricanStandardTime });
({ id: t$1.AfricaJuba, name: "Africa/Juba", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.AfricaKampala, name: "Africa/Kampala", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.AfricaKhartoum, name: "Africa/Khartoum", offset: i$3.UTC_PLUS_2, timezone: n$2.EastAfricaTime });
({ id: t$1.AfricaKigali, name: "Africa/Kigali", offset: i$3.UTC_PLUS_2, timezone: n$2.CentralAfricaTime });
({ id: t$1.AfricaKinshasa, name: "Africa/Kinshasa", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaLagos, name: "Africa/Lagos", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaLibreville, name: "Africa/Libreville", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaLome, name: "Africa/Lome", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaLuanda, name: "Africa/Luanda", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaLubumbashi, name: "Africa/Lubumbashi", offset: i$3.UTC_PLUS_2, timezone: n$2.CentralAfricaTime });
({ id: t$1.AfricaLusaka, name: "Africa/Lusaka", offset: i$3.UTC_PLUS_2, timezone: n$2.CentralAfricaTime });
({ id: t$1.AfricaMalabo, name: "Africa/Malabo", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaMaputo, name: "Africa/Maputo", offset: i$3.UTC_PLUS_2, timezone: n$2.CentralAfricaTime });
({ id: t$1.AfricaMaseru, name: "Africa/Maseru", offset: i$3.UTC_PLUS_2, timezone: n$2.SouthAfricanStandardTime });
({ id: t$1.AfricaMbabane, name: "Africa/Mbabane", offset: i$3.UTC_PLUS_2, timezone: n$2.SouthAfricanStandardTime });
({ id: t$1.AfricaMogadishu, name: "Africa/Mogadishu", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.AfricaMonrovia, name: "Africa/Monrovia", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaNairobi, name: "Africa/Nairobi", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.AfricaNdjamena, name: "Africa/Ndjamena", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaNiamey, name: "Africa/Niamey", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaNouakchott, name: "Africa/Nouakchott", offset: i$3.UTC_0, timezone: n$2.GreenwichMeanTime });
({ id: t$1.AfricaOuagadougou, name: "Africa/Ouagadougou", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaPortoNovo, name: "Africa/Porto-Novo", offset: i$3.UTC_PLUS_1, timezone: n$2.WestAfricaTime });
({ id: t$1.AfricaSaoTome, name: "Africa/SaoTome", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaTripoli, name: "Africa/Tripoli", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaTunis, name: "Africa/Tunis", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AfricaWindhoek, name: "Africa/Windhoek", offset: i$3.UTC_PLUS_2, timezone: n$2.WestAfricaTime });
({ id: t$1.AmericaAdak, name: "America/Adak", offset: i$3.UTC_PLUS_10, timezone: n$2.HawaiiAleutianStandardTime });
({ id: t$1.AmericaAnchorage, name: "America/Anchorage", offset: i$3.UTC_PLUS_9, timezone: n$2.AlaskaStandardTime });
({ id: t$1.AmericaAnguilla, name: "America/Anguilla", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaAntigua, name: "America/Antigua", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaAraguaina, name: "America/Araguaina", offset: i$3.UTC_MINUS_3, timezone: n$2.BrasiliaTime });
({ id: t$1.AmericaArgentinaBuenosAires, name: "America/Argentina/Buenos_Aires", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaCatamarca, name: "America/Argentina/Catamarca", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaCordoba, name: "America/Argentina/Cordoba", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaJujuy, name: "America/Argentina/Jujuy", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaLaRioja, name: "America/Argentina/La_Rioja", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaMendoza, name: "America/Argentina/Mendoza", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaRioGallegos, name: "America/Argentina/Rio_Gallegos", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaSalta, name: "America/Argentina/Salta", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaSanJuan, name: "America/Argentina/San_Juan", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaSanLuis, name: "America/Argentina/San_Luis", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaTucuman, name: "America/Argentina/Tucuman", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaArgentinaUshuaia, name: "America/Argentina/Ushuaia", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaAruba, name: "America/Aruba", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaAsuncion, name: "America/Asuncion", offset: i$3.UTC_MINUS_4, timezone: n$2.ParaguayTime });
({ id: t$1.AmericaAtikokan, name: "America/Atikokan", offset: i$3.UTC_0, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaAtka, name: "America/Atka", offset: i$3.UTC_MINUS_10, timezone: n$2.HawaiiAleutianStandardTime });
({ id: t$1.AmericaBahia, name: "America/Bahia", offset: i$3.UTC_MINUS_3, timezone: n$2.BrasiliaTime });
({ id: t$1.AmericaBahiaBanderas, name: "America/Bahia_Banderas", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaBarbados, name: "America/Barbados", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaBelem, name: "America/Belem", offset: i$3.UTC_MINUS_3, timezone: n$2.BrasiliaTime });
({ id: t$1.AmericaBelize, name: "America/Belize", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaBlancSablon, name: "America/Blanc-Sablon", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaBoaVista, name: "America/Boa_Vista", offset: i$3.UTC_MINUS_4, timezone: n$2.AmazonTime });
({ id: t$1.AmericaBogota, name: "America/Bogota", offset: i$3.UTC_MINUS_5, timezone: n$2.ColombiaTime });
({ id: t$1.AmericaBoise, name: "America/Boise", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaCambridgeBay, name: "America/Cambridge_Bay", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaCampoGrande, name: "America/Campo_Grande", offset: i$3.UTC_MINUS_4, timezone: n$2.AmazonTime });
({ id: t$1.AmericaCancun, name: "America/Cancun", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaCaracas, name: "America/Caracas", offset: i$3.UTC_MINUS_4, timezone: n$2.VenezuelaStandardTime });
({ id: t$1.AmericaCayenne, name: "America/Cayenne", offset: i$3.UTC_MINUS_3, timezone: n$2.FrenchGuianaTime });
({ id: t$1.AmericaCayman, name: "America/Cayman", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaChicago, name: "America/Chicago", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaChihuahua, name: "America/Chihuahua", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaCoralHarbour, name: "America/Coral_Harbour", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaCordoba, name: "America/Cordoba", offset: i$3.UTC_MINUS_3, timezone: n$2.ArgentinaTime });
({ id: t$1.AmericaCostaRica, name: "America/Costa_Rica", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaCreston, name: "America/Creston", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaCuiaba, name: "America/Cuiaba", offset: i$3.UTC_MINUS_4, timezone: n$2.AmazonTime });
({ id: t$1.AmericaCuracao, name: "America/Curacao", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaDanmarkshavn, name: "America/Danmarkshavn", offset: i$3.UTC_0, timezone: n$2.GreenwichMeanTime });
({ id: t$1.AmericaDawson, name: "America/Dawson", offset: i$3.UTC_MINUS_8, timezone: n$2.PacificStandardTime });
({ id: t$1.AmericaDawsonCreek, name: "America/Dawson_Creek", offset: i$3.UTC_MINUS_8, timezone: n$2.PacificStandardTime });
({ id: t$1.AmericaDenver, name: "America/Denver", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaDetroit, name: "America/Detroit", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaDominica, name: "America/Dominica", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaEdmonton, name: "America/Edmonton", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaEirunepe, name: "America/Eirunepe", offset: i$3.UTC_MINUS_5, timezone: n$2.AcreTime });
({ id: t$1.AmericaElSalvador, name: "America/El_Salvador", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaFortaleza, name: "America/Fortaleza", offset: i$3.UTC_MINUS_3, timezone: n$2.BrasiliaTime });
({ id: t$1.AmericaGlaceBay, name: "America/Glace_Bay", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaGodthab, name: "America/Godthab", offset: i$3.UTC_MINUS_3, timezone: n$2.WestGreenlandTime });
({ id: t$1.AmericaGooseBay, name: "America/Goose_Bay", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaGrandTurk, name: "America/Grand_Turk", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaGrenada, name: "America/Grenada", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaGuadeloupe, name: "America/Guadeloupe", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaGuatemala, name: "America/Guatemala", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaGuayaquil, name: "America/Guayaquil", offset: i$3.UTC_MINUS_5, timezone: n$2.EcuadorTime });
({ id: t$1.AmericaGuyana, name: "America/Guyana", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaHalifax, name: "America/Halifax", offset: i$3.UTC_0, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaHavana, name: "America/Havana", offset: i$3.UTC_MINUS_5, timezone: n$2.CubaStandardTime });
({ id: t$1.AmericaHermosillo, name: "America/Hermosillo", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaIndianaIndianapolis, name: "America/Indiana/Indianapolis", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaIndianaKnox, name: "America/Indiana/Knox", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaIndianaMarengo, name: "America/Indiana/Marengo", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaIndianaPetersburg, name: "America/Indiana/Petersburg", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaIndianaTellCity, name: "America/Indiana/Tell_City", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaIndianaVevay, name: "America/Indiana/Vevay", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaIndianaVincennes, name: "America/Indiana/Vincennes", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaIndianaWinamac, name: "America/Indiana/Winamac", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaInuvik, name: "America/Inuvik", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaIqaluit, name: "America/Iqaluit", offset: i$3.UTC_0, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaJamaica, name: "America/Jamaica", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaJuneau, name: "America/Juneau", offset: i$3.UTC_MINUS_9, timezone: n$2.AlaskaStandardTime });
({ id: t$1.AmericaKentuckyLouisville, name: "America/Kentucky/Louisville", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaKentuckyMonticello, name: "America/Kentucky/Monticello", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaKralendijk, name: "America/Kralendijk", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaLaPaz, name: "America/La_Paz", offset: i$3.UTC_MINUS_4, timezone: n$2.BoliviaTime });
({ id: t$1.AmericaLima, name: "America/Lima", offset: i$3.UTC_MINUS_5, timezone: n$2.PeruTime });
({ id: t$1.AmericaLosAngeles, name: "America/Los_Angeles", offset: i$3.UTC_MINUS_8, timezone: n$2.PacificStandardTime });
({ id: t$1.AmericaLouisville, name: "America/Louisville", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaLowerPrinces, name: "America/Lower_Princes", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaMaceio, name: "America/Maceio", offset: i$3.UTC_MINUS_3, timezone: n$2.BrasiliaTime });
({ id: t$1.AmericaManagua, name: "America/Managua", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaManaus, name: "America/Manaus", offset: i$3.UTC_MINUS_4, timezone: n$2.AmazonTime });
({ id: t$1.AmericaMarigot, name: "America/Marigot", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaMartinique, name: "America/Martinique", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaMatamoros, name: "America/Matamoros", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaMazatlan, name: "America/Mazatlan", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaMenominee, name: "America/Menominee", offset: i$3.UTC_MINUS_5, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaMerida, name: "America/Merida", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaMetlakatla, name: "America/Metlakatla", offset: i$3.UTC_MINUS_9, timezone: n$2.AlaskaStandardTime });
({ id: t$1.AmericaMexicoCity, name: "America/Mexico_City", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaMiquelon, name: "America/Miquelon", offset: i$3.UTC_MINUS_3, timezone: n$2.SaintPierreAndMiquelonStandardTime });
({ id: t$1.AmericaMoncton, name: "America/Moncton", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaMonterrey, name: "America/Monterrey", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaMontevideo, name: "America/Montevideo", offset: i$3.UTC_MINUS_3, timezone: n$2.UruguayStandardTime });
({ id: t$1.AmericaMontreal, name: "America/Montreal", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaMontserrat, name: "America/Montserrat", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaNassau, name: "America/Nassau", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaNewYork, name: "America/New_York", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaNipigon, name: "America/Nipigon", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaNome, name: "America/Nome", offset: i$3.UTC_MINUS_9, timezone: n$2.AlaskaStandardTime });
({ id: t$1.AmericaNoronha, name: "America/Noronha", offset: i$3.UTC_MINUS_2, timezone: n$2.FernandoDeNoronhaTime });
({ id: t$1.AmericaNorthDakotaBeulah, name: "America/North_Dakota/Beulah", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaNorthDakotaCenter, name: "America/North_Dakota/Center", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaNorthDakotaNewSalem, name: "America/North_Dakota/New_Salem", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaOjinaga, name: "America/Ojinaga", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaPanama, name: "America/Panama", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaPangnirtung, name: "America/Pangnirtung", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaParamaribo, name: "America/Paramaribo", offset: i$3.UTC_MINUS_3, timezone: n$2.SurinameTime });
({ id: t$1.AmericaPhoenix, name: "America/Phoenix", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaPortAuPrince, name: "America/Port-au-Prince", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaPortOfSpain, name: "America/Port_of_Spain", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaPortoVelho, name: "America/Porto_Velho", offset: i$3.UTC_MINUS_4, timezone: n$2.AmazonTime });
({ id: t$1.AmericaPuertoRico, name: "America/Puerto_Rico", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaRainyRiver, name: "America/Rainy_River", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaRankinInlet, name: "America/Rankin_Inlet", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaRecife, name: "America/Recife", offset: i$3.UTC_MINUS_3, timezone: n$2.BrasiliaTime });
({ id: t$1.AmericaRegina, name: "America/Regina", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaResolute, name: "America/Resolute", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaRioBranco, name: "America/Rio_Branco", offset: i$3.UTC_MINUS_5, timezone: n$2.AcreTime });
({ id: t$1.AmericaSantaIsabel, name: "America/Santa_Isabel", offset: i$3.UTC_MINUS_8, timezone: n$2.PacificStandardTime });
({ id: t$1.AmericaSantarem, name: "America/Santarem", offset: i$3.UTC_MINUS_3, timezone: n$2.BrasiliaTime });
({ id: t$1.AmericaSantiago, name: "America/Santiago", offset: i$3.UTC_MINUS_4, timezone: n$2.ChileStandardTime });
({ id: t$1.AmericaSantoDomingo, name: "America/Santo_Domingo", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaSaoPaulo, name: "America/Sao_Paulo", offset: i$3.UTC_MINUS_3, timezone: n$2.BrasiliaTime });
({ id: t$1.AmericaScoresbysund, name: "America/Scoresbysund", offset: i$3.UTC_MINUS_1, timezone: n$2.EasternGreenlandTime });
({ id: t$1.AmericaShiprock, name: "America/Shiprock", offset: i$3.UTC_MINUS_7, timezone: n$2.MountainStandardTime });
({ id: t$1.AmericaSitka, name: "America/Sitka", offset: i$3.UTC_MINUS_9, timezone: n$2.AlaskaStandardTime });
({ id: t$1.AmericaStBarthelemy, name: "America/St_Barthelemy", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaStJohns, name: "America/St_Johns", offset: i$3.UTC_MINUS_3, timezone: n$2.NewfoundlandStandardTime });
({ id: t$1.AmericaStKitts, name: "America/St_Kitts", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaStLucia, name: "America/St_Lucia", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaStThomas, name: "America/St_Thomas", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaStVincent, name: "America/St_Vincent", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaSwiftCurrent, name: "America/Swift_Current", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaTegucigalpa, name: "America/Tegucigalpa", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaThule, name: "America/Thule", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaThunderBay, name: "America/Thunder_Bay", offset: i$3.UTC_MINUS_4, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaTijuana, name: "America/Tijuana", offset: i$3.UTC_MINUS_8, timezone: n$2.PacificStandardTime });
({ id: t$1.AmericaToronto, name: "America/Toronto", offset: i$3.UTC_MINUS_5, timezone: n$2.EasternStandardTime });
({ id: t$1.AmericaTortola, name: "America/Tortola", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AmericaVancouver, name: "America/Vancouver", offset: i$3.UTC_MINUS_8, timezone: n$2.PacificStandardTime });
({ id: t$1.AmericaWhitehorse, name: "America/Whitehorse", offset: i$3.UTC_MINUS_8, timezone: n$2.PacificStandardTime });
({ id: t$1.AmericaWinnipeg, name: "America/Winnipeg", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AmericaYakutat, name: "America/Yakutat", offset: i$3.UTC_MINUS_9, timezone: n$2.AlaskaStandardTime });
({ id: t$1.AmericaYellowknife, name: "America/Yellowknife", offset: i$3.UTC_MINUS_6, timezone: n$2.MountainStandardTime });
({ id: t$1.AntarcticaCasey, name: "Antarctica/Casey", offset: i$3.UTC_MINUS_8, timezone: n$2.WesternStandardTime });
({ id: t$1.AntarcticaDavis, name: "Antarctica/Davis", offset: i$3.UTC_MINUS_7, timezone: n$2.NewfoundlandStandardTime });
({ id: t$1.AntarcticaDumontDUrville, name: "Antarctica/DumontDUrville", offset: i$3.UTC_MINUS_10, timezone: n$2.CentralStandardTime });
({ id: t$1.AntarcticaMacquarie, name: "Antarctica/Macquarie", offset: i$3.UTC_MINUS_11, timezone: n$2.CentralStandardTime });
({ id: t$1.AntarcticaMawson, name: "Antarctica/Mawson", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.AntarcticaMcMurdo, name: "Antarctica/McMurdo", offset: i$3.UTC_MINUS_12, timezone: n$2.NewZealandStandardTime });
({ id: t$1.AntarcticaPalmer, name: "Antarctica/Palmer", offset: i$3.UTC_MINUS_4, timezone: n$2.ChathamStandardTime });
({ id: t$1.AntarcticaRothera, name: "Antarctica/Rothera", offset: i$3.UTC_MINUS_3, timezone: n$2.RotheraResearchStationTime });
({ id: t$1.AntarcticaSyowa, name: "Antarctica/Syowa", offset: i$3.UTC_MINUS_3, timezone: n$2.ShowaStationTime });
({ id: t$1.AntarcticaTroll, name: "Antarctica/Troll", offset: i$3.UTC_MINUS_2, timezone: n$2.CentralStandardTime });
({ id: t$1.AntarcticaVostok, name: "Antarctica/Vostok", offset: i$3.UTC_MINUS_6, timezone: n$2.CentralStandardTime });
({ id: t$1.ArcticLongyearbyen, name: "Arctic/Longyearbyen", offset: i$3.UTC_MINUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.AsiaAden, name: "Asia/Aden", offset: i$3.UTC_PLUS_3, timezone: n$2.ArabiaStandardTime });
({ id: t$1.AsiaAlmaty, name: "Asia/Almaty", offset: i$3.UTC_PLUS_6, timezone: n$2.AlmaAtaTime });
({ id: t$1.AsiaAmman, name: "Asia/Amman", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.AsiaAnadyr, name: "Asia/Anadyr", offset: i$3.UTC_PLUS_12, timezone: n$2.NewCaledoniaTime });
({ id: t$1.AsiaAqtau, name: "Asia/Aqtau", offset: i$3.UTC_PLUS_5, timezone: n$2.AqtobeTime });
({ id: t$1.AsiaAqtobe, name: "Asia/Aqtobe", offset: i$3.UTC_PLUS_5, timezone: n$2.AqtobeTime });
({ id: t$1.AsiaAshgabat, name: "Asia/Ashgabat", offset: i$3.UTC_PLUS_5, timezone: n$2.TurkmenistanTime });
({ id: t$1.AsiaBaghdad, name: "Asia/Baghdad", offset: i$3.UTC_PLUS_3, timezone: n$2.ArabiaStandardTime });
({ id: t$1.AsiaBahrain, name: "Asia/Bahrain", offset: i$3.UTC_PLUS_3, timezone: n$2.ArabiaStandardTime });
({ id: t$1.AsiaBaku, name: "Asia/Baku", offset: i$3.UTC_PLUS_4, timezone: n$2.AzerbaijanTime });
({ id: t$1.AsiaBangkok, name: "Asia/Bangkok", offset: i$3.UTC_PLUS_7, timezone: n$2.IndochinaTime });
({ id: t$1.AsiaBarnaul, name: "Asia/Barnaul", offset: i$3.UTC_PLUS_7, timezone: n$2.KrasnoyarskTime });
({ id: t$1.AsiaBeirut, name: "Asia/Beirut", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.AsiaBishkek, name: "Asia/Bishkek", offset: i$3.UTC_PLUS_6, timezone: n$2.KyrgyzstanTime });
({ id: t$1.AsiaBrunei, name: "Asia/Brunei", offset: i$3.UTC_PLUS_8, timezone: n$2.BruneiTime });
({ id: t$1.AsiaChita, name: "Asia/Chita", offset: i$3.UTC_PLUS_9, timezone: n$2.YakutskTime });
({ id: t$1.AsiaChoibalsan, name: "Asia/Choibalsan", offset: i$3.UTC_PLUS_8, timezone: n$2.ChoibalsanStandardTime });
({ id: t$1.AsiaColombo, name: "Asia/Colombo", offset: i$3.UTC_PLUS_5, timezone: n$2.IndianStandardTime });
({ id: t$1.AsiaDamascus, name: "Asia/Damascus", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.AsiaDhaka, name: "Asia/Dhaka", offset: i$3.UTC_PLUS_6, timezone: n$2.BangladeshStandardTime });
({ id: t$1.AsiaDili, name: "Asia/Dili", offset: i$3.UTC_PLUS_9, timezone: n$2.JapanStandardTime });
({ id: t$1.AsiaDubai, name: "Asia/Dubai", offset: i$3.UTC_PLUS_4, timezone: n$2.GulfStandardTime });
({ id: t$1.AsiaDushanbe, name: "Asia/Dushanbe", offset: i$3.UTC_PLUS_5, timezone: n$2.TajikistanTime });
({ id: t$1.AsiaFamagusta, name: "Asia/Famagusta", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.AsiaGaza, name: "Asia/Gaza", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.AsiaHebron, name: "Asia/Hebron", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.AsiaHoChiMinh, name: "Asia/Ho_Chi_Minh", offset: i$3.UTC_PLUS_7, timezone: n$2.IndochinaTime });
({ id: t$1.AsiaHongKong, name: "Asia/Hong_Kong", offset: i$3.UTC_PLUS_8, timezone: n$2.HongKongTime });
({ id: t$1.AsiaHovd, name: "Asia/Hovd", offset: i$3.UTC_PLUS_7, timezone: n$2.HovdTime });
({ id: t$1.AsiaIrkutsk, name: "Asia/Irkutsk", offset: i$3.UTC_PLUS_8, timezone: n$2.IrkutskTime });
({ id: t$1.AsiaJakarta, name: "Asia/Jakarta", offset: i$3.UTC_PLUS_7, timezone: n$2.WesternIndonesianTime });
({ id: t$1.AsiaJayapura, name: "Asia/Jayapura", offset: i$3.UTC_PLUS_9, timezone: n$2.JapanStandardTime });
({ id: t$1.AsiaJerusalem, name: "Asia/Jerusalem", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.AsiaKabul, name: "Asia/Kabul", offset: i$3.UTC_PLUS_4, timezone: n$2.AfghanistanTime });
({ id: t$1.AsiaKamchatka, name: "Asia/Kamchatka", offset: i$3.UTC_PLUS_12, timezone: n$2.KamchatkaTime });
({ id: t$1.AsiaKarachi, name: "Asia/Karachi", offset: i$3.UTC_PLUS_5, timezone: n$2.PakistanStandardTime });
({ id: t$1.AsiaKathmandu, name: "Asia/Kathmandu", offset: i$3.UTC_PLUS_5, timezone: n$2.NepalTime });
({ id: t$1.AsiaKhandyga, name: "Asia/Khandyga", offset: i$3.UTC_PLUS_9, timezone: n$2.YakutskTime });
({ id: t$1.AsiaKolkata, name: "Asia/Kolkata", offset: i$3.UTC_PLUS_5, timezone: n$2.IndianStandardTime });
({ id: t$1.AsiaKrasnoyarsk, name: "Asia/Krasnoyarsk", offset: i$3.UTC_PLUS_7, timezone: n$2.KrasnoyarskTime });
({ id: t$1.AsiaKualaLumpur, name: "Asia/Kuala_Lumpur", offset: i$3.UTC_PLUS_8, timezone: n$2.MalaysiaStandardTime });
({ id: t$1.AsiaKuching, name: "Asia/Kuching", offset: i$3.UTC_PLUS_8, timezone: n$2.MalaysiaStandardTime });
({ id: t$1.AsiaKuwait, name: "Asia/Kuwait", offset: i$3.UTC_PLUS_3, timezone: n$2.ArabiaStandardTime });
({ id: t$1.AsiaMacau, name: "Asia/Macau", offset: i$3.UTC_PLUS_8, timezone: n$2.ChinaStandardTime });
({ id: t$1.AsiaMagadan, name: "Asia/Magadan", offset: i$3.UTC_PLUS_11, timezone: n$2.MagadanTime });
({ id: t$1.AsiaMakassar, name: "Asia/Makassar", offset: i$3.UTC_PLUS_8, timezone: n$2.MalaysiaTime });
({ id: t$1.AsiaManila, name: "Asia/Manila", offset: i$3.UTC_PLUS_8, timezone: n$2.PhilippineTime });
({ id: t$1.AsiaMuscat, name: "Asia/Muscat", offset: i$3.UTC_PLUS_4, timezone: n$2.GulfStandardTime });
({ id: t$1.AsiaNovokuznetsk, name: "Asia/Novokuznetsk", offset: i$3.UTC_PLUS_6, timezone: n$2.NovosibirskTime });
({ id: t$1.AsiaNovosibirsk, name: "Asia/Novosibirsk", offset: i$3.UTC_PLUS_6, timezone: n$2.NovosibirskTime });
({ id: t$1.AsiaOmsk, name: "Asia/Omsk", offset: i$3.UTC_PLUS_6, timezone: n$2.OmskTime });
({ id: t$1.AsiaOral, name: "Asia/Oral", offset: i$3.UTC_PLUS_5, timezone: n$2.OralTime });
({ id: t$1.AsiaPhnomPenh, name: "Asia/Phnom_Penh", offset: i$3.UTC_PLUS_7, timezone: n$2.IndochinaTime });
({ id: t$1.AsiaPontianak, name: "Asia/Pontianak", offset: i$3.UTC_PLUS_7, timezone: n$2.WesternIndonesianTime });
({ id: t$1.AsiaPyongyang, name: "Asia/Pyongyang", offset: i$3.UTC_PLUS_9, timezone: n$2.KoreaStandardTime });
({ id: t$1.AsiaQatar, name: "Asia/Qatar", offset: i$3.UTC_PLUS_3, timezone: n$2.ArabiaStandardTime });
({ id: t$1.AsiaQyzylorda, name: "Asia/Qyzylorda", offset: i$3.UTC_PLUS_5, timezone: n$2.WestKazakhstanTime });
({ id: t$1.AsiaRangoon, name: "Asia/Rangoon", offset: i$3.UTC_PLUS_6, timezone: n$2.MyanmarStandardTime });
({ id: t$1.AsiaRiyadh, name: "Asia/Riyadh", offset: i$3.UTC_PLUS_3, timezone: n$2.ArabiaStandardTime });
({ id: t$1.AsiaSakhalin, name: "Asia/Sakhalin", offset: i$3.UTC_PLUS_11, timezone: n$2.SakhalinIslandTime });
({ id: t$1.AsiaSamarkand, name: "Asia/Samarkand", offset: i$3.UTC_PLUS_5, timezone: n$2.UzbekistanTime });
({ id: t$1.AsiaSeoul, name: "Asia/Seoul", offset: i$3.UTC_PLUS_9, timezone: n$2.KoreaStandardTime });
({ id: t$1.AsiaShanghai, name: "Asia/Shanghai", offset: i$3.UTC_PLUS_8, timezone: n$2.ChinaStandardTime });
({ id: t$1.AsiaSingapore, name: "Asia/Singapore", offset: i$3.UTC_PLUS_8, timezone: n$2.SingaporeStandardTime });
({ id: t$1.AsiaSrednekolymsk, name: "Asia/Srednekolymsk", offset: i$3.UTC_PLUS_11, timezone: n$2.SrednekolymskTime });
({ id: t$1.AsiaTaipei, name: "Asia/Taipei", offset: i$3.UTC_PLUS_8, timezone: n$2.ChinaStandardTime });
({ id: t$1.AsiaTashkent, name: "Asia/Tashkent", offset: i$3.UTC_PLUS_5, timezone: n$2.UzbekistanTime });
({ id: t$1.AsiaTbilisi, name: "Asia/Tbilisi", offset: i$3.UTC_PLUS_4, timezone: n$2.GeorgiaStandardTime });
({ id: t$1.AsiaTehran, name: "Asia/Tehran", offset: i$3.UTC_PLUS_3, timezone: n$2.IranStandardTime });
({ id: t$1.AsiaThimphu, name: "Asia/Thimphu", offset: i$3.UTC_PLUS_6, timezone: n$2.BhutanTime });
({ id: t$1.AsiaTokyo, name: "Asia/Tokyo", offset: i$3.UTC_PLUS_9, timezone: n$2.JapanStandardTime });
({ id: t$1.AsiaTomsk, name: "Asia/Tomsk", offset: i$3.UTC_PLUS_6, timezone: n$2.KrasnoyarskTime });
({ id: t$1.AsiaUlaanbaatar, name: "Asia/Ulaanbaatar", offset: i$3.UTC_PLUS_8, timezone: n$2.UlaanbaatarStandardTime });
({ id: t$1.AsiaUrumqi, name: "Asia/Urumqi", offset: i$3.UTC_PLUS_8, timezone: n$2.ChinaStandardTime });
({ id: t$1.AsiaUstNera, name: "Asia/Ust-Nera", offset: i$3.UTC_PLUS_10, timezone: n$2.VladivostokTime });
({ id: t$1.AsiaVientiane, name: "Asia/Vientiane", offset: i$3.UTC_PLUS_7, timezone: n$2.IndochinaTime });
({ id: t$1.AsiaVladivostok, name: "Asia/Vladivostok", offset: i$3.UTC_PLUS_10, timezone: n$2.VladivostokTime });
({ id: t$1.AsiaYakutsk, name: "Asia/Yakutsk", offset: i$3.UTC_PLUS_9, timezone: n$2.YakutskTime });
({ id: t$1.AsiaYekaterinburg, name: "Asia/Yekaterinburg", offset: i$3.UTC_PLUS_5, timezone: n$2.YekaterinburgTime });
({ id: t$1.AsiaYerevan, name: "Asia/Yerevan", offset: i$3.UTC_PLUS_4, timezone: n$2.ArmeniaTime });
({ id: t$1.AtlanticAzores, name: "Atlantic/Azores", offset: i$3.UTC_MINUS_1, timezone: n$2.AzoresStandardTime });
({ id: t$1.AtlanticBermuda, name: "Atlantic/Bermuda", offset: i$3.UTC_MINUS_4, timezone: n$2.AtlanticStandardTime });
({ id: t$1.AtlanticCanary, name: "Atlantic/Canary", offset: i$3.UTC_MINUS_1, timezone: n$2.WesternEuropeanTime });
({ id: t$1.AtlanticCapeVerde, name: "Atlantic/Cape_Verde", offset: i$3.UTC_0, timezone: n$2.CapeVerdeTime });
({ id: t$1.AtlanticFaroe, name: "Atlantic/Faroe", offset: i$3.UTC_0, timezone: n$2.GreenwichMeanTime });
({ id: t$1.AtlanticMadeira, name: "Atlantic/Madeira", offset: i$3.UTC_0, timezone: n$2.WesternEuropeanTime });
({ id: t$1.AtlanticReykjavik, name: "Atlantic/Reykjavik", offset: i$3.UTC_0, timezone: n$2.GreenwichMeanTime });
({ id: t$1.AtlanticSouthGeorgia, name: "Atlantic/South_Georgia", offset: i$3.UTC_0, timezone: n$2.CoordinatedUniversalTime });
({ id: t$1.AtlanticStHelena, name: "Atlantic/St_Helena", offset: i$3.UTC_0, timezone: n$2.GreenwichMeanTime });
({ id: t$1.AtlanticStanley, name: "Atlantic/Stanley", offset: i$3.UTC_0, timezone: n$2.FalklandIslandsTime });
({ id: t$1.AustraliaAdelaide, name: "Australia/Adelaide", offset: i$3.UTC_PLUS_9_30, timezone: n$2.AustralianCentralStandardTime });
({ id: t$1.AustraliaBrisbane, name: "Australia/Brisbane", offset: i$3.UTC_PLUS_10, timezone: n$2.AustralianEasternStandardTime });
({ id: t$1.AustraliaBrokenHill, name: "Australia/Broken_Hill", offset: i$3.UTC_PLUS_9_30, timezone: n$2.AustralianCentralStandardTime });
({ id: t$1.AustraliaCanberra, name: "Australia/Canberra", offset: i$3.UTC_PLUS_10, timezone: n$2.AustralianEasternStandardTime });
({ id: t$1.AustraliaCurrie, name: "Australia/Currie", offset: i$3.UTC_PLUS_10, timezone: n$2.AustralianEasternStandardTime });
({ id: t$1.AustraliaDarwin, name: "Australia/Darwin", offset: i$3.UTC_PLUS_9_30, timezone: n$2.AustralianCentralStandardTime });
({ id: t$1.AustraliaEucla, name: "Australia/Eucla", offset: i$3.UTC_PLUS_8_45, timezone: n$2.AustralianCentralWesternStandardTime });
({ id: t$1.AustraliaHobart, name: "Australia/Hobart", offset: i$3.UTC_PLUS_10, timezone: n$2.AustralianEasternStandardTime });
({ id: t$1.AustraliaLindeman, name: "Australia/Lindeman", offset: i$3.UTC_PLUS_10, timezone: n$2.AustralianEasternStandardTime });
({ id: t$1.AustraliaLordHowe, name: "Australia/Lord_Howe", offset: i$3.UTC_PLUS_10_30, timezone: n$2.LordHoweStandardTime });
({ id: t$1.AustraliaMelbourne, name: "Australia/Melbourne", offset: i$3.UTC_PLUS_10, timezone: n$2.AustralianEasternStandardTime });
({ id: t$1.AustraliaPerth, name: "Australia/Perth", offset: i$3.UTC_PLUS_8, timezone: n$2.AustralianWesternStandardTime });
({ id: t$1.AustraliaSydney, name: "Australia/Sydney", offset: i$3.UTC_PLUS_10, timezone: n$2.AustralianEasternStandardTime });
({ id: t$1.EuropeAmsterdam, name: "Europe/Amsterdam", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeAndorra, name: "Europe/Andorra", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeAthens, name: "Europe/Athens", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeBelgrade, name: "Europe/Belgrade", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeBerlin, name: "Europe/Berlin", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeBratislava, name: "Europe/Bratislava", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeBrussels, name: "Europe/Brussels", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeBucharest, name: "Europe/Bucharest", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeBudapest, name: "Europe/Budapest", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeBusingen, name: "Europe/Busingen", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeChisinau, name: "Europe/Chisinau", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeCopenhagen, name: "Europe/Copenhagen", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeDublin, name: "Europe/Dublin", offset: i$3.UTC_0, timezone: n$2.GreenwichMeanTime });
({ id: t$1.EuropeGibraltar, name: "Europe/Gibraltar", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeGuernsey, name: "Europe/Guernsey", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeHelsinki, name: "Europe/Helsinki", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeIsleOfMan, name: "Europe/Isle_of_Man", offset: i$3.UTC_0, timezone: n$2.GreenwichMeanTime });
({ id: t$1.EuropeIstanbul, name: "Europe/Istanbul", offset: i$3.UTC_PLUS_3, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeJersey, name: "Europe/Jersey", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeKaliningrad, name: "Europe/Kaliningrad", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeKiev, name: "Europe/Kiev", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeLisbon, name: "Europe/Lisbon", offset: i$3.UTC_0, timezone: n$2.GreenwichMeanTime });
({ id: t$1.EuropeLjubljana, name: "Europe/Ljubljana", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeLondon, name: "Europe/London", offset: i$3.UTC_0, timezone: n$2.GreenwichMeanTime });
({ id: t$1.EuropeLuxembourg, name: "Europe/Luxembourg", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeMadrid, name: "Europe/Madrid", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeMalta, name: "Europe/Malta", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeMariehamn, name: "Europe/Mariehamn", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeMinsk, name: "Europe/Minsk", offset: i$3.UTC_PLUS_3, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeMonaco, name: "Europe/Monaco", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeMoscow, name: "Europe/Moscow", offset: i$3.UTC_PLUS_3, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeOslo, name: "Europe/Oslo", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeParis, name: "Europe/Paris", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropePodgorica, name: "Europe/Podgorica", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropePrague, name: "Europe/Prague", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeRiga, name: "Europe/Riga", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeRome, name: "Europe/Rome", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeSamara, name: "Europe/Samara", offset: i$3.UTC_PLUS_4, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeSanMarino, name: "Europe/San_Marino", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeSarajevo, name: "Europe/Sarajevo", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeSimferopol, name: "Europe/Simferopol", offset: i$3.UTC_PLUS_3, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeSkopje, name: "Europe/Skopje", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeSofia, name: "Europe/Sofia", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeStockholm, name: "Europe/Stockholm", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeTallinn, name: "Europe/Tallinn", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeTirane, name: "Europe/Tirane", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeUzhgorod, name: "Europe/Uzhgorod", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeVaduz, name: "Europe/Vaduz", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeVatican, name: "Europe/Vatican", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeVienna, name: "Europe/Vienna", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeVilnius, name: "Europe/Vilnius", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeVolgograd, name: "Europe/Volgograd", offset: i$3.UTC_PLUS_4, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeWarsaw, name: "Europe/Warsaw", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeZagreb, name: "Europe/Zagreb", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.EuropeZaporozhye, name: "Europe/Zaporozhye", offset: i$3.UTC_PLUS_2, timezone: n$2.EasternEuropeanTime });
({ id: t$1.EuropeZurich, name: "Europe/Zurich", offset: i$3.UTC_PLUS_1, timezone: n$2.CentralEuropeanTime });
({ id: t$1.IndianAntananarivo, name: "Indian/Antananarivo", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.IndianChagos, name: "Indian/Chagos", offset: i$3.UTC_PLUS_6, timezone: n$2.IndianOceanTime });
({ id: t$1.IndianChristmas, name: "Indian/Christmas", offset: i$3.UTC_PLUS_7, timezone: n$2.ChristmasIslandTime });
({ id: t$1.IndianCocos, name: "Indian/Cocos", offset: i$3.UTC_PLUS_6, timezone: n$2.CocosIslandsTime });
({ id: t$1.IndianComoro, name: "Indian/Comoro", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.IndianKerguelen, name: "Indian/Kerguelen", offset: i$3.UTC_PLUS_5, timezone: n$2.FrenchSouthernAndAntarcticTime });
({ id: t$1.IndianMahe, name: "Indian/Mahe", offset: i$3.UTC_PLUS_4, timezone: n$2.SeychellesTime });
({ id: t$1.IndianMaldives, name: "Indian/Maldives", offset: i$3.UTC_PLUS_5, timezone: n$2.MaldivesTime });
({ id: t$1.IndianMauritius, name: "Indian/Mauritius", offset: i$3.UTC_PLUS_4, timezone: n$2.MauritiusTime });
({ id: t$1.IndianMayotte, name: "Indian/Mayotte", offset: i$3.UTC_PLUS_3, timezone: n$2.EastAfricaTime });
({ id: t$1.IndianReunion, name: "Indian/Reunion", offset: i$3.UTC_PLUS_4, timezone: n$2.ReunionTime });
({ id: t$1.PacificApia, name: "Pacific/Apia", offset: i$3.UTC_PLUS_13, timezone: n$2.SamoaStandardTime });
({ id: t$1.PacificAuckland, name: "Pacific/Auckland", offset: i$3.UTC_PLUS_13, timezone: n$2.NewZealandStandardTime });
({ id: t$1.PacificChatham, name: "Pacific/Chatham", offset: i$3.UTC_PLUS_13, timezone: n$2.ChathamStandardTime });
({ id: t$1.PacificEaster, name: "Pacific/Easter", offset: i$3.UTC_PLUS_6, timezone: n$2.EasterIslandStandardTime });
({ id: t$1.PacificEfate, name: "Pacific/Efate", offset: i$3.UTC_PLUS_11, timezone: n$2.VanuatuTime });
({ id: t$1.PacificEnderbury, name: "Pacific/Enderbury", offset: i$3.UTC_PLUS_13, timezone: n$2.TongaTime });
({ id: t$1.PacificFakaofo, name: "Pacific/Fakaofo", offset: i$3.UTC_PLUS_13, timezone: n$2.TongaTime });
({ id: t$1.PacificFiji, name: "Pacific/Fiji", offset: i$3.UTC_PLUS_12, timezone: n$2.FijiTime });
({ id: t$1.PacificFunafuti, name: "Pacific/Funafuti", offset: i$3.UTC_PLUS_12, timezone: n$2.TuvaluTime });
({ id: t$1.PacificGalapagos, name: "Pacific/Galapagos", offset: i$3.UTC_PLUS_6, timezone: n$2.GalapagosTime });
({ id: t$1.PacificGambier, name: "Pacific/Gambier", offset: i$3.UTC_PLUS_9, timezone: n$2.GambierIslandTime });
({ id: t$1.PacificGuadalcanal, name: "Pacific/Guadalcanal", offset: i$3.UTC_PLUS_11, timezone: n$2.SolomonIslandsTime });
({ id: t$1.PacificGuam, name: "Pacific/Guam", offset: i$3.UTC_PLUS_10, timezone: n$2.ChamorroStandardTime });
({ id: t$1.PacificHonolulu, name: "Pacific/Honolulu", offset: i$3.UTC_PLUS_10, timezone: n$2.HawaiiAleutianStandardTime });
({ id: t$1.PacificJohnston, name: "Pacific/Johnston", offset: i$3.UTC_PLUS_10, timezone: n$2.HawaiiAleutianStandardTime });
({ id: t$1.PacificKiritimati, name: "Pacific/Kiritimati", offset: i$3.UTC_PLUS_14, timezone: n$2.LineIslandsTime });
({ id: t$1.PacificKosrae, name: "Pacific/Kosrae", offset: i$3.UTC_PLUS_11, timezone: n$2.KosraeTime });
({ id: t$1.PacificKwajalein, name: "Pacific/Kwajalein", offset: i$3.UTC_PLUS_12, timezone: n$2.MarshallIslandsTime });
({ id: t$1.PacificMajuro, name: "Pacific/Majuro", offset: i$3.UTC_PLUS_12, timezone: n$2.MarshallIslandsTime });
({ id: t$1.PacificMarquesas, name: "Pacific/Marquesas", offset: i$3.UTC_PLUS_9, timezone: n$2.MarquesasIslandsTime });
({ id: t$1.PacificMidway, name: "Pacific/Midway", offset: i$3.UTC_PLUS_11, timezone: n$2.SamoaStandardTime });
({ id: t$1.PacificNauru, name: "Pacific/Nauru", offset: i$3.UTC_PLUS_12, timezone: n$2.NauruTime });
({ id: t$1.PacificNiue, name: "Pacific/Niue", offset: i$3.UTC_PLUS_11, timezone: n$2.NiueTime });
({ id: t$1.PacificNorfolk, name: "Pacific/Norfolk", offset: i$3.UTC_PLUS_11, timezone: n$2.NorfolkIslandTime });
({ id: t$1.PacificNoumea, name: "Pacific/Noumea", offset: i$3.UTC_PLUS_11, timezone: n$2.NewCaledoniaTime });
({ id: t$1.PacificPagoPago, name: "Pacific/Pago_Pago", offset: i$3.UTC_PLUS_11, timezone: n$2.SamoaStandardTime });
({ id: t$1.PacificPalau, name: "Pacific/Palau", offset: i$3.UTC_PLUS_9, timezone: n$2.PalauTime });
({ id: t$1.PacificPitcairn, name: "Pacific/Pitcairn", offset: i$3.UTC_PLUS_8, timezone: n$2.PitcairnTime });
({ id: t$1.PacificPonape, name: "Pacific/Ponape", offset: i$3.UTC_PLUS_11, timezone: n$2.PohnpeiStandardTime });
({ id: t$1.PacificPortMoresby, name: "Pacific/Port_Moresby", offset: i$3.UTC_PLUS_10, timezone: n$2.PapuaNewGuineaTime });
({ id: t$1.PacificRarotonga, name: "Pacific/Rarotonga", offset: i$3.UTC_PLUS_10, timezone: n$2.CookIslandTime });
({ id: t$1.PacificSaipan, name: "Pacific/Saipan", offset: i$3.UTC_PLUS_10, timezone: n$2.ChamorroStandardTime });
({ id: t$1.PacificTahiti, name: "Pacific/Tahiti", offset: i$3.UTC_PLUS_10, timezone: n$2.TahitiTime });
({ id: t$1.PacificTarawa, name: "Pacific/Tarawa", offset: i$3.UTC_PLUS_12, timezone: n$2.GilbertIslandTime });
({ id: t$1.PacificTongatapu, name: "Pacific/Tongatapu", offset: i$3.UTC_PLUS_13, timezone: n$2.TongaTime });
({ id: t$1.PacificChuuk, name: "Pacific/Chuuk", offset: i$3.UTC_PLUS_10, timezone: n$2.ChuukTime });
({ id: t$1.PacificPohnpei, name: "Pacific/Pohnpei", offset: i$3.UTC_PLUS_11, timezone: n$2.PohnpeiStandardTime });
({ id: t$1.PacificYap, name: "Pacific/Yap", offset: i$3.UTC_PLUS_10, timezone: n$2.ChuukTime });
var Vi = (a2 = 21) => {
  let u2 = "", A2 = crypto.getRandomValues(new Uint8Array(a2));
  for (; a2--; ) {
    let f2 = A2[a2] & 63;
    f2 < 36 ? u2 += f2.toString(36) : f2 < 62 ? u2 += (f2 - 26).toString(36).toUpperCase() : f2 < 63 ? u2 += "_" : u2 += "-";
  }
  return u2;
};
var fn = [{ property: "name", enumerable: false }, { property: "message", enumerable: false }, { property: "stack", enumerable: false }, { property: "code", enumerable: true }], qi = Symbol(".toJSON was called"), hn = (a2) => {
  a2[qi] = true;
  let u2 = a2.toJSON();
  return delete a2[qi], u2;
}, Ji = ({ from: a2, seen: u2, to_: A2, forceEnumerable: f2, maxDepth: U2, depth: E2 }) => {
  let v2 = A2 || (Array.isArray(a2) ? [] : {});
  if (u2.push(a2), E2 >= U2)
    return v2;
  if (typeof a2.toJSON == "function" && a2[qi] !== true)
    return hn(a2);
  for (let [_2, S2] of Object.entries(a2)) {
    if (typeof Buffer == "function" && Buffer.isBuffer(S2)) {
      v2[_2] = "[object Buffer]";
      continue;
    }
    if (typeof S2 == "object" && typeof S2.pipe == "function") {
      v2[_2] = "[object Stream]";
      continue;
    }
    if (typeof S2 != "function") {
      if (!S2 || typeof S2 != "object") {
        v2[_2] = S2;
        continue;
      }
      if (!u2.includes(a2[_2])) {
        E2++, v2[_2] = Ji({ from: a2[_2], seen: [...u2], forceEnumerable: f2, maxDepth: U2, depth: E2 });
        continue;
      }
      v2[_2] = "[Circular]";
    }
  }
  for (let { property: _2, enumerable: S2 } of fn)
    typeof a2[_2] == "string" && Object.defineProperty(v2, _2, { value: a2[_2], enumerable: f2 ? true : S2, configurable: true, writable: true });
  return v2;
};
function Yi(a2, u2 = {}) {
  let { maxDepth: A2 = Number.POSITIVE_INFINITY } = u2;
  return typeof a2 == "object" && a2 !== null ? Ji({ from: a2, seen: [], forceEnumerable: true, maxDepth: A2, depth: 0 }) : typeof a2 == "function" ? `[Function: ${a2.name || "anonymous"}]` : a2;
}
var g = ((m2) => (m2[m2.Warning = 999] = "Warning", m2[m2.Exception = 1e3] = "Exception", m2[m2.UnmanagedException = 1001] = "UnmanagedException", m2[m2.CaughtException = 1002] = "CaughtException", m2[m2.UncaughtException = 1003] = "UncaughtException", m2[m2.UnhandledPromiseRejectionException = 1004] = "UnhandledPromiseRejectionException", m2[m2.AuthenticationException = 2e3] = "AuthenticationException", m2[m2.AuthenticationExpiredAccessTokenException = 2001] = "AuthenticationExpiredAccessTokenException", m2[m2.AuthenticationInvalidAccessTokenException = 2002] = "AuthenticationInvalidAccessTokenException", m2[m2.AuthenticationMissingAccessTokenException = 2003] = "AuthenticationMissingAccessTokenException", m2[m2.AuthenticationExpiredRefreshTokenException = 2004] = "AuthenticationExpiredRefreshTokenException", m2[m2.AuthenticationInvalidRefreshTokenException = 2005] = "AuthenticationInvalidRefreshTokenException", m2[m2.AuthenticationMissingRefreshTokenException = 2006] = "AuthenticationMissingRefreshTokenException", m2[m2.AuthenticationMissingDeviceKeyException = 2007] = "AuthenticationMissingDeviceKeyException", m2[m2.AuthenticationUnAuthorizedAccessException = 2008] = "AuthenticationUnAuthorizedAccessException", m2[m2.AuthenticationCodeMismatchException = 2009] = "AuthenticationCodeMismatchException", m2[m2.AuthenticationExpiredCodeException = 2010] = "AuthenticationExpiredCodeException", m2[m2.AuthenticationLoginException = 2011] = "AuthenticationLoginException", m2[m2.AuthenticationLoginInvalidCredentialsException = 2012] = "AuthenticationLoginInvalidCredentialsException", m2[m2.AuthenticationLoginTooManyFailedAttemptsException = 2013] = "AuthenticationLoginTooManyFailedAttemptsException", m2[m2.AuthenticationLimitExceededException = 2014] = "AuthenticationLimitExceededException", m2[m2.AuthenticationUnauthorizedAccessException = 2015] = "AuthenticationUnauthorizedAccessException", m2[m2.AuthenticationTooManyRequestsException = 2016] = "AuthenticationTooManyRequestsException", m2[m2.AuthenticationUserNotFoundException = 2017] = "AuthenticationUserNotFoundException", m2[m2.AuthenticationSignupException = 2018] = "AuthenticationSignupException", m2[m2.AuthenticationUsernameAvailabilityCheckException = 2019] = "AuthenticationUsernameAvailabilityCheckException", m2[m2.AuthenticationUsernameExistsException = 2020] = "AuthenticationUsernameExistsException", m2[m2.AuthenticationAliasExistException = 2021] = "AuthenticationAliasExistException", m2[m2.AuthenticationCodeDeliveryFailureException = 2022] = "AuthenticationCodeDeliveryFailureException", m2[m2.AuthenticationMFAMethodNotFoundException = 2023] = "AuthenticationMFAMethodNotFoundException", m2[m2.AuthenticationNotAuthorizedException = 2024] = "AuthenticationNotAuthorizedException", m2[m2.AuthenticationPasswordResetRequiredException = 2025] = "AuthenticationPasswordResetRequiredException", m2[m2.AuthenticationUserNotConfirmedException = 2026] = "AuthenticationUserNotConfirmedException", m2[m2.DatabaseException = 3e3] = "DatabaseException", m2[m2.SequelizeNotInitializedException = 3001] = "SequelizeNotInitializedException", m2[m2.ProcessException = 4e3] = "ProcessException", m2[m2.ProcessWarningException = 4001] = "ProcessWarningException", m2[m2.KillProcessException = 4002] = "KillProcessException", m2[m2.FatalException = 4003] = "FatalException", m2[m2.ProcessSigTermException = 4004] = "ProcessSigTermException", m2[m2.ProcessSigIntException = 4005] = "ProcessSigIntException", m2[m2.MissingEnvironmentVariable = 4006] = "MissingEnvironmentVariable", m2[m2.NetworkException = 5e3] = "NetworkException", m2[m2.HttpException = 5001] = "HttpException", m2[m2.HttpRequestException = 5002] = "HttpRequestException", m2[m2.HttpRequestResourceNotFoundException = 5003] = "HttpRequestResourceNotFoundException", m2[m2.HttpResponseException = 5004] = "HttpResponseException", m2[m2.ServiceProviderException = 6e3] = "ServiceProviderException", m2[m2.AWSException = 6001] = "AWSException", m2[m2.AWSMissingAccessKeyException = 6002] = "AWSMissingAccessKeyException", m2[m2.AWSMissingSecretKeyException = 6003] = "AWSMissingSecretKeyException", m2[m2.CognitoException = 6004] = "CognitoException", m2[m2.CognitoInternalErrorException = 6005] = "CognitoInternalErrorException", m2[m2.CognitoInvalidEmailRoleAccessPolicyException = 6006] = "CognitoInvalidEmailRoleAccessPolicyException", m2[m2.CognitoInvalidLambdaResponseException = 6007] = "CognitoInvalidLambdaResponseException", m2[m2.CognitoUserLambdaValidationException = 6008] = "CognitoUserLambdaValidationException", m2[m2.CognitoInvalidParameterException = 6009] = "CognitoInvalidParameterException", m2[m2.CognitoInvalidSmsRoleAccessPolicyException = 6010] = "CognitoInvalidSmsRoleAccessPolicyException", m2[m2.CognitoInvalidSmsRoleTrustRelationshipException = 6011] = "CognitoInvalidSmsRoleTrustRelationshipException", m2[m2.CognitoInvalidUserPoolConfigurationException = 6012] = "CognitoInvalidUserPoolConfigurationException", m2[m2.CognitoResourceNotFoundException = 6013] = "CognitoResourceNotFoundException", m2[m2.CognitoMissingUserPoolClientIdException = 6014] = "CognitoMissingUserPoolClientIdException", m2[m2.CognitoMissingUserPoolIdException = 6015] = "CognitoMissingUserPoolIdException", m2[m2.CognitoUnexpectedLambdaException = 6016] = "CognitoUnexpectedLambdaException", m2[m2.StripeException = 6017] = "StripeException", m2[m2.StripeMissingSecretKeyException = 6018] = "StripeMissingSecretKeyException", m2[m2.StripeSubscriptionCreationFailedException = 6019] = "StripeSubscriptionCreationFailedException", m2[m2.StripePaymentMethodRequiredException = 6020] = "StripePaymentMethodRequiredException", m2[m2.UserException = 7e3] = "UserException", m2[m2.NullUserException = 7001] = "NullUserException", m2[m2.UserStateConflictException = 7002] = "UserStateConflictException", m2[m2.NullAccountException = 7003] = "NullAccountException", m2[m2.ValidationException = 8e3] = "ValidationException", m2[m2.InvalidTypeException = 8001] = "InvalidTypeException", m2[m2.MissingArgumentException = 8002] = "MissingArgumentException", m2[m2.MissingPropertyException = 8003] = "MissingPropertyException", m2[m2.InvalidArgumentException = 8004] = "InvalidArgumentException", m2[m2.InvalidPropertyException = 8005] = "InvalidPropertyException", m2[m2.MissingRequestBodyPropertyException = 8006] = "MissingRequestBodyPropertyException", m2[m2.MissingRequestUrlParameterException = 8007] = "MissingRequestUrlParameterException", m2[m2.MissingCookieException = 8008] = "MissingCookieException", m2))(g || {});
var d = class extends Error {
  constructor(u2, A2) {
    super(u2);
    var _a2, _b, _c, _d;
    s$2(this, "cause");
    s$2(this, "code", 1e3);
    s$2(this, "context");
    s$2(this, "created");
    s$2(this, "data");
    s$2(this, "description");
    s$2(this, "model");
    s$2(this, "form");
    s$2(this, "friendlyMessage", "An unknown error has occurred. :(");
    s$2(this, "id");
    s$2(this, "logLevel", c.Exception);
    s$2(this, "origin");
    s$2(this, "pii");
    s$2(this, "request");
    s$2(this, "response");
    s$2(this, "scope");
    s$2(this, "remediation");
    s$2(this, "tags");
    s$2(this, "task");
    s$2(this, "user");
    s$2(this, "__proto__");
    let f2 = new.target.prototype;
    if (this.__proto__ = f2, Error.captureStackTrace && Error.captureStackTrace((_a2 = A2 == null ? void 0 : A2.cause) != null ? _a2 : this, d), this.id = Vi(), this.name = this.constructor.name, this.created = new Date().toString(), this.description = (_b = A2 == null ? void 0 : A2.description) != null ? _b : this.description, this.remediation = (_c = A2 == null ? void 0 : A2.remediation) != null ? _c : this.remediation, this.scope = (_d = A2 == null ? void 0 : A2.scope) != null ? _d : this.scope, A2) {
      let { cause: U2, context: E2, data: v2, model: _2, form: S2, origin: nn2, pii: tn2, request: rn2, response: sn, tags: on3, task: ln, user: mn } = A2;
      this.cause = U2, this.context = E2, this.data = v2, this.model = _2, this.form = S2, this.origin = nn2, this.pii = tn2, this.request = rn2, this.response = sn, this.task = ln, this.tags = on3, this.user = mn;
    }
  }
  toJSON() {
    return Yi(this);
  }
};
var T$1 = ((f2) => (f2.Simple = "simple", f2.ExponentialBackoff = "exponential", f2.CircuitBreaker = "circuit_breaker", f2))(T$1 || {});
var z$1 = class extends d {
  constructor() {
    super(...arguments);
    s$2(this, "code", 1003);
    s$2(this, "description", "An uncaught exception bubbled up and was caught automatically.");
    s$2(this, "logLevel", c.Exception);
    s$2(this, "remediation", { response: { code: 500 }, retry: { limit: 3 } });
  }
};
var p$2 = class extends d {
  constructor() {
    super(...arguments);
    s$2(this, "code", 2e3);
    s$2(this, "description", "Generic or unknown exceptions associated with user authentication.");
    s$2(this, "friendlyMessage", "An unknown error occurred.");
    s$2(this, "logLevel", c.Warning);
    s$2(this, "remediation", { response: { code: 401 }, retry: { limit: 3, strategy: "circuit_breaker" } });
  }
};
var aa$1 = class extends p$2 {
  constructor() {
    super(...arguments);
    s$2(this, "code", 2011);
    s$2(this, "description", "An exception occurred while logging a user in.");
    s$2(this, "friendlyMessage", "An unknown error occurred.");
    s$2(this, "logLevel", c.Critical);
    s$2(this, "remediation", { response: { code: 500 }, retry: true });
  }
};
var G$1 = class extends p$2 {
  constructor() {
    super(...arguments);
    s$2(this, "code", 2019);
    s$2(this, "description", "An exception occurred while checking if a username is available.");
    s$2(this, "friendlyMessage", "An error occurred while checking if a username is available.");
    s$2(this, "logLevel", c.Critical);
    s$2(this, "remediation", { response: { code: 500 }, retry: true });
  }
};
var qa$1 = class extends d {
  constructor() {
    super(...arguments);
    s$2(this, "code", 8002);
    s$2(this, "description", "A required argument is missing.");
    s$2(this, "logLevel", c.Exception);
    s$2(this, "remediation", { response: { code: 400 }, retry: false });
  }
}, Ha$1 = class extends d {
  constructor() {
    super(...arguments);
    s$2(this, "code", 8004);
    s$2(this, "description", "An argument is invalid.");
    s$2(this, "logLevel", c.Exception);
    s$2(this, "remediation", { response: { code: 400 }, retry: false });
  }
};
var r$1 = class {
  analytics(o2) {
  }
  critical(o2) {
  }
  debug(o2) {
  }
  async exception(o2) {
    console.log(o2);
  }
  http(o2) {
  }
  async info(o2) {
    console.log(o2);
  }
  warning(o2) {
  }
  constructor(o2) {
  }
}, p$1 = r$1;
var e$1 = p$1;
const logger$2 = new e$1();
const exceptionLogger = (store) => (next) => (action) => {
  try {
    return next(action);
  } catch (err) {
    const exception = new z$1(err.name, { cause: err });
    logger$2.exception(exception.toJSON());
    throw err;
  }
};
var reduxLogger = { exports: {} };
(function(module, exports) {
  !function(e2, t2) {
    t2(exports);
  }(commonjsGlobal, function(e2) {
    function t2(e3, t3) {
      e3.super_ = t3, e3.prototype = Object.create(t3.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } });
    }
    function r2(e3, t3) {
      Object.defineProperty(this, "kind", { value: e3, enumerable: true }), t3 && t3.length && Object.defineProperty(this, "path", { value: t3, enumerable: true });
    }
    function n2(e3, t3, r3) {
      n2.super_.call(this, "E", e3), Object.defineProperty(this, "lhs", { value: t3, enumerable: true }), Object.defineProperty(this, "rhs", { value: r3, enumerable: true });
    }
    function o2(e3, t3) {
      o2.super_.call(this, "N", e3), Object.defineProperty(this, "rhs", { value: t3, enumerable: true });
    }
    function i(e3, t3) {
      i.super_.call(this, "D", e3), Object.defineProperty(this, "lhs", { value: t3, enumerable: true });
    }
    function a2(e3, t3, r3) {
      a2.super_.call(this, "A", e3), Object.defineProperty(this, "index", { value: t3, enumerable: true }), Object.defineProperty(this, "item", { value: r3, enumerable: true });
    }
    function f2(e3, t3, r3) {
      var n3 = e3.slice((r3 || t3) + 1 || e3.length);
      return e3.length = t3 < 0 ? e3.length + t3 : t3, e3.push.apply(e3, n3), e3;
    }
    function u2(e3) {
      var t3 = typeof e3 == "undefined" ? "undefined" : N2(e3);
      return t3 !== "object" ? t3 : e3 === Math ? "math" : e3 === null ? "null" : Array.isArray(e3) ? "array" : Object.prototype.toString.call(e3) === "[object Date]" ? "date" : typeof e3.toString == "function" && /^\/.*\//.test(e3.toString()) ? "regexp" : "object";
    }
    function l2(e3, t3, r3, c3, s4, d3, p3) {
      s4 = s4 || [], p3 = p3 || [];
      var g3 = s4.slice(0);
      if (typeof d3 != "undefined") {
        if (c3) {
          if (typeof c3 == "function" && c3(g3, d3))
            return;
          if ((typeof c3 == "undefined" ? "undefined" : N2(c3)) === "object") {
            if (c3.prefilter && c3.prefilter(g3, d3))
              return;
            if (c3.normalize) {
              var h3 = c3.normalize(g3, d3, e3, t3);
              h3 && (e3 = h3[0], t3 = h3[1]);
            }
          }
        }
        g3.push(d3);
      }
      u2(e3) === "regexp" && u2(t3) === "regexp" && (e3 = e3.toString(), t3 = t3.toString());
      var y3 = typeof e3 == "undefined" ? "undefined" : N2(e3), v3 = typeof t3 == "undefined" ? "undefined" : N2(t3), b3 = y3 !== "undefined" || p3 && p3[p3.length - 1].lhs && p3[p3.length - 1].lhs.hasOwnProperty(d3), m3 = v3 !== "undefined" || p3 && p3[p3.length - 1].rhs && p3[p3.length - 1].rhs.hasOwnProperty(d3);
      if (!b3 && m3)
        r3(new o2(g3, t3));
      else if (!m3 && b3)
        r3(new i(g3, e3));
      else if (u2(e3) !== u2(t3))
        r3(new n2(g3, e3, t3));
      else if (u2(e3) === "date" && e3 - t3 !== 0)
        r3(new n2(g3, e3, t3));
      else if (y3 === "object" && e3 !== null && t3 !== null)
        if (p3.filter(function(t4) {
          return t4.lhs === e3;
        }).length)
          e3 !== t3 && r3(new n2(g3, e3, t3));
        else {
          if (p3.push({ lhs: e3, rhs: t3 }), Array.isArray(e3)) {
            var w3;
            e3.length;
            for (w3 = 0; w3 < e3.length; w3++)
              w3 >= t3.length ? r3(new a2(g3, w3, new i(void 0, e3[w3]))) : l2(e3[w3], t3[w3], r3, c3, g3, w3, p3);
            for (; w3 < t3.length; )
              r3(new a2(g3, w3, new o2(void 0, t3[w3++])));
          } else {
            var x3 = Object.keys(e3), S3 = Object.keys(t3);
            x3.forEach(function(n3, o3) {
              var i2 = S3.indexOf(n3);
              i2 >= 0 ? (l2(e3[n3], t3[n3], r3, c3, g3, n3, p3), S3 = f2(S3, i2)) : l2(e3[n3], void 0, r3, c3, g3, n3, p3);
            }), S3.forEach(function(e4) {
              l2(void 0, t3[e4], r3, c3, g3, e4, p3);
            });
          }
          p3.length = p3.length - 1;
        }
      else
        e3 !== t3 && (y3 === "number" && isNaN(e3) && isNaN(t3) || r3(new n2(g3, e3, t3)));
    }
    function c2(e3, t3, r3, n3) {
      return n3 = n3 || [], l2(e3, t3, function(e4) {
        e4 && n3.push(e4);
      }, r3), n3.length ? n3 : void 0;
    }
    function s2(e3, t3, r3) {
      if (r3.path && r3.path.length) {
        var n3, o3 = e3[t3], i2 = r3.path.length - 1;
        for (n3 = 0; n3 < i2; n3++)
          o3 = o3[r3.path[n3]];
        switch (r3.kind) {
          case "A":
            s2(o3[r3.path[n3]], r3.index, r3.item);
            break;
          case "D":
            delete o3[r3.path[n3]];
            break;
          case "E":
          case "N":
            o3[r3.path[n3]] = r3.rhs;
        }
      } else
        switch (r3.kind) {
          case "A":
            s2(e3[t3], r3.index, r3.item);
            break;
          case "D":
            e3 = f2(e3, t3);
            break;
          case "E":
          case "N":
            e3[t3] = r3.rhs;
        }
      return e3;
    }
    function d2(e3, t3, r3) {
      if (e3 && t3 && r3 && r3.kind) {
        for (var n3 = e3, o3 = -1, i2 = r3.path ? r3.path.length - 1 : 0; ++o3 < i2; )
          typeof n3[r3.path[o3]] == "undefined" && (n3[r3.path[o3]] = typeof r3.path[o3] == "number" ? [] : {}), n3 = n3[r3.path[o3]];
        switch (r3.kind) {
          case "A":
            s2(r3.path ? n3[r3.path[o3]] : n3, r3.index, r3.item);
            break;
          case "D":
            delete n3[r3.path[o3]];
            break;
          case "E":
          case "N":
            n3[r3.path[o3]] = r3.rhs;
        }
      }
    }
    function p2(e3, t3, r3) {
      if (r3.path && r3.path.length) {
        var n3, o3 = e3[t3], i2 = r3.path.length - 1;
        for (n3 = 0; n3 < i2; n3++)
          o3 = o3[r3.path[n3]];
        switch (r3.kind) {
          case "A":
            p2(o3[r3.path[n3]], r3.index, r3.item);
            break;
          case "D":
            o3[r3.path[n3]] = r3.lhs;
            break;
          case "E":
            o3[r3.path[n3]] = r3.lhs;
            break;
          case "N":
            delete o3[r3.path[n3]];
        }
      } else
        switch (r3.kind) {
          case "A":
            p2(e3[t3], r3.index, r3.item);
            break;
          case "D":
            e3[t3] = r3.lhs;
            break;
          case "E":
            e3[t3] = r3.lhs;
            break;
          case "N":
            e3 = f2(e3, t3);
        }
      return e3;
    }
    function g2(e3, t3, r3) {
      if (e3 && t3 && r3 && r3.kind) {
        var n3, o3, i2 = e3;
        for (o3 = r3.path.length - 1, n3 = 0; n3 < o3; n3++)
          typeof i2[r3.path[n3]] == "undefined" && (i2[r3.path[n3]] = {}), i2 = i2[r3.path[n3]];
        switch (r3.kind) {
          case "A":
            p2(i2[r3.path[n3]], r3.index, r3.item);
            break;
          case "D":
            i2[r3.path[n3]] = r3.lhs;
            break;
          case "E":
            i2[r3.path[n3]] = r3.lhs;
            break;
          case "N":
            delete i2[r3.path[n3]];
        }
      }
    }
    function h2(e3, t3, r3) {
      if (e3 && t3) {
        var n3 = function(n4) {
          r3 && !r3(e3, t3, n4) || d2(e3, t3, n4);
        };
        l2(e3, t3, n3);
      }
    }
    function y2(e3) {
      return "color: " + F2[e3].color + "; font-weight: bold";
    }
    function v2(e3) {
      var t3 = e3.kind, r3 = e3.path, n3 = e3.lhs, o3 = e3.rhs, i2 = e3.index, a3 = e3.item;
      switch (t3) {
        case "E":
          return [r3.join("."), n3, "\u2192", o3];
        case "N":
          return [r3.join("."), o3];
        case "D":
          return [r3.join(".")];
        case "A":
          return [r3.join(".") + "[" + i2 + "]", a3];
        default:
          return [];
      }
    }
    function b2(e3, t3, r3, n3) {
      var o3 = c2(e3, t3);
      try {
        n3 ? r3.groupCollapsed("diff") : r3.group("diff");
      } catch (e4) {
        r3.log("diff");
      }
      o3 ? o3.forEach(function(e4) {
        var t4 = e4.kind, n4 = v2(e4);
        r3.log.apply(r3, ["%c " + F2[t4].text, y2(t4)].concat(P2(n4)));
      }) : r3.log("\u2014\u2014 no diff \u2014\u2014");
      try {
        r3.groupEnd();
      } catch (e4) {
        r3.log("\u2014\u2014 diff end \u2014\u2014 ");
      }
    }
    function m2(e3, t3, r3, n3) {
      switch (typeof e3 == "undefined" ? "undefined" : N2(e3)) {
        case "object":
          return typeof e3[n3] == "function" ? e3[n3].apply(e3, P2(r3)) : e3[n3];
        case "function":
          return e3(t3);
        default:
          return e3;
      }
    }
    function w2(e3) {
      var t3 = e3.timestamp, r3 = e3.duration;
      return function(e4, n3, o3) {
        var i2 = ["action"];
        return i2.push("%c" + String(e4.type)), t3 && i2.push("%c@ " + n3), r3 && i2.push("%c(in " + o3.toFixed(2) + " ms)"), i2.join(" ");
      };
    }
    function x2(e3, t3) {
      var r3 = t3.logger, n3 = t3.actionTransformer, o3 = t3.titleFormatter, i2 = o3 === void 0 ? w2(t3) : o3, a3 = t3.collapsed, f3 = t3.colors, u3 = t3.level, l3 = t3.diff, c3 = typeof t3.titleFormatter == "undefined";
      e3.forEach(function(o4, s4) {
        var d3 = o4.started, p3 = o4.startedTime, g3 = o4.action, h3 = o4.prevState, y3 = o4.error, v3 = o4.took, w3 = o4.nextState, x3 = e3[s4 + 1];
        x3 && (w3 = x3.prevState, v3 = x3.started - d3);
        var S3 = n3(g3), k3 = typeof a3 == "function" ? a3(function() {
          return w3;
        }, g3, o4) : a3, j3 = D2(p3), E3 = f3.title ? "color: " + f3.title(S3) + ";" : "", A3 = ["color: gray; font-weight: lighter;"];
        A3.push(E3), t3.timestamp && A3.push("color: gray; font-weight: lighter;"), t3.duration && A3.push("color: gray; font-weight: lighter;");
        var O3 = i2(S3, j3, v3);
        try {
          k3 ? f3.title && c3 ? r3.groupCollapsed.apply(r3, ["%c " + O3].concat(A3)) : r3.groupCollapsed(O3) : f3.title && c3 ? r3.group.apply(r3, ["%c " + O3].concat(A3)) : r3.group(O3);
        } catch (e4) {
          r3.log(O3);
        }
        var N3 = m2(u3, S3, [h3], "prevState"), P3 = m2(u3, S3, [S3], "action"), C3 = m2(u3, S3, [y3, h3], "error"), F3 = m2(u3, S3, [w3], "nextState");
        if (N3)
          if (f3.prevState) {
            var L3 = "color: " + f3.prevState(h3) + "; font-weight: bold";
            r3[N3]("%c prev state", L3, h3);
          } else
            r3[N3]("prev state", h3);
        if (P3)
          if (f3.action) {
            var T3 = "color: " + f3.action(S3) + "; font-weight: bold";
            r3[P3]("%c action    ", T3, S3);
          } else
            r3[P3]("action    ", S3);
        if (y3 && C3)
          if (f3.error) {
            var M2 = "color: " + f3.error(y3, h3) + "; font-weight: bold;";
            r3[C3]("%c error     ", M2, y3);
          } else
            r3[C3]("error     ", y3);
        if (F3)
          if (f3.nextState) {
            var _2 = "color: " + f3.nextState(w3) + "; font-weight: bold";
            r3[F3]("%c next state", _2, w3);
          } else
            r3[F3]("next state", w3);
        l3 && b2(h3, w3, r3, k3);
        try {
          r3.groupEnd();
        } catch (e4) {
          r3.log("\u2014\u2014 log end \u2014\u2014");
        }
      });
    }
    function S2() {
      var e3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t3 = Object.assign({}, L2, e3), r3 = t3.logger, n3 = t3.stateTransformer, o3 = t3.errorTransformer, i2 = t3.predicate, a3 = t3.logErrors, f3 = t3.diffPredicate;
      if (typeof r3 == "undefined")
        return function() {
          return function(e4) {
            return function(t4) {
              return e4(t4);
            };
          };
        };
      if (e3.getState && e3.dispatch)
        return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"), function() {
          return function(e4) {
            return function(t4) {
              return e4(t4);
            };
          };
        };
      var u3 = [];
      return function(e4) {
        var r4 = e4.getState;
        return function(e5) {
          return function(l3) {
            if (typeof i2 == "function" && !i2(r4, l3))
              return e5(l3);
            var c3 = {};
            u3.push(c3), c3.started = O2.now(), c3.startedTime = new Date(), c3.prevState = n3(r4()), c3.action = l3;
            var s4 = void 0;
            if (a3)
              try {
                s4 = e5(l3);
              } catch (e6) {
                c3.error = o3(e6);
              }
            else
              s4 = e5(l3);
            c3.took = O2.now() - c3.started, c3.nextState = n3(r4());
            var d3 = t3.diff && typeof f3 == "function" ? f3(r4, l3) : t3.diff;
            if (x2(u3, Object.assign({}, t3, { diff: d3 })), u3.length = 0, c3.error)
              throw c3.error;
            return s4;
          };
        };
      };
    }
    var k2, j2, E2 = function(e3, t3) {
      return new Array(t3 + 1).join(e3);
    }, A2 = function(e3, t3) {
      return E2("0", t3 - e3.toString().length) + e3;
    }, D2 = function(e3) {
      return A2(e3.getHours(), 2) + ":" + A2(e3.getMinutes(), 2) + ":" + A2(e3.getSeconds(), 2) + "." + A2(e3.getMilliseconds(), 3);
    }, O2 = typeof performance != "undefined" && performance !== null && typeof performance.now == "function" ? performance : Date, N2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
      return typeof e3;
    } : function(e3) {
      return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
    }, P2 = function(e3) {
      if (Array.isArray(e3)) {
        for (var t3 = 0, r3 = Array(e3.length); t3 < e3.length; t3++)
          r3[t3] = e3[t3];
        return r3;
      }
      return Array.from(e3);
    }, C2 = [];
    k2 = (typeof commonjsGlobal == "undefined" ? "undefined" : N2(commonjsGlobal)) === "object" && commonjsGlobal ? commonjsGlobal : typeof window != "undefined" ? window : {}, j2 = k2.DeepDiff, j2 && C2.push(function() {
      typeof j2 != "undefined" && k2.DeepDiff === c2 && (k2.DeepDiff = j2, j2 = void 0);
    }), t2(n2, r2), t2(o2, r2), t2(i, r2), t2(a2, r2), Object.defineProperties(c2, { diff: { value: c2, enumerable: true }, observableDiff: { value: l2, enumerable: true }, applyDiff: { value: h2, enumerable: true }, applyChange: { value: d2, enumerable: true }, revertChange: { value: g2, enumerable: true }, isConflict: { value: function() {
      return typeof j2 != "undefined";
    }, enumerable: true }, noConflict: { value: function() {
      return C2 && (C2.forEach(function(e3) {
        e3();
      }), C2 = null), c2;
    }, enumerable: true } });
    var F2 = { E: { color: "#2196F3", text: "CHANGED:" }, N: { color: "#4CAF50", text: "ADDED:" }, D: { color: "#F44336", text: "DELETED:" }, A: { color: "#2196F3", text: "ARRAY:" } }, L2 = { level: "log", logger: console, logErrors: true, collapsed: void 0, predicate: void 0, duration: false, timestamp: true, stateTransformer: function(e3) {
      return e3;
    }, actionTransformer: function(e3) {
      return e3;
    }, errorTransformer: function(e3) {
      return e3;
    }, colors: { title: function() {
      return "inherit";
    }, prevState: function() {
      return "#9E9E9E";
    }, action: function() {
      return "#03A9F4";
    }, nextState: function() {
      return "#4CAF50";
    }, error: function() {
      return "#F20404";
    } }, diff: false, diffPredicate: void 0, transformer: void 0 }, T2 = function() {
      var e3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t3 = e3.dispatch, r3 = e3.getState;
      return typeof t3 == "function" || typeof r3 == "function" ? S2()({ dispatch: t3, getState: r3 }) : void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n");
    };
    e2.defaults = L2, e2.createLogger = S2, e2.logger = T2, e2.default = T2, Object.defineProperty(e2, "__esModule", { value: true });
  });
})(reduxLogger, reduxLogger.exports);
function createMiddleware(history2, appMiddleware) {
  const middleware = [];
  middleware.push(exceptionLogger, contextMiddleware);
  for (const mid of appMiddleware) {
    middleware.push(mid);
  }
  return middleware;
}
const createModelsReducer = (models = {}) => {
  const initialState2 = {
    models: __spreadValues({}, models)
  };
  return createSlice({
    initialState: initialState2,
    name: "models",
    reducers: {
      init: () => {
      }
    }
  }).reducer;
};
const showModelPanel = ({
  edit = false,
  model,
  id
}) => async (dispatch, getState) => {
};
const hideModelPanel = () => async (dispatch, getState) => {
};
const initialState$b = {
  aws: {}
};
const slice$e = createSlice({
  initialState: initialState$b,
  name: "config",
  reducers: {
    setConfig: (state, action) => {
      if (action.payload) {
        const { aws } = action.payload;
        state.aws = aws;
      }
    }
  }
});
const { setConfig } = slice$e.actions;
var config = slice$e.reducer;
const initialState$a = {
  detail: "",
  history: [],
  page: "/"
};
const slice$d = createSlice({
  initialState: initialState$a,
  name: "app",
  reducers: {
    goBack: (state) => {
      const item = state.history.pop();
      if (item) {
        state.page = item.page;
        state.detail = item.detail;
      }
    }
  }
});
var navigation = slice$d.reducer;
const initialState$9 = {
  list: []
};
const slice$c = createSlice({
  initialState: initialState$9,
  name: "routes",
  reducers: {
    setRoutes: (state, action) => {
      state.list = action.payload;
    }
  }
});
const { setRoutes } = slice$c.actions;
var routes = slice$c.reducer;
var app = combineReducers({
  config,
  navigation,
  routes
});
let nanoid = (size = 21) => {
  let id = "";
  let bytes = crypto.getRandomValues(new Uint8Array(size));
  while (size--) {
    let byte = bytes[size] & 63;
    if (byte < 36) {
      id += byte.toString(36);
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase();
    } else if (byte < 63) {
      id += "_";
    } else {
      id += "-";
    }
  }
  return id;
};
const modalAdapter = createEntityAdapter({
  selectId: (modal) => modal.id.toString()
});
const slice$b = createSlice({
  initialState: modalAdapter.getInitialState(),
  name: "modals",
  reducers: {
    closeModal: (state, action) => {
      modalAdapter.removeOne(state, action.payload);
    },
    showModal: (state, action) => {
      const modal = action.payload;
      const id = nanoid(6);
      modalAdapter.addOne(state, __spreadProps(__spreadValues({}, modal), { id }));
    }
  }
});
var modals = slice$b.reducer;
const { closeModal, showModal } = slice$b.actions;
const notificationAdapter = createEntityAdapter({
  selectId: (notification) => notification.id.toString()
});
const slice$a = createSlice({
  initialState: notificationAdapter.getInitialState(),
  name: "notifications",
  reducers: {
    closeNotification: (state, action) => {
      notificationAdapter.removeOne(state, action.payload);
    },
    showNotification: (state, action) => {
      const notification = action.payload;
      notificationAdapter.addOne(state, __spreadProps(__spreadValues({}, notification), {
        id: notification.id
      }));
    }
  }
});
function addToastNotification({
  color,
  icon,
  message,
  timed,
  seconds
}) {
  return async (dispatch, getState) => {
    const id = nanoid(6);
    dispatch(slice$a.actions.showNotification({
      notification: {
        color,
        icon,
        id,
        message,
        seconds,
        timed
      }
    }));
    if (timed && seconds) {
      setTimeout(() => {
        dispatch(slice$a.actions.closeNotification(id));
      }, 3e3);
    }
  };
}
var notifications = slice$a.reducer;
const initialState$8 = {
  current: AppLabLightTheme.id,
  list: [AppLabLightTheme, AppLabDarkTheme]
};
const slice$9 = createSlice({
  initialState: initialState$8,
  name: "themes",
  reducers: {
    addThemes: (state, action) => {
      state.list = action.payload;
    },
    setTheme: (state, action) => {
      state.current = action.payload;
    }
  }
});
const { addThemes, setTheme } = slice$9.actions;
var themes = slice$9.reducer;
var ui$1 = combineReducers({
  modals,
  notifications,
  themes
});
class LuxonError extends Error {
}
class InvalidDateTimeError extends LuxonError {
  constructor(reason) {
    super(`Invalid DateTime: ${reason.toMessage()}`);
  }
}
class InvalidIntervalError extends LuxonError {
  constructor(reason) {
    super(`Invalid Interval: ${reason.toMessage()}`);
  }
}
class InvalidDurationError extends LuxonError {
  constructor(reason) {
    super(`Invalid Duration: ${reason.toMessage()}`);
  }
}
class ConflictingSpecificationError extends LuxonError {
}
class InvalidUnitError extends LuxonError {
  constructor(unit) {
    super(`Invalid unit ${unit}`);
  }
}
class InvalidArgumentError extends LuxonError {
}
class ZoneIsAbstractError extends LuxonError {
  constructor() {
    super("Zone is an abstract class");
  }
}
const n$1 = "numeric", s$1 = "short", l = "long";
const DATE_SHORT = {
  year: n$1,
  month: n$1,
  day: n$1
};
const DATE_MED = {
  year: n$1,
  month: s$1,
  day: n$1
};
const DATE_MED_WITH_WEEKDAY = {
  year: n$1,
  month: s$1,
  day: n$1,
  weekday: s$1
};
const DATE_FULL = {
  year: n$1,
  month: l,
  day: n$1
};
const DATE_HUGE = {
  year: n$1,
  month: l,
  day: n$1,
  weekday: l
};
const TIME_SIMPLE = {
  hour: n$1,
  minute: n$1
};
const TIME_WITH_SECONDS = {
  hour: n$1,
  minute: n$1,
  second: n$1
};
const TIME_WITH_SHORT_OFFSET = {
  hour: n$1,
  minute: n$1,
  second: n$1,
  timeZoneName: s$1
};
const TIME_WITH_LONG_OFFSET = {
  hour: n$1,
  minute: n$1,
  second: n$1,
  timeZoneName: l
};
const TIME_24_SIMPLE = {
  hour: n$1,
  minute: n$1,
  hourCycle: "h23"
};
const TIME_24_WITH_SECONDS = {
  hour: n$1,
  minute: n$1,
  second: n$1,
  hourCycle: "h23"
};
const TIME_24_WITH_SHORT_OFFSET = {
  hour: n$1,
  minute: n$1,
  second: n$1,
  hourCycle: "h23",
  timeZoneName: s$1
};
const TIME_24_WITH_LONG_OFFSET = {
  hour: n$1,
  minute: n$1,
  second: n$1,
  hourCycle: "h23",
  timeZoneName: l
};
const DATETIME_SHORT = {
  year: n$1,
  month: n$1,
  day: n$1,
  hour: n$1,
  minute: n$1
};
const DATETIME_SHORT_WITH_SECONDS = {
  year: n$1,
  month: n$1,
  day: n$1,
  hour: n$1,
  minute: n$1,
  second: n$1
};
const DATETIME_MED = {
  year: n$1,
  month: s$1,
  day: n$1,
  hour: n$1,
  minute: n$1
};
const DATETIME_MED_WITH_SECONDS = {
  year: n$1,
  month: s$1,
  day: n$1,
  hour: n$1,
  minute: n$1,
  second: n$1
};
const DATETIME_MED_WITH_WEEKDAY = {
  year: n$1,
  month: s$1,
  day: n$1,
  weekday: s$1,
  hour: n$1,
  minute: n$1
};
const DATETIME_FULL = {
  year: n$1,
  month: l,
  day: n$1,
  hour: n$1,
  minute: n$1,
  timeZoneName: s$1
};
const DATETIME_FULL_WITH_SECONDS = {
  year: n$1,
  month: l,
  day: n$1,
  hour: n$1,
  minute: n$1,
  second: n$1,
  timeZoneName: s$1
};
const DATETIME_HUGE = {
  year: n$1,
  month: l,
  day: n$1,
  weekday: l,
  hour: n$1,
  minute: n$1,
  timeZoneName: l
};
const DATETIME_HUGE_WITH_SECONDS = {
  year: n$1,
  month: l,
  day: n$1,
  weekday: l,
  hour: n$1,
  minute: n$1,
  second: n$1,
  timeZoneName: l
};
function isUndefined$1(o2) {
  return typeof o2 === "undefined";
}
function isNumber$1(o2) {
  return typeof o2 === "number";
}
function isInteger(o2) {
  return typeof o2 === "number" && o2 % 1 === 0;
}
function isString$1(o2) {
  return typeof o2 === "string";
}
function isDate(o2) {
  return Object.prototype.toString.call(o2) === "[object Date]";
}
function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e2) {
    return false;
  }
}
function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return void 0;
  }
  return arr.reduce((best, next) => {
    const pair = [by(next), next];
    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
function pick(obj, keys) {
  return keys.reduce((a2, k2) => {
    a2[k2] = obj[k2];
    return a2;
  }, {});
}
function hasOwnProperty$2(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
}
function floorMod(x2, n2) {
  return x2 - n2 * Math.floor(x2 / n2);
}
function padStart(input, n2 = 2) {
  const isNeg = input < 0;
  let padded;
  if (isNeg) {
    padded = "-" + ("" + -input).padStart(n2, "0");
  } else {
    padded = ("" + input).padStart(n2, "0");
  }
  return padded;
}
function parseInteger(string2) {
  if (isUndefined$1(string2) || string2 === null || string2 === "") {
    return void 0;
  } else {
    return parseInt(string2, 10);
  }
}
function parseFloating(string2) {
  if (isUndefined$1(string2) || string2 === null || string2 === "") {
    return void 0;
  } else {
    return parseFloat(string2);
  }
}
function parseMillis(fraction) {
  if (isUndefined$1(fraction) || fraction === null || fraction === "") {
    return void 0;
  } else {
    const f2 = parseFloat("0." + fraction) * 1e3;
    return Math.floor(f2);
  }
}
function roundTo(number, digits, towardZero = false) {
  const factor = 10 ** digits, rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
}
function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
  const modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
}
function objToLocalTS(obj) {
  let d2 = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond);
  if (obj.year < 100 && obj.year >= 0) {
    d2 = new Date(d2);
    d2.setUTCFullYear(d2.getUTCFullYear() - 1900);
  }
  return +d2;
}
function weeksInWeekYear(weekYear) {
  const p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7, last = weekYear - 1, p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
  return p1 === 4 || p2 === 3 ? 53 : 52;
}
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else
    return year > 60 ? 1900 + year : 2e3 + year;
}
function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
  const date = new Date(ts), intlOpts = {
    hourCycle: "h23",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };
  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }
  const modified = __spreadValues({ timeZoneName: offsetFormat }, intlOpts);
  const parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find((m2) => m2.type.toLowerCase() === "timezonename");
  return parsed ? parsed.value : null;
}
function signedOffset(offHourStr, offMinuteStr) {
  let offHour = parseInt(offHourStr, 10);
  if (Number.isNaN(offHour)) {
    offHour = 0;
  }
  const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
}
function asNumber(value) {
  const numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
    throw new InvalidArgumentError(`Invalid unit value ${value}`);
  return numericValue;
}
function normalizeObject(obj, normalizer) {
  const normalized = {};
  for (const u2 in obj) {
    if (hasOwnProperty$2(obj, u2)) {
      const v2 = obj[u2];
      if (v2 === void 0 || v2 === null)
        continue;
      normalized[normalizer(u2)] = asNumber(v2);
    }
  }
  return normalized;
}
function formatOffset(offset2, format3) {
  const hours = Math.trunc(Math.abs(offset2 / 60)), minutes = Math.trunc(Math.abs(offset2 % 60)), sign3 = offset2 >= 0 ? "+" : "-";
  switch (format3) {
    case "short":
      return `${sign3}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
    case "narrow":
      return `${sign3}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
    case "techie":
      return `${sign3}${padStart(hours, 2)}${padStart(minutes, 2)}`;
    default:
      throw new RangeError(`Value format ${format3} is out of range for property format`);
  }
}
function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}
const ianaRegex = /[A-Za-z_+-]{1,256}(:?\/[A-Za-z0-9_+-]{1,256}(\/[A-Za-z0-9_+-]{1,256})?)?/;
const monthsLong = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December"
];
const monthsShort = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
const monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
function months(length) {
  switch (length) {
    case "narrow":
      return [...monthsNarrow];
    case "short":
      return [...monthsShort];
    case "long":
      return [...monthsLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    default:
      return null;
  }
}
const weekdaysLong = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday"
];
const weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
const weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
function weekdays(length) {
  switch (length) {
    case "narrow":
      return [...weekdaysNarrow];
    case "short":
      return [...weekdaysShort];
    case "long":
      return [...weekdaysLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];
    default:
      return null;
  }
}
const meridiems = ["AM", "PM"];
const erasLong = ["Before Christ", "Anno Domini"];
const erasShort = ["BC", "AD"];
const erasNarrow = ["B", "A"];
function eras(length) {
  switch (length) {
    case "narrow":
      return [...erasNarrow];
    case "short":
      return [...erasShort];
    case "long":
      return [...erasLong];
    default:
      return null;
  }
}
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
  const units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  };
  const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;
  if (numeric === "auto" && lastable) {
    const isDay = unit === "days";
    switch (count) {
      case 1:
        return isDay ? "tomorrow" : `next ${units[unit][0]}`;
      case -1:
        return isDay ? "yesterday" : `last ${units[unit][0]}`;
      case 0:
        return isDay ? "today" : `this ${units[unit][0]}`;
    }
  }
  const isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
}
function stringifyTokens(splits, tokenToString) {
  let s2 = "";
  for (const token of splits) {
    if (token.literal) {
      s2 += token.val;
    } else {
      s2 += tokenToString(token.val);
    }
  }
  return s2;
}
const macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS
};
class Formatter {
  static create(locale, opts = {}) {
    return new Formatter(locale, opts);
  }
  static parseFormat(fmt) {
    let current = null, currentFull = "", bracketed = false;
    const splits = [];
    for (let i = 0; i < fmt.length; i++) {
      const c2 = fmt.charAt(i);
      if (c2 === "'") {
        if (currentFull.length > 0) {
          splits.push({ literal: bracketed, val: currentFull });
        }
        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c2;
      } else if (c2 === current) {
        currentFull += c2;
      } else {
        if (currentFull.length > 0) {
          splits.push({ literal: false, val: currentFull });
        }
        currentFull = c2;
        current = c2;
      }
    }
    if (currentFull.length > 0) {
      splits.push({ literal: bracketed, val: currentFull });
    }
    return splits;
  }
  static macroTokenToFormatOpts(token) {
    return macroTokenToFormatOpts[token];
  }
  constructor(locale, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale;
    this.systemLoc = null;
  }
  formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }
    const df = this.systemLoc.dtFormatter(dt, __spreadValues(__spreadValues({}, this.opts), opts));
    return df.format();
  }
  formatDateTime(dt, opts = {}) {
    const df = this.loc.dtFormatter(dt, __spreadValues(__spreadValues({}, this.opts), opts));
    return df.format();
  }
  formatDateTimeParts(dt, opts = {}) {
    const df = this.loc.dtFormatter(dt, __spreadValues(__spreadValues({}, this.opts), opts));
    return df.formatToParts();
  }
  resolvedOptions(dt, opts = {}) {
    const df = this.loc.dtFormatter(dt, __spreadValues(__spreadValues({}, this.opts), opts));
    return df.resolvedOptions();
  }
  num(n2, p2 = 0) {
    if (this.opts.forceSimple) {
      return padStart(n2, p2);
    }
    const opts = __spreadValues({}, this.opts);
    if (p2 > 0) {
      opts.padTo = p2;
    }
    return this.loc.numberFormatter(opts).format(n2);
  }
  formatDateTimeFromString(dt, fmt) {
    const knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string2 = (opts, extract) => this.loc.extract(dt, opts, extract), formatOffset2 = (opts) => {
      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
        return "Z";
      }
      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
    }, meridiem = () => knownEnglish ? meridiemForDateTime(dt) : string2({ hour: "numeric", hourCycle: "h12" }, "dayperiod"), month = (length, standalone) => knownEnglish ? monthForDateTime(dt, length) : string2(standalone ? { month: length } : { month: length, day: "numeric" }, "month"), weekday = (length, standalone) => knownEnglish ? weekdayForDateTime(dt, length) : string2(standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" }, "weekday"), maybeMacro = (token) => {
      const formatOpts = Formatter.macroTokenToFormatOpts(token);
      if (formatOpts) {
        return this.formatWithSystemDefault(dt, formatOpts);
      } else {
        return token;
      }
    }, era = (length) => knownEnglish ? eraForDateTime(dt, length) : string2({ era: length }, "era"), tokenToString = (token) => {
      switch (token) {
        case "S":
          return this.num(dt.millisecond);
        case "u":
        case "SSS":
          return this.num(dt.millisecond, 3);
        case "s":
          return this.num(dt.second);
        case "ss":
          return this.num(dt.second, 2);
        case "uu":
          return this.num(Math.floor(dt.millisecond / 10), 2);
        case "uuu":
          return this.num(Math.floor(dt.millisecond / 100));
        case "m":
          return this.num(dt.minute);
        case "mm":
          return this.num(dt.minute, 2);
        case "h":
          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
        case "hh":
          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
        case "H":
          return this.num(dt.hour);
        case "HH":
          return this.num(dt.hour, 2);
        case "Z":
          return formatOffset2({ format: "narrow", allowZ: this.opts.allowZ });
        case "ZZ":
          return formatOffset2({ format: "short", allowZ: this.opts.allowZ });
        case "ZZZ":
          return formatOffset2({ format: "techie", allowZ: this.opts.allowZ });
        case "ZZZZ":
          return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
        case "ZZZZZ":
          return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
        case "z":
          return dt.zoneName;
        case "a":
          return meridiem();
        case "d":
          return useDateTimeFormatter ? string2({ day: "numeric" }, "day") : this.num(dt.day);
        case "dd":
          return useDateTimeFormatter ? string2({ day: "2-digit" }, "day") : this.num(dt.day, 2);
        case "c":
          return this.num(dt.weekday);
        case "ccc":
          return weekday("short", true);
        case "cccc":
          return weekday("long", true);
        case "ccccc":
          return weekday("narrow", true);
        case "E":
          return this.num(dt.weekday);
        case "EEE":
          return weekday("short", false);
        case "EEEE":
          return weekday("long", false);
        case "EEEEE":
          return weekday("narrow", false);
        case "L":
          return useDateTimeFormatter ? string2({ month: "numeric", day: "numeric" }, "month") : this.num(dt.month);
        case "LL":
          return useDateTimeFormatter ? string2({ month: "2-digit", day: "numeric" }, "month") : this.num(dt.month, 2);
        case "LLL":
          return month("short", true);
        case "LLLL":
          return month("long", true);
        case "LLLLL":
          return month("narrow", true);
        case "M":
          return useDateTimeFormatter ? string2({ month: "numeric" }, "month") : this.num(dt.month);
        case "MM":
          return useDateTimeFormatter ? string2({ month: "2-digit" }, "month") : this.num(dt.month, 2);
        case "MMM":
          return month("short", false);
        case "MMMM":
          return month("long", false);
        case "MMMMM":
          return month("narrow", false);
        case "y":
          return useDateTimeFormatter ? string2({ year: "numeric" }, "year") : this.num(dt.year);
        case "yy":
          return useDateTimeFormatter ? string2({ year: "2-digit" }, "year") : this.num(dt.year.toString().slice(-2), 2);
        case "yyyy":
          return useDateTimeFormatter ? string2({ year: "numeric" }, "year") : this.num(dt.year, 4);
        case "yyyyyy":
          return useDateTimeFormatter ? string2({ year: "numeric" }, "year") : this.num(dt.year, 6);
        case "G":
          return era("short");
        case "GG":
          return era("long");
        case "GGGGG":
          return era("narrow");
        case "kk":
          return this.num(dt.weekYear.toString().slice(-2), 2);
        case "kkkk":
          return this.num(dt.weekYear, 4);
        case "W":
          return this.num(dt.weekNumber);
        case "WW":
          return this.num(dt.weekNumber, 2);
        case "o":
          return this.num(dt.ordinal);
        case "ooo":
          return this.num(dt.ordinal, 3);
        case "q":
          return this.num(dt.quarter);
        case "qq":
          return this.num(dt.quarter, 2);
        case "X":
          return this.num(Math.floor(dt.ts / 1e3));
        case "x":
          return this.num(dt.ts);
        default:
          return maybeMacro(token);
      }
    };
    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
  }
  formatDurationFromString(dur, fmt) {
    const tokenToField = (token) => {
      switch (token[0]) {
        case "S":
          return "millisecond";
        case "s":
          return "second";
        case "m":
          return "minute";
        case "h":
          return "hour";
        case "d":
          return "day";
        case "M":
          return "month";
        case "y":
          return "year";
        default:
          return null;
      }
    }, tokenToString = (lildur) => (token) => {
      const mapped = tokenToField(token);
      if (mapped) {
        return this.num(lildur.get(mapped), token.length);
      } else {
        return token;
      }
    }, tokens = Formatter.parseFormat(fmt), realTokens = tokens.reduce((found, { literal, val }) => literal ? found : found.concat(val), []), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t2) => t2));
    return stringifyTokens(tokens, tokenToString(collapsed));
  }
}
class Invalid {
  constructor(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }
  toMessage() {
    if (this.explanation) {
      return `${this.reason}: ${this.explanation}`;
    } else {
      return this.reason;
    }
  }
}
class Zone {
  get type() {
    throw new ZoneIsAbstractError();
  }
  get name() {
    throw new ZoneIsAbstractError();
  }
  get isUniversal() {
    throw new ZoneIsAbstractError();
  }
  offsetName(ts, opts) {
    throw new ZoneIsAbstractError();
  }
  formatOffset(ts, format3) {
    throw new ZoneIsAbstractError();
  }
  offset(ts) {
    throw new ZoneIsAbstractError();
  }
  equals(otherZone) {
    throw new ZoneIsAbstractError();
  }
  get isValid() {
    throw new ZoneIsAbstractError();
  }
}
let singleton$1 = null;
class SystemZone extends Zone {
  static get instance() {
    if (singleton$1 === null) {
      singleton$1 = new SystemZone();
    }
    return singleton$1;
  }
  get type() {
    return "system";
  }
  get name() {
    return new Intl.DateTimeFormat().resolvedOptions().timeZone;
  }
  get isUniversal() {
    return false;
  }
  offsetName(ts, { format: format3, locale }) {
    return parseZoneInfo(ts, format3, locale);
  }
  formatOffset(ts, format3) {
    return formatOffset(this.offset(ts), format3);
  }
  offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }
  equals(otherZone) {
    return otherZone.type === "system";
  }
  get isValid() {
    return true;
  }
}
let dtfCache = {};
function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    });
  }
  return dtfCache[zone];
}
const typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5
};
function hackyOffset(dtf, date) {
  const formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted), [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;
  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];
}
function partsOffset(dtf, date) {
  const formatted = dtf.formatToParts(date), filled = [];
  for (let i = 0; i < formatted.length; i++) {
    const { type, value } = formatted[i], pos = typeToPos[type];
    if (!isUndefined$1(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }
  return filled;
}
let ianaZoneCache = {};
class IANAZone extends Zone {
  static create(name) {
    if (!ianaZoneCache[name]) {
      ianaZoneCache[name] = new IANAZone(name);
    }
    return ianaZoneCache[name];
  }
  static resetCache() {
    ianaZoneCache = {};
    dtfCache = {};
  }
  static isValidSpecifier(s2) {
    return this.isValidZone(s2);
  }
  static isValidZone(zone) {
    if (!zone) {
      return false;
    }
    try {
      new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
      return true;
    } catch (e2) {
      return false;
    }
  }
  constructor(name) {
    super();
    this.zoneName = name;
    this.valid = IANAZone.isValidZone(name);
  }
  get type() {
    return "iana";
  }
  get name() {
    return this.zoneName;
  }
  get isUniversal() {
    return false;
  }
  offsetName(ts, { format: format3, locale }) {
    return parseZoneInfo(ts, format3, locale, this.name);
  }
  formatOffset(ts, format3) {
    return formatOffset(this.offset(ts), format3);
  }
  offset(ts) {
    const date = new Date(ts);
    if (isNaN(date))
      return NaN;
    const dtf = makeDTF(this.name), [year, month, day, hour, minute, second] = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
    const adjustedHour = hour === 24 ? 0 : hour;
    const asUTC = objToLocalTS({
      year,
      month,
      day,
      hour: adjustedHour,
      minute,
      second,
      millisecond: 0
    });
    let asTS = +date;
    const over = asTS % 1e3;
    asTS -= over >= 0 ? over : 1e3 + over;
    return (asUTC - asTS) / (60 * 1e3);
  }
  equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }
  get isValid() {
    return this.valid;
  }
}
let singleton = null;
class FixedOffsetZone extends Zone {
  static get utcInstance() {
    if (singleton === null) {
      singleton = new FixedOffsetZone(0);
    }
    return singleton;
  }
  static instance(offset2) {
    return offset2 === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset2);
  }
  static parseSpecifier(s2) {
    if (s2) {
      const r2 = s2.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
      if (r2) {
        return new FixedOffsetZone(signedOffset(r2[1], r2[2]));
      }
    }
    return null;
  }
  constructor(offset2) {
    super();
    this.fixed = offset2;
  }
  get type() {
    return "fixed";
  }
  get name() {
    return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
  }
  offsetName() {
    return this.name;
  }
  formatOffset(ts, format3) {
    return formatOffset(this.fixed, format3);
  }
  get isUniversal() {
    return true;
  }
  offset() {
    return this.fixed;
  }
  equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }
  get isValid() {
    return true;
  }
}
class InvalidZone extends Zone {
  constructor(zoneName) {
    super();
    this.zoneName = zoneName;
  }
  get type() {
    return "invalid";
  }
  get name() {
    return this.zoneName;
  }
  get isUniversal() {
    return false;
  }
  offsetName() {
    return null;
  }
  formatOffset() {
    return "";
  }
  offset() {
    return NaN;
  }
  equals() {
    return false;
  }
  get isValid() {
    return false;
  }
}
function normalizeZone(input, defaultZone2) {
  if (isUndefined$1(input) || input === null) {
    return defaultZone2;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString$1(input)) {
    const lowered = input.toLowerCase();
    if (lowered === "local" || lowered === "system")
      return defaultZone2;
    else if (lowered === "utc" || lowered === "gmt")
      return FixedOffsetZone.utcInstance;
    else
      return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
  } else if (isNumber$1(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
    return input;
  } else {
    return new InvalidZone(input);
  }
}
let now = () => Date.now(), defaultZone = "system", defaultLocale = null, defaultNumberingSystem = null, defaultOutputCalendar = null, throwOnInvalid;
class Settings {
  static get now() {
    return now;
  }
  static set now(n2) {
    now = n2;
  }
  static set defaultZone(zone) {
    defaultZone = zone;
  }
  static get defaultZone() {
    return normalizeZone(defaultZone, SystemZone.instance);
  }
  static get defaultLocale() {
    return defaultLocale;
  }
  static set defaultLocale(locale) {
    defaultLocale = locale;
  }
  static get defaultNumberingSystem() {
    return defaultNumberingSystem;
  }
  static set defaultNumberingSystem(numberingSystem) {
    defaultNumberingSystem = numberingSystem;
  }
  static get defaultOutputCalendar() {
    return defaultOutputCalendar;
  }
  static set defaultOutputCalendar(outputCalendar) {
    defaultOutputCalendar = outputCalendar;
  }
  static get throwOnInvalid() {
    return throwOnInvalid;
  }
  static set throwOnInvalid(t2) {
    throwOnInvalid = t2;
  }
  static resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
  }
}
let intlLFCache = {};
function getCachedLF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlLFCache[key];
  if (!dtf) {
    dtf = new Intl.ListFormat(locString, opts);
    intlLFCache[key] = dtf;
  }
  return dtf;
}
let intlDTCache = {};
function getCachedDTF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlDTCache[key];
  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }
  return dtf;
}
let intlNumCache = {};
function getCachedINF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let inf = intlNumCache[key];
  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }
  return inf;
}
let intlRelCache = {};
function getCachedRTF(locString, opts = {}) {
  const _a2 = opts, { base } = _a2, cacheKeyOpts = __objRest(_a2, ["base"]);
  const key = JSON.stringify([locString, cacheKeyOpts]);
  let inf = intlRelCache[key];
  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }
  return inf;
}
let sysLocaleCache = null;
function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else {
    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    return sysLocaleCache;
  }
}
function parseLocaleString(localeStr) {
  const uIndex = localeStr.indexOf("-u-");
  if (uIndex === -1) {
    return [localeStr];
  } else {
    let options;
    const smaller = localeStr.substring(0, uIndex);
    try {
      options = getCachedDTF(localeStr).resolvedOptions();
    } catch (e2) {
      options = getCachedDTF(smaller).resolvedOptions();
    }
    const { numberingSystem, calendar } = options;
    return [smaller, numberingSystem, calendar];
  }
}
function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (outputCalendar || numberingSystem) {
    localeStr += "-u";
    if (outputCalendar) {
      localeStr += `-ca-${outputCalendar}`;
    }
    if (numberingSystem) {
      localeStr += `-nu-${numberingSystem}`;
    }
    return localeStr;
  } else {
    return localeStr;
  }
}
function mapMonths(f2) {
  const ms = [];
  for (let i = 1; i <= 12; i++) {
    const dt = DateTime.utc(2016, i, 1);
    ms.push(f2(dt));
  }
  return ms;
}
function mapWeekdays(f2) {
  const ms = [];
  for (let i = 1; i <= 7; i++) {
    const dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f2(dt));
  }
  return ms;
}
function listStuff(loc, length, defaultOK, englishFn, intlFn) {
  const mode = loc.listingMode(defaultOK);
  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}
function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
  }
}
class PolyNumberFormatter {
  constructor(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;
    const _a2 = opts, { padTo, floor } = _a2, otherOpts = __objRest(_a2, ["padTo", "floor"]);
    if (!forceSimple || Object.keys(otherOpts).length > 0) {
      const intlOpts = __spreadValues({ useGrouping: false }, opts);
      if (opts.padTo > 0)
        intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }
  format(i) {
    if (this.inf) {
      const fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
      return padStart(fixed, this.padTo);
    }
  }
}
class PolyDateFormatter {
  constructor(dt, intl, opts) {
    this.opts = opts;
    let z2;
    if (dt.zone.isUniversal) {
      const gmtOffset = -1 * (dt.offset / 60);
      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
        z2 = offsetZ;
        this.dt = dt;
      } else {
        z2 = "UTC";
        if (opts.timeZoneName) {
          this.dt = dt;
        } else {
          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1e3);
        }
      }
    } else if (dt.zone.type === "system") {
      this.dt = dt;
    } else {
      this.dt = dt;
      z2 = dt.zone.name;
    }
    const intlOpts = __spreadValues({}, this.opts);
    if (z2) {
      intlOpts.timeZone = z2;
    }
    this.dtf = getCachedDTF(intl, intlOpts);
  }
  format() {
    return this.dtf.format(this.dt.toJSDate());
  }
  formatToParts() {
    return this.dtf.formatToParts(this.dt.toJSDate());
  }
  resolvedOptions() {
    return this.dtf.resolvedOptions();
  }
}
class PolyRelFormatter {
  constructor(intl, isEnglish, opts) {
    this.opts = __spreadValues({ style: "long" }, opts);
    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }
  format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  }
  formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  }
}
class Locale {
  static fromOpts(opts) {
    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
  }
  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {
    const specifiedLocale = locale || Settings.defaultLocale;
    const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
  }
  static resetCache() {
    sysLocaleCache = null;
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
  }
  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {
    return Locale.create(locale, numberingSystem, outputCalendar);
  }
  constructor(locale, numbering, outputCalendar, specifiedLocale) {
    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);
    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
    this.weekdaysCache = { format: {}, standalone: {} };
    this.monthsCache = { format: {}, standalone: {} };
    this.meridiemCache = null;
    this.eraCache = {};
    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }
  get fastNumbers() {
    if (this.fastNumbersCached == null) {
      this.fastNumbersCached = supportsFastNumbers(this);
    }
    return this.fastNumbersCached;
  }
  listingMode() {
    const isActuallyEn = this.isEnglish();
    const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
    return isActuallyEn && hasNoWeirdness ? "en" : "intl";
  }
  clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);
    }
  }
  redefaultToEN(alts = {}) {
    return this.clone(__spreadProps(__spreadValues({}, alts), { defaultToEN: true }));
  }
  redefaultToSystem(alts = {}) {
    return this.clone(__spreadProps(__spreadValues({}, alts), { defaultToEN: false }));
  }
  months(length, format3 = false, defaultOK = true) {
    return listStuff(this, length, defaultOK, months, () => {
      const intl = format3 ? { month: length, day: "numeric" } : { month: length }, formatStr = format3 ? "format" : "standalone";
      if (!this.monthsCache[formatStr][length]) {
        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
      }
      return this.monthsCache[formatStr][length];
    });
  }
  weekdays(length, format3 = false, defaultOK = true) {
    return listStuff(this, length, defaultOK, weekdays, () => {
      const intl = format3 ? { weekday: length, year: "numeric", month: "long", day: "numeric" } : { weekday: length }, formatStr = format3 ? "format" : "standalone";
      if (!this.weekdaysCache[formatStr][length]) {
        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) => this.extract(dt, intl, "weekday"));
      }
      return this.weekdaysCache[formatStr][length];
    });
  }
  meridiems(defaultOK = true) {
    return listStuff(this, void 0, defaultOK, () => meridiems, () => {
      if (!this.meridiemCache) {
        const intl = { hour: "numeric", hourCycle: "h12" };
        this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map((dt) => this.extract(dt, intl, "dayperiod"));
      }
      return this.meridiemCache;
    });
  }
  eras(length, defaultOK = true) {
    return listStuff(this, length, defaultOK, eras, () => {
      const intl = { era: length };
      if (!this.eraCache[length]) {
        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) => this.extract(dt, intl, "era"));
      }
      return this.eraCache[length];
    });
  }
  extract(dt, intlOpts, field) {
    const df = this.dtFormatter(dt, intlOpts), results = df.formatToParts(), matching = results.find((m2) => m2.type.toLowerCase() === field);
    return matching ? matching.value : null;
  }
  numberFormatter(opts = {}) {
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  }
  dtFormatter(dt, intlOpts = {}) {
    return new PolyDateFormatter(dt, this.intl, intlOpts);
  }
  relFormatter(opts = {}) {
    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  }
  listFormatter(opts = {}) {
    return getCachedLF(this.intl, opts);
  }
  isEnglish() {
    return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
  }
  equals(other) {
    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
  }
}
function combineRegexes(...regexes) {
  const full = regexes.reduce((f2, r2) => f2 + r2.source, "");
  return RegExp(`^${full}$`);
}
function combineExtractors(...extractors) {
  return (m2) => extractors.reduce(([mergedVals, mergedZone, cursor], ex) => {
    const [val, zone, next] = ex(m2, cursor);
    return [__spreadValues(__spreadValues({}, mergedVals), val), mergedZone || zone, next];
  }, [{}, null, 1]).slice(0, 2);
}
function parse(s2, ...patterns2) {
  if (s2 == null) {
    return [null, null];
  }
  for (const [regex, extractor] of patterns2) {
    const m2 = regex.exec(s2);
    if (m2) {
      return extractor(m2);
    }
  }
  return [null, null];
}
function simpleParse(...keys) {
  return (match2, cursor) => {
    const ret = {};
    let i;
    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match2[cursor + i]);
    }
    return [ret, null, cursor + i];
  };
}
const offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/, isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/, isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`), isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`), isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/, isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/, isoOrdinalRegex = /(\d{4})-?(\d{3})/, extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay"), extractISOOrdinalData = simpleParse("year", "ordinal"), sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/, sqlTimeRegex = RegExp(`${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`), sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);
function int(match2, pos, fallback) {
  const m2 = match2[pos];
  return isUndefined$1(m2) ? fallback : parseInteger(m2);
}
function extractISOYmd(match2, cursor) {
  const item = {
    year: int(match2, cursor),
    month: int(match2, cursor + 1, 1),
    day: int(match2, cursor + 2, 1)
  };
  return [item, null, cursor + 3];
}
function extractISOTime(match2, cursor) {
  const item = {
    hours: int(match2, cursor, 0),
    minutes: int(match2, cursor + 1, 0),
    seconds: int(match2, cursor + 2, 0),
    milliseconds: parseMillis(match2[cursor + 3])
  };
  return [item, null, cursor + 4];
}
function extractISOOffset(match2, cursor) {
  const local = !match2[cursor] && !match2[cursor + 1], fullOffset = signedOffset(match2[cursor + 1], match2[cursor + 2]), zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}
function extractIANAZone(match2, cursor) {
  const zone = match2[cursor] ? IANAZone.create(match2[cursor]) : null;
  return [{}, zone, cursor + 1];
}
const isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);
const isoDuration = /^-?P(?:(?:(-?\d{1,9}(?:\.\d{1,9})?)Y)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,9}(?:\.\d{1,9})?)W)?(?:(-?\d{1,9}(?:\.\d{1,9})?)D)?(?:T(?:(-?\d{1,9}(?:\.\d{1,9})?)H)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,9}))?S)?)?)$/;
function extractISODuration(match2) {
  const [s2, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match2;
  const hasNegativePrefix = s2[0] === "-";
  const negativeSeconds = secondStr && secondStr[0] === "-";
  const maybeNegate = (num, force = false) => num !== void 0 && (force || num && hasNegativePrefix) ? -num : num;
  return [
    {
      years: maybeNegate(parseFloating(yearStr)),
      months: maybeNegate(parseFloating(monthStr)),
      weeks: maybeNegate(parseFloating(weekStr)),
      days: maybeNegate(parseFloating(dayStr)),
      hours: maybeNegate(parseFloating(hourStr)),
      minutes: maybeNegate(parseFloating(minuteStr)),
      seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
    }
  ];
}
const obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  const result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr)
    result.second = parseInteger(secondStr);
  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }
  return result;
}
const rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
function extractRFC2822(match2) {
  const [
    ,
    weekdayStr,
    dayStr,
    monthStr,
    yearStr,
    hourStr,
    minuteStr,
    secondStr,
    obsOffset,
    milOffset,
    offHourStr,
    offMinuteStr
  ] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  let offset2;
  if (obsOffset) {
    offset2 = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset2 = 0;
  } else {
    offset2 = signedOffset(offHourStr, offMinuteStr);
  }
  return [result, new FixedOffsetZone(offset2)];
}
function preprocessRFC2822(s2) {
  return s2.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
}
const rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/, rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/, ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
function extractRFC1123Or850(match2) {
  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}
function extractASCII(match2) {
  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}
const isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
const isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
const isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
const isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
const extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset);
const extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset);
const extractISOOrdinalDateAndTime = combineExtractors(extractISOOrdinalData, extractISOTime, extractISOOffset);
const extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);
function parseISODate(s2) {
  return parse(s2, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);
}
function parseRFC2822Date(s2) {
  return parse(preprocessRFC2822(s2), [rfc2822, extractRFC2822]);
}
function parseHTTPDate(s2) {
  return parse(s2, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);
}
function parseISODuration(s2) {
  return parse(s2, [isoDuration, extractISODuration]);
}
const extractISOTimeOnly = combineExtractors(extractISOTime);
function parseISOTimeOnly(s2) {
  return parse(s2, [isoTimeOnly, extractISOTimeOnly]);
}
const sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
const sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
const extractISOYmdTimeOffsetAndIANAZone = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
const extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseSQL(s2) {
  return parse(s2, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);
}
const INVALID$2 = "Invalid Duration";
const lowOrderMatrix = {
  weeks: {
    days: 7,
    hours: 7 * 24,
    minutes: 7 * 24 * 60,
    seconds: 7 * 24 * 60 * 60,
    milliseconds: 7 * 24 * 60 * 60 * 1e3
  },
  days: {
    hours: 24,
    minutes: 24 * 60,
    seconds: 24 * 60 * 60,
    milliseconds: 24 * 60 * 60 * 1e3
  },
  hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1e3 },
  minutes: { seconds: 60, milliseconds: 60 * 1e3 },
  seconds: { milliseconds: 1e3 }
}, casualMatrix = __spreadValues({
  years: {
    quarters: 4,
    months: 12,
    weeks: 52,
    days: 365,
    hours: 365 * 24,
    minutes: 365 * 24 * 60,
    seconds: 365 * 24 * 60 * 60,
    milliseconds: 365 * 24 * 60 * 60 * 1e3
  },
  quarters: {
    months: 3,
    weeks: 13,
    days: 91,
    hours: 91 * 24,
    minutes: 91 * 24 * 60,
    seconds: 91 * 24 * 60 * 60,
    milliseconds: 91 * 24 * 60 * 60 * 1e3
  },
  months: {
    weeks: 4,
    days: 30,
    hours: 30 * 24,
    minutes: 30 * 24 * 60,
    seconds: 30 * 24 * 60 * 60,
    milliseconds: 30 * 24 * 60 * 60 * 1e3
  }
}, lowOrderMatrix), daysInYearAccurate = 146097 / 400, daysInMonthAccurate = 146097 / 4800, accurateMatrix = __spreadValues({
  years: {
    quarters: 4,
    months: 12,
    weeks: daysInYearAccurate / 7,
    days: daysInYearAccurate,
    hours: daysInYearAccurate * 24,
    minutes: daysInYearAccurate * 24 * 60,
    seconds: daysInYearAccurate * 24 * 60 * 60,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3
  },
  quarters: {
    months: 3,
    weeks: daysInYearAccurate / 28,
    days: daysInYearAccurate / 4,
    hours: daysInYearAccurate * 24 / 4,
    minutes: daysInYearAccurate * 24 * 60 / 4,
    seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3 / 4
  },
  months: {
    weeks: daysInMonthAccurate / 7,
    days: daysInMonthAccurate,
    hours: daysInMonthAccurate * 24,
    minutes: daysInMonthAccurate * 24 * 60,
    seconds: daysInMonthAccurate * 24 * 60 * 60,
    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1e3
  }
}, lowOrderMatrix);
const orderedUnits$1 = [
  "years",
  "quarters",
  "months",
  "weeks",
  "days",
  "hours",
  "minutes",
  "seconds",
  "milliseconds"
];
const reverseUnits = orderedUnits$1.slice(0).reverse();
function clone$1(dur, alts, clear2 = false) {
  const conf = {
    values: clear2 ? alts.values : __spreadValues(__spreadValues({}, dur.values), alts.values || {}),
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy
  };
  return new Duration(conf);
}
function antiTrunc(n2) {
  return n2 < 0 ? Math.floor(n2) : Math.ceil(n2);
}
function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
  const conv = matrix[toUnit][fromUnit], raw = fromMap[fromUnit] / conv, sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]), added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
  toMap[toUnit] += added;
  fromMap[fromUnit] -= added * conv;
}
function normalizeValues(matrix, vals) {
  reverseUnits.reduce((previous, current) => {
    if (!isUndefined$1(vals[current])) {
      if (previous) {
        convert(matrix, vals, previous, vals, current);
      }
      return current;
    } else {
      return previous;
    }
  }, null);
}
class Duration {
  constructor(config2) {
    const accurate = config2.conversionAccuracy === "longterm" || false;
    this.values = config2.values;
    this.loc = config2.loc || Locale.create();
    this.conversionAccuracy = accurate ? "longterm" : "casual";
    this.invalid = config2.invalid || null;
    this.matrix = accurate ? accurateMatrix : casualMatrix;
    this.isLuxonDuration = true;
  }
  static fromMillis(count, opts) {
    return Duration.fromObject({ milliseconds: count }, opts);
  }
  static fromObject(obj, opts = {}) {
    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError(`Duration.fromObject: argument expected to be an object, got ${obj === null ? "null" : typeof obj}`);
    }
    return new Duration({
      values: normalizeObject(obj, Duration.normalizeUnit),
      loc: Locale.fromObject(opts),
      conversionAccuracy: opts.conversionAccuracy
    });
  }
  static fromDurationLike(durationLike) {
    if (isNumber$1(durationLike)) {
      return Duration.fromMillis(durationLike);
    } else if (Duration.isDuration(durationLike)) {
      return durationLike;
    } else if (typeof durationLike === "object") {
      return Duration.fromObject(durationLike);
    } else {
      throw new InvalidArgumentError(`Unknown duration argument ${durationLike} of type ${typeof durationLike}`);
    }
  }
  static fromISO(text, opts) {
    const [parsed] = parseISODuration(text);
    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
  }
  static fromISOTime(text, opts) {
    const [parsed] = parseISOTimeOnly(text);
    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
  }
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }
    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid);
    } else {
      return new Duration({ invalid });
    }
  }
  static normalizeUnit(unit) {
    const normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds"
    }[unit ? unit.toLowerCase() : unit];
    if (!normalized)
      throw new InvalidUnitError(unit);
    return normalized;
  }
  static isDuration(o2) {
    return o2 && o2.isLuxonDuration || false;
  }
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }
  toFormat(fmt, opts = {}) {
    const fmtOpts = __spreadProps(__spreadValues({}, opts), {
      floor: opts.round !== false && opts.floor !== false
    });
    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID$2;
  }
  toHuman(opts = {}) {
    const l2 = orderedUnits$1.map((unit) => {
      const val = this.values[unit];
      if (isUndefined$1(val)) {
        return null;
      }
      return this.loc.numberFormatter(__spreadProps(__spreadValues({ style: "unit", unitDisplay: "long" }, opts), { unit: unit.slice(0, -1) })).format(val);
    }).filter((n2) => n2);
    return this.loc.listFormatter(__spreadValues({ type: "conjunction", style: opts.listStyle || "narrow" }, opts)).format(l2);
  }
  toObject() {
    if (!this.isValid)
      return {};
    return __spreadValues({}, this.values);
  }
  toISO() {
    if (!this.isValid)
      return null;
    let s2 = "P";
    if (this.years !== 0)
      s2 += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0)
      s2 += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0)
      s2 += this.weeks + "W";
    if (this.days !== 0)
      s2 += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
      s2 += "T";
    if (this.hours !== 0)
      s2 += this.hours + "H";
    if (this.minutes !== 0)
      s2 += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0)
      s2 += roundTo(this.seconds + this.milliseconds / 1e3, 3) + "S";
    if (s2 === "P")
      s2 += "T0S";
    return s2;
  }
  toISOTime(opts = {}) {
    if (!this.isValid)
      return null;
    const millis = this.toMillis();
    if (millis < 0 || millis >= 864e5)
      return null;
    opts = __spreadValues({
      suppressMilliseconds: false,
      suppressSeconds: false,
      includePrefix: false,
      format: "extended"
    }, opts);
    const value = this.shiftTo("hours", "minutes", "seconds", "milliseconds");
    let fmt = opts.format === "basic" ? "hhmm" : "hh:mm";
    if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {
      fmt += opts.format === "basic" ? "ss" : ":ss";
      if (!opts.suppressMilliseconds || value.milliseconds !== 0) {
        fmt += ".SSS";
      }
    }
    let str = value.toFormat(fmt);
    if (opts.includePrefix) {
      str = "T" + str;
    }
    return str;
  }
  toJSON() {
    return this.toISO();
  }
  toString() {
    return this.toISO();
  }
  toMillis() {
    return this.as("milliseconds");
  }
  valueOf() {
    return this.toMillis();
  }
  plus(duration) {
    if (!this.isValid)
      return this;
    const dur = Duration.fromDurationLike(duration), result = {};
    for (const k2 of orderedUnits$1) {
      if (hasOwnProperty$2(dur.values, k2) || hasOwnProperty$2(this.values, k2)) {
        result[k2] = dur.get(k2) + this.get(k2);
      }
    }
    return clone$1(this, { values: result }, true);
  }
  minus(duration) {
    if (!this.isValid)
      return this;
    const dur = Duration.fromDurationLike(duration);
    return this.plus(dur.negate());
  }
  mapUnits(fn2) {
    if (!this.isValid)
      return this;
    const result = {};
    for (const k2 of Object.keys(this.values)) {
      result[k2] = asNumber(fn2(this.values[k2], k2));
    }
    return clone$1(this, { values: result }, true);
  }
  get(unit) {
    return this[Duration.normalizeUnit(unit)];
  }
  set(values) {
    if (!this.isValid)
      return this;
    const mixed = __spreadValues(__spreadValues({}, this.values), normalizeObject(values, Duration.normalizeUnit));
    return clone$1(this, { values: mixed });
  }
  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {
    const loc = this.loc.clone({ locale, numberingSystem }), opts = { loc };
    if (conversionAccuracy) {
      opts.conversionAccuracy = conversionAccuracy;
    }
    return clone$1(this, opts);
  }
  as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }
  normalize() {
    if (!this.isValid)
      return this;
    const vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone$1(this, { values: vals }, true);
  }
  shiftTo(...units) {
    if (!this.isValid)
      return this;
    if (units.length === 0) {
      return this;
    }
    units = units.map((u2) => Duration.normalizeUnit(u2));
    const built = {}, accumulated = {}, vals = this.toObject();
    let lastUnit;
    for (const k2 of orderedUnits$1) {
      if (units.indexOf(k2) >= 0) {
        lastUnit = k2;
        let own = 0;
        for (const ak in accumulated) {
          own += this.matrix[ak][k2] * accumulated[ak];
          accumulated[ak] = 0;
        }
        if (isNumber$1(vals[k2])) {
          own += vals[k2];
        }
        const i = Math.trunc(own);
        built[k2] = i;
        accumulated[k2] = (own * 1e3 - i * 1e3) / 1e3;
        for (const down in vals) {
          if (orderedUnits$1.indexOf(down) > orderedUnits$1.indexOf(k2)) {
            convert(this.matrix, vals, down, built, k2);
          }
        }
      } else if (isNumber$1(vals[k2])) {
        accumulated[k2] = vals[k2];
      }
    }
    for (const key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }
    return clone$1(this, { values: built }, true).normalize();
  }
  negate() {
    if (!this.isValid)
      return this;
    const negated = {};
    for (const k2 of Object.keys(this.values)) {
      negated[k2] = this.values[k2] === 0 ? 0 : -this.values[k2];
    }
    return clone$1(this, { values: negated }, true);
  }
  get years() {
    return this.isValid ? this.values.years || 0 : NaN;
  }
  get quarters() {
    return this.isValid ? this.values.quarters || 0 : NaN;
  }
  get months() {
    return this.isValid ? this.values.months || 0 : NaN;
  }
  get weeks() {
    return this.isValid ? this.values.weeks || 0 : NaN;
  }
  get days() {
    return this.isValid ? this.values.days || 0 : NaN;
  }
  get hours() {
    return this.isValid ? this.values.hours || 0 : NaN;
  }
  get minutes() {
    return this.isValid ? this.values.minutes || 0 : NaN;
  }
  get seconds() {
    return this.isValid ? this.values.seconds || 0 : NaN;
  }
  get milliseconds() {
    return this.isValid ? this.values.milliseconds || 0 : NaN;
  }
  get isValid() {
    return this.invalid === null;
  }
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }
    if (!this.loc.equals(other.loc)) {
      return false;
    }
    function eq(v12, v2) {
      if (v12 === void 0 || v12 === 0)
        return v2 === void 0 || v2 === 0;
      return v12 === v2;
    }
    for (const u2 of orderedUnits$1) {
      if (!eq(this.values[u2], other.values[u2])) {
        return false;
      }
    }
    return true;
  }
}
const INVALID$1 = "Invalid Interval";
function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid("end before start", `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`);
  } else {
    return null;
  }
}
class Interval {
  constructor(config2) {
    this.s = config2.start;
    this.e = config2.end;
    this.invalid = config2.invalid || null;
    this.isLuxonInterval = true;
  }
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }
    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid);
    } else {
      return new Interval({ invalid });
    }
  }
  static fromDateTimes(start, end) {
    const builtStart = friendlyDateTime(start), builtEnd = friendlyDateTime(end);
    const validateError = validateStartEnd(builtStart, builtEnd);
    if (validateError == null) {
      return new Interval({
        start: builtStart,
        end: builtEnd
      });
    } else {
      return validateError;
    }
  }
  static after(start, duration) {
    const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(start);
    return Interval.fromDateTimes(dt, dt.plus(dur));
  }
  static before(end, duration) {
    const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(end);
    return Interval.fromDateTimes(dt.minus(dur), dt);
  }
  static fromISO(text, opts) {
    const [s2, e2] = (text || "").split("/", 2);
    if (s2 && e2) {
      let start, startIsValid;
      try {
        start = DateTime.fromISO(s2, opts);
        startIsValid = start.isValid;
      } catch (e3) {
        startIsValid = false;
      }
      let end, endIsValid;
      try {
        end = DateTime.fromISO(e2, opts);
        endIsValid = end.isValid;
      } catch (e3) {
        endIsValid = false;
      }
      if (startIsValid && endIsValid) {
        return Interval.fromDateTimes(start, end);
      }
      if (startIsValid) {
        const dur = Duration.fromISO(e2, opts);
        if (dur.isValid) {
          return Interval.after(start, dur);
        }
      } else if (endIsValid) {
        const dur = Duration.fromISO(s2, opts);
        if (dur.isValid) {
          return Interval.before(end, dur);
        }
      }
    }
    return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
  }
  static isInterval(o2) {
    return o2 && o2.isLuxonInterval || false;
  }
  get start() {
    return this.isValid ? this.s : null;
  }
  get end() {
    return this.isValid ? this.e : null;
  }
  get isValid() {
    return this.invalidReason === null;
  }
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  length(unit = "milliseconds") {
    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
  }
  count(unit = "milliseconds") {
    if (!this.isValid)
      return NaN;
    const start = this.start.startOf(unit), end = this.end.startOf(unit);
    return Math.floor(end.diff(start, unit).get(unit)) + 1;
  }
  hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }
  isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }
  isAfter(dateTime) {
    if (!this.isValid)
      return false;
    return this.s > dateTime;
  }
  isBefore(dateTime) {
    if (!this.isValid)
      return false;
    return this.e <= dateTime;
  }
  contains(dateTime) {
    if (!this.isValid)
      return false;
    return this.s <= dateTime && this.e > dateTime;
  }
  set({ start, end } = {}) {
    if (!this.isValid)
      return this;
    return Interval.fromDateTimes(start || this.s, end || this.e);
  }
  splitAt(...dateTimes) {
    if (!this.isValid)
      return [];
    const sorted = dateTimes.map(friendlyDateTime).filter((d2) => this.contains(d2)).sort(), results = [];
    let { s: s2 } = this, i = 0;
    while (s2 < this.e) {
      const added = sorted[i] || this.e, next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s2, next));
      s2 = next;
      i += 1;
    }
    return results;
  }
  splitBy(duration) {
    const dur = Duration.fromDurationLike(duration);
    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }
    let { s: s2 } = this, idx = 1, next;
    const results = [];
    while (s2 < this.e) {
      const added = this.start.plus(dur.mapUnits((x2) => x2 * idx));
      next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s2, next));
      s2 = next;
      idx += 1;
    }
    return results;
  }
  divideEqually(numberOfParts) {
    if (!this.isValid)
      return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }
  overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }
  abutsStart(other) {
    if (!this.isValid)
      return false;
    return +this.e === +other.s;
  }
  abutsEnd(other) {
    if (!this.isValid)
      return false;
    return +other.e === +this.s;
  }
  engulfs(other) {
    if (!this.isValid)
      return false;
    return this.s <= other.s && this.e >= other.e;
  }
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }
    return this.s.equals(other.s) && this.e.equals(other.e);
  }
  intersection(other) {
    if (!this.isValid)
      return this;
    const s2 = this.s > other.s ? this.s : other.s, e2 = this.e < other.e ? this.e : other.e;
    if (s2 >= e2) {
      return null;
    } else {
      return Interval.fromDateTimes(s2, e2);
    }
  }
  union(other) {
    if (!this.isValid)
      return this;
    const s2 = this.s < other.s ? this.s : other.s, e2 = this.e > other.e ? this.e : other.e;
    return Interval.fromDateTimes(s2, e2);
  }
  static merge(intervals) {
    const [found, final] = intervals.sort((a2, b2) => a2.s - b2.s).reduce(([sofar, current], item) => {
      if (!current) {
        return [sofar, item];
      } else if (current.overlaps(item) || current.abutsStart(item)) {
        return [sofar, current.union(item)];
      } else {
        return [sofar.concat([current]), item];
      }
    }, [[], null]);
    if (final) {
      found.push(final);
    }
    return found;
  }
  static xor(intervals) {
    let start = null, currentCount = 0;
    const results = [], ends = intervals.map((i) => [
      { time: i.s, type: "s" },
      { time: i.e, type: "e" }
    ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a2, b2) => a2.time - b2.time);
    for (const i of arr) {
      currentCount += i.type === "s" ? 1 : -1;
      if (currentCount === 1) {
        start = i.time;
      } else {
        if (start && +start !== +i.time) {
          results.push(Interval.fromDateTimes(start, i.time));
        }
        start = null;
      }
    }
    return Interval.merge(results);
  }
  difference(...intervals) {
    return Interval.xor([this].concat(intervals)).map((i) => this.intersection(i)).filter((i) => i && !i.isEmpty());
  }
  toString() {
    if (!this.isValid)
      return INVALID$1;
    return `[${this.s.toISO()} \u2013 ${this.e.toISO()})`;
  }
  toISO(opts) {
    if (!this.isValid)
      return INVALID$1;
    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
  }
  toISODate() {
    if (!this.isValid)
      return INVALID$1;
    return `${this.s.toISODate()}/${this.e.toISODate()}`;
  }
  toISOTime(opts) {
    if (!this.isValid)
      return INVALID$1;
    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
  }
  toFormat(dateFormat, { separator = " \u2013 " } = {}) {
    if (!this.isValid)
      return INVALID$1;
    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
  }
  toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }
    return this.e.diff(this.s, unit, opts);
  }
  mapEndpoints(mapFn) {
    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  }
}
class Info {
  static hasDST(zone = Settings.defaultZone) {
    const proto = DateTime.now().setZone(zone).set({ month: 12 });
    return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
  }
  static isValidIANAZone(zone) {
    return IANAZone.isValidZone(zone);
  }
  static normalizeZone(input) {
    return normalizeZone(input, Settings.defaultZone);
  }
  static months(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
  }
  static monthsFormat(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
  }
  static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
  }
  static weekdaysFormat(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
  }
  static meridiems({ locale = null } = {}) {
    return Locale.create(locale).meridiems();
  }
  static eras(length = "short", { locale = null } = {}) {
    return Locale.create(locale, null, "gregory").eras(length);
  }
  static features() {
    return { relative: hasRelative() };
  }
}
function dayDiff(earlier, later) {
  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(), ms = utcDayStart(later) - utcDayStart(earlier);
  return Math.floor(Duration.fromMillis(ms).as("days"));
}
function highOrderDiffs(cursor, later, units) {
  const differs = [
    ["years", (a2, b2) => b2.year - a2.year],
    ["quarters", (a2, b2) => b2.quarter - a2.quarter],
    ["months", (a2, b2) => b2.month - a2.month + (b2.year - a2.year) * 12],
    [
      "weeks",
      (a2, b2) => {
        const days = dayDiff(a2, b2);
        return (days - days % 7) / 7;
      }
    ],
    ["days", dayDiff]
  ];
  const results = {};
  let lowestOrder, highWater;
  for (const [unit, differ] of differs) {
    if (units.indexOf(unit) >= 0) {
      lowestOrder = unit;
      let delta = differ(cursor, later);
      highWater = cursor.plus({ [unit]: delta });
      if (highWater > later) {
        cursor = cursor.plus({ [unit]: delta - 1 });
        delta -= 1;
      } else {
        cursor = highWater;
      }
      results[unit] = delta;
    }
  }
  return [cursor, results, highWater, lowestOrder];
}
function diff(earlier, later, units, opts) {
  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);
  const remainingMillis = later - cursor;
  const lowerOrderUnits = units.filter((u2) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u2) >= 0);
  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      highWater = cursor.plus({ [lowestOrder]: 1 });
    }
    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }
  const duration = Duration.fromObject(results, opts);
  if (lowerOrderUnits.length > 0) {
    return Duration.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration);
  } else {
    return duration;
  }
}
const numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d"
};
const numberingSystemsUTF16 = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881]
};
const hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str) {
  let value = parseInt(str, 10);
  if (isNaN(value)) {
    value = "";
    for (let i = 0; i < str.length; i++) {
      const code2 = str.charCodeAt(i);
      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (const key in numberingSystemsUTF16) {
          const [min, max] = numberingSystemsUTF16[key];
          if (code2 >= min && code2 <= max) {
            value += code2 - min;
          }
        }
      }
    }
    return parseInt(value, 10);
  } else {
    return value;
  }
}
function digitRegex({ numberingSystem }, append = "") {
  return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
}
const MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
function intUnit(regex, post = (i) => i) {
  return { regex, deser: ([s2]) => post(parseDigits(s2)) };
}
const NBSP = String.fromCharCode(160);
const spaceOrNBSP = `( |${NBSP})`;
const spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
function fixListRegex(s2) {
  return s2.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}
function stripInsensitivities(s2) {
  return s2.replace(/\./g, "").replace(spaceOrNBSPRegExp, " ").toLowerCase();
}
function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: ([s2]) => strings.findIndex((i) => stripInsensitivities(s2) === stripInsensitivities(i)) + startIndex
    };
  }
}
function offset(regex, groups) {
  return { regex, deser: ([, h2, m2]) => signedOffset(h2, m2), groups };
}
function simple(regex) {
  return { regex, deser: ([s2]) => s2 };
}
function escapeToken(value) {
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
function unitForToken(token, loc) {
  const one = digitRegex(loc), two = digitRegex(loc, "{2}"), three = digitRegex(loc, "{3}"), four = digitRegex(loc, "{4}"), six = digitRegex(loc, "{6}"), oneOrTwo = digitRegex(loc, "{1,2}"), oneToThree = digitRegex(loc, "{1,3}"), oneToSix = digitRegex(loc, "{1,6}"), oneToNine = digitRegex(loc, "{1,9}"), twoToFour = digitRegex(loc, "{2,4}"), fourToSix = digitRegex(loc, "{4,6}"), literal = (t2) => ({ regex: RegExp(escapeToken(t2.val)), deser: ([s2]) => s2, literal: true }), unitate = (t2) => {
    if (token.literal) {
      return literal(t2);
    }
    switch (t2.val) {
      case "G":
        return oneOf(loc.eras("short", false), 0);
      case "GG":
        return oneOf(loc.eras("long", false), 0);
      case "y":
        return intUnit(oneToSix);
      case "yy":
        return intUnit(twoToFour, untruncateYear);
      case "yyyy":
        return intUnit(four);
      case "yyyyy":
        return intUnit(fourToSix);
      case "yyyyyy":
        return intUnit(six);
      case "M":
        return intUnit(oneOrTwo);
      case "MM":
        return intUnit(two);
      case "MMM":
        return oneOf(loc.months("short", true, false), 1);
      case "MMMM":
        return oneOf(loc.months("long", true, false), 1);
      case "L":
        return intUnit(oneOrTwo);
      case "LL":
        return intUnit(two);
      case "LLL":
        return oneOf(loc.months("short", false, false), 1);
      case "LLLL":
        return oneOf(loc.months("long", false, false), 1);
      case "d":
        return intUnit(oneOrTwo);
      case "dd":
        return intUnit(two);
      case "o":
        return intUnit(oneToThree);
      case "ooo":
        return intUnit(three);
      case "HH":
        return intUnit(two);
      case "H":
        return intUnit(oneOrTwo);
      case "hh":
        return intUnit(two);
      case "h":
        return intUnit(oneOrTwo);
      case "mm":
        return intUnit(two);
      case "m":
        return intUnit(oneOrTwo);
      case "q":
        return intUnit(oneOrTwo);
      case "qq":
        return intUnit(two);
      case "s":
        return intUnit(oneOrTwo);
      case "ss":
        return intUnit(two);
      case "S":
        return intUnit(oneToThree);
      case "SSS":
        return intUnit(three);
      case "u":
        return simple(oneToNine);
      case "uu":
        return simple(oneOrTwo);
      case "uuu":
        return intUnit(one);
      case "a":
        return oneOf(loc.meridiems(), 0);
      case "kkkk":
        return intUnit(four);
      case "kk":
        return intUnit(twoToFour, untruncateYear);
      case "W":
        return intUnit(oneOrTwo);
      case "WW":
        return intUnit(two);
      case "E":
      case "c":
        return intUnit(one);
      case "EEE":
        return oneOf(loc.weekdays("short", false, false), 1);
      case "EEEE":
        return oneOf(loc.weekdays("long", false, false), 1);
      case "ccc":
        return oneOf(loc.weekdays("short", true, false), 1);
      case "cccc":
        return oneOf(loc.weekdays("long", true, false), 1);
      case "Z":
      case "ZZ":
        return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
      case "ZZZ":
        return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
      case "z":
        return simple(/[a-z_+-/]{1,256}?/i);
      default:
        return literal(t2);
    }
  };
  const unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
}
const partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy"
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM"
  },
  day: {
    numeric: "d",
    "2-digit": "dd"
  },
  weekday: {
    short: "EEE",
    long: "EEEE"
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour: {
    numeric: "h",
    "2-digit": "hh"
  },
  minute: {
    numeric: "m",
    "2-digit": "mm"
  },
  second: {
    numeric: "s",
    "2-digit": "ss"
  }
};
function tokenForPart(part, locale, formatOpts) {
  const { type, value } = part;
  if (type === "literal") {
    return {
      literal: true,
      val: value
    };
  }
  const style = formatOpts[type];
  let val = partTypeStyleToTokenVal[type];
  if (typeof val === "object") {
    val = val[style];
  }
  if (val) {
    return {
      literal: false,
      val
    };
  }
  return void 0;
}
function buildRegex(units) {
  const re2 = units.map((u2) => u2.regex).reduce((f2, r2) => `${f2}(${r2.source})`, "");
  return [`^${re2}$`, units];
}
function match(input, regex, handlers) {
  const matches = input.match(regex);
  if (matches) {
    const all = {};
    let matchIndex = 1;
    for (const i in handlers) {
      if (hasOwnProperty$2(handlers, i)) {
        const h2 = handlers[i], groups = h2.groups ? h2.groups + 1 : 1;
        if (!h2.literal && h2.token) {
          all[h2.token.val[0]] = h2.deser(matches.slice(matchIndex, matchIndex + groups));
        }
        matchIndex += groups;
      }
    }
    return [matches, all];
  } else {
    return [matches, {}];
  }
}
function dateTimeFromMatches(matches) {
  const toField = (token) => {
    switch (token) {
      case "S":
        return "millisecond";
      case "s":
        return "second";
      case "m":
        return "minute";
      case "h":
      case "H":
        return "hour";
      case "d":
        return "day";
      case "o":
        return "ordinal";
      case "L":
      case "M":
        return "month";
      case "y":
        return "year";
      case "E":
      case "c":
        return "weekday";
      case "W":
        return "weekNumber";
      case "k":
        return "weekYear";
      case "q":
        return "quarter";
      default:
        return null;
    }
  };
  let zone = null;
  let specificOffset;
  if (!isUndefined$1(matches.z)) {
    zone = IANAZone.create(matches.z);
  }
  if (!isUndefined$1(matches.Z)) {
    if (!zone) {
      zone = new FixedOffsetZone(matches.Z);
    }
    specificOffset = matches.Z;
  }
  if (!isUndefined$1(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }
  if (!isUndefined$1(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }
  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }
  if (!isUndefined$1(matches.u)) {
    matches.S = parseMillis(matches.u);
  }
  const vals = Object.keys(matches).reduce((r2, k2) => {
    const f2 = toField(k2);
    if (f2) {
      r2[f2] = matches[k2];
    }
    return r2;
  }, {});
  return [vals, zone, specificOffset];
}
let dummyDateTimeCache = null;
function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }
  return dummyDateTimeCache;
}
function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }
  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
  if (!formatOpts) {
    return token;
  }
  const formatter = Formatter.create(locale, formatOpts);
  const parts = formatter.formatDateTimeParts(getDummyDateTime());
  const tokens = parts.map((p2) => tokenForPart(p2, locale, formatOpts));
  if (tokens.includes(void 0)) {
    return token;
  }
  return tokens;
}
function expandMacroTokens(tokens, locale) {
  return Array.prototype.concat(...tokens.map((t2) => maybeExpandMacroToken(t2, locale)));
}
function explainFromTokens(locale, input, format3) {
  const tokens = expandMacroTokens(Formatter.parseFormat(format3), locale), units = tokens.map((t2) => unitForToken(t2, locale)), disqualifyingUnit = units.find((t2) => t2.invalidReason);
  if (disqualifyingUnit) {
    return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };
  } else {
    const [regexString, handlers] = buildRegex(units), regex = RegExp(regexString, "i"), [rawMatches, matches] = match(input, regex, handlers), [result, zone, specificOffset] = matches ? dateTimeFromMatches(matches) : [null, null, void 0];
    if (hasOwnProperty$2(matches, "a") && hasOwnProperty$2(matches, "H")) {
      throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
    }
    return { input, tokens, regex, rawMatches, matches, result, zone, specificOffset };
  }
}
function parseFromTokens(locale, input, format3) {
  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format3);
  return [result, zone, specificOffset, invalidReason];
}
const nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
function unitOutOfRange(unit, value) {
  return new Invalid("unit out of range", `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`);
}
function dayOfWeek(year, month, day) {
  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();
  return js === 0 ? 7 : js;
}
function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}
function uncomputeOrdinal(year, ordinal) {
  const table = isLeapYear(year) ? leapLadder : nonLeapLadder, month0 = table.findIndex((i) => i < ordinal), day = ordinal - table[month0];
  return { month: month0 + 1, day };
}
function gregorianToWeek(gregObj) {
  const { year, month, day } = gregObj, ordinal = computeOrdinal(year, month, day), weekday = dayOfWeek(year, month, day);
  let weekNumber = Math.floor((ordinal - weekday + 10) / 7), weekYear;
  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear);
  } else if (weekNumber > weeksInWeekYear(year)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }
  return __spreadValues({ weekYear, weekNumber, weekday }, timeObject(gregObj));
}
function weekToGregorian(weekData) {
  const { weekYear, weekNumber, weekday } = weekData, weekdayOfJan4 = dayOfWeek(weekYear, 1, 4), yearInDays = daysInYear(weekYear);
  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3, year;
  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return __spreadValues({ year, month, day }, timeObject(weekData));
}
function gregorianToOrdinal(gregData) {
  const { year, month, day } = gregData;
  const ordinal = computeOrdinal(year, month, day);
  return __spreadValues({ year, ordinal }, timeObject(gregData));
}
function ordinalToGregorian(ordinalData) {
  const { year, ordinal } = ordinalData;
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return __spreadValues({ year, month, day }, timeObject(ordinalData));
}
function hasInvalidWeekData(obj) {
  const validYear = isInteger(obj.weekYear), validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)), validWeekday = integerBetween(obj.weekday, 1, 7);
  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.week);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else
    return false;
}
function hasInvalidOrdinalData(obj) {
  const validYear = isInteger(obj.year), validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else
    return false;
}
function hasInvalidGregorianData(obj) {
  const validYear = isInteger(obj.year), validMonth = integerBetween(obj.month, 1, 12), validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else
    return false;
}
function hasInvalidTimeData(obj) {
  const { hour, minute, second, millisecond } = obj;
  const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = integerBetween(minute, 0, 59), validSecond = integerBetween(second, 0, 59), validMillisecond = integerBetween(millisecond, 0, 999);
  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else
    return false;
}
const INVALID = "Invalid DateTime";
const MAX_DATE = 864e13;
function unsupportedZone(zone) {
  return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
}
function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }
  return dt.weekData;
}
function clone(inst, alts) {
  const current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime(__spreadProps(__spreadValues(__spreadValues({}, current), alts), { old: current }));
}
function fixOffset(localTS, o2, tz) {
  let utcGuess = localTS - o2 * 60 * 1e3;
  const o22 = tz.offset(utcGuess);
  if (o2 === o22) {
    return [utcGuess, o2];
  }
  utcGuess -= (o22 - o2) * 60 * 1e3;
  const o3 = tz.offset(utcGuess);
  if (o22 === o3) {
    return [utcGuess, o22];
  }
  return [localTS - Math.min(o22, o3) * 60 * 1e3, Math.max(o22, o3)];
}
function tsToObj(ts, offset2) {
  ts += offset2 * 60 * 1e3;
  const d2 = new Date(ts);
  return {
    year: d2.getUTCFullYear(),
    month: d2.getUTCMonth() + 1,
    day: d2.getUTCDate(),
    hour: d2.getUTCHours(),
    minute: d2.getUTCMinutes(),
    second: d2.getUTCSeconds(),
    millisecond: d2.getUTCMilliseconds()
  };
}
function objToTS(obj, offset2, zone) {
  return fixOffset(objToLocalTS(obj), offset2, zone);
}
function adjustTime(inst, dur) {
  const oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c2 = __spreadProps(__spreadValues({}, inst.c), {
    year,
    month,
    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
  }), millisToAdd = Duration.fromObject({
    years: dur.years - Math.trunc(dur.years),
    quarters: dur.quarters - Math.trunc(dur.quarters),
    months: dur.months - Math.trunc(dur.months),
    weeks: dur.weeks - Math.trunc(dur.weeks),
    days: dur.days - Math.trunc(dur.days),
    hours: dur.hours,
    minutes: dur.minutes,
    seconds: dur.seconds,
    milliseconds: dur.milliseconds
  }).as("milliseconds"), localTS = objToLocalTS(c2);
  let [ts, o2] = fixOffset(localTS, oPre, inst.zone);
  if (millisToAdd !== 0) {
    ts += millisToAdd;
    o2 = inst.zone.offset(ts);
  }
  return { ts, o: o2 };
}
function parseDataToDateTime(parsed, parsedZone, opts, format3, text, specificOffset) {
  const { setZone, zone } = opts;
  if (parsed && Object.keys(parsed).length !== 0) {
    const interpretationZone = parsedZone || zone, inst = DateTime.fromObject(parsed, __spreadProps(__spreadValues({}, opts), {
      zone: interpretationZone,
      specificOffset
    }));
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(new Invalid("unparsable", `the input "${text}" can't be parsed as ${format3}`));
  }
}
function toTechFormat(dt, format3, allowZ = true) {
  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format3) : null;
}
function toISODate(o2, extended) {
  const longFormat = o2.c.year > 9999 || o2.c.year < 0;
  let c2 = "";
  if (longFormat && o2.c.year >= 0)
    c2 += "+";
  c2 += padStart(o2.c.year, longFormat ? 6 : 4);
  if (extended) {
    c2 += "-";
    c2 += padStart(o2.c.month);
    c2 += "-";
    c2 += padStart(o2.c.day);
  } else {
    c2 += padStart(o2.c.month);
    c2 += padStart(o2.c.day);
  }
  return c2;
}
function toISOTime(o2, extended, suppressSeconds, suppressMilliseconds, includeOffset) {
  let c2 = padStart(o2.c.hour);
  if (extended) {
    c2 += ":";
    c2 += padStart(o2.c.minute);
    if (o2.c.second !== 0 || !suppressSeconds) {
      c2 += ":";
    }
  } else {
    c2 += padStart(o2.c.minute);
  }
  if (o2.c.second !== 0 || !suppressSeconds) {
    c2 += padStart(o2.c.second);
    if (o2.c.millisecond !== 0 || !suppressMilliseconds) {
      c2 += ".";
      c2 += padStart(o2.c.millisecond, 3);
    }
  }
  if (includeOffset) {
    if (o2.isOffsetFixed && o2.offset === 0) {
      c2 += "Z";
    } else if (o2.o < 0) {
      c2 += "-";
      c2 += padStart(Math.trunc(-o2.o / 60));
      c2 += ":";
      c2 += padStart(Math.trunc(-o2.o % 60));
    } else {
      c2 += "+";
      c2 += padStart(Math.trunc(o2.o / 60));
      c2 += ":";
      c2 += padStart(Math.trunc(o2.o % 60));
    }
  }
  return c2;
}
const defaultUnitValues = {
  month: 1,
  day: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
}, defaultWeekUnitValues = {
  weekNumber: 1,
  weekday: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
}, defaultOrdinalUnitValues = {
  ordinal: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
};
const orderedUnits = ["year", "month", "day", "hour", "minute", "second", "millisecond"], orderedWeekUnits = [
  "weekYear",
  "weekNumber",
  "weekday",
  "hour",
  "minute",
  "second",
  "millisecond"
], orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];
function normalizeUnit(unit) {
  const normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized)
    throw new InvalidUnitError(unit);
  return normalized;
}
function quickDT(obj, opts) {
  const zone = normalizeZone(opts.zone, Settings.defaultZone), loc = Locale.fromObject(opts), tsNow = Settings.now();
  let ts, o2;
  if (!isUndefined$1(obj.year)) {
    for (const u2 of orderedUnits) {
      if (isUndefined$1(obj[u2])) {
        obj[u2] = defaultUnitValues[u2];
      }
    }
    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
    if (invalid) {
      return DateTime.invalid(invalid);
    }
    const offsetProvis = zone.offset(tsNow);
    [ts, o2] = objToTS(obj, offsetProvis, zone);
  } else {
    ts = tsNow;
  }
  return new DateTime({ ts, zone, loc, o: o2 });
}
function diffRelative(start, end, opts) {
  const round = isUndefined$1(opts.round) ? true : opts.round, format3 = (c2, unit) => {
    c2 = roundTo(c2, round || opts.calendary ? 0 : 2, true);
    const formatter = end.loc.clone(opts).relFormatter(opts);
    return formatter.format(c2, unit);
  }, differ = (unit) => {
    if (opts.calendary) {
      if (!end.hasSame(start, unit)) {
        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
      } else
        return 0;
    } else {
      return end.diff(start, unit).get(unit);
    }
  };
  if (opts.unit) {
    return format3(differ(opts.unit), opts.unit);
  }
  for (const unit of opts.units) {
    const count = differ(unit);
    if (Math.abs(count) >= 1) {
      return format3(count, unit);
    }
  }
  return format3(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}
function lastOpts(argList) {
  let opts = {}, args;
  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
    opts = argList[argList.length - 1];
    args = Array.from(argList).slice(0, argList.length - 1);
  } else {
    args = Array.from(argList);
  }
  return [opts, args];
}
class DateTime {
  constructor(config2) {
    const zone = config2.zone || Settings.defaultZone;
    let invalid = config2.invalid || (Number.isNaN(config2.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
    this.ts = isUndefined$1(config2.ts) ? Settings.now() : config2.ts;
    let c2 = null, o2 = null;
    if (!invalid) {
      const unchanged = config2.old && config2.old.ts === this.ts && config2.old.zone.equals(zone);
      if (unchanged) {
        [c2, o2] = [config2.old.c, config2.old.o];
      } else {
        const ot = zone.offset(this.ts);
        c2 = tsToObj(this.ts, ot);
        invalid = Number.isNaN(c2.year) ? new Invalid("invalid input") : null;
        c2 = invalid ? null : c2;
        o2 = invalid ? null : ot;
      }
    }
    this._zone = zone;
    this.loc = config2.loc || Locale.create();
    this.invalid = invalid;
    this.weekData = null;
    this.c = c2;
    this.o = o2;
    this.isLuxonDateTime = true;
  }
  static now() {
    return new DateTime({});
  }
  static local() {
    const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
  }
  static utc() {
    const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
    opts.zone = FixedOffsetZone.utcInstance;
    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
  }
  static fromJSDate(date, options = {}) {
    const ts = isDate(date) ? date.valueOf() : NaN;
    if (Number.isNaN(ts)) {
      return DateTime.invalid("invalid input");
    }
    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }
    return new DateTime({
      ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options)
    });
  }
  static fromMillis(milliseconds, options = {}) {
    if (!isNumber$1(milliseconds)) {
      throw new InvalidArgumentError(`fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`);
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      return DateTime.invalid("Timestamp out of range");
    } else {
      return new DateTime({
        ts: milliseconds,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  static fromSeconds(seconds, options = {}) {
    if (!isNumber$1(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new DateTime({
        ts: seconds * 1e3,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  static fromObject(obj, opts = {}) {
    obj = obj || {};
    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }
    const tsNow = Settings.now(), offsetProvis = !isUndefined$1(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), normalized = normalizeObject(obj, normalizeUnit), containsOrdinal = !isUndefined$1(normalized.ordinal), containsGregorYear = !isUndefined$1(normalized.year), containsGregorMD = !isUndefined$1(normalized.month) || !isUndefined$1(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber, loc = Locale.fromObject(opts);
    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }
    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }
    const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
    let units, defaultValues, objNow = tsToObj(tsNow, offsetProvis);
    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = orderedUnits;
      defaultValues = defaultUnitValues;
    }
    let foundFirst = false;
    for (const u2 of units) {
      const v2 = normalized[u2];
      if (!isUndefined$1(v2)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u2] = defaultValues[u2];
      } else {
        normalized[u2] = objNow[u2];
      }
    }
    const higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized), invalid = higherOrderInvalid || hasInvalidTimeData(normalized);
    if (invalid) {
      return DateTime.invalid(invalid);
    }
    const gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized, [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse), inst = new DateTime({
      ts: tsFinal,
      zone: zoneToUse,
      o: offsetFinal,
      loc
    });
    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return DateTime.invalid("mismatched weekday", `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`);
    }
    return inst;
  }
  static fromISO(text, opts = {}) {
    const [vals, parsedZone] = parseISODate(text);
    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
  }
  static fromRFC2822(text, opts = {}) {
    const [vals, parsedZone] = parseRFC2822Date(text);
    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
  }
  static fromHTTP(text, opts = {}) {
    const [vals, parsedZone] = parseHTTPDate(text);
    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }
  static fromFormat(text, fmt, opts = {}) {
    if (isUndefined$1(text) || isUndefined$1(fmt)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }
    const { locale = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
      locale,
      numberingSystem,
      defaultToEN: true
    }), [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
    if (invalid) {
      return DateTime.invalid(invalid);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
    }
  }
  static fromString(text, fmt, opts = {}) {
    return DateTime.fromFormat(text, fmt, opts);
  }
  static fromSQL(text, opts = {}) {
    const [vals, parsedZone] = parseSQL(text);
    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
  }
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }
    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid);
    } else {
      return new DateTime({ invalid });
    }
  }
  static isDateTime(o2) {
    return o2 && o2.isLuxonDateTime || false;
  }
  get(unit) {
    return this[unit];
  }
  get isValid() {
    return this.invalid === null;
  }
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }
  get outputCalendar() {
    return this.isValid ? this.loc.outputCalendar : null;
  }
  get zone() {
    return this._zone;
  }
  get zoneName() {
    return this.isValid ? this.zone.name : null;
  }
  get year() {
    return this.isValid ? this.c.year : NaN;
  }
  get quarter() {
    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
  }
  get month() {
    return this.isValid ? this.c.month : NaN;
  }
  get day() {
    return this.isValid ? this.c.day : NaN;
  }
  get hour() {
    return this.isValid ? this.c.hour : NaN;
  }
  get minute() {
    return this.isValid ? this.c.minute : NaN;
  }
  get second() {
    return this.isValid ? this.c.second : NaN;
  }
  get millisecond() {
    return this.isValid ? this.c.millisecond : NaN;
  }
  get weekYear() {
    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
  }
  get weekNumber() {
    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
  }
  get weekday() {
    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
  }
  get ordinal() {
    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
  }
  get monthShort() {
    return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
  }
  get monthLong() {
    return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
  }
  get weekdayShort() {
    return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
  }
  get weekdayLong() {
    return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
  }
  get offset() {
    return this.isValid ? +this.o : NaN;
  }
  get offsetNameShort() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "short",
        locale: this.locale
      });
    } else {
      return null;
    }
  }
  get offsetNameLong() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "long",
        locale: this.locale
      });
    } else {
      return null;
    }
  }
  get isOffsetFixed() {
    return this.isValid ? this.zone.isUniversal : null;
  }
  get isInDST() {
    if (this.isOffsetFixed) {
      return false;
    } else {
      return this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset;
    }
  }
  get isInLeapYear() {
    return isLeapYear(this.year);
  }
  get daysInMonth() {
    return daysInMonth(this.year, this.month);
  }
  get daysInYear() {
    return this.isValid ? daysInYear(this.year) : NaN;
  }
  get weeksInWeekYear() {
    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
  }
  resolvedLocaleOptions(opts = {}) {
    const { locale, numberingSystem, calendar } = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this);
    return { locale, numberingSystem, outputCalendar: calendar };
  }
  toUTC(offset2 = 0, opts = {}) {
    return this.setZone(FixedOffsetZone.instance(offset2), opts);
  }
  toLocal() {
    return this.setZone(Settings.defaultZone);
  }
  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
    zone = normalizeZone(zone, Settings.defaultZone);
    if (zone.equals(this.zone)) {
      return this;
    } else if (!zone.isValid) {
      return DateTime.invalid(unsupportedZone(zone));
    } else {
      let newTS = this.ts;
      if (keepLocalTime || keepCalendarTime) {
        const offsetGuess = zone.offset(this.ts);
        const asObj = this.toObject();
        [newTS] = objToTS(asObj, offsetGuess, zone);
      }
      return clone(this, { ts: newTS, zone });
    }
  }
  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
    return clone(this, { loc });
  }
  setLocale(locale) {
    return this.reconfigure({ locale });
  }
  set(values) {
    if (!this.isValid)
      return this;
    const normalized = normalizeObject(values, normalizeUnit), settingWeekStuff = !isUndefined$1(normalized.weekYear) || !isUndefined$1(normalized.weekNumber) || !isUndefined$1(normalized.weekday), containsOrdinal = !isUndefined$1(normalized.ordinal), containsGregorYear = !isUndefined$1(normalized.year), containsGregorMD = !isUndefined$1(normalized.month) || !isUndefined$1(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }
    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }
    let mixed;
    if (settingWeekStuff) {
      mixed = weekToGregorian(__spreadValues(__spreadValues({}, gregorianToWeek(this.c)), normalized));
    } else if (!isUndefined$1(normalized.ordinal)) {
      mixed = ordinalToGregorian(__spreadValues(__spreadValues({}, gregorianToOrdinal(this.c)), normalized));
    } else {
      mixed = __spreadValues(__spreadValues({}, this.toObject()), normalized);
      if (isUndefined$1(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }
    const [ts, o2] = objToTS(mixed, this.o, this.zone);
    return clone(this, { ts, o: o2 });
  }
  plus(duration) {
    if (!this.isValid)
      return this;
    const dur = Duration.fromDurationLike(duration);
    return clone(this, adjustTime(this, dur));
  }
  minus(duration) {
    if (!this.isValid)
      return this;
    const dur = Duration.fromDurationLike(duration).negate();
    return clone(this, adjustTime(this, dur));
  }
  startOf(unit) {
    if (!this.isValid)
      return this;
    const o2 = {}, normalizedUnit = Duration.normalizeUnit(unit);
    switch (normalizedUnit) {
      case "years":
        o2.month = 1;
      case "quarters":
      case "months":
        o2.day = 1;
      case "weeks":
      case "days":
        o2.hour = 0;
      case "hours":
        o2.minute = 0;
      case "minutes":
        o2.second = 0;
      case "seconds":
        o2.millisecond = 0;
        break;
    }
    if (normalizedUnit === "weeks") {
      o2.weekday = 1;
    }
    if (normalizedUnit === "quarters") {
      const q2 = Math.ceil(this.month / 3);
      o2.month = (q2 - 1) * 3 + 1;
    }
    return this.set(o2);
  }
  endOf(unit) {
    return this.isValid ? this.plus({ [unit]: 1 }).startOf(unit).minus(1) : this;
  }
  toFormat(fmt, opts = {}) {
    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID;
  }
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID;
  }
  toLocaleParts(opts = {}) {
    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
  }
  toISO({
    format: format3 = "extended",
    suppressSeconds = false,
    suppressMilliseconds = false,
    includeOffset = true
  } = {}) {
    if (!this.isValid) {
      return null;
    }
    const ext = format3 === "extended";
    let c2 = toISODate(this, ext);
    c2 += "T";
    c2 += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset);
    return c2;
  }
  toISODate({ format: format3 = "extended" } = {}) {
    if (!this.isValid) {
      return null;
    }
    return toISODate(this, format3 === "extended");
  }
  toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }
  toISOTime({
    suppressMilliseconds = false,
    suppressSeconds = false,
    includeOffset = true,
    includePrefix = false,
    format: format3 = "extended"
  } = {}) {
    if (!this.isValid) {
      return null;
    }
    let c2 = includePrefix ? "T" : "";
    return c2 + toISOTime(this, format3 === "extended", suppressSeconds, suppressMilliseconds, includeOffset);
  }
  toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }
  toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }
  toSQLDate() {
    if (!this.isValid) {
      return null;
    }
    return toISODate(this, true);
  }
  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
    let fmt = "HH:mm:ss.SSS";
    if (includeZone || includeOffset) {
      if (includeOffsetSpace) {
        fmt += " ";
      }
      if (includeZone) {
        fmt += "z";
      } else if (includeOffset) {
        fmt += "ZZ";
      }
    }
    return toTechFormat(this, fmt, true);
  }
  toSQL(opts = {}) {
    if (!this.isValid) {
      return null;
    }
    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
  }
  toString() {
    return this.isValid ? this.toISO() : INVALID;
  }
  valueOf() {
    return this.toMillis();
  }
  toMillis() {
    return this.isValid ? this.ts : NaN;
  }
  toSeconds() {
    return this.isValid ? this.ts / 1e3 : NaN;
  }
  toUnixInteger() {
    return this.isValid ? Math.floor(this.ts / 1e3) : NaN;
  }
  toJSON() {
    return this.toISO();
  }
  toBSON() {
    return this.toJSDate();
  }
  toObject(opts = {}) {
    if (!this.isValid)
      return {};
    const base = __spreadValues({}, this.c);
    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }
    return base;
  }
  toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  }
  diff(otherDateTime, unit = "milliseconds", opts = {}) {
    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid("created by diffing an invalid DateTime");
    }
    const durOpts = __spreadValues({ locale: this.locale, numberingSystem: this.numberingSystem }, opts);
    const units = maybeArray(unit).map(Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = diff(earlier, later, units, durOpts);
    return otherIsLater ? diffed.negate() : diffed;
  }
  diffNow(unit = "milliseconds", opts = {}) {
    return this.diff(DateTime.now(), unit, opts);
  }
  until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }
  hasSame(otherDateTime, unit) {
    if (!this.isValid)
      return false;
    const inputMs = otherDateTime.valueOf();
    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
    return adjustedToZone.startOf(unit) <= inputMs && inputMs <= adjustedToZone.endOf(unit);
  }
  equals(other) {
    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
  }
  toRelative(options = {}) {
    if (!this.isValid)
      return null;
    const base = options.base || DateTime.fromObject({}, { zone: this.zone }), padding = options.padding ? this < base ? -options.padding : options.padding : 0;
    let units = ["years", "months", "days", "hours", "minutes", "seconds"];
    let unit = options.unit;
    if (Array.isArray(options.unit)) {
      units = options.unit;
      unit = void 0;
    }
    return diffRelative(base, this.plus(padding), __spreadProps(__spreadValues({}, options), {
      numeric: "always",
      units,
      unit
    }));
  }
  toRelativeCalendar(options = {}) {
    if (!this.isValid)
      return null;
    return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, __spreadProps(__spreadValues({}, options), {
      numeric: "auto",
      units: ["years", "months", "days"],
      calendary: true
    }));
  }
  static min(...dateTimes) {
    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
  }
  static max(...dateTimes) {
    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
  }
  static fromFormatExplain(text, fmt, options = {}) {
    const { locale = null, numberingSystem = null } = options, localeToUse = Locale.fromOpts({
      locale,
      numberingSystem,
      defaultToEN: true
    });
    return explainFromTokens(localeToUse, text, fmt);
  }
  static fromStringExplain(text, fmt, options = {}) {
    return DateTime.fromFormatExplain(text, fmt, options);
  }
  static get DATE_SHORT() {
    return DATE_SHORT;
  }
  static get DATE_MED() {
    return DATE_MED;
  }
  static get DATE_MED_WITH_WEEKDAY() {
    return DATE_MED_WITH_WEEKDAY;
  }
  static get DATE_FULL() {
    return DATE_FULL;
  }
  static get DATE_HUGE() {
    return DATE_HUGE;
  }
  static get TIME_SIMPLE() {
    return TIME_SIMPLE;
  }
  static get TIME_WITH_SECONDS() {
    return TIME_WITH_SECONDS;
  }
  static get TIME_WITH_SHORT_OFFSET() {
    return TIME_WITH_SHORT_OFFSET;
  }
  static get TIME_WITH_LONG_OFFSET() {
    return TIME_WITH_LONG_OFFSET;
  }
  static get TIME_24_SIMPLE() {
    return TIME_24_SIMPLE;
  }
  static get TIME_24_WITH_SECONDS() {
    return TIME_24_WITH_SECONDS;
  }
  static get TIME_24_WITH_SHORT_OFFSET() {
    return TIME_24_WITH_SHORT_OFFSET;
  }
  static get TIME_24_WITH_LONG_OFFSET() {
    return TIME_24_WITH_LONG_OFFSET;
  }
  static get DATETIME_SHORT() {
    return DATETIME_SHORT;
  }
  static get DATETIME_SHORT_WITH_SECONDS() {
    return DATETIME_SHORT_WITH_SECONDS;
  }
  static get DATETIME_MED() {
    return DATETIME_MED;
  }
  static get DATETIME_MED_WITH_SECONDS() {
    return DATETIME_MED_WITH_SECONDS;
  }
  static get DATETIME_MED_WITH_WEEKDAY() {
    return DATETIME_MED_WITH_WEEKDAY;
  }
  static get DATETIME_FULL() {
    return DATETIME_FULL;
  }
  static get DATETIME_FULL_WITH_SECONDS() {
    return DATETIME_FULL_WITH_SECONDS;
  }
  static get DATETIME_HUGE() {
    return DATETIME_HUGE;
  }
  static get DATETIME_HUGE_WITH_SECONDS() {
    return DATETIME_HUGE_WITH_SECONDS;
  }
}
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber$1(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError(`Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`);
  }
}
var si = Object.create;
var P = Object.defineProperty;
var ui = Object.getOwnPropertyDescriptor;
var ri = Object.getOwnPropertyNames;
var ti = Object.getPrototypeOf, li = Object.prototype.hasOwnProperty;
var mi = (a2, l2, c2) => l2 in a2 ? P(a2, l2, { enumerable: true, configurable: true, writable: true, value: c2 }) : a2[l2] = c2;
var oi = (a2) => P(a2, "__esModule", { value: true });
var U = (a2, l2) => () => (l2 || a2((l2 = { exports: {} }).exports, l2), l2.exports);
var ci = (a2, l2, c2, A2) => {
  if (l2 && typeof l2 == "object" || typeof l2 == "function")
    for (let o2 of ri(l2))
      !li.call(a2, o2) && (c2 || o2 !== "default") && P(a2, o2, { get: () => l2[o2], enumerable: !(A2 = ui(l2, o2)) || A2.enumerable });
  return a2;
}, L = (a2, l2) => ci(oi(P(a2 != null ? si(ti(a2)) : {}, "default", !l2 && a2 && a2.__esModule ? { get: () => a2.default, enumerable: true } : { value: a2, enumerable: true })), a2);
var h = (a2, l2, c2) => (mi(a2, typeof l2 != "symbol" ? l2 + "" : l2, c2), c2);
var Ge = U((qe2) => {
  var Ii2 = /^[-!#$%&'*+\/0-9=?A-Z^_a-z{|}~](\.?[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\.?[a-zA-Z0-9])*\.[a-zA-Z](-?[a-zA-Z0-9])+$/;
  qe2.validate = function(a2) {
    if (!a2 || a2.length > 254)
      return false;
    var l2 = Ii2.test(a2);
    if (!l2)
      return false;
    var c2 = a2.split("@");
    if (c2[0].length > 64)
      return false;
    var A2 = c2[1].split(".");
    return !A2.some(function(o2) {
      return o2.length > 63;
    });
  };
});
var F = U((c_, we2) => {
  we2.exports = { error: { length: "Length should be a valid positive number", password: "Password should be a valid string" }, regex: { digits: "(\\d.*)", letters: "([a-zA-Z].*)", symbols: "([`~\\!@#\\$%\\^\\&\\*\\(\\)\\-_\\=\\+\\[\\{\\}\\]\\\\|;:\\'\",<.>\\/\\?\u20AC\xA3\xA5\u20B9\xA7\xB1].*)", spaces: "([\\s].*)" } };
});
var xe = U((A_, Ke2) => {
  var M2 = F().regex;
  function B2(a2, l2) {
    if (l2 && l2 > 1) {
      let c2 = parseInt(l2, 10);
      return new RegExp(a2 + "{" + c2 + ",}").test(this.password) === this.positive;
    }
    return new RegExp(a2).test(this.password) === this.positive;
  }
  Ke2.exports = { not: function(l2) {
    return this.positive = false, l2 ? B2.call(this, l2) : true;
  }, has: function(l2) {
    return this.positive = true, l2 ? B2.call(this, l2) : true;
  }, is: function() {
    return this.positive = true, true;
  }, min: function(l2) {
    return this.password.length >= l2;
  }, max: function(l2) {
    return this.password.length <= l2;
  }, digits: function(l2) {
    return B2.call(this, M2.digits, l2);
  }, letters: function(l2) {
    return B2.call(this, M2.letters, l2);
  }, uppercase: function(l2) {
    if (l2 && l2 > 1) {
      let c2 = 0, A2 = 0;
      for (; A2 < l2 && c2 < this.password.length; ) {
        let o2 = this.password.charAt(c2);
        o2 !== o2.toLowerCase() && A2++, c2++;
      }
      return A2 === l2 === this.positive;
    }
    return this.password !== this.password.toLowerCase() === this.positive;
  }, lowercase: function(l2) {
    if (l2 && l2 > 1) {
      let c2 = 0, A2 = 0;
      for (; A2 < l2 && c2 < this.password.length; ) {
        let o2 = this.password.charAt(c2);
        o2 !== o2.toUpperCase() && A2++, c2++;
      }
      return A2 === l2 === this.positive;
    }
    return this.password !== this.password.toUpperCase() === this.positive;
  }, symbols: function(l2) {
    return B2.call(this, M2.symbols, l2);
  }, spaces: function(l2) {
    return B2.call(this, M2.spaces, l2);
  }, oneOf: function(l2) {
    return l2.indexOf(this.password) >= 0 === this.positive;
  } };
});
var He = U((d_, Oe2) => {
  Oe2.exports = function(a2, l2, c2) {
    let A2 = c2 ? gi2 : hi2;
    return A2[a2] && A2[a2](l2);
  };
  var hi2 = { min: (a2) => `The string should have a minimum length of ${a2} character${f2(a2)}`, max: (a2) => `The string should have a maximum length of ${a2} character${f2(a2)}`, letters: (a2 = 1) => `The string should have a minimum of ${a2} letter${f2(a2)}`, digits: (a2 = 1) => `The string should have a minimum of ${a2} digit${f2(a2)}`, uppercase: (a2 = 1) => `The string should have a minimum of ${a2} uppercase letter${f2(a2)}`, lowercase: (a2 = 1) => `The string should have a minimum of ${a2} lowercase letter${f2(a2)}`, symbols: (a2 = 1) => `The string should have a minimum of ${a2} symbol${f2(a2)}`, spaces: (a2 = 1) => `The string should have a minimum of ${a2} space${f2(a2)}`, oneOf: (a2) => `The string should be ${a2.length > 1 ? `one of ${a2.slice(0, -1).join(", ")} and ` : ""}${a2[a2.length - 1]}`, has: (a2) => `The string should have pattern '${a2}'`, not: (a2) => `The string should not have pattern '${a2}'` }, gi2 = { min: (a2) => `The string should have a maximum length of ${a2} character${f2(a2)}`, max: (a2) => `The string should have a minimum length of ${a2} character${f2(a2)}`, letters: (a2 = 0) => `The string should ${a2 === 0 ? "not have" : `have a maximum of ${a2}`} letter${f2(a2)}`, digits: (a2 = 0) => `The string should ${a2 === 0 ? "not have" : `have a maximum of ${a2}`} digit${f2(a2)}`, uppercase: (a2 = 0) => `The string should ${a2 === 0 ? "not have" : `have a maximum of ${a2}`} uppercase letter${f2(a2)}`, lowercase: (a2 = 0) => `The string should ${a2 === 0 ? "not have" : `have a maximum of ${a2}`} lowercase letter${f2(a2)}`, symbols: (a2 = 0) => `The string should ${a2 === 0 ? "not have" : `have a maximum of ${a2}`} symbol${f2(a2)}`, spaces: (a2 = 0) => `The string should ${a2 === 0 ? "not have" : `have a maximum of ${a2}`} space${f2(a2)}`, oneOf: (a2) => `The string should not be ${a2.length > 1 ? `one of ${a2.slice(0, -1).join(", ")} and ` : ""}${a2[a2.length - 1]}`, has: (a2) => `The string should not have pattern '${a2}'`, not: (a2) => `The string should have pattern '${a2}'` };
  function f2(a2) {
    return a2 === 1 ? "" : "s";
  }
});
var We = U((I_, ze2) => {
  var fi2 = xe(), _i2 = F().error, Ei2 = He();
  function S2(a2) {
    let l2 = Number(a2);
    if (isNaN(l2) || !Number.isInteger(l2) || l2 < 1)
      throw new Error(_i2.length);
  }
  function je2(a2) {
    return fi2[a2.method].apply(this, a2.arguments);
  }
  function _2(a2, l2, c2) {
    return this.properties.push({ method: a2, arguments: l2, description: c2 }), this;
  }
  var Ve2 = class {
    constructor() {
      this.properties = [];
    }
    validate(l2, c2) {
      return this.list = Boolean(c2 && c2.list), this.details = Boolean(c2 && c2.details), this.password = String(l2), this.positive = true, this.list || this.details ? this.properties.reduce((A2, o2) => {
        if (!je2.call(this, o2)) {
          var I2 = o2.method;
          if (this.details) {
            I2 = { validation: o2.method }, o2.arguments && o2.arguments[0] && (I2.arguments = o2.arguments[0]), !this.positive && o2.method !== "not" && (I2.inverted = true);
            var d2 = o2.arguments && o2.arguments[1], g2 = d2 || Ei2(o2.method, I2.arguments, I2.inverted);
            I2.message = g2;
          }
          return A2.concat(I2);
        }
        return A2;
      }, []) : this.properties.every(je2.bind(this));
    }
    letters(l2) {
      return l2 && S2(l2), _2.call(this, "letters", arguments);
    }
    digits(l2) {
      return l2 && S2(l2), _2.call(this, "digits", arguments);
    }
    symbols(l2) {
      return l2 && S2(l2), _2.call(this, "symbols", arguments);
    }
    min(l2) {
      return S2(l2), _2.call(this, "min", arguments);
    }
    max(l2) {
      return S2(l2), _2.call(this, "max", arguments);
    }
    lowercase(l2) {
      return l2 && S2(l2), _2.call(this, "lowercase", arguments);
    }
    uppercase(l2) {
      return l2 && S2(l2), _2.call(this, "uppercase", arguments);
    }
    spaces(l2) {
      return l2 && S2(l2), _2.call(this, "spaces", arguments);
    }
    has() {
      return _2.call(this, "has", arguments);
    }
    not() {
      return _2.call(this, "not", arguments);
    }
    is() {
      return _2.call(this, "is", arguments);
    }
    oneOf() {
      return _2.call(this, "oneOf", arguments);
    }
  };
  ze2.exports = Ve2;
});
var q;
(function(a2) {
  a2.Comment = "comment", a2.Create = "create", a2.Delete = "delete", a2.Edit = "edit", a2.Invoice = "invoice", a2.Message = "message", a2.PageView = "pageView", a2.Paid = "paid", a2.Payment = "payment", a2.Purchase = "purchase", a2.Referral = "referral", a2.Renewal = "renewal", a2.Signup = "signup", a2.Subscription = "subscription", a2.Upgrade = "upgrade";
})(q || (q = {}));
var G;
(function(a2) {
  a2.Business = "business", a2.Engineering = "engineering", a2.Exception = "exception", a2.LogMessage = "log-message", a2.Marketing = "marketing", a2.PageLeave = "page-leave", a2.PageView = "page-view", a2.Product = "product", a2.QualityManagement = "quality-management", a2.UserAccess = "user-access", a2.UserLogin = "user-login", a2.UserLogout = "user-logout", a2.UserSignup = "user-signup", a2.UserPreferencesChanged = "user-preferences-changed", a2.WebsiteVisit = "website-visit";
})(G || (G = {}));
var w;
(function(a2) {
  a2.CloseTab = "close-tab", a2.ExternalLink = "external-link", a2.NavigateAway = "navigate-away", a2.Unknown = "unknown";
})(w || (w = {}));
var K;
(function(a2) {
  a2.Ecs = "Ecs";
})(K || (K = {}));
var x;
(function(a2) {
  a2.Finished = "Finished", a2.Queued = "Queued", a2.Running = "Running", a2.Started = "Started";
})(x || (x = {}));
var O;
(function(a2) {
  a2.Mobile = "mobile", a2.TV = "tv", a2.Watch = "watch", a2.Web = "web";
})(O || (O = {}));
var H;
(function(a2) {
  a2.Development = "Development", a2.NonProduction = "NonProduction", a2.Production = "Production";
})(H || (H = {}));
var j;
(function(a2) {
  a2.Completed = "completed", a2.Started = "started", a2.Uncompleted = "uncompleted";
})(j || (j = {}));
var V;
(function(a2) {
  a2.Build = "Build", a2.Deployment = "Deployment", a2.Test = "Test";
})(V || (V = {}));
var z;
(function(a2) {
  a2.Canceled = "Canceled", a2.Completed = "Completed", a2.Failed = "Failed", a2.Running = "Running", a2.Queued = "Queued", a2.Waiting = "Waiting";
})(z || (z = {}));
var W;
(function(a2) {
  a2.Canceled = "Canceled", a2.Completed = "Completed", a2.Failed = "Failed", a2.Running = "Running", a2.Queued = "Queued", a2.Waiting = "Waiting";
})(W || (W = {}));
var R;
(function(a2) {
  a2.ForgotPassword = "forgot_password", a2.Index = "index", a2.Login = "login", a2.PageNotFound = "404", a2.Signup = "signup", a2.VerifyCode = "verify_code";
})(R || (R = {}));
var J;
(function(a2) {
  a2.Info = "info", a2.Warning = "warning", a2.Error = "error", a2.Success = "success";
})(J || (J = {}));
var Z;
(function(a2) {
  a2.Details = "details", a2.Dialog = "dialog";
})(Z || (Z = {}));
var Y;
(function(a2) {
  a2.Info = "info", a2.Warning = "warning", a2.Error = "error", a2.Success = "success";
})(Y || (Y = {}));
var $;
(function(a2) {
  a2.AccountBalance = "AccountBalance", a2.UserAssets = "UserAssets", a2.UserCreditCardDebt = "UserCreditCardDebt", a2.UserCreditLimit = "UserCreditLimit", a2.UserCreditUtilization = "UserCreditUtilization", a2.UserDebt = "UserDebt", a2.UserInvestments = "UserInvestments", a2.UserRetirement = "UserRetirement", a2.UserSavings = "UserSavings";
})($ || ($ = {}));
var Q;
(function(a2) {
  a2.DateTime = "date_time", a2.True = "true", a2.False = "false", a2.UniqueId = "unique_id";
})(Q || (Q = {}));
var X;
(function(a2) {
  a2.DomainModel = "domain_entity", a2.GenericModel = "generic_entity";
})(X || (X = {}));
var C;
(function(a2) {
  a2.AirportCode = "airport-code", a2.BankIDCode = "bank-id-code", a2.BitcoinAddress = "bitcoin-address", a2.Boolean = "boolean", a2.City = "city", a2.Color = "color", a2.CountryCode = "country-code", a2.CreditCard = "credit-card", a2.CurrencyAmount = "currency-amount", a2.CurrencyCode = "currency-code", a2.DataURI = "data-uri", a2.Date = "date", a2.DateRange = "date-range", a2.DateTime = "date-time", a2.DayOfMonth = "day-of-month", a2.DomainName = "domain-name", a2.EmailAddress = "email-address", a2.EthereumAddress = "ethereum-address", a2.EAN = "european-article-number", a2.EIN = "employer-identification-number", a2.Float = "float", a2.GeographicCoordinate = "geographic-coordinate", a2.GeographicCoordinates = "geographic-coordinates", a2.GitRepositoryURL = "git-repository-url", a2.HSLColor = "hsl-color", a2.HexColor = "hex-color", a2.Hexadecimal = "hexadecimal", a2.IBAN = "international-bank-account-number", a2.IMEI = "international-mobile-equipment-identifier", a2.IPAddress = "ip-address", a2.IPAddressRange = "ip-address-range", a2.ISBN = "international-standard-book-number", a2.ISIN = "international-stock-number", a2.ISMN = "international-standard-music-number", a2.ISSN = "international-standard-serial-number", a2.ISO8601 = "iso-8601", a2.ISO31661Alpha2 = "iso-31661-alpha-2", a2.ISO31661Alpha3 = "iso-31661-alpha-3", a2.ISO4217 = "iso-4217", a2.Image = "image", a2.Integer = "integer", a2.JSON = "json", a2.LanguageCode = "language-code", a2.LicensePlateNumber = "license-plate-number", a2.LongText = "long-text", a2.MD5 = "md5", a2.Markdown = "markdown", a2.Menu = "menu", a2.Number = "number", a2.MACAddress = "mac-address", a2.MagnetURI = "magnet-uri", a2.MimeType = "mime-type", a2.Month = "month", a2.Password = "password", a2.PassportNumber = "passport-number", a2.Percent = "percent", a2.PhoneNumber = "phone-number", a2.Port = "port", a2.PostalCode = "postal-code", a2.Province = "province", a2.RFC3339 = "rfc-3339", a2.RGBColor = "rgb-color", a2.SemanticVersion = "semantic-version", a2.SSN = "social-security-number", a2.State = "state", a2.StreetAddress = "street-address", a2.String = "string", a2.Tags = "tags", a2.TaxIDNumber = "tax-id-number", a2.Time = "time", a2.TimeOfDay = "time-of-day", a2.TimeRange = "time-range", a2.TimezoneRegion = "timezone-region", a2.URL = "url", a2.URLPath = "url-path", a2.UUID = "uuid", a2.VATIDNumber = "value-added-tax-id-number", a2.VerificationCode = "verification-code", a2.Video = "video", a2.Weekday = "weekday", a2.Year = "year";
})(C || (C = {}));
var aa;
(function(a2) {
  a2.Critical = "Critical", a2.Error = "Error", a2.Fatal = "Fatal", a2.Warning = "Warning";
})(aa || (aa = {}));
var i$2;
(function(a2) {
  a2.Contains = "contains", a2.HasCharacterCount = "has-character-count", a2.HasNumberCount = "has-number-count", a2.HasLetterCount = "has-letter-count", a2.HasLowercaseCount = "has-lowercase-count", a2.HasSpacesCount = "has-spaces-count", a2.HasSymbolCount = "has-symbol-count", a2.HasUppercaseCount = "has-uppercase-count", a2.IsAfter = "is-after", a2.IsAfterOrEqual = "is-after-or-equal", a2.IsAirport = "is-airport", a2.IsAlpha = "is-alpha", a2.IsAlphanumeric = "is-alphanumeric", a2.IsAlgorithmHash = "is-algorithm-hash", a2.IsAscii = "is-ascii", a2.IsBase64 = "is-base-64", a2.IsBefore = "is-before", a2.IsBeforeOrAfter = "is-before-or-after", a2.IsBeforeOrEqual = "is-before-or-equal", a2.IsBetween = "is-between", a2.IsBIC = "is-bic", a2.IsBitcoinAddress = "is-bitcoin-address", a2.IsBoolean = "is-boolean", a2.IsColor = "is-color", a2.IsComplexEnough = "is-complex-enough", a2.IsCountry = "is-country", a2.IsCreditCard = "is-credit-card", a2.IsCurrency = "is-currency", a2.IsDataURI = "is-data-uri", a2.IsDate = "is-date", a2.IsDateRange = "is-date-range", a2.IsDateTime = "is-date-time", a2.IsDayOfMonth = "is-day-of-month", a2.IsDecimal = "is-decimal", a2.IsDivisibleBy = "is-divisible-by", a2.IsDomainName = "is-domain-name", a2.IsEmailAddress = "is-email-address", a2.IsEthereumAddress = "is-ethereum-address", a2.IsEAN = "is-ean", a2.IsEIN = "is-ein", a2.IsEqual = "is-equal", a2.IsEvenNumber = "is-even-number", a2.IsFloat = "is-float", a2.IsIBAN = "is-iban", a2.IsGreaterThan = "greater-than", a2.IsGreaterThanOrEqual = "greater-than-or-equal", a2.IsHSLColor = "is-hsl-color", a2.IsHexColor = "is-hex-color", a2.IsHexadecimal = "is-hexadecimal", a2.IsIdentityCardCode = "is-identity-card-code", a2.IsIMEI = "is-imei", a2.IsInIPAddressRange = "is-in-ip-address-range", a2.IsInList = "is-in-list", a2.IsInTheLast = "is-in-the-last", a2.IsInteger = "is-integer", a2.IsIPAddress = "is-ip-address", a2.IsIPAddressRange = "is-ip-address-range", a2.IsISBN = "is-isbn", a2.IsISIN = "is-isin", a2.IsISMN = "is-ismn", a2.IsISRC = "is-isrc", a2.IsISSN = "is-issn", a2.IsISO4217 = "is-iso-4217", a2.IsISO8601 = "is-iso-8601", a2.IsISO31661Alpha2 = "is-iso-31661-alpha-2", a2.IsISO31661Alpha3 = "is-iso-31661-alpha-3", a2.IsJSON = "is-json", a2.IsLanguage = "is-language", a2.IsLatitude = "is-latitude", a2.IsLongitude = "is-longitude", a2.IsLengthEqual = "is-length-equal", a2.IsLengthGreaterThan = "is-length-greater-than", a2.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal", a2.IsLengthLessThan = "is-length-less-than", a2.IsLengthLessThanOrEqual = "is-length-less-than-or-equal", a2.IsLessThan = "less-than", a2.IsLessThanOrEqual = "less-than-or-equal", a2.IsLicensePlateNumber = "is-license-plate-number", a2.IsLowercase = "is-lowercase", a2.IsOctal = "is-octal", a2.IsMACAddress = "is-mac-address", a2.IsMD5 = "is-md5", a2.IsMagnetURI = "is-magnet-uri", a2.IsMarkdown = "is-markdown", a2.IsMimeType = "is-mime-type", a2.IsMonth = "is-month", a2.IsNegativeNumber = "is-negative-number", a2.IsNotDate = "is-not-date", a2.IsNotEqual = "is-not-equal", a2.IsNotInIPAddressRange = "is-not-in-ip-address-range", a2.IsNotInList = "is-not-in-list", a2.IsNotNull = "is-not-null", a2.IsNotRegexMatch = "is-not-regex-match", a2.IsNotToday = "is-not-today", a2.IsNumber = "is-number", a2.IsNumeric = "is-numeric", a2.IsOddNumber = "is-odd-number", a2.IsPassportNumber = "is-passport-number", a2.IsPhoneNumber = "is-phone-number", a2.IsPort = "is-port", a2.IsPositiveNumber = "is-positive-number", a2.IsPostalCode = "is-postal-code", a2.IsProvince = "is-province", a2.IsRGBColor = "is-rgb-color", a2.IsRegexMatch = "is-regex-match", a2.IsRequired = "is-required", a2.IsSemanticVersion = "is-semantic-version", a2.IsSlug = "is-slug", a2.IsSSN = "is-ssn", a2.IsState = "is-state", a2.IsStreetAddress = "is-street-address", a2.IsString = "is-string", a2.IsStrongPassword = "is-strong-password", a2.IsTags = "is-tags", a2.IsTaxIDNumber = "is-tax-id-number", a2.IsThisMonth = "is-this-month", a2.IsThisQuarter = "is-this-quarter", a2.IsThisWeek = "is-this-week", a2.IsThisWeekend = "is-this-weekend", a2.IsThisYear = "is-this-year", a2.IsTime = "is-time", a2.IsTimeOfDay = "is-time-of-day", a2.IsTimeRange = "is-time-range", a2.IsToday = "is-today", a2.IsURL = "is-url", a2.IsUUID = "is-uuid", a2.IsUppercase = "is-uppercase", a2.IsUsernameAvailable = "is-username-available", a2.IsValidStreetAddress = "is-valid-street-address", a2.IsVATIDNumber = "is-vat-id-number", a2.IsWeekday = "is-weekday", a2.IsWeekend = "is-weekend", a2.IsYear = "is-year";
})(i$2 || (i$2 = {}));
var ea;
(function(a2) {
  a2.IsAuthenticated = "is-authenticated", a2.IsNotAuthenticated = "is-not-authenticated", a2.IsUsernameAvailable = "is-username-available", a2.PasswordMismatch = "password-mismatch";
})(ea || (ea = {}));
var ia;
(function(a2) {
  a2[a2.IsHSLColor = i$2.IsHSLColor] = "IsHSLColor", a2[a2.IsHexColor = i$2.IsHexColor] = "IsHexColor", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsRGBColor = i$2.IsRGBColor] = "IsRGBColor", a2[a2.IsString = i$2.IsString] = "IsString";
})(ia || (ia = {}));
var na;
(function(a2) {
  a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsCurrency = i$2.IsCurrency] = "IsCurrency", a2[a2.IsDecimal = i$2.IsDecimal] = "IsDecimal", a2[a2.IsDivisibleBy = i$2.IsDivisibleBy] = "IsDivisibleBy", a2[a2.IsEvenNumber = i$2.IsEvenNumber] = "IsEvenNumber", a2[a2.IsFloat = i$2.IsFloat] = "IsFloat", a2[a2.IsGreaterThan = i$2.IsGreaterThan] = "IsGreaterThan", a2[a2.IsGreaterThanOrEqual = i$2.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual", a2[a2.IsInteger = i$2.IsInteger] = "IsInteger", a2[a2.IsISO8601 = i$2.IsISO8601] = "IsISO8601", a2[a2.IsLessThan = i$2.IsLessThan] = "IsLessThan", a2[a2.IsLessThanOrEqual = i$2.IsLessThanOrEqual] = "IsLessThanOrEqual", a2[a2.IsNegativeNumber = i$2.IsNegativeNumber] = "IsNegativeNumber", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNumber = i$2.IsNumber] = "IsNumber", a2[a2.IsOddNumber = i$2.IsOddNumber] = "IsOddNumber", a2[a2.IsPositiveNumber = i$2.IsPositiveNumber] = "IsPositiveNumber";
})(na || (na = {}));
var sa;
(function(a2) {
  a2[a2.IsBitcoinAddress = i$2.IsBitcoinAddress] = "IsBitcoinAddress", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull";
})(sa || (sa = {}));
var ua;
(function(a2) {
  a2[a2.IsEthereumAddress = i$2.IsEthereumAddress] = "IsEthereumAddress", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull";
})(ua || (ua = {}));
var ra;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsJSON = i$2.IsJSON] = "IsJSON", a2[a2.IsLanguage = i$2.IsLanguage] = "IsLanguage", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull";
})(ra || (ra = {}));
var ta;
(function(a2) {
  a2[a2.IsAlpha = i$2.IsAlpha] = "IsAlpha", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(ta || (ta = {}));
var la;
(function(a2) {
  a2[a2.IsAlpha = i$2.IsAlpha] = "IsAlpha", a2[a2.IsCountry = i$2.IsCountry] = "IsCountry", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(la || (la = {}));
var ma;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsFloat = i$2.IsFloat] = "IsFloat", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNumeric = i$2.IsNumeric] = "IsNumeric";
})(ma || (ma = {}));
var oa;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsFloat = i$2.IsFloat] = "IsFloat", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNumeric = i$2.IsNumeric] = "IsNumeric";
})(oa || (oa = {}));
var ca;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsPostalCode = i$2.IsPostalCode] = "IsPostalCode", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull";
})(ca || (ca = {}));
var Aa;
(function(a2) {
  a2[a2.IsAlpha = i$2.IsAlpha] = "IsAlpha", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsProvince = i$2.IsProvince] = "IsProvince", a2[a2.IsString = i$2.IsString] = "IsString";
})(Aa || (Aa = {}));
var da;
(function(a2) {
  a2[a2.IsAlpha = i$2.IsAlpha] = "IsAlpha", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsState = i$2.IsState] = "IsState", a2[a2.IsString = i$2.IsString] = "IsString";
})(da || (da = {}));
var Ia;
(function(a2) {
  a2[a2.IsAlphanumeric = i$2.IsAlphanumeric] = "IsAlphanumeric", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsStreetAddress = i$2.IsStreetAddress] = "IsStreetAddress";
})(Ia || (Ia = {}));
var ha;
(function(a2) {
  a2[a2.IsAirport = i$2.IsAirport] = "IsAirport", a2[a2.IsAlpha = i$2.IsAlpha] = "IsAlpha", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(ha || (ha = {}));
var ga;
(function(a2) {
  a2[a2.IsAlgorithmHash = i$2.IsAlgorithmHash] = "IsAlgorithmHash", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(ga || (ga = {}));
var fa;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsSemanticVersion = i$2.IsSemanticVersion] = "IsSemanticVersion", a2[a2.IsString = i$2.IsString] = "IsString";
})(fa || (fa = {}));
var _a;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsUUID = i$2.IsUUID] = "IsUUID";
})(_a || (_a = {}));
var Ea;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsMD5 = i$2.IsMD5] = "IsMD5", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(Ea || (Ea = {}));
var Sa;
(function(a2) {
  a2[a2.IsBoolean = i$2.IsBoolean] = "IsBoolean", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull";
})(Sa || (Sa = {}));
var Ta;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsAfterOrEqual = i$2.IsAfterOrEqual] = "IsAfterOrEqual", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrEqual = i$2.IsBeforeOrEqual] = "IsBeforeOrEqual", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsDate = i$2.IsDate] = "IsDate", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotDate = i$2.IsNotDate] = "IsNotDate", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNotToday = i$2.IsNotToday] = "IsNotToday", a2[a2.IsThisWeek = i$2.IsThisWeek] = "IsThisWeek", a2[a2.IsThisMonth = i$2.IsThisMonth] = "IsThisMonth", a2[a2.IsThisQuarter = i$2.IsThisQuarter] = "IsThisQuarter", a2[a2.IsThisYear = i$2.IsThisYear] = "IsThisYear", a2[a2.IsToday = i$2.IsToday] = "IsToday", a2[a2.IsWeekend = i$2.IsWeekend] = "IsWeekend";
})(Ta || (Ta = {}));
var pa;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrAfter = i$2.IsBeforeOrAfter] = "IsBeforeOrAfter", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsDate = i$2.IsDate] = "IsDate", a2[a2.IsDateRange = i$2.IsDateRange] = "IsDateRange", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull";
})(pa || (pa = {}));
var ba;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsAfterOrEqual = i$2.IsAfterOrEqual] = "IsAfterOrEqual", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrEqual = i$2.IsBeforeOrEqual] = "IsBeforeOrEqual", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsDate = i$2.IsDate] = "IsDate", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotDate = i$2.IsNotDate] = "IsNotDate", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNotToday = i$2.IsNotToday] = "IsNotToday", a2[a2.IsThisWeek = i$2.IsThisWeek] = "IsThisWeek", a2[a2.IsThisMonth = i$2.IsThisMonth] = "IsThisMonth", a2[a2.IsThisQuarter = i$2.IsThisQuarter] = "IsThisQuarter", a2[a2.IsThisYear = i$2.IsThisYear] = "IsThisYear", a2[a2.IsToday = i$2.IsToday] = "IsToday", a2[a2.IsWeekend = i$2.IsWeekend] = "IsWeekend";
})(ba || (ba = {}));
var va;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsAfterOrEqual = i$2.IsAfterOrEqual] = "IsAfterOrEqual", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrEqual = i$2.IsBeforeOrEqual] = "IsBeforeOrEqual", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsDayOfMonth = i$2.IsDayOfMonth] = "IsDayOfMonth", a2[a2.IsEvenNumber = i$2.IsEvenNumber] = "IsEvenNumber", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsGreaterThan = i$2.IsGreaterThan] = "IsGreaterThan", a2[a2.IsGreaterThanOrEqual = i$2.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual", a2[a2.IsInteger = i$2.IsInteger] = "IsInteger", a2[a2.IsLessThan = i$2.IsLessThan] = "IsLessThan", a2[a2.IsLessThanOrEqual = i$2.IsLessThanOrEqual] = "IsLessThanOrEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNumber = i$2.IsNumber] = "IsNumber", a2[a2.IsOddNumber = i$2.IsOddNumber] = "IsOddNumber", a2[a2.IsToday = i$2.IsToday] = "IsToday", a2[a2.IsWeekday = i$2.IsWeekday] = "IsWeekday", a2[a2.IsWeekend = i$2.IsWeekend] = "IsWeekend";
})(va || (va = {}));
var Ba;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsAfterOrEqual = i$2.IsAfterOrEqual] = "IsAfterOrEqual", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrEqual = i$2.IsBeforeOrEqual] = "IsBeforeOrEqual", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsEvenNumber = i$2.IsEvenNumber] = "IsEvenNumber", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsGreaterThan = i$2.IsGreaterThan] = "IsGreaterThan", a2[a2.IsGreaterThanOrEqual = i$2.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual", a2[a2.IsInteger = i$2.IsInteger] = "IsInteger", a2[a2.IsLessThan = i$2.IsLessThan] = "IsLessThan", a2[a2.IsLessThanOrEqual = i$2.IsLessThanOrEqual] = "IsLessThanOrEqual", a2[a2.IsMonth = i$2.IsMonth] = "IsMonth", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNumber = i$2.IsNumber] = "IsNumber", a2[a2.IsOddNumber = i$2.IsOddNumber] = "IsOddNumber", a2[a2.IsThisMonth = i$2.IsThisMonth] = "IsThisMonth";
})(Ba || (Ba = {}));
var Na;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsAfterOrEqual = i$2.IsAfterOrEqual] = "IsAfterOrEqual", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrEqual = i$2.IsBeforeOrEqual] = "IsBeforeOrEqual", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsTime = i$2.IsTime] = "IsTime";
})(Na || (Na = {}));
var Ua;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrAfter = i$2.IsBeforeOrAfter] = "IsBeforeOrAfter", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsTime = i$2.IsTime] = "IsTime", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsTimeRange = i$2.IsTimeRange] = "IsTimeRange";
})(Ua || (Ua = {}));
var Da;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrAfter = i$2.IsBeforeOrAfter] = "IsBeforeOrAfter", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsTimeOfDay = i$2.IsTimeOfDay] = "IsTimeOfDay", a2[a2.IsTimeRange = i$2.IsTimeRange] = "IsTimeRange";
})(Da || (Da = {}));
var Pa;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsAfterOrEqual = i$2.IsAfterOrEqual] = "IsAfterOrEqual", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrEqual = i$2.IsBeforeOrEqual] = "IsBeforeOrEqual", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsEvenNumber = i$2.IsEvenNumber] = "IsEvenNumber", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsGreaterThan = i$2.IsGreaterThan] = "IsGreaterThan", a2[a2.IsGreaterThanOrEqual = i$2.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual", a2[a2.IsLessThan = i$2.IsLessThan] = "IsLessThan", a2[a2.IsLessThanOrEqual = i$2.IsLessThanOrEqual] = "IsLessThanOrEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNumber = i$2.IsNumber] = "IsNumber", a2[a2.IsOddNumber = i$2.IsOddNumber] = "IsOddNumber", a2[a2.IsWeekday = i$2.IsWeekday] = "IsWeekday", a2[a2.IsWeekend = i$2.IsWeekend] = "IsWeekend";
})(Pa || (Pa = {}));
var ka;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsAfterOrEqual = i$2.IsAfterOrEqual] = "IsAfterOrEqual", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrEqual = i$2.IsBeforeOrEqual] = "IsBeforeOrEqual", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsEvenNumber = i$2.IsEvenNumber] = "IsEvenNumber", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsGreaterThan = i$2.IsGreaterThan] = "IsGreaterThan", a2[a2.IsGreaterThanOrEqual = i$2.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual", a2[a2.IsInteger = i$2.IsInteger] = "IsInteger", a2[a2.IsLessThan = i$2.IsLessThan] = "IsLessThan", a2[a2.IsLessThanOrEqual = i$2.IsLessThanOrEqual] = "IsLessThanOrEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNumber = i$2.IsNumber] = "IsNumber", a2[a2.IsOddNumber = i$2.IsOddNumber] = "IsOddNumber", a2[a2.IsThisYear = i$2.IsThisYear] = "IsThisYear", a2[a2.IsYear = i$2.IsYear] = "IsYear";
})(ka || (ka = {}));
var Ma;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsHexadecimal = i$2.IsHexadecimal] = "IsHexadecimal", a2[a2.IsLengthEqual = i$2.IsLengthEqual] = "IsLengthEqual", a2[a2.IsLengthGreaterThan = i$2.IsLengthGreaterThan] = "IsLengthGreaterThan", a2[a2.IsLengthGreaterThanOrEqual = i$2.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual", a2[a2.IsLengthLessThan = i$2.IsLengthLessThan] = "IsLengthLessThan", a2[a2.IsLengthLessThanOrEqual = i$2.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(Ma || (Ma = {}));
var ya;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsJSON = i$2.IsJSON] = "IsJSON", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull";
})(ya || (ya = {}));
var Fa;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsMarkdown = i$2.IsMarkdown] = "IsMarkdown", a2[a2.IsString = i$2.IsString] = "IsString";
})(Fa || (Fa = {}));
var La;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull";
})(La || (La = {}));
var qa;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull";
})(qa || (qa = {}));
var Ga;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsDataURI = i$2.IsDataURI] = "IsDataURI", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(Ga || (Ga = {}));
var wa;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsDomainName = i$2.IsDomainName] = "IsDomainName", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(wa || (wa = {}));
var Ka;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEmailAddress = i$2.IsEmailAddress] = "IsEmailAddress", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(Ka || (Ka = {}));
var xa;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsIPAddress = i$2.IsIPAddress] = "IsIPAddress", a2[a2.IsInIPAddressRange = i$2.IsInIPAddressRange] = "IsInIPAddressRange", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotInIPAddressRange = i$2.IsNotInIPAddressRange] = "IsNotInIPAddressRange", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(xa || (xa = {}));
var Oa;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsIPAddressRange = i$2.IsIPAddressRange] = "IsIPAddressRange", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotInIPAddressRange = i$2.IsNotInIPAddressRange] = "IsNotInIPAddressRange", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(Oa || (Oa = {}));
var Ha;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsGreaterThan = i$2.IsGreaterThan] = "IsGreaterThan", a2[a2.IsGreaterThanOrEqual = i$2.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual", a2[a2.IsInteger = i$2.IsInteger] = "IsInteger", a2[a2.IsLessThan = i$2.IsLessThan] = "IsLessThan", a2[a2.IsLessThanOrEqual = i$2.IsLessThanOrEqual] = "IsLessThanOrEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull";
})(Ha || (Ha = {}));
var ja;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsMACAddress = i$2.IsMACAddress] = "IsMACAddress", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(ja || (ja = {}));
var Va;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsMagnetURI = i$2.IsMagnetURI] = "IsMagnetURI", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(Va || (Va = {}));
var za;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsMimeType = i$2.IsMimeType] = "IsMimeType", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(za || (za = {}));
var Wa;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsSlug = i$2.IsSlug] = "IsSlug";
})(Wa || (Wa = {}));
var Ra;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsURL = i$2.IsURL] = "IsURL";
})(Ra || (Ra = {}));
var Ja;
(function(a2) {
  a2[a2.IsAfter = i$2.IsAfter] = "IsAfter", a2[a2.IsAfterOrEqual = i$2.IsAfterOrEqual] = "IsAfterOrEqual", a2[a2.IsBefore = i$2.IsBefore] = "IsBefore", a2[a2.IsBeforeOrEqual = i$2.IsBeforeOrEqual] = "IsBeforeOrEqual", a2[a2.IsBetween = i$2.IsBetween] = "IsBetween", a2[a2.IsDecimal = i$2.IsDecimal] = "IsDecimal", a2[a2.IsDivisibleBy = i$2.IsDivisibleBy] = "IsDivisibleBy", a2[a2.IsEAN = i$2.IsEAN] = "IsEAN", a2[a2.IsEIN = i$2.IsEIN] = "IsEIN", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsEvenNumber = i$2.IsEvenNumber] = "IsEvenNumber", a2[a2.IsFloat = i$2.IsFloat] = "IsFloat", a2[a2.IsGreaterThan = i$2.IsGreaterThan] = "IsGreaterThan", a2[a2.IsGreaterThanOrEqual = i$2.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual", a2[a2.IsInt = i$2.IsInteger] = "IsInt", a2[a2.IsISBN = i$2.IsISBN] = "IsISBN", a2[a2.IsISMN = i$2.IsISMN] = "IsISMN", a2[a2.IsISSN = i$2.IsISSN] = "IsISSN", a2[a2.IsLatitude = i$2.IsLatitude] = "IsLatitude", a2[a2.IsLongitude = i$2.IsLongitude] = "IsLongitude", a2[a2.IsLessThan = i$2.IsLessThan] = "IsLessThan", a2[a2.IsLessThanOrEqual = i$2.IsLessThanOrEqual] = "IsLessThanOrEqual", a2[a2.IsMACAddress = i$2.IsMACAddress] = "IsMACAddress", a2[a2.IsNumber = i$2.IsNumber] = "IsNumber", a2[a2.IsNegativeNumber = i$2.IsNegativeNumber] = "IsNegativeNumber", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsOddNumber = i$2.IsOddNumber] = "IsOddNumber", a2[a2.IsPassportNumber = i$2.IsPassportNumber] = "IsPassportNumber", a2[a2.IsPhoneNumber = i$2.IsPhoneNumber] = "IsPhoneNumber", a2[a2.IsPort = i$2.IsPort] = "IsPort", a2[a2.IsPositiveNumber = i$2.IsPositiveNumber] = "IsPositiveNumber", a2[a2.IsPostalCode = i$2.IsPostalCode] = "IsPostalCode", a2[a2.IsSemanticVersion = i$2.IsSemanticVersion] = "IsSemanticVersion", a2[a2.IsSSN = i$2.IsSSN] = "IsSSN", a2[a2.IsTaxIDNumber = i$2.IsTaxIDNumber] = "IsTaxIDNumber", a2[a2.IsUUID = i$2.IsUUID] = "IsUUID", a2[a2.IsVATIDNumber = i$2.IsVATIDNumber] = "IsVATIDNumber";
})(Ja || (Ja = {}));
var Za;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsFloat = i$2.IsFloat] = "IsFloat", a2[a2.IsGreaterThan = i$2.IsGreaterThan] = "IsGreaterThan", a2[a2.IsGreaterThanOrEqual = i$2.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual", a2[a2.IsLessThan = i$2.IsLessThan] = "IsLessThan", a2[a2.IsLessThanOrEqual = i$2.IsLessThanOrEqual] = "IsLessThanOrEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNumber = i$2.IsNumber] = "IsNumber", a2[a2.IsNumeric = i$2.IsNumeric] = "IsNumeric";
})(Za || (Za = {}));
var Ya;
(function(a2) {
  a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInteger = i$2.IsInteger] = "IsInteger", a2[a2.IsGreaterThan = i$2.IsGreaterThan] = "IsGreaterThan", a2[a2.IsGreaterThanOrEqual = i$2.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual", a2[a2.IsLessThan = i$2.IsLessThan] = "IsLessThan", a2[a2.IsLessThanOrEqual = i$2.IsLessThanOrEqual] = "IsLessThanOrEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNumber = i$2.IsNumber] = "IsNumber", a2[a2.IsNumeric = i$2.IsNumeric] = "IsNumeric";
})(Ya || (Ya = {}));
var $a;
(function(a2) {
  a2[a2.IsCreditCard = i$2.IsCreditCard] = "IsCreditCard", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsLengthEqual = i$2.IsLengthEqual] = "IsLengthEqual", a2[a2.IsLengthGreaterThan = i$2.IsLengthGreaterThan] = "IsLengthGreaterThan", a2[a2.IsLengthGreaterThanOrEqual = i$2.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual", a2[a2.IsLengthLessThan = i$2.IsLengthLessThan] = "IsLengthLessThan", a2[a2.IsLengthLessThanOrEqual = i$2.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsRegexMatch = i$2.IsRegexMatch] = "IsRegexMatch", a2[a2.IsNotRegexMatch = i$2.IsNotRegexMatch] = "IsNotRegexMatch";
})($a || ($a = {}));
var Qa;
(function(a2) {
  a2[a2.isEmailAddress = i$2.IsEmailAddress] = "isEmailAddress", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsLengthEqual = i$2.IsLengthEqual] = "IsLengthEqual", a2[a2.IsLengthGreaterThan = i$2.IsLengthGreaterThan] = "IsLengthGreaterThan", a2[a2.IsLengthGreaterThanOrEqual = i$2.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual", a2[a2.IsLengthLessThan = i$2.IsLengthLessThan] = "IsLengthLessThan", a2[a2.IsLengthLessThanOrEqual = i$2.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsRegexMatch = i$2.IsRegexMatch] = "IsRegexMatch", a2[a2.IsNotRegexMatch = i$2.IsNotRegexMatch] = "IsNotRegexMatch";
})(Qa || (Qa = {}));
var Xa;
(function(a2) {
  a2[a2.IsLicensePlateNumber = i$2.IsLicensePlateNumber] = "IsLicensePlateNumber", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNotRegexMatch = i$2.IsNotRegexMatch] = "IsNotRegexMatch", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsRegexMatch = i$2.IsRegexMatch] = "IsRegexMatch";
})(Xa || (Xa = {}));
var Ca;
(function(a2) {
  a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsPassportNumber = i$2.IsPassportNumber] = "IsPassportNumber", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsRegexMatch = i$2.IsRegexMatch] = "IsRegexMatch";
})(Ca || (Ca = {}));
var ae;
(function(a2) {
  a2[a2.IsComplexEnough = i$2.IsComplexEnough] = "IsComplexEnough", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNotRegexMatch = i$2.IsNotRegexMatch] = "IsNotRegexMatch", a2[a2.IsLengthGreaterThan = i$2.IsLengthGreaterThan] = "IsLengthGreaterThan", a2[a2.IsLengthGreaterThanOrEqual = i$2.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual", a2[a2.IsLengthLessThan = i$2.IsLengthLessThan] = "IsLengthLessThan", a2[a2.IsLengthLessThanOrEqual = i$2.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual", a2[a2.IsStrongPassword = i$2.IsStrongPassword] = "IsStrongPassword", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsRegexMatch = i$2.IsRegexMatch] = "IsRegexMatch";
})(ae || (ae = {}));
var ee;
(function(a2) {
  a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNotRegexMatch = i$2.IsNotRegexMatch] = "IsNotRegexMatch", a2[a2.IsNumber = i$2.IsNumber] = "IsNumber", a2[a2.IsPhoneNumber = i$2.IsPhoneNumber] = "IsPhoneNumber", a2[a2.IsRegexMatch = i$2.IsRegexMatch] = "IsRegexMatch";
})(ee || (ee = {}));
var ie;
(function(a2) {
  a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsSSN = i$2.IsSSN] = "IsSSN", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsRegexMatch = i$2.IsRegexMatch] = "IsRegexMatch";
})(ie || (ie = {}));
var ne;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsBIC = i$2.IsBIC] = "IsBIC", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(ne || (ne = {}));
var se;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEAN = i$2.IsEAN] = "IsEAN", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(se || (se = {}));
var ue;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEIN = i$2.IsEIN] = "IsEIN", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(ue || (ue = {}));
var re;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsIBAN = i$2.IsIBAN] = "IsIBAN", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(re || (re = {}));
var te;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsISBN = i$2.IsISBN] = "IsISBN", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(te || (te = {}));
var le;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsISIN = i$2.IsISIN] = "IsISIN", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(le || (le = {}));
var me;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsISMN = i$2.IsISMN] = "IsISMN", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(me || (me = {}));
var oe;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsISSN = i$2.IsISSN] = "IsISSN", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString";
})(oe || (oe = {}));
var ce;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsTaxIDNumber = i$2.IsTaxIDNumber] = "IsTaxIDNumber";
})(ce || (ce = {}));
var Ae;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsNotEqual = i$2.IsNotEqual] = "IsNotEqual", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsVATIDNumber = i$2.IsVATIDNumber] = "IsVATIDNumber";
})(Ae || (Ae = {}));
var de;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.HasNumberCount = i$2.HasNumberCount] = "HasNumberCount", a2[a2.HasLowercaseCount = i$2.HasLowercaseCount] = "HasLowercaseCount", a2[a2.HasLetterCount = i$2.HasLetterCount] = "HasLetterCount", a2[a2.HasSpacesCount = i$2.HasSpacesCount] = "HasSpacesCount", a2[a2.HasSymbolCount = i$2.HasSymbolCount] = "HasSymbolCount", a2[a2.HasUppercaseCount = i$2.HasUppercaseCount] = "HasUppercaseCount", a2[a2.IsAlpha = i$2.IsAlpha] = "IsAlpha", a2[a2.IsAlphanumeric = i$2.IsAlphanumeric] = "IsAlphanumeric", a2[a2.IsAscii = i$2.IsAscii] = "IsAscii", a2[a2.IsBase64 = i$2.IsBase64] = "IsBase64", a2[a2.IsColor = i$2.IsColor] = "IsColor", a2[a2.IsComplexEnough = i$2.IsComplexEnough] = "IsComplexEnough", a2[a2.IsCreditCard = i$2.IsCreditCard] = "IsCreditCard", a2[a2.IsDataURI = i$2.IsDataURI] = "IsDataURI", a2[a2.IsDomainName = i$2.IsDomainName] = "IsDomainName", a2[a2.IsEmailAddress = i$2.IsEmailAddress] = "IsEmailAddress", a2[a2.IsEthereumAddress = i$2.IsEthereumAddress] = "IsEthereumAddress", a2[a2.IsEAN = i$2.IsEAN] = "IsEAN", a2[a2.IsEIN = i$2.IsEIN] = "IsEIN", a2[a2.IsEqual = i$2.IsEqual] = "IsEqual", a2[a2.IsIBAN = i$2.IsIBAN] = "IsIBAN", a2[a2.IsHSLColor = i$2.IsHSLColor] = "IsHSLColor", a2[a2.IsHexColor = i$2.IsHexColor] = "IsHexColor", a2[a2.IsHexadecimal = i$2.IsHexadecimal] = "IsHexadecimal", a2[a2.IsIdentityCardCode = i$2.IsIdentityCardCode] = "IsIdentityCardCode", a2[a2.IsIMEI = i$2.IsIMEI] = "IsIMEI", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsIPAddress = i$2.IsIPAddress] = "IsIPAddress", a2[a2.IsInIPAddressRange = i$2.IsInIPAddressRange] = "IsInIPAddressRange", a2[a2.IsISBN = i$2.IsISBN] = "IsISBN", a2[a2.IsISIN = i$2.IsISIN] = "IsISIN", a2[a2.IsISMN = i$2.IsISMN] = "IsISMN", a2[a2.IsISRC = i$2.IsISRC] = "IsISRC", a2[a2.IsISSN = i$2.IsISSN] = "IsISSN", a2[a2.IsLanguage = i$2.IsLanguage] = "IsLanguage", a2[a2.IsLatitude = i$2.IsLatitude] = "IsLatitude", a2[a2.IsLongitude = i$2.IsLongitude] = "IsLongitude", a2[a2.IsLengthEqual = i$2.IsLengthEqual] = "IsLengthEqual", a2[a2.IsLengthGreaterThan = i$2.IsLengthGreaterThan] = "IsLengthGreaterThan", a2[a2.IsLengthGreaterThanOrEqual = i$2.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual", a2[a2.IsLengthLessThan = i$2.IsLengthLessThan] = "IsLengthLessThan", a2[a2.IsLengthLessThanOrEqual = i$2.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual", a2[a2.IsLicensePlateNumber = i$2.IsLicensePlateNumber] = "IsLicensePlateNumber", a2[a2.IsLowercase = i$2.IsLowercase] = "IsLowercase", a2[a2.IsOctal = i$2.IsOctal] = "IsOctal", a2[a2.IsMACAddress = i$2.IsMACAddress] = "IsMACAddress", a2[a2.IsMD5 = i$2.IsMD5] = "IsMD5", a2[a2.IsMagnetURI = i$2.IsMagnetURI] = "IsMagnetURI", a2[a2.IsMarkdown = i$2.IsMarkdown] = "IsMarkdown", a2[a2.IsMimeType = i$2.IsMimeType] = "IsMimeType", a2[a2.IsMonth = i$2.IsMonth] = "IsMonth", a2[a2.IsNotInIPAddressRange = i$2.IsNotInIPAddressRange] = "IsNotInIPAddressRange", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNotNull = i$2.IsNotNull] = "IsNotNull", a2[a2.IsNotRegexMatch = i$2.IsNotRegexMatch] = "IsNotRegexMatch", a2[a2.IsNumber = i$2.IsNumber] = "IsNumber", a2[a2.IsNumeric = i$2.IsNumeric] = "IsNumeric", a2[a2.IsPassportNumber = i$2.IsPassportNumber] = "IsPassportNumber", a2[a2.IsPhoneNumber = i$2.IsPhoneNumber] = "IsPhoneNumber", a2[a2.IsPort = i$2.IsPort] = "IsPort", a2[a2.IsPostalCode = i$2.IsPostalCode] = "IsPostalCode", a2[a2.IsProvince = i$2.IsProvince] = "IsProvince", a2[a2.IsRegexMatch = i$2.IsRegexMatch] = "IsRegexMatch", a2[a2.IsSemanticVersion = i$2.IsSemanticVersion] = "IsSemanticVersion", a2[a2.IsSlug = i$2.IsSlug] = "IsSlug", a2[a2.IsSSN = i$2.IsSSN] = "IsSSN", a2[a2.IsState = i$2.IsState] = "IsState", a2[a2.IsStreetAddress = i$2.IsStreetAddress] = "IsStreetAddress", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsTaxIDNumber = i$2.IsTaxIDNumber] = "IsTaxIDNumber", a2[a2.IsURL = i$2.IsURL] = "IsURL", a2[a2.IsUUID = i$2.IsUUID] = "IsUUID", a2[a2.IsUppercase = i$2.IsUppercase] = "IsUppercase", a2[a2.IsVATIDNumber = i$2.IsVATIDNumber] = "IsVATIDNumber", a2[a2.IsWeekday = i$2.IsWeekday] = "IsWeekday", a2[a2.IsWeekend = i$2.IsWeekend] = "IsWeekend", a2[a2.IsYear = i$2.IsYear] = "IsYear";
})(de || (de = {}));
var Ie;
(function(a2) {
  a2[a2.Contains = i$2.Contains] = "Contains", a2[a2.IsAlpha = i$2.IsAlpha] = "IsAlpha", a2[a2.IsAlphanumeric = i$2.IsAlphanumeric] = "IsAlphanumeric", a2[a2.IsInList = i$2.IsInList] = "IsInList", a2[a2.IsMarkdown = i$2.IsMarkdown] = "IsMarkdown", a2[a2.IsNotInList = i$2.IsNotInList] = "IsNotInList", a2[a2.IsNumeric = i$2.IsNumeric] = "IsNumeric", a2[a2.IsLowercase = i$2.IsLowercase] = "IsLowercase", a2[a2.IsString = i$2.IsString] = "IsString", a2[a2.IsUppercase = i$2.IsUppercase] = "IsUppercase";
})(Ie || (Ie = {}));
var he;
(function(a2) {
  a2.InvalidCharacters = "invalid-characters", a2.InvalidPattern = "invalid-pattern", a2.NotComplexEnough = "not-complex-enough", a2.NotUnique = "not-unique", a2.NotValidEmail = "not-valid-email", a2.TooLong = "too-long", a2.TooShort = "too-short", a2.Required = "required";
})(he || (he = {}));
var ge;
(function(a2) {
  a2[a2.Allowed = 0] = "Allowed", a2[a2.Blocked = 1] = "Blocked";
})(ge || (ge = {}));
var fe;
(function(a2) {
  a2.Canceled = "Canceled", a2.Completed = "Completed", a2.Created = "Created", a2.Faulted = "Faulted", a2.Queued = "Queued", a2.Running = "Running", a2.Waiting = "Waiting";
})(fe || (fe = {}));
var _e;
(function(a2) {
  a2.Archived = "ARCHIVED", a2.Compromised = "COMPROMISED", a2.Confirmed = "CONFIRMED", a2.ForcePasswordChange = "FORCE_CHANGE_PASSWORD", a2.ResetRequired = "RESET_REQUIRED", a2.Unconfirmed = "UNCONFIRMED", a2.Unknown = "UNKNOWN";
})(_e || (_e = {}));
var Ee;
(function(a2) {
  a2.Code = "code", a2.Link = "link";
})(Ee || (Ee = {}));
var Se;
(function(a2) {
  a2.Owner = "Owner", a2.Admin = "Admin", a2.User = "User", a2.Visitor = "Visitor";
})(Se || (Se = {}));
var Te;
(function(a2) {
  a2.RequiresPaymentMethod = "requires_payment_method", a2.RequiresConfirmation = "requires_confirmation", a2.RequiresAction = "requires_action", a2.Processing = "processing", a2.RequiresCapture = "requires_capture", a2.Canceled = "canceled", a2.Succeeded = "succeeded";
})(Te || (Te = {}));
var pe;
(function(a2) {
  a2.Incomplete = "incomplete", a2.IncompleteExpired = "incomplete_expired", a2.Trialing = "trialing", a2.Active = "active", a2.PastDue = "past_due", a2.Canceled = "canceled", a2.Unpaid = "unpaid";
})(pe || (pe = {}));
var be;
(function(a2) {
  a2.Monthly = "monthly", a2.Quarterly = "quarterly", a2.Yearly = "yearly", a2.Lifetime = "lifetime";
})(be || (be = {}));
var ve;
(function(a2) {
  a2.Delivered = "delivered", a2.Read = "read", a2.Sending = "sending", a2.Sent = "sent";
})(ve || (ve = {}));
var Be;
(function(a2) {
  a2.Audio = "audio", a2.File = "file", a2.Image = "image", a2.Text = "text", a2.Video = "video";
})(Be || (Be = {}));
var Ne;
(function(a2) {
  a2.Audio = "audio", a2.File = "file", a2.Image = "image", a2.Video = "video";
})(Ne || (Ne = {}));
var Ue;
(function(a2) {
  a2.Angry = "angry", a2.Laugh = "laugh", a2.Like = "like", a2.Love = "love", a2.Sad = "sad", a2.Wow = "wow", a2.Wink = "wink", a2.Yay = "yay";
})(Ue || (Ue = {}));
var De;
(function(a2) {
  a2.Email = "email", a2.PhoneNumber = "phone_number";
})(De || (De = {}));
var v;
(function(a2) {
  a2.Analytics = "analytics", a2.Critical = "critical", a2.Debug = "debug", a2.Exception = "exception", a2.Http = "http", a2.Info = "info", a2.Warning = "warning";
})(v || (v = {}));
var Pe;
(function(a2) {
  a2.Delete = "delete", a2.Get = "get", a2.Head = "head", a2.Patch = "patch", a2.Post = "post", a2.Put = "put";
})(Pe || (Pe = {}));
var ke;
(function(a2) {
  a2[a2.CONTINUE = 100] = "CONTINUE", a2[a2.SWITCHING_PROTOCOLS = 101] = "SWITCHING_PROTOCOLS", a2[a2.PROCESSING = 102] = "PROCESSING", a2[a2.OK = 200] = "OK", a2[a2.CREATED = 201] = "CREATED", a2[a2.ACCEPTED = 202] = "ACCEPTED", a2[a2.NON_AUTHORITATIVE_INFORMATION = 203] = "NON_AUTHORITATIVE_INFORMATION", a2[a2.NO_CONTENT = 204] = "NO_CONTENT", a2[a2.RESET_CONTENT = 205] = "RESET_CONTENT", a2[a2.PARTIAL_CONTENT = 206] = "PARTIAL_CONTENT", a2[a2.MULTI_STATUS = 207] = "MULTI_STATUS", a2[a2.ALREADY_REPORTED = 208] = "ALREADY_REPORTED", a2[a2.IM_USED = 226] = "IM_USED", a2[a2.MULTIPLE_CHOICES = 300] = "MULTIPLE_CHOICES", a2[a2.MOVED_PERMANENTLY = 301] = "MOVED_PERMANENTLY", a2[a2.FOUND = 302] = "FOUND", a2[a2.SEE_OTHER = 303] = "SEE_OTHER", a2[a2.NOT_MODIFIED = 304] = "NOT_MODIFIED", a2[a2.USE_PROXY = 305] = "USE_PROXY", a2[a2.SWITCH_PROXY = 306] = "SWITCH_PROXY", a2[a2.TEMPORARY_REDIRECT = 307] = "TEMPORARY_REDIRECT", a2[a2.PERMANENT_REDIRECT = 308] = "PERMANENT_REDIRECT", a2[a2.BAD_REQUEST = 400] = "BAD_REQUEST", a2[a2.UNAUTHORIZED = 401] = "UNAUTHORIZED", a2[a2.PAYMENT_REQUIRED = 402] = "PAYMENT_REQUIRED", a2[a2.FORBIDDEN = 403] = "FORBIDDEN", a2[a2.NOT_FOUND = 404] = "NOT_FOUND", a2[a2.METHOD_NOT_ALLOWED = 405] = "METHOD_NOT_ALLOWED", a2[a2.NOT_ACCEPTABLE = 406] = "NOT_ACCEPTABLE", a2[a2.PROXY_AUTHENTICATION_REQUIRED = 407] = "PROXY_AUTHENTICATION_REQUIRED", a2[a2.REQUEST_TIMEOUT = 408] = "REQUEST_TIMEOUT", a2[a2.CONFLICT = 409] = "CONFLICT", a2[a2.GONE = 410] = "GONE", a2[a2.LENGTH_REQUIRED = 411] = "LENGTH_REQUIRED", a2[a2.PRECONDITION_FAILED = 412] = "PRECONDITION_FAILED", a2[a2.PAYLOAD_TOO_LARGE = 413] = "PAYLOAD_TOO_LARGE", a2[a2.URI_TOO_LONG = 414] = "URI_TOO_LONG", a2[a2.UNSUPPORTED_MEDIA_TYPE = 415] = "UNSUPPORTED_MEDIA_TYPE", a2[a2.RANGE_NOT_SATISFIABLE = 416] = "RANGE_NOT_SATISFIABLE", a2[a2.EXPECTATION_FAILED = 417] = "EXPECTATION_FAILED", a2[a2.I_AM_A_TEAPOT = 418] = "I_AM_A_TEAPOT", a2[a2.MISDIRECTED_REQUEST = 421] = "MISDIRECTED_REQUEST", a2[a2.UNPROCESSABLE_ENTITY = 422] = "UNPROCESSABLE_ENTITY", a2[a2.LOCKED = 423] = "LOCKED", a2[a2.FAILED_DEPENDENCY = 424] = "FAILED_DEPENDENCY", a2[a2.TOO_EARLY = 425] = "TOO_EARLY", a2[a2.UPGRADE_REQUIRED = 426] = "UPGRADE_REQUIRED", a2[a2.PRECONDITION_REQUIRED = 428] = "PRECONDITION_REQUIRED", a2[a2.TOO_MANY_REQUESTS = 429] = "TOO_MANY_REQUESTS", a2[a2.REQUEST_HEADER_FIELDS_TOO_LARGE = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE", a2[a2.UNAVAILABLE_FOR_LEGAL_REASONS = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS", a2[a2.INTERNAL_SERVER_ERROR = 500] = "INTERNAL_SERVER_ERROR", a2[a2.NOT_IMPLEMENTED = 501] = "NOT_IMPLEMENTED", a2[a2.BAD_GATEWAY = 502] = "BAD_GATEWAY", a2[a2.SERVICE_UNAVAILABLE = 503] = "SERVICE_UNAVAILABLE", a2[a2.GATEWAY_TIMEOUT = 504] = "GATEWAY_TIMEOUT", a2[a2.HTTP_VERSION_NOT_SUPPORTED = 505] = "HTTP_VERSION_NOT_SUPPORTED", a2[a2.VARIANT_ALSO_NEGOTIATES = 506] = "VARIANT_ALSO_NEGOTIATES", a2[a2.INSUFFICIENT_STORAGE = 507] = "INSUFFICIENT_STORAGE", a2[a2.LOOP_DETECTED = 508] = "LOOP_DETECTED", a2[a2.BANDWIDTH_LIMIT_EXCEEDED = 509] = "BANDWIDTH_LIMIT_EXCEEDED", a2[a2.NOT_EXTENDED = 510] = "NOT_EXTENDED", a2[a2.NETWORK_AUTHENTICATION_REQUIRED = 511] = "NETWORK_AUTHENTICATION_REQUIRED";
})(ke || (ke = {}));
var r;
(function(a2) {
  a2.Afghanistan = "AF", a2.Albania = "AL", a2.Algeria = "DZ", a2.AmericanSamoa = "AS", a2.Andorra = "AD", a2.Angola = "AO", a2.Anguilla = "AI", a2.Antarctica = "AQ", a2.AntiguaAndBarbuda = "AG", a2.Argentina = "AR", a2.Armenia = "AM", a2.Aruba = "AW", a2.Australia = "AU", a2.Austria = "AT", a2.Azerbaijan = "AZ", a2.Bahamas = "BS", a2.Bahrain = "BH", a2.Bangladesh = "BD", a2.Barbados = "BB", a2.Belarus = "BY", a2.Belgium = "BE", a2.Belize = "BZ", a2.Benin = "BJ", a2.Bermuda = "BM", a2.Bhutan = "BT", a2.Bolivia = "BO", a2.BosniaAndHerzegovina = "BA", a2.Botswana = "BW", a2.BouvetIsland = "BV", a2.Brazil = "BR", a2.BritishIndianOceanTerritory = "IO", a2.Brunei = "BN", a2.Bulgaria = "BG", a2.BurkinaFaso = "BF", a2.Burundi = "BI", a2.Cambodia = "KH", a2.Cameroon = "CM", a2.Canada = "CA", a2.CapeVerde = "CV", a2.CaymanIslands = "KY", a2.CentralAfricanRepublic = "CF", a2.Chad = "TD", a2.Chile = "CL", a2.China = "CN", a2.ChristmasIsland = "CX", a2.CocosKeelingIslands = "CC", a2.Colombia = "CO", a2.Comoros = "KM", a2.Congo = "CG", a2.CongoTheDemocraticRepublicOfThe = "CD", a2.CookIslands = "CK", a2.CostaRica = "CR", a2.CoteDIvoire = "CI", a2.Croatia = "HR", a2.Cuba = "CU", a2.Cyprus = "CY", a2.CzechRepublic = "CZ", a2.Denmark = "DK", a2.Djibouti = "DJ", a2.Dominica = "DM", a2.DominicanRepublic = "DO", a2.Ecuador = "EC", a2.Egypt = "EG", a2.ElSalvador = "SV", a2.EquatorialGuinea = "GQ", a2.Eritrea = "ER", a2.Estonia = "EE", a2.Ethiopia = "ET", a2.FalklandIslands = "FK", a2.FaroeIslands = "FO", a2.Fiji = "FJ", a2.Finland = "FI", a2.France = "FR", a2.FrenchGuiana = "GF", a2.FrenchPolynesia = "PF", a2.FrenchSouthernTerritories = "TF", a2.Gabon = "GA", a2.Gambia = "GM", a2.Georgia = "GE", a2.Germany = "DE", a2.Ghana = "GH", a2.Gibraltar = "GI", a2.Greece = "GR", a2.Greenland = "GL", a2.Grenada = "GD", a2.Guadeloupe = "GP", a2.Guam = "GU", a2.Guatemala = "GT", a2.Guernsey = "GG", a2.Guinea = "GN", a2.GuineaBissau = "GW", a2.Guyana = "GY", a2.Haiti = "HT", a2.HeardIslandMcdonaldIslands = "HM", a2.HolySeeVaticanCityState = "VA", a2.Honduras = "HN", a2.HongKong = "HK", a2.Hungary = "HU", a2.Iceland = "IS", a2.India = "IN", a2.Indonesia = "ID", a2.Iran = "IR", a2.Iraq = "IQ", a2.Ireland = "IE", a2.IsleOfMan = "IM", a2.Israel = "IL", a2.Italy = "IT", a2.Jamaica = "JM", a2.Japan = "JP", a2.Jersey = "JE", a2.Jordan = "JO", a2.Kazakhstan = "KZ", a2.Kenya = "KE", a2.Kiribati = "KI", a2.Kuwait = "KW", a2.Kyrgyzstan = "KG", a2.Laos = "LA", a2.Latvia = "LV", a2.Lebanon = "LB", a2.Lesotho = "LS", a2.Liberia = "LR", a2.Libya = "LY", a2.Liechtenstein = "LI", a2.Lithuania = "LT", a2.Luxembourg = "LU", a2.Macau = "MO", a2.Madagascar = "MG", a2.Malawi = "MW", a2.Malaysia = "MY", a2.Maldives = "MV", a2.Mali = "ML", a2.Malta = "MT", a2.MarshallIslands = "MH", a2.Martinique = "MQ", a2.Mauritania = "MR", a2.Mauritius = "MU", a2.Mayotte = "YT", a2.Mexico = "MX", a2.MicronesiaFederatedStatesOf = "FM", a2.Moldova = "MD", a2.Monaco = "MC", a2.Mongolia = "MN", a2.Montenegro = "ME", a2.Montserrat = "MS", a2.Morocco = "MA", a2.Mozambique = "MZ", a2.Myanmar = "MM", a2.Namibia = "NA", a2.Nauru = "NR", a2.Nepal = "NP", a2.Netherlands = "NL", a2.NetherlandsAntilles = "AN", a2.NewCaledonia = "NC", a2.NewZealand = "NZ", a2.NorthKorea = "KP", a2.Nicaragua = "NI", a2.Niger = "NE", a2.Nigeria = "NG", a2.Niue = "NU", a2.NorfolkIsland = "NF", a2.NorthMacedonia = "MK", a2.NorthernMarianaIslands = "MP", a2.Norway = "NO", a2.Oman = "OM", a2.Pakistan = "PK", a2.Palau = "PW", a2.PalestinianTerritoryOccupied = "PS", a2.Panama = "PA", a2.PapuaNewGuinea = "PG", a2.Paraguay = "PY", a2.Peru = "PE", a2.Philippines = "PH", a2.Pitcairn = "PN", a2.Poland = "PL", a2.Portugal = "PT", a2.PuertoRico = "PR", a2.Qatar = "QA", a2.Reunion = "RE", a2.Romania = "RO", a2.RussianFederation = "RU", a2.Rwanda = "RW", a2.SaintBarthelemy = "BL", a2.SaintHelena = "SH", a2.SaintKittsAndNevis = "KN", a2.SaintLucia = "LC", a2.SaintMartin = "MF", a2.SaintPierreAndMiquelon = "PM", a2.SaintVincentAndTheGrenadines = "VC", a2.Samoa = "WS", a2.SanMarino = "SM", a2.SaoTomeAndPrincipe = "ST", a2.SaudiArabia = "SA", a2.Senegal = "SN", a2.Serbia = "RS", a2.SerbiaAndMontenegro = "CS", a2.Seychelles = "SC", a2.SierraLeone = "SL", a2.Singapore = "SG", a2.Slovakia = "SK", a2.Slovenia = "SI", a2.SolomonIslands = "SB", a2.Somalia = "SO", a2.SouthAfrica = "ZA", a2.SouthGeorgiaAndTheSouthSandwichIslands = "GS", a2.SouthKorea = "KR", a2.Spain = "ES", a2.SriLanka = "LK", a2.Sudan = "SD", a2.Suriname = "SR", a2.SvalbardAndJanMayen = "SJ", a2.Swaziland = "SZ", a2.Sweden = "SE", a2.Switzerland = "CH", a2.Syria = "SY", a2.Taiwan = "TW", a2.Tajikistan = "TJ", a2.Tanzania = "TZ", a2.Thailand = "TH", a2.TimorLeste = "TL", a2.Togo = "TG", a2.Tokelau = "TK", a2.Tonga = "TO", a2.TrinidadAndTobago = "TT", a2.Tunisia = "TN", a2.Turkey = "TR", a2.Turkmenistan = "TM", a2.TurksAndCaicosIslands = "TC", a2.Tuvalu = "TV", a2.Uganda = "UG", a2.Ukraine = "UA", a2.UnitedArabEmirates = "AE", a2.UnitedKingdom = "GB", a2.UnitedStates = "US", a2.UnitedStatesMinorOutlyingIslands = "UM", a2.Uruguay = "UY", a2.Uzbekistan = "UZ", a2.Vanuatu = "VU", a2.Venezuela = "VE", a2.Vietnam = "VN", a2.VirginIslandsBritish = "VG", a2.VirginIslandsUS = "VI", a2.WallisAndFutuna = "WF", a2.WesternSahara = "EH", a2.Yemen = "YE", a2.Zambia = "ZM", a2.Zimbabwe = "ZW";
})(r || (r = {}));
var m;
(function(a2) {
  a2.AfghanistanAfghani = "AFN", a2.AlbaniaLek = "ALL", a2.ArmeniaDram = "AMD", a2.AlgeriaDinar = "DZD", a2.AmericanSamoaTala = "WST", a2.AngolaKwanza = "AOA", a2.ArgentinaPeso = "ARS", a2.AustraliaDollar = "AUD", a2.ArubaFlorin = "AWG", a2.AzerbaijanNewManat = "AZN", a2.BosniaAndHerzegovinaConvertibleMark = "BAM", a2.BahrainDinar = "BHD", a2.BarbadosDollar = "BBD", a2.BangladeshTaka = "BDT", a2.BelgiumFranc = "BGN", a2.BermudaDollar = "BMD", a2.BruneiDollar = "BND", a2.BoliviaBoliviano = "BOB", a2.BrazilReal = "BRL", a2.BahamasDollar = "BSD", a2.BhutanNgultrum = "BTN", a2.BotswanaPula = "BWP", a2.BelarusRuble = "BYN", a2.BelizeDollar = "BZD", a2.BulgariaLev = "BGN", a2.BurundiFranc = "BIF", a2.BritishPound = "GBP", a2.CanadaDollar = "CAD", a2.CambodiaRiel = "KHR", a2.ComorosFranc = "KMF", a2.CaymanIslandsDollar = "KYD", a2.ChilePeso = "CLP", a2.ChinaYuan = "CNY", a2.ColombiaPeso = "COP", a2.CostaRicaColon = "CRC", a2.CroatiaKuna = "HRK", a2.CubaConvertiblePeso = "CUC", a2.CubaPeso = "CUP", a2.CapeVerdeEscudo = "CVE", a2.CyprusPound = "CYP", a2.CzechRepublicKoruna = "CZK", a2.DjiboutiFranc = "DJF", a2.DenmarkKrone = "DKK", a2.DominicaDollar = "XCD", a2.DominicanRepublicPeso = "DOP", a2.EastCaribbeanDollar = "XCD", a2.EgyptPound = "EGP", a2.ElSalvadorColon = "SVC", a2.EquatorialGuineaEkwele = "GQE", a2.EritreaNakfa = "ERN", a2.EstoniaKroon = "EEK", a2.EthiopiaBirr = "ETB", a2.Euro = "EUR", a2.FijiDollar = "FJD", a2.FalklandIslandsPound = "FKP", a2.GambiaDalasi = "GMD", a2.GabonFranc = "GMD", a2.GeorgiaLari = "GEL", a2.GhanaCedi = "GHS", a2.GibraltarPound = "GIP", a2.GuatemalaQuetzal = "GTQ", a2.GuernseyPound = "GGP", a2.GuineaBissauPeso = "GWP", a2.GuyanaDollar = "GYD", a2.HongKongDollar = "HKD", a2.HondurasLempira = "HNL", a2.HaitiGourde = "HTG", a2.HungaryForint = "HUF", a2.IndonesiaRupiah = "IDR", a2.IsleOfManPound = "IMP", a2.IsraelNewShekel = "ILS", a2.IndiaRupee = "INR", a2.IraqDinar = "IQD", a2.IranRial = "IRR", a2.IcelandKrona = "ISK", a2.JamaicaDollar = "JMD", a2.JapanYen = "JPY", a2.JerseyPound = "JEP", a2.JordanDinar = "JOD", a2.KazakhstanTenge = "KZT", a2.KenyaShilling = "KES", a2.KyrgyzstanSom = "KGS", a2.NorthKoreaWon = "KPW", a2.SouthKoreaWon = "KRW", a2.KuwaitDinar = "KWD", a2.LaosKip = "LAK", a2.LebanonPound = "LBP", a2.LiberiaDollar = "LRD", a2.LesothoLoti = "LSL", a2.LibyanDinar = "LYD", a2.LithuaniaLitas = "LTL", a2.LatviaLats = "LVL", a2.LibyaDinar = "LYD", a2.MacauPataca = "MOP", a2.MaldivesRufiyaa = "MVR", a2.MalawiKwacha = "MWK", a2.MaltaLira = "MTL", a2.MauritiusRupee = "MUR", a2.MongoliaTughrik = "MNT", a2.MoroccoDirham = "MAD", a2.MoldovaLeu = "MDL", a2.MozambiqueMetical = "MZN", a2.MadagascarAriary = "MGA", a2.MacedoniaDenar = "MKD", a2.MexicoPeso = "MXN", a2.MalaysiaRinggit = "MYR", a2.MyanmarKyat = "MMK", a2.MicronesiaFederatedStatesDollar = "USD", a2.NicaraguaCordoba = "NIO", a2.NamibiaDollar = "NAD", a2.NetherlandsAntillesGuilder = "ANG", a2.NewCaledoniaFranc = "XPF", a2.NigeriaNaira = "NGN", a2.NicaraguaCordobaOro = "NIO", a2.NigerCFAFranc = "XOF", a2.NorwayKrone = "NOK", a2.NepalRupee = "NPR", a2.NewZealandDollar = "NZD", a2.OmanRial = "OMR", a2.PanamaBalboa = "PAB", a2.PeruNuevoSol = "PEN", a2.PapuaNewGuineaKina = "PGK", a2.PhilippinesPeso = "PHP", a2.PakistanRupee = "PKR", a2.PeruNuevo = "PEN", a2.PolandZloty = "PLN", a2.ParaguayGuarani = "PYG", a2.QatarRial = "QAR", a2.RomaniaNewLeu = "RON", a2.SerbiaDinar = "RSD", a2.SriLankaRupee = "LKR", a2.RussiaRuble = "RUB", a2.RwandaFranc = "RWF", a2.SaudiArabiaRiyal = "SAR", a2.SlovakiaKoruna = "SKK", a2.SloveniaTolar = "SIT", a2.SolomonIslandsDollar = "SBD", a2.SeychellesRupee = "SCR", a2.SudanPound = "SDG", a2.SwedenKrona = "SEK", a2.SingaporeDollar = "SGD", a2.SaintHelenaPound = "SHP", a2.SierraLeoneLeone = "SLL", a2.SomaliaShilling = "SOS", a2.SurinameDollar = "SRD", a2.SintMaartenPound = "SXD", a2.SyriaPound = "SYP", a2.SwazilandLilangeni = "SZL", a2.SwitzerlandFranc = "CHF", a2.ThailandBaht = "THB", a2.TajikistanSomoni = "TJS", a2.TurkmenistanManat = "TMT", a2.TunisiaDinar = "TND", a2.TongaPaanga = "TOP", a2.TurkeyLira = "TRY", a2.TrinidadAndTobagoDollar = "TTD", a2.TaiwanNewDollar = "TWD", a2.TanzaniaShilling = "TZS", a2.UnitedArabEmiratesDirham = "AED", a2.UkraineHryvnia = "UAH", a2.UgandaShilling = "UGX", a2.UnitedKingdomPound = "GBP", a2.UnitedStatesDollar = "USD", a2.UruguayPeso = "UYU", a2.UzbekistanSom = "UZS", a2.VenezuelaBolivar = "VEF", a2.VietnamDong = "VND", a2.VanuatuVatu = "VUV", a2.SamoaTala = "WST", a2.YemenRial = "YER", a2.SouthAfricaRand = "ZAR", a2.ZambiaKwacha = "ZMW", a2.ZimbabweDollar = "ZWL";
})(m || (m = {}));
({ AfghanistanAfghani: { code: m.AfghanistanAfghani, countries: [r.Afghanistan], decimal_digits: 2, decimal_separator: ".", name: "Afghan Afghani", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u060B", symbol_native: "\u060B", symbol_placement: "before", thousands_separator: "," }, AlbaniaLek: { code: m.AlbaniaLek, countries: [r.Albania], decimal_digits: 2, decimal_separator: ",", name: "Albanian Lek", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Lek", symbol_native: "Lek", symbol_placement: "before", thousands_separator: "." }, AlgeriaDinar: { code: m.AlgeriaDinar, countries: [r.Algeria], decimal_digits: 2, decimal_separator: ".", name: "Algerian Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u062F.\u062C", symbol_native: "\u062F.\u062C", symbol_placement: "before", thousands_separator: "," }, ArgentinaPeso: { code: m.ArgentinaPeso, countries: [r.Argentina], decimal_digits: 2, decimal_separator: ".", name: "Argentine Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, ArmeniaDram: { code: m.ArmeniaDram, countries: [r.Armenia], decimal_digits: 2, decimal_separator: ",", name: "Armenian Dram", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0564\u0580.", symbol_native: "\u0564\u0580.", symbol_placement: "before", thousands_separator: "." }, ArubaFlorin: { code: m.ArubaFlorin, countries: [r.Aruba], decimal_digits: 2, decimal_separator: ".", name: "Aruban Florin", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0192", symbol_native: "\u0192", symbol_placement: "before", thousands_separator: "," }, AustraliaDollar: { code: m.AustraliaDollar, countries: [r.Australia], decimal_digits: 2, decimal_separator: ".", name: "Australian Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, AzerbaijanManat: { code: m.AzerbaijanNewManat, countries: [r.Azerbaijan], decimal_digits: 2, decimal_separator: ".", name: "Azerbaijani Manat", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u043C\u0430\u043D", symbol_native: "\u043C\u0430\u043D", symbol_placement: "before", thousands_separator: "," }, BahrainDinar: { code: m.BahrainDinar, countries: [r.Bahrain], decimal_digits: 3, decimal_separator: ".", name: "Bahraini Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: ".\u062F.\u0628", symbol_native: ".\u062F.\u0628", symbol_placement: "before", thousands_separator: "," }, BangladeshTaka: { code: m.BangladeshTaka, countries: [r.Bangladesh], decimal_digits: 2, decimal_separator: ".", name: "Bangladeshi Taka", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u09F3", symbol_native: "\u09F3", symbol_placement: "before", thousands_separator: "," }, BarbadosDollar: { code: m.BarbadosDollar, countries: [r.Barbados], decimal_digits: 2, decimal_separator: ".", name: "Barbadian Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, BelarusRuble: { code: m.BelarusRuble, countries: [r.Belarus], decimal_digits: 2, decimal_separator: ".", name: "Belarusian Ruble", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Br", symbol_native: "Br", symbol_placement: "before", thousands_separator: "." }, BelizeDollar: { code: m.BelizeDollar, countries: [r.Belize], decimal_digits: 2, decimal_separator: ".", name: "Belize Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "BZ$", symbol_native: "BZ$", symbol_placement: "before", thousands_separator: "," }, BermudaDollar: { code: m.BermudaDollar, countries: [r.Bermuda], decimal_digits: 2, decimal_separator: ".", name: "Bermudian Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, BoliviaBoliviano: { code: m.BoliviaBoliviano, countries: [r.Bolivia], decimal_digits: 2, decimal_separator: ".", name: "Bolivian Boliviano", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$b", symbol_native: "$b", symbol_placement: "before", thousands_separator: "," }, BosniaAndHerzegovinaConvertibleMarka: { code: m.BosniaAndHerzegovinaConvertibleMark, countries: [r.BosniaAndHerzegovina], decimal_digits: 2, decimal_separator: ",", name: "Bosnia and Herzegovina Convertible Marka", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "KM", symbol_native: "KM", symbol_placement: "before", thousands_separator: "." }, BotswanaPula: { code: m.BotswanaPula, countries: [r.Botswana], decimal_digits: 2, decimal_separator: ".", name: "Botswana Pula", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "P", symbol_native: "P", symbol_placement: "before", thousands_separator: "," }, BrazilReal: { code: m.BrazilReal, countries: [r.Brazil], decimal_digits: 2, decimal_separator: ",", name: "Brazilian Real", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "R$", symbol_native: "R$", symbol_placement: "before", thousands_separator: "." }, BruneiDollar: { code: m.BruneiDollar, countries: [r.Brunei], decimal_digits: 2, decimal_separator: ".", name: "Brunei Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, BulgariaLev: { code: m.BulgariaLev, countries: [r.Bulgaria], decimal_digits: 2, decimal_separator: ".", name: "Bulgarian Lev", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u043B\u0432", symbol_native: "\u043B\u0432", symbol_placement: "before", thousands_separator: "." }, BurundiFranc: { code: m.BurundiFranc, countries: [r.Burundi], decimal_digits: 0, decimal_separator: ".", name: "Burundian Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "FBu", symbol_native: "FBu", symbol_placement: "before", thousands_separator: "," }, CambodiaRiel: { code: m.CambodiaRiel, countries: [r.Cambodia], decimal_digits: 2, decimal_separator: ",", name: "Cambodian Riel", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u17DB", symbol_native: "\u17DB", symbol_placement: "before", thousands_separator: "." }, CanadaDollar: { code: m.CanadaDollar, countries: [r.Canada], decimal_digits: 2, decimal_separator: ".", name: "Canadian Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, CapeVerdeEscudo: { code: m.CapeVerdeEscudo, countries: [r.CapeVerde], decimal_digits: 2, decimal_separator: ".", name: "Cape Verde Escudo", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Esc", symbol_native: "Esc", symbol_placement: "before", thousands_separator: "," }, CaymanIslandsDollar: { code: m.CaymanIslandsDollar, countries: [r.CaymanIslands], decimal_digits: 2, decimal_separator: ".", name: "Cayman Islands Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, ChilePeso: { code: m.ChilePeso, countries: [r.Chile], decimal_digits: 0, decimal_separator: ".", name: "Chilean Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, ChinaYuanRenminbi: { code: m.ChinaYuan, countries: [r.China], decimal_digits: 2, decimal_separator: ".", name: "Chinese Yuan", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA5", symbol_native: "\xA5", symbol_placement: "before", thousands_separator: "," }, ColombiaPeso: { code: m.ColombiaPeso, countries: [r.Colombia], decimal_digits: 2, decimal_separator: ".", name: "Colombian Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, ComorosFranc: { code: m.ComorosFranc, countries: [r.Comoros], decimal_digits: 0, decimal_separator: ".", name: "Comoros Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "CF", symbol_native: "CF", symbol_placement: "before", thousands_separator: "," }, CostaRicaColon: { code: m.CostaRicaColon, countries: [r.CostaRica], decimal_digits: 2, decimal_separator: ".", name: "Costa Rican Colon", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A1", symbol_native: "\u20A1", symbol_placement: "before", thousands_separator: "," }, CroatiaKuna: { code: m.CroatiaKuna, countries: [r.Croatia], decimal_digits: 2, decimal_separator: ",", name: "Croatian Kuna", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kn", symbol_native: "kn", symbol_placement: "before", thousands_separator: "." }, CubaConvertiblePeso: { code: m.CubaConvertiblePeso, countries: [r.Cuba], decimal_digits: 2, decimal_separator: ",", name: "Cuba Convertible Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, CubaPeso: { code: m.CubaPeso, countries: [r.Cuba], decimal_digits: 2, decimal_separator: ",", name: "Cuba Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, CyprusPound: { code: m.CyprusPound, countries: [r.Cyprus], decimal_digits: 2, decimal_separator: ",", name: "Cyprus Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, CzechRepublicKoruna: { code: m.CzechRepublicKoruna, countries: [r.CzechRepublic], decimal_digits: 2, decimal_separator: ",", name: "Czech Republic Koruna", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "K\u010D", symbol_native: "K\u010D", symbol_placement: "before", thousands_separator: "." }, DenmarkKrone: { code: m.DenmarkKrone, countries: [r.Denmark], decimal_digits: 2, decimal_separator: ",", name: "Denmark Krone", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kr", symbol_native: "kr", symbol_placement: "before", thousands_separator: "." }, DjiboutiFranc: { code: m.DjiboutiFranc, countries: [r.Djibouti], decimal_digits: 0, decimal_separator: ".", name: "Djibouti Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Fdj", symbol_native: "Fdj", symbol_placement: "before", thousands_separator: "," }, DominicanRepublicPeso: { code: m.DominicanRepublicPeso, countries: [r.DominicanRepublic], decimal_digits: 2, decimal_separator: ",", name: "Dominican Republic Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "RD$", symbol_native: "RD$", symbol_placement: "before", thousands_separator: "." }, EastCaribbeanDollar: { code: m.EastCaribbeanDollar, countries: [r.AntiguaAndBarbuda, r.Dominica, r.Grenada, r.SaintKittsAndNevis, r.SaintLucia, r.SaintVincentAndTheGrenadines], decimal_digits: 2, decimal_separator: ".", name: "East Caribbean Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "," }, EgyptPound: { code: m.EgyptPound, countries: [r.Egypt], decimal_digits: 2, decimal_separator: ".", name: "Egypt Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "," }, ElSalvadorColon: { code: m.ElSalvadorColon, countries: [r.ElSalvador], decimal_digits: 2, decimal_separator: ",", name: "El Salvador Colon", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A1", symbol_native: "\u20A1", symbol_placement: "before", thousands_separator: "." }, EquatorialGuineaEkwele: { code: m.EquatorialGuineaEkwele, countries: [r.EquatorialGuinea], decimal_digits: 0, decimal_separator: ".", name: "Equatorial Guinea Ekwele", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "GQE", symbol_native: "GQE", symbol_placement: "before", thousands_separator: "," }, EritreaNakfa: { code: m.EritreaNakfa, countries: [r.Eritrea], decimal_digits: 2, decimal_separator: ",", name: "Eritrea Nakfa", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Nfk", symbol_native: "Nfk", symbol_placement: "before", thousands_separator: "." }, EstoniaKroon: { code: m.EstoniaKroon, countries: [r.Estonia], decimal_digits: 2, decimal_separator: ",", name: "Estonia Kroon", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kr", symbol_native: "kr", symbol_placement: "before", thousands_separator: "." }, EthiopiaBirr: { code: m.EthiopiaBirr, countries: [r.Ethiopia], decimal_digits: 2, decimal_separator: ",", name: "Ethiopia Birr", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Br", symbol_native: "Br", symbol_placement: "before", thousands_separator: "." }, Euro: { code: m.Euro, countries: [r.Andorra, r.Austria, r.Belgium, r.Cyprus, r.Estonia, r.Finland, r.France, r.Germany, r.Greece, r.Ireland, r.Italy, r.Latvia, r.Lithuania, r.Luxembourg, r.Malta, r.Monaco, r.Netherlands, r.Portugal, r.Spain, r.Sweden, r.UnitedKingdom], decimal_digits: 2, decimal_separator: ",", name: "Euro", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AC", symbol_native: "\u20AC", symbol_placement: "before", thousands_separator: "." }, FalklandIslandsPound: { code: m.FalklandIslandsPound, countries: [r.FalklandIslands], decimal_digits: 2, decimal_separator: ",", name: "Equatorial Guinea Ekwele", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, FijiDollar: { code: m.FijiDollar, countries: [r.Fiji], decimal_digits: 2, decimal_separator: ",", name: "Fiji Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, GambiaDalasi: { code: m.GambiaDalasi, countries: [r.Gambia], decimal_digits: 2, decimal_separator: ",", name: "Gambia Dalasi", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "D", symbol_native: "D", symbol_placement: "before", thousands_separator: "." }, GeorgiaLari: { code: m.GeorgiaLari, countries: [r.Georgia], decimal_digits: 2, decimal_separator: ",", name: "Georgia Lari", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20BE", symbol_native: "\u20BE", symbol_placement: "before", thousands_separator: "." }, GhanaCedi: { code: m.GhanaCedi, countries: [r.Ghana], decimal_digits: 2, decimal_separator: ",", name: "Ghana Cedi", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B5", symbol_native: "\u20B5", symbol_placement: "before", thousands_separator: "." }, GibraltarPound: { code: m.GibraltarPound, countries: [r.Gibraltar], decimal_digits: 2, decimal_separator: ",", name: "Gibraltar Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, GuatemalaQuetzal: { code: m.GuatemalaQuetzal, countries: [r.Guatemala], decimal_digits: 2, decimal_separator: ",", name: "Guatemala Quetzal", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Q", symbol_native: "Q", symbol_placement: "before", thousands_separator: "." }, GuernseyPound: { code: m.GuernseyPound, countries: [r.Guernsey], decimal_digits: 2, decimal_separator: ",", name: "Guernsey Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, GuineaBissauPeso: { code: m.GuineaBissauPeso, countries: [r.GuineaBissau], decimal_digits: 2, decimal_separator: ",", name: "Guinea-Bissau Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B5", symbol_native: "\u20B5", symbol_placement: "before", thousands_separator: "." }, GuyanaDollar: { code: m.GuyanaDollar, countries: [r.Guyana], decimal_digits: 2, decimal_separator: ",", name: "Guyana Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, HaitiGourde: { code: m.HaitiGourde, countries: [r.Haiti], decimal_digits: 2, decimal_separator: ",", name: "Haiti Gourde", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "G", symbol_native: "G", symbol_placement: "before", thousands_separator: "." }, HondurasLempira: { code: m.HondurasLempira, countries: [r.Honduras], decimal_digits: 2, decimal_separator: ",", name: "Honduras Lempira", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "L", symbol_native: "L", symbol_placement: "before", thousands_separator: "." }, HongKongDollar: { code: m.HongKongDollar, countries: [r.HongKong], decimal_digits: 2, decimal_separator: ",", name: "Hong Kong Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, HungaryForint: { code: m.HungaryForint, countries: [r.Hungary], decimal_digits: 2, decimal_separator: ",", name: "Hungary Forint", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Ft", symbol_native: "Ft", symbol_placement: "before", thousands_separator: "." }, IcelandKrona: { code: m.IcelandKrona, countries: [r.Iceland], decimal_digits: 0, decimal_separator: ",", name: "Iceland Krona", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kr", symbol_native: "kr", symbol_placement: "before", thousands_separator: "." }, IndianRupee: { code: m.IndiaRupee, countries: [r.India, r.Bhutan], decimal_digits: 2, decimal_separator: ",", name: "Indian Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B9", symbol_native: "\u20B9", symbol_placement: "before", thousands_separator: "." }, IndonesiaRupiah: { code: m.IndonesiaRupiah, countries: [r.Indonesia], decimal_digits: 0, decimal_separator: ",", name: "Indonesia Rupiah", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Rp", symbol_native: "Rp", symbol_placement: "before", thousands_separator: "." }, IranRial: { code: m.IranRial, countries: [r.Iran], decimal_digits: 0, decimal_separator: ",", name: "Iran Rial", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, IsleOfManPound: { code: m.IsleOfManPound, countries: [r.IsleOfMan], decimal_digits: 2, decimal_separator: ",", name: "Isle of Man Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, IsraeliShekel: { code: m.IsraelNewShekel, countries: [r.Israel], decimal_digits: 2, decimal_separator: ",", name: "Israeli Shekel", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AA", symbol_native: "\u20AA", symbol_placement: "before", thousands_separator: "." }, JamaicaDollar: { code: m.JamaicaDollar, countries: [r.Jamaica], decimal_digits: 2, decimal_separator: ",", name: "Jamaica Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "J$", symbol_native: "J$", symbol_placement: "before", thousands_separator: "." }, JapanYen: { code: m.JapanYen, countries: [r.Japan], decimal_digits: 0, decimal_separator: ",", name: "Japan Yen", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA5", symbol_native: "\uFFE5", symbol_placement: "before", thousands_separator: "." }, JerseyPound: { code: m.JerseyPound, countries: [r.Jersey], decimal_digits: 2, decimal_separator: ",", name: "Jersey Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, JordanDinar: { code: m.JordanDinar, countries: [r.Jordan], decimal_digits: 3, decimal_separator: ",", name: "Jordan Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "JD", symbol_native: "JD", symbol_placement: "before", thousands_separator: "." }, KazakhstanTenge: { code: m.KazakhstanTenge, countries: [r.Kazakhstan], decimal_digits: 2, decimal_separator: ",", name: "Kazakhstan Tenge", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B8", symbol_native: "\u20B8", symbol_placement: "before", thousands_separator: "." }, KenyaShilling: { code: m.KenyaShilling, countries: [r.Kenya], decimal_digits: 2, decimal_separator: ",", name: "Kenya Shilling", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "KSh", symbol_native: "KSh", symbol_placement: "before", thousands_separator: "." }, KuwaitDinar: { code: m.KuwaitDinar, countries: [r.Kuwait], decimal_digits: 3, decimal_separator: ",", name: "Kuwait Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "KD", symbol_native: "KD", symbol_placement: "before", thousands_separator: "." }, KyrgyzstanSom: { code: m.KyrgyzstanSom, countries: [r.Kyrgyzstan], decimal_digits: 2, decimal_separator: ",", name: "Kyrgyzstan Som", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "KGS", symbol_native: "KGS", symbol_placement: "before", thousands_separator: "." }, LaosKip: { code: m.LaosKip, countries: [r.Laos], decimal_digits: 0, decimal_separator: ",", name: "Laos Kip", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AD", symbol_native: "\u20AD", symbol_placement: "before", thousands_separator: "." }, LatviaLats: { code: m.LatviaLats, countries: [r.Latvia], decimal_digits: 2, decimal_separator: ",", name: "Latvia Lat", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Ls", symbol_native: "Ls", symbol_placement: "before", thousands_separator: "." }, LebanonPound: { code: m.LebanonPound, countries: [r.Lebanon], decimal_digits: 0, decimal_separator: ",", name: "Lebanon Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, LesothoLoti: { code: m.LesothoLoti, countries: [r.Lesotho], decimal_digits: 2, decimal_separator: ",", name: "Lesotho Loti", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "M", symbol_native: "M", symbol_placement: "before", thousands_separator: "." }, LiberiaDollar: { code: m.LiberiaDollar, countries: [r.Liberia], decimal_digits: 2, decimal_separator: ",", name: "Liberia Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, LibyanDinar: { code: m.LibyanDinar, countries: [r.Libya], decimal_digits: 3, decimal_separator: ",", name: "Libyan Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "LD", symbol_native: "LD", symbol_placement: "before", thousands_separator: "." }, LithuaniaLitas: { code: m.LithuaniaLitas, countries: [r.Lithuania], decimal_digits: 2, decimal_separator: ",", name: "Lithuania Litas", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Lt", symbol_native: "Lt", symbol_placement: "before", thousands_separator: "." }, MacauPataca: { code: m.MacauPataca, countries: [r.Macau], decimal_digits: 2, decimal_separator: ",", name: "Macau Pataca", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "MOP$", symbol_native: "MOP$", symbol_placement: "before", thousands_separator: "." }, MacedoniaDenar: { code: m.MacedoniaDenar, countries: [r.NorthMacedonia], decimal_digits: 2, decimal_separator: ",", name: "Macedonia Denar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0434\u0435\u043D", symbol_native: "\u0434\u0435\u043D", symbol_placement: "before", thousands_separator: "." }, MadagascarAriary: { code: m.MadagascarAriary, countries: [r.Madagascar], decimal_digits: 0, decimal_separator: ",", name: "Madagascar Ariary", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Ar", symbol_native: "Ar", symbol_placement: "before", thousands_separator: "." }, MalawiKwacha: { code: m.MalawiKwacha, countries: [r.Malawi], decimal_digits: 2, decimal_separator: ",", name: "Malawi Kwacha", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "MK", symbol_native: "MK", symbol_placement: "before", thousands_separator: "." }, MalaysiaRinggit: { code: m.MalaysiaRinggit, countries: [r.Malaysia], decimal_digits: 2, decimal_separator: ",", name: "Malaysia Ringgit", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "RM", symbol_native: "RM", symbol_placement: "before", thousands_separator: "." }, MaldivesRufiyaa: { code: m.MaldivesRufiyaa, countries: [r.Maldives], decimal_digits: 2, decimal_separator: ",", name: "Maldives Rufiyaa", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Rf", symbol_native: "Rf", symbol_placement: "before", thousands_separator: "." }, MaltaLira: { code: m.MaltaLira, countries: [r.Malta], decimal_digits: 2, decimal_separator: ",", name: "Malta Lira", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Lm", symbol_native: "Lm", symbol_placement: "before", thousands_separator: "." }, MauritiusRupee: { code: m.MauritiusRupee, countries: [r.Mauritius], decimal_digits: 2, decimal_separator: ",", name: "Mauritius Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A8", symbol_native: "\u20A8", symbol_placement: "before", thousands_separator: "." }, MexicoPeso: { code: m.MexicoPeso, countries: [r.Mexico], decimal_digits: 2, decimal_separator: ",", name: "Mexico Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, MoldovaLeu: { code: m.MoldovaLeu, countries: [r.Moldova], decimal_digits: 2, decimal_separator: ",", name: "Moldova Leu", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "L", symbol_native: "L", symbol_placement: "before", thousands_separator: "." }, MongoliaTughrik: { code: m.MongoliaTughrik, countries: [r.Mongolia], decimal_digits: 2, decimal_separator: ",", name: "Mongolia Tughrik", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AE", symbol_native: "\u20AE", symbol_placement: "before", thousands_separator: "." }, MoroccoDirham: { code: m.MoroccoDirham, countries: [r.Morocco], decimal_digits: 2, decimal_separator: ",", name: "Morocco Dirham", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "DH", symbol_native: "DH", symbol_placement: "before", thousands_separator: "." }, MozambiqueMetical: { code: m.MozambiqueMetical, countries: [r.Mozambique], decimal_digits: 2, decimal_separator: ",", name: "Mozambique Metical", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "MT", symbol_native: "MT", symbol_placement: "before", thousands_separator: "." }, MyanmarKyat: { code: m.MyanmarKyat, countries: [r.Myanmar], decimal_digits: 0, decimal_separator: ",", name: "Myanmar Kyat", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "K", symbol_native: "K", symbol_placement: "before", thousands_separator: "." }, NamibiaDollar: { code: m.NamibiaDollar, countries: [r.Namibia], decimal_digits: 2, decimal_separator: ",", name: "Namibia Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, NepalRupee: { code: m.NepalRupee, countries: [r.Nepal], decimal_digits: 2, decimal_separator: ",", name: "Nepal Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A8", symbol_native: "\u20A8", symbol_placement: "before", thousands_separator: "." }, NetherlandsAntillesGuilder: { code: m.NetherlandsAntillesGuilder, countries: [r.NetherlandsAntilles], decimal_digits: 2, decimal_separator: ",", name: "Netherlands Antilles Guilder", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0192", symbol_native: "\u0192", symbol_placement: "before", thousands_separator: "." }, NewCaledoniaFranc: { code: m.NewCaledoniaFranc, countries: [r.NewCaledonia], decimal_digits: 0, decimal_separator: ",", name: "New Caledonia Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A3", symbol_native: "\u20A3", symbol_placement: "before", thousands_separator: "." }, NewZealandDollar: { code: m.NewZealandDollar, countries: [r.NewZealand], decimal_digits: 2, decimal_separator: ",", name: "New Zealand Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, NicaraguaCordoba: { code: m.NicaraguaCordoba, countries: [r.Nicaragua], decimal_digits: 2, decimal_separator: ",", name: "Nicaragua Cordoba", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "C$", symbol_native: "C$", symbol_placement: "before", thousands_separator: "." }, NigerCFAFranc: { code: m.NigerCFAFranc, countries: [r.Niger], decimal_digits: 0, decimal_separator: ",", name: "Niger CFA Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "CFA", symbol_native: "CFA", symbol_placement: "before", thousands_separator: "." }, NigeriaNaira: { code: m.NigeriaNaira, countries: [r.Nigeria], decimal_digits: 2, decimal_separator: ",", name: "Nigeria Naira", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A6", symbol_native: "\u20A6", symbol_placement: "before", thousands_separator: "." }, NorthKoreaWon: { code: m.NorthKoreaWon, countries: [r.NorthKorea], decimal_digits: 0, decimal_separator: ",", name: "North Korea Won", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A9", symbol_native: "\u20A9", symbol_placement: "before", thousands_separator: "." }, NorwayKrone: { code: m.NorwayKrone, countries: [r.Norway], decimal_digits: 2, decimal_separator: ",", name: "Norway Krone", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kr", symbol_native: "kr", symbol_placement: "before", thousands_separator: "." }, OmanRial: { code: m.OmanRial, countries: [r.Oman], decimal_digits: 3, decimal_separator: ",", name: "Oman Rial", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, PakistanRupee: { code: m.PakistanRupee, countries: [r.Pakistan], decimal_digits: 2, decimal_separator: ",", name: "Pakistan Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A8", symbol_native: "\u20A8", symbol_placement: "before", thousands_separator: "." }, PanamaBalboa: { code: m.PanamaBalboa, countries: [r.Panama], decimal_digits: 2, decimal_separator: ",", name: "Panama Balboa", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "B/.", symbol_native: "B/.", symbol_placement: "before", thousands_separator: "." }, ParaguayGuarani: { code: m.ParaguayGuarani, countries: [r.Paraguay], decimal_digits: 0, decimal_separator: ",", name: "Paraguay Guarani", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Gs", symbol_native: "Gs", symbol_placement: "before", thousands_separator: "." }, PeruvianNuevo: { code: m.PeruNuevo, countries: [r.Peru], decimal_digits: 2, decimal_separator: ",", name: "Peruvian Nuevo", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "S/.", symbol_native: "S/.", symbol_placement: "before", thousands_separator: "." }, PhilippinesPeso: { code: m.PhilippinesPeso, countries: [r.Philippines], decimal_digits: 2, decimal_separator: ",", name: "Philippines Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B1", symbol_native: "\u20B1", symbol_placement: "before", thousands_separator: "." }, PolandZloty: { code: m.PolandZloty, countries: [r.Poland], decimal_digits: 2, decimal_separator: ",", name: "Poland Zloty", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "z\u0142", symbol_native: "z\u0142", symbol_placement: "before", thousands_separator: "." }, QatarRial: { code: m.QatarRial, countries: [r.Qatar], decimal_digits: 2, decimal_separator: ",", name: "Qatar Rial", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, RomaniaNewLeu: { code: m.RomaniaNewLeu, countries: [r.Romania], decimal_digits: 2, decimal_separator: ",", name: "Romania New Leu", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "lei", symbol_native: "lei", symbol_placement: "before", thousands_separator: "." }, RussiaRuble: { code: m.RussiaRuble, countries: [r.RussianFederation], decimal_digits: 2, decimal_separator: ",", name: "Russia Ruble", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20BD", symbol_native: "\u20BD", symbol_placement: "before", thousands_separator: "." }, RwandaFranc: { code: m.RwandaFranc, countries: [r.Rwanda], decimal_digits: 0, decimal_separator: ",", name: "Rwanda Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "RF", symbol_native: "RF", symbol_placement: "before", thousands_separator: "." }, SaudiArabiaRiyal: { code: m.SaudiArabiaRiyal, countries: [r.SaudiArabia], decimal_digits: 2, decimal_separator: ",", name: "Saudi Arabia Riyal", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, SerbiaDinar: { code: m.SerbiaDinar, countries: [r.Serbia], decimal_digits: 0, decimal_separator: ",", name: "Serbia Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0414\u0438\u043D.", symbol_native: "\u0414\u0438\u043D.", symbol_placement: "before", thousands_separator: "." }, SeychellesRupee: { code: m.SeychellesRupee, countries: [r.Seychelles], decimal_digits: 2, decimal_separator: ",", name: "Seychelles Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A8", symbol_native: "\u20A8", symbol_placement: "before", thousands_separator: "." }, SingaporeDollar: { code: m.SingaporeDollar, countries: [r.Singapore], decimal_digits: 2, decimal_separator: ",", name: "Singapore Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, SlovakiaKoruna: { code: m.SlovakiaKoruna, countries: [r.Slovakia], decimal_digits: 2, decimal_separator: ",", name: "Slovakia Koruna", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Sk", symbol_native: "Sk", symbol_placement: "before", thousands_separator: "." }, SloveniaTolar: { code: m.SloveniaTolar, countries: [r.Slovenia], decimal_digits: 2, decimal_separator: ",", name: "Slovenia Tolar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "SIT", symbol_native: "SIT", symbol_placement: "before", thousands_separator: "." }, SolomonIslandsDollar: { code: m.SolomonIslandsDollar, countries: [r.SolomonIslands], decimal_digits: 2, decimal_separator: ",", name: "Solomon Islands Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, SomaliaShilling: { code: m.SomaliaShilling, countries: [r.Somalia], decimal_digits: 0, decimal_separator: ",", name: "Somalia Shilling", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "S", symbol_native: "S", symbol_placement: "before", thousands_separator: "." }, SouthAfricaRand: { code: m.SouthAfricaRand, countries: [r.SouthAfrica], decimal_digits: 2, decimal_separator: ",", name: "South Africa Rand", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "R", symbol_native: "R", symbol_placement: "before", thousands_separator: "." }, SouthKoreaWon: { code: m.SouthKoreaWon, countries: [r.SouthKorea], decimal_digits: 0, decimal_separator: ",", name: "South Korea Won", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A9", symbol_native: "\u20A9", symbol_placement: "before", thousands_separator: "." }, SriLankaRupee: { code: m.SriLankaRupee, countries: [r.SriLanka], decimal_digits: 2, decimal_separator: ",", name: "Sri Lanka Rupee", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20A8", symbol_native: "\u20A8", symbol_placement: "before", thousands_separator: "." }, SudanPound: { code: m.SudanPound, countries: [r.Sudan], decimal_digits: 2, decimal_separator: ",", name: "Sudan Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, SurinameDollar: { code: m.SurinameDollar, countries: [r.Suriname], decimal_digits: 2, decimal_separator: ",", name: "Suriname Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, SwazilandLilangeni: { code: m.SwazilandLilangeni, countries: [r.Swaziland], decimal_digits: 2, decimal_separator: ",", name: "Swaziland Lilangeni", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "E", symbol_native: "E", symbol_placement: "before", thousands_separator: "." }, SwedenKrona: { code: m.SwedenKrona, countries: [r.Sweden], decimal_digits: 2, decimal_separator: ",", name: "Sweden Krona", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "kr", symbol_native: "kr", symbol_placement: "before", thousands_separator: "." }, SwitzerlandFranc: { code: m.SwitzerlandFranc, countries: [r.Switzerland], decimal_digits: 2, decimal_separator: ",", name: "Switzerland Franc", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "CHF", symbol_native: "CHF", symbol_placement: "before", thousands_separator: "." }, SyriaPound: { code: m.SyriaPound, countries: [r.Syria], decimal_digits: 2, decimal_separator: ",", name: "Syria Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, TaiwanNewDollar: { code: m.TaiwanNewDollar, countries: [r.Taiwan], decimal_digits: 2, decimal_separator: ",", name: "Taiwan New Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "NT$", symbol_native: "NT$", symbol_placement: "before", thousands_separator: "." }, TajikistanSomoni: { code: m.TajikistanSomoni, countries: [r.Tajikistan], decimal_digits: 2, decimal_separator: ",", name: "Tajikistan Somoni", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "TJS", symbol_native: "TJS", symbol_placement: "before", thousands_separator: "." }, TanzaniaShilling: { code: m.TanzaniaShilling, countries: [r.Tanzania], decimal_digits: 2, decimal_separator: ",", name: "Tanzania Shilling", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "TSh", symbol_native: "TSh", symbol_placement: "before", thousands_separator: "." }, ThailandBaht: { code: m.ThailandBaht, countries: [r.Thailand], decimal_digits: 2, decimal_separator: ",", name: "Thailand Baht", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u0E3F", symbol_native: "\u0E3F", symbol_placement: "before", thousands_separator: "." }, TunisiaDinar: { code: m.TunisiaDinar, countries: [r.Tunisia], decimal_digits: 3, decimal_separator: ",", name: "Tunisia Dinar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u062F.\u062A", symbol_native: "\u062F.\u062A", symbol_placement: "before", thousands_separator: "." }, TurkeyLira: { code: m.TurkeyLira, countries: [r.Turkey], decimal_digits: 2, decimal_separator: ",", name: "Turkey Lira", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20BA", symbol_native: "\u20BA", symbol_placement: "before", thousands_separator: "." }, TurkmenistanManat: { code: m.TurkmenistanManat, countries: [r.Turkmenistan], decimal_digits: 2, decimal_separator: ",", name: "Turkmenistan Manat", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "m", symbol_native: "m", symbol_placement: "before", thousands_separator: "." }, UgandaShilling: { code: m.UgandaShilling, countries: [r.Uganda], decimal_digits: 0, decimal_separator: ",", name: "Uganda Shilling", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "USh", symbol_native: "USh", symbol_placement: "before", thousands_separator: "." }, UkraineHryvnia: { code: m.UkraineHryvnia, countries: [r.Ukraine], decimal_digits: 2, decimal_separator: ",", name: "Ukraine Hryvnia", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20B4", symbol_native: "\u20B4", symbol_placement: "before", thousands_separator: "." }, UnitedArabEmiratesDirham: { code: m.UnitedArabEmiratesDirham, countries: [r.UnitedArabEmirates], decimal_digits: 2, decimal_separator: ",", name: "United Arab Emirates Dirham", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u062F.\u0625", symbol_native: "\u062F.\u0625", symbol_placement: "before", thousands_separator: "." }, UnitedKingdomPound: { code: m.UnitedKingdomPound, countries: [r.UnitedKingdom], decimal_digits: 2, decimal_separator: ",", name: "United Kingdom Pound", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\xA3", symbol_native: "\xA3", symbol_placement: "before", thousands_separator: "." }, UnitedStatesDollar: { code: m.UnitedStatesDollar, countries: [r.UnitedStates], decimal_digits: 2, decimal_separator: ",", name: "United States Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$", symbol_native: "$", symbol_placement: "before", thousands_separator: "." }, UruguayPeso: { code: m.UruguayPeso, countries: [r.Uruguay], decimal_digits: 2, decimal_separator: ",", name: "Uruguay Peso", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "$U", symbol_native: "$U", symbol_placement: "before", thousands_separator: "." }, UzbekistanSom: { code: m.UzbekistanSom, countries: [r.Uzbekistan], decimal_digits: 2, decimal_separator: ",", name: "Uzbekistan Som", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "UZS", symbol_native: "UZS", symbol_placement: "before", thousands_separator: "." }, VanuatuVatu: { code: m.VanuatuVatu, countries: [r.Vanuatu], decimal_digits: 0, decimal_separator: ",", name: "Vanuatu Vatu", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "VT", symbol_native: "VT", symbol_placement: "before", thousands_separator: "." }, VenezuelaBolivar: { code: m.VenezuelaBolivar, countries: [r.Venezuela], decimal_digits: 2, decimal_separator: ",", name: "Venezuela Bolivar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "Bs. F", symbol_native: "Bs. F", symbol_placement: "before", thousands_separator: "." }, VietnamDong: { code: m.VietnamDong, countries: [r.Vietnam], decimal_digits: 0, decimal_separator: ",", name: "Vietnam Dong", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AB", symbol_native: "\u20AB", symbol_placement: "before", thousands_separator: "." }, YemenRial: { code: m.YemenRial, countries: [r.Yemen], decimal_digits: 2, decimal_separator: ",", name: "Yemen Rial", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\uFDFC", symbol_native: "\uFDFC", symbol_placement: "before", thousands_separator: "." }, ZambiaKwacha: { code: m.ZambiaKwacha, countries: [r.Zambia], decimal_digits: 2, decimal_separator: ",", name: "Zambia Kwacha", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "ZK", symbol_native: "ZK", symbol_placement: "before", thousands_separator: "." }, ZimbabweDollar: { code: m.ZimbabweDollar, countries: [r.Zimbabwe], decimal_digits: 2, decimal_separator: ",", name: "Zimbabwe Dollar", negative_sign: "-", positive_sign: "", rounding: 0, symbol: "\u20AB", symbol_native: "\u20AB", symbol_placement: "before", thousands_separator: "." } });
var Me;
(function(a2) {
  a2.Bitcoin = "BTC", a2.Ethereum = "ETH", a2.Litecoin = "LTC", a2.Ripple = "XRP", a2.Dash = "DASH", a2.Zcash = "ZEC", a2.Dogecoin = "DOGE", a2.Monero = "XMR", a2.BitcoinCash = "BCH", a2.EOS = "EOS", a2.Binance = "BNB", a2.Stellar = "XLM", a2.Cardano = "ADA", a2.IOTA = "IOTA", a2.Tezos = "XTZ", a2.NEO = "NEO", a2.TRON = "TRX", a2.EOSClassic = "EOSC", a2.Ontology = "ONT", a2.VeChain = "VEN", a2.QTUM = "QTUM", a2.Lisk = "LSK", a2.Waves = "WAVES", a2.OmiseGO = "OMG", a2.Zilliqa = "ZIL", a2.BitcoinGold = "BTG", a2.Decred = "DCR", a2.Stratis = "STRAT", a2.Populous = "PPT", a2.Augur = "REP", a2.Golem = "GNT", a2.Siacoin = "SC", a2.BasicAttentionToken = "BAT", a2.ZCoin = "XZC", a2.StratisHedged = "SNT", a2.VeChainHedged = "VEN", a2.PowerLedger = "POWR", a2.WavesHedged = "WAVE", a2.ZilliqaHedged = "ZRX", a2.BitcoinDiamond = "BCD", a2.DigiByte = "DGB", a2.DigiByteHedged = "DGB", a2.Bytecoin = "BCN", a2.BytecoinHedged = "BCN";
})(Me || (Me = {}));
var t;
(function(a2) {
  a2.Afrikaans = "af", a2.Albanian = "sq", a2.Amharic = "am", a2.Arabic = "ar", a2.Armenian = "hy", a2.Azerbaijani = "az", a2.Bashkir = "ba", a2.Basque = "eu", a2.Belarusian = "be", a2.Bengali = "bn", a2.Berber = "ber", a2.Bhutani = "dz", a2.Bihari = "bh", a2.Bislama = "bi", a2.Bosnian = "bs", a2.Breten = "br", a2.Bulgarian = "bg", a2.Burmese = "my", a2.Cantonese = "yue", a2.Catalan = "ca", a2.Chinese = "zh", a2.Chuvash = "cv", a2.Corsican = "co", a2.Croatian = "hr", a2.Czech = "cs", a2.Danish = "da", a2.Dari = "prs", a2.Divehi = "dv", a2.Dutch = "nl", a2.English = "en", a2.Esperanto = "eo", a2.Estonian = "et", a2.Faroese = "fo", a2.Farsi = "fa", a2.Filipino = "fil", a2.Finnish = "fi", a2.French = "fr", a2.Frisian = "fy", a2.Galician = "gl", a2.Georgian = "ka", a2.German = "de", a2.Greek = "el", a2.Greenlandic = "kl", a2.Gujarati = "gu", a2.Haitian = "ht", a2.Hausa = "ha", a2.Hebrew = "he", a2.Hindi = "hi", a2.Hungarian = "hu", a2.Icelandic = "is", a2.Igbo = "ig", a2.Indonesian = "id", a2.Irish = "ga", a2.Italian = "it", a2.Japanese = "ja", a2.Javanese = "jv", a2.Kannada = "kn", a2.Karelian = "krl", a2.Kazakh = "kk", a2.Khmer = "km", a2.Komi = "kv", a2.Konkani = "kok", a2.Korean = "ko", a2.Kurdish = "ku", a2.Kyrgyz = "ky", a2.Lao = "lo", a2.Latin = "la", a2.Latvian = "lv", a2.Lithuanian = "lt", a2.Luxembourgish = "lb", a2.Ossetian = "os", a2.Macedonian = "mk", a2.Malagasy = "mg", a2.Malay = "ms", a2.Malayalam = "ml", a2.Maltese = "mt", a2.Maori = "mi", a2.Marathi = "mr", a2.Mari = "mhr", a2.Mongolian = "mn", a2.Montenegrin = "me", a2.Nepali = "ne", a2.NorthernSotho = "nso", a2.Norwegian = "no", a2.NorwegianBokmal = "nb", a2.NorwegianNynorsk = "nn", a2.Oriya = "or", a2.Pashto = "ps", a2.Persian = "fa", a2.Polish = "pl", a2.Portuguese = "pt", a2.Punjabi = "pa", a2.Quechua = "qu", a2.Romanian = "ro", a2.Russian = "ru", a2.Sakha = "sah", a2.Sami = "se", a2.Samoan = "sm", a2.Sanskrit = "sa", a2.Scots = "gd", a2.Serbian = "sr", a2.SerbianCyrillic = "sr-Cyrl", a2.Sesotho = "st", a2.Shona = "sn", a2.Sindhi = "sd", a2.Sinhala = "si", a2.Slovak = "sk", a2.Slovenian = "sl", a2.Somali = "so", a2.Spanish = "es", a2.Sudanese = "su", a2.Sutu = "sx", a2.Swahili = "sw", a2.Swedish = "sv", a2.Syriac = "syr", a2.Tagalog = "tl", a2.Tajik = "tg", a2.Tamazight = "tmh", a2.Tamil = "ta", a2.Tatar = "tt", a2.Telugu = "te", a2.Thai = "th", a2.Tibetan = "bo", a2.Tsonga = "ts", a2.Tswana = "tn", a2.Turkish = "tr", a2.Turkmen = "tk", a2.Ukrainian = "uk", a2.Urdu = "ur", a2.Uzbek = "uz", a2.Vietnamese = "vi", a2.Welsh = "cy", a2.Xhosa = "xh", a2.Yiddish = "yi", a2.Yoruba = "yo", a2.Zulu = "zu";
})(t || (t = {}));
var e;
(function(a2) {
  a2.Afrikaans = "af", a2.AfrikaansSouthAfrica = "af-ZA", a2.Albanian = "sq", a2.AlbanianAlbania = "sq-AL", a2.Amharic = "am", a2.AmharicEthiopia = "am-ET", a2.Arabic = "ar", a2.ArabicAlgeria = "ar-DZ", a2.ArabicBahrain = "ar-BH", a2.ArabicEgypt = "ar-EG", a2.ArabicIraq = "ar-IQ", a2.ArabicJordan = "ar-JO", a2.ArabicKuwait = "ar-KW", a2.ArabicLebanon = "ar-LB", a2.ArabicLibya = "ar-LY", a2.ArabicMorocco = "ar-MA", a2.ArabicOman = "ar-OM", a2.ArabicQatar = "ar-QA", a2.ArabicSaudiArabia = "ar-SA", a2.ArabicSyria = "ar-SY", a2.ArabicTunisia = "ar-TN", a2.ArabicUnitedArabEmirates = "ar-AE", a2.ArabicYemen = "ar-YE", a2.Armenian = "hy", a2.ArmenianArmenia = "hy-AM", a2.Azerbaijani = "az", a2.AzerbaijaniAzerbaijan = "az-AZ", a2.AzerbaijaniCyrillicAzerbaijan = "az-Cyrl-AZ", a2.Bashkir = "ba", a2.Basque = "eu", a2.BasqueSpain = "eu-ES", a2.Belarusian = "be", a2.BelarusianBelarus = "be-BY", a2.Bengali = "bn", a2.BengaliBangladesh = "bn-BD", a2.BengaliIndia = "bn-IN", a2.Berber = "ber", a2.Bhutani = "dz", a2.BhutaniBhutan = "dz-BT", a2.Bosnian = "bs", a2.BosnianBosniaAndHerzegovina = "bs-BA", a2.Breton = "br", a2.Bulgarian = "bg", a2.BulgarianBosniaAndHerzegovina = "bg-BG", a2.BulgarianBulgaria = "bg-BG", a2.Burmese = "my", a2.BurmeseMyanmar = "my-MM", a2.Cantonese = "yue", a2.CantoneseHongKong = "yue-HK", a2.Catalan = "ca", a2.CatalanSpain = "ca-ES", a2.Chechen = "ce", a2.Cherokee = "chr", a2.Chinese = "zh", a2.ChineseSimplified = "zh-Hans", a2.ChineseSimplifiedChina = "zh-Hans-CN", a2.ChineseSimplifiedHongKong = "zh-Hans-HK", a2.ChineseSimplifiedMacau = "zh-Hans-MO", a2.ChineseSimplifiedSingapore = "zh-Hans-SG", a2.ChineseTraditional = "zh-Hant", a2.ChineseTraditionalHongKong = "zh-Hant-HK", a2.ChineseTraditionalMacau = "zh-Hant-MO", a2.ChineseTraditionalSingapore = "zh-Hant-SG", a2.ChineseTraditionalTaiwan = "zh-Hant-TW", a2.Chuvash = "cv", a2.CorsicanFrance = "co-FR", a2.Croatian = "hr", a2.CroatianBosniaAndHerzegovina = "hr-BA", a2.CroatianCroatia = "hr-HR", a2.Czech = "cs", a2.CzechCzechRepublic = "cs-CZ", a2.Danish = "da", a2.DanishDenmark = "da-DK", a2.Dari = "prs", a2.DariAfghanistan = "prs-AF", a2.Divehi = "dv", a2.DivehiMaldives = "dv-MV", a2.Dutch = "nl", a2.DutchBelgium = "nl-BE", a2.DutchNetherlands = "nl-NL", a2.English = "en", a2.EnglishAustralia = "en-AU", a2.EnglishBelgium = "en-BE", a2.EnglishBelize = "en-BZ", a2.EnglishCanada = "en-CA", a2.EnglishCaribbean = "en-029", a2.EnglishIreland = "en-IE", a2.EnglishJamaica = "en-JM", a2.EnglishNewZealand = "en-NZ", a2.EnglishPhilippines = "en-PH", a2.EnglishSingapore = "en-SG", a2.EnglishSouthAfrica = "en-ZA", a2.EnglishTrinidadAndTobago = "en-TT", a2.EnglishUnitedKingdom = "en-GB", a2.EnglishUnitedStates = "en-US", a2.EnglishZimbabwe = "en-ZW", a2.Esperanto = "eo", a2.Estonian = "et", a2.EstonianEstonia = "et-EE", a2.Faroese = "fo", a2.FaroeseFaroeIslands = "fo-FO", a2.Farsi = "fa", a2.FarsiIran = "fa-IR", a2.Filipino = "fil", a2.FilipinoPhilippines = "fil-PH", a2.Finnish = "fi", a2.FinnishFinland = "fi-FI", a2.French = "fr", a2.FrenchBelgium = "fr-BE", a2.FrenchCanada = "fr-CA", a2.FrenchFrance = "fr-FR", a2.FrenchLuxembourg = "fr-LU", a2.FrenchMonaco = "fr-MC", a2.FrenchReunion = "fr-RE", a2.FrenchSwitzerland = "fr-CH", a2.Frisian = "fy", a2.FrisianNetherlands = "fy-NL", a2.Galician = "gl", a2.GalicianSpain = "gl-ES", a2.Georgian = "ka", a2.GeorgianGeorgia = "ka-GE", a2.German = "de", a2.GermanAustria = "de-AT", a2.GermanBelgium = "de-BE", a2.GermanGermany = "de-DE", a2.GermanLiechtenstein = "de-LI", a2.GermanLuxembourg = "de-LU", a2.GermanSwitzerland = "de-CH", a2.Greenlandic = "kl", a2.GreenlandicGreenland = "kl-GL", a2.Greek = "el", a2.GreekGreece = "el-GR", a2.Gujarati = "gu", a2.GujaratiIndia = "gu-IN", a2.Haitian = "ht", a2.Hausa = "ha", a2.HausaGhana = "ha-GH", a2.HausaNiger = "ha-NE", a2.HausaNigeria = "ha-NG", a2.Hebrew = "he", a2.HebrewIsrael = "he-IL", a2.Hindi = "hi", a2.HindiIndia = "hi-IN", a2.Hungarian = "hu", a2.HungarianHungary = "hu-HU", a2.Icelandic = "is", a2.IcelandicIceland = "is-IS", a2.Igbo = "ig", a2.IgboNigeria = "ig-NG", a2.Indonesian = "id", a2.IndonesianIndonesia = "id-ID", a2.Irish = "ga", a2.IrishIreland = "ga-IE", a2.Italian = "it", a2.ItalianItaly = "it-IT", a2.ItalianSwitzerland = "it-CH", a2.Japanese = "ja", a2.JapaneseJapan = "ja-JP", a2.Javanese = "jv", a2.Kannada = "kn", a2.KannadaIndia = "kn-IN", a2.Karelian = "krl", a2.Kazakh = "kk", a2.KazakhKazakhstan = "kk-KZ", a2.Khmer = "km", a2.KhmerCambodia = "km-KH", a2.KinyarwandaRwanda = "rw-RW", a2.Komi = "kv", a2.Konkani = "kok", a2.KonkaniIndia = "kok-IN", a2.Korean = "ko", a2.KoreanSouthKorea = "ko-KR", a2.Kurdish = "ku", a2.KurdishIraq = "ku-IQ", a2.KurdishTurkey = "ku-TR", a2.Kyrgyz = "ky", a2.KyrgyzKyrgyzstan = "ky-KG", a2.Lao = "lo", a2.LaoLaos = "lo-LA", a2.Latin = "la", a2.Latvian = "lv", a2.LatvianLatvia = "lv-LV", a2.Lithuanian = "lt", a2.LithuanianLithuania = "lt-LT", a2.Luxembourgish = "lb", a2.LuxembourgishBelgium = "lb-LU", a2.LuxembourgishLuxembourg = "lb-LU", a2.Macedonian = "mk", a2.MacedonianNorthMacedonia = "mk-MK", a2.Malagasy = "mg", a2.Malay = "ms", a2.MalayBrunei = "ms-BN", a2.MalayIndia = "ms-IN", a2.MalayMalaysia = "ms-MY", a2.MalaySingapore = "ms-SG", a2.Malayalam = "ml", a2.MalayalamIndia = "ml-IN", a2.Maltese = "mt", a2.MalteseMalta = "mt-MT", a2.Maori = "mi", a2.MaoriNewZealand = "mi-NZ", a2.Marathi = "mr", a2.MarathiIndia = "mr-IN", a2.Mari = "chm", a2.Mongolian = "mn", a2.MongolianMongolia = "mn-MN", a2.Montenegrin = "me", a2.MontenegrinMontenegro = "me-ME", a2.Nepali = "ne", a2.NepaliNepal = "ne-NP", a2.NorthernSotho = "ns", a2.NorthernSothoSouthAfrica = "ns-ZA", a2.Norwegian = "nb", a2.NorwegianBokmalNorway = "nb-NO", a2.NorwegianNynorskNorway = "nn-NO", a2.Oriya = "or", a2.OriyaIndia = "or-IN", a2.Ossetian = "os", a2.Pashto = "ps", a2.PashtoAfghanistan = "ps-AF", a2.Persian = "fa", a2.PersianIran = "fa-IR", a2.Polish = "pl", a2.PolishPoland = "pl-PL", a2.Portuguese = "pt", a2.PortugueseBrazil = "pt-BR", a2.PortuguesePortugal = "pt-PT", a2.Punjabi = "pa", a2.PunjabiIndia = "pa-IN", a2.PunjabiPakistan = "pa-PK", a2.Quechua = "qu", a2.QuechuaBolivia = "qu-BO", a2.QuechuaEcuador = "qu-EC", a2.QuechuaPeru = "qu-PE", a2.Romanian = "ro", a2.RomanianRomania = "ro-RO", a2.Russian = "ru", a2.RussianKazakhstan = "ru-KZ", a2.RussianKyrgyzstan = "ru-KG", a2.RussianRussia = "ru-RU", a2.RussianUkraine = "ru-UA", a2.Sakha = "sah", a2.Sanskrit = "sa", a2.SanskritIndia = "sa-IN", a2.Sami = "se", a2.SamiNorway = "se-NO", a2.SamiSweden = "se-SE", a2.SamiFinland = "se-FI", a2.Samoan = "sm", a2.SamoanSamoa = "sm-WS", a2.Scots = "gd", a2.Serbian = "sr", a2.SerbianBosniaAndHerzegovina = "sr-BA", a2.SerbianSerbiaAndMontenegro = "sr-SP", a2.SerbianCyrillic = "sr-SP-Cyrl", a2.SerbianCyrillicBosniaAndHerzegovina = "sr-Cyrl-BA", a2.SerbianCyrillicSerbiaAndMontenegro = "sr-Cyrl-SP", a2.Sesotho = "st", a2.SesothoSouthAfrica = "st-ZA", a2.Shona = "sn", a2.ShonaZimbabwe = "sn-ZW", a2.Sindhi = "sd", a2.SindhiPakistan = "sd-PK", a2.Sinhala = "si", a2.SinhalaSriLanka = "si-LK", a2.Slovak = "sk", a2.SlovakSlovakia = "sk-SK", a2.Slovenian = "sl", a2.SlovenianSlovenia = "sl-SI", a2.Somali = "so", a2.SomaliSomalia = "so-SO", a2.Spanish = "es", a2.SpanishArgentina = "es-AR", a2.SpanishBolivia = "es-BO", a2.SpanishChile = "es-CL", a2.SpanishColombia = "es-CO", a2.SpanishCostaRica = "es-CR", a2.SpanishCuba = "es-CU", a2.SpanishDominicanRepublic = "es-DO", a2.SpanishEcuador = "es-EC", a2.SpanishEquatorialGuinea = "es-GQ", a2.SpanishElSalvador = "es-SV", a2.SpanishGuatemala = "es-GT", a2.SpanishHonduras = "es-HN", a2.SpanishMexico = "es-MX", a2.SpanishNicaragua = "es-NI", a2.SpanishPanama = "es-PA", a2.SpanishParaguay = "es-PY", a2.SpanishPeru = "es-PE", a2.SpanishPuertoRico = "es-PR", a2.SpanishSpain = "es-ES", a2.SpanishUnitedStates = "es-US", a2.SpanishUruguay = "es-UY", a2.SpanishVenezuela = "es-VE", a2.Sudanese = "su", a2.Sutu = "st", a2.SutuSouthAfrica = "st-ZA", a2.Swahili = "sw", a2.SwahiliKenya = "sw-KE", a2.Swedish = "sv", a2.SwedishFinland = "sv-FI", a2.SwedishSweden = "sv-SE", a2.Syriac = "syr", a2.SyriacSyria = "syr-SY", a2.Tajik = "tg", a2.TajikTajikistan = "tg-TJ", a2.Tagalog = "tl", a2.TagalogPhilippines = "tl-PH", a2.Tamazight = "tmh", a2.Tamil = "ta", a2.TamilIndia = "ta-IN", a2.Tatar = "tt", a2.Telugu = "te", a2.TeluguIndia = "te-IN", a2.Thai = "th", a2.ThaiThailand = "th-TH", a2.Tibetan = "bo", a2.TibetanBhutan = "bo-BT", a2.TibetanChina = "bo-CN", a2.TibetanIndia = "bo-IN", a2.Tsonga = "ts", a2.Tswana = "tn", a2.TswanaSouthAfrica = "tn-ZA", a2.Turkish = "tr", a2.TurkishTurkey = "tr-TR", a2.Turkmen = "tk", a2.Ukrainian = "uk", a2.UkrainianUkraine = "uk-UA", a2.Urdu = "ur", a2.UrduAfghanistan = "ur-AF", a2.UrduIndia = "ur-IN", a2.UrduPakistan = "ur-PK", a2.Uzbek = "uz", a2.UzbekCyrillic = "uz-Cyrl-UZ", a2.UzbekLatin = "uz-Latn-UZ", a2.UzbekUzbekistan = "uz-UZ", a2.Vietnamese = "vi", a2.VietnameseVietnam = "vi-VN", a2.Welsh = "cy", a2.WelshUnitedKingdom = "cy-GB", a2.Xhosa = "xh", a2.XhosaSouthAfrica = "xh-ZA", a2.Yiddish = "yi", a2.Yoruba = "yo", a2.YorubaNigeria = "yo-NG", a2.ZhuyinMandarinChina = "yue-Hant-CN", a2.Zulu = "zu", a2.ZuluSouthAfrica = "zu-ZA";
})(e || (e = {}));
var u;
(function(a2) {
  a2.AfricaAbidjan = "Africa/Abidjan", a2.AfricaAccra = "Africa/Accra", a2.AfricaAddisAbaba = "Africa/Addis_Ababa", a2.AfricaAlgiers = "Africa/Algiers", a2.AfricaAsmara = "Africa/Asmara", a2.AfricaBamako = "Africa/Bamako", a2.AfricaBangui = "Africa/Bangui", a2.AfricaBanjul = "Africa/Banjul", a2.AfricaBissau = "Africa/Bissau", a2.AfricaBlantyre = "Africa/Blantyre", a2.AfricaBrazzaville = "Africa/Brazzaville", a2.AfricaBujumbura = "Africa/Bujumbura", a2.AfricaCairo = "Africa/Cairo", a2.AfricaCasablanca = "Africa/Casablanca", a2.AfricaCeuta = "Africa/Ceuta", a2.AfricaConakry = "Africa/Conakry", a2.AfricaDakar = "Africa/Dakar", a2.AfricaDarEsSalaam = "Africa/Dar_es_Salaam", a2.AfricaDjibouti = "Africa/Djibouti", a2.AfricaDouala = "Africa/Douala", a2.AfricaElAaiun = "Africa/El_Aaiun", a2.AfricaFreetown = "Africa/Freetown", a2.AfricaGaborone = "Africa/Gaborone", a2.AfricaHarare = "Africa/Harare", a2.AfricaJohannesburg = "Africa/Johannesburg", a2.AfricaJuba = "Africa/Juba", a2.AfricaKampala = "Africa/Kampala", a2.AfricaKhartoum = "Africa/Khartoum", a2.AfricaKigali = "Africa/Kigali", a2.AfricaKinshasa = "Africa/Kinshasa", a2.AfricaLagos = "Africa/Lagos", a2.AfricaLibreville = "Africa/Libreville", a2.AfricaLome = "Africa/Lome", a2.AfricaLuanda = "Africa/Luanda", a2.AfricaLubumbashi = "Africa/Lubumbashi", a2.AfricaLusaka = "Africa/Lusaka", a2.AfricaMalabo = "Africa/Malabo", a2.AfricaMaputo = "Africa/Maputo", a2.AfricaMaseru = "Africa/Maseru", a2.AfricaMbabane = "Africa/Mbabane", a2.AfricaMogadishu = "Africa/Mogadishu", a2.AfricaMonrovia = "Africa/Monrovia", a2.AfricaNairobi = "Africa/Nairobi", a2.AfricaNdjamena = "Africa/Ndjamena", a2.AfricaNiamey = "Africa/Niamey", a2.AfricaNouakchott = "Africa/Nouakchott", a2.AfricaOuagadougou = "Africa/Ouagadougou", a2.AfricaPortoNovo = "Africa/Porto-Novo", a2.AfricaSaoTome = "Africa/Sao_Tome", a2.AfricaTripoli = "Africa/Tripoli", a2.AfricaTunis = "Africa/Tunis", a2.AfricaWindhoek = "Africa/Windhoek", a2.AmericaAdak = "America/Adak", a2.AmericaAnchorage = "America/Anchorage", a2.AmericaAnguilla = "America/Anguilla", a2.AmericaAntigua = "America/Antigua", a2.AmericaAraguaina = "America/Araguaina", a2.AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires", a2.AmericaArgentinaCatamarca = "America/Argentina/Catamarca", a2.AmericaArgentinaCordoba = "America/Argentina/Cordoba", a2.AmericaArgentinaJujuy = "America/Argentina/Jujuy", a2.AmericaArgentinaLaRioja = "America/Argentina/La_Rioja", a2.AmericaArgentinaMendoza = "America/Argentina/Mendoza", a2.AmericaArgentinaRioGallegos = "America/Argentina/Rio_Gallegos", a2.AmericaArgentinaSalta = "America/Argentina/Salta", a2.AmericaArgentinaSanJuan = "America/Argentina/San_Juan", a2.AmericaArgentinaSanLuis = "America/Argentina/San_Luis", a2.AmericaArgentinaTucuman = "America/Argentina/Tucuman", a2.AmericaArgentinaUshuaia = "America/Argentina/Ushuaia", a2.AmericaAruba = "America/Aruba", a2.AmericaAsuncion = "America/Asuncion", a2.AmericaAtikokan = "America/Atikokan", a2.AmericaAtka = "America/Atka", a2.AmericaBahia = "America/Bahia", a2.AmericaBahiaBanderas = "America/Bahia_Banderas", a2.AmericaBarbados = "America/Barbados", a2.AmericaBelem = "America/Belem", a2.AmericaBelize = "America/Belize", a2.AmericaBlancSablon = "America/Blanc-Sablon", a2.AmericaBoaVista = "America/Boa_Vista", a2.AmericaBogota = "America/Bogota", a2.AmericaBoise = "America/Boise", a2.AmericaCambridgeBay = "America/Cambridge_Bay", a2.AmericaCampoGrande = "America/Campo_Grande", a2.AmericaCancun = "America/Cancun", a2.AmericaCaracas = "America/Caracas", a2.AmericaCayenne = "America/Cayenne", a2.AmericaCayman = "America/Cayman", a2.AmericaChicago = "America/Chicago", a2.AmericaChihuahua = "America/Chihuahua", a2.AmericaCoralHarbour = "America/Coral_Harbour", a2.AmericaCordoba = "America/Cordoba", a2.AmericaCostaRica = "America/Costa_Rica", a2.AmericaCreston = "America/Creston", a2.AmericaCuiaba = "America/Cuiaba", a2.AmericaCuracao = "America/Curacao", a2.AmericaDanmarkshavn = "America/Danmarkshavn", a2.AmericaDawson = "America/Dawson", a2.AmericaDawsonCreek = "America/Dawson_Creek", a2.AmericaDenver = "America/Denver", a2.AmericaDetroit = "America/Detroit", a2.AmericaDominica = "America/Dominica", a2.AmericaEdmonton = "America/Edmonton", a2.AmericaEirunepe = "America/Eirunepe", a2.AmericaElSalvador = "America/El_Salvador", a2.AmericaFortaleza = "America/Fortaleza", a2.AmericaGlaceBay = "America/Glace_Bay", a2.AmericaGodthab = "America/Godthab", a2.AmericaGooseBay = "America/Goose_Bay", a2.AmericaGrandTurk = "America/Grand_Turk", a2.AmericaGrenada = "America/Grenada", a2.AmericaGuadeloupe = "America/Guadeloupe", a2.AmericaGuatemala = "America/Guatemala", a2.AmericaGuayaquil = "America/Guayaquil", a2.AmericaGuyana = "America/Guyana", a2.AmericaHalifax = "America/Halifax", a2.AmericaHavana = "America/Havana", a2.AmericaHermosillo = "America/Hermosillo", a2.AmericaIndianaIndianapolis = "America/Indiana/Indianapolis", a2.AmericaIndianaKnox = "America/Indiana/Knox", a2.AmericaIndianaMarengo = "America/Indiana/Marengo", a2.AmericaIndianaPetersburg = "America/Indiana/Petersburg", a2.AmericaIndianaTellCity = "America/Indiana/Tell_City", a2.AmericaIndianaVevay = "America/Indiana/Vevay", a2.AmericaIndianaVincennes = "America/Indiana/Vincennes", a2.AmericaIndianaWinamac = "America/Indiana/Winamac", a2.AmericaInuvik = "America/Inuvik", a2.AmericaIqaluit = "America/Iqaluit", a2.AmericaJamaica = "America/Jamaica", a2.AmericaJuneau = "America/Juneau", a2.AmericaKentuckyLouisville = "America/Kentucky/Louisville", a2.AmericaKentuckyMonticello = "America/Kentucky/Monticello", a2.AmericaKralendijk = "America/Kralendijk", a2.AmericaLaPaz = "America/La_Paz", a2.AmericaLima = "America/Lima", a2.AmericaLosAngeles = "America/Los_Angeles", a2.AmericaLouisville = "America/Louisville", a2.AmericaLowerPrinces = "America/Lower_Princes", a2.AmericaMaceio = "America/Maceio", a2.AmericaManagua = "America/Managua", a2.AmericaManaus = "America/Manaus", a2.AmericaMarigot = "America/Marigot", a2.AmericaMartinique = "America/Martinique", a2.AmericaMatamoros = "America/Matamoros", a2.AmericaMazatlan = "America/Mazatlan", a2.AmericaMenominee = "America/Menominee", a2.AmericaMerida = "America/Merida", a2.AmericaMetlakatla = "America/Metlakatla", a2.AmericaMexicoCity = "America/Mexico_City", a2.AmericaMiquelon = "America/Miquelon", a2.AmericaMoncton = "America/Moncton", a2.AmericaMonterrey = "America/Monterrey", a2.AmericaMontevideo = "America/Montevideo", a2.AmericaMontserrat = "America/Montserrat", a2.AmericaMontreal = "America/Montreal", a2.AmericaNassau = "America/Nassau", a2.AmericaNewYork = "America/New_York", a2.AmericaNipigon = "America/Nipigon", a2.AmericaNome = "America/Nome", a2.AmericaNoronha = "America/Noronha", a2.AmericaNorthDakotaBeulah = "America/North_Dakota/Beulah", a2.AmericaNorthDakotaCenter = "America/North_Dakota/Center", a2.AmericaNorthDakotaNewSalem = "America/North_Dakota/New_Salem", a2.AmericaOjinaga = "America/Ojinaga", a2.AmericaPanama = "America/Panama", a2.AmericaPangnirtung = "America/Pangnirtung", a2.AmericaParamaribo = "America/Paramaribo", a2.AmericaPhoenix = "America/Phoenix", a2.AmericaPortAuPrince = "America/Port-au-Prince", a2.AmericaPortOfSpain = "America/Port_of_Spain", a2.AmericaPortoVelho = "America/Porto_Velho", a2.AmericaPuertoRico = "America/Puerto_Rico", a2.AmericaRainyRiver = "America/Rainy_River", a2.AmericaRankinInlet = "America/Rankin_Inlet", a2.AmericaRecife = "America/Recife", a2.AmericaRegina = "America/Regina", a2.AmericaResolute = "America/Resolute", a2.AmericaRioBranco = "America/Rio_Branco", a2.AmericaSantaIsabel = "America/Santa_Isabel", a2.AmericaSantarem = "America/Santarem", a2.AmericaSantiago = "America/Santiago", a2.AmericaSantoDomingo = "America/Santo_Domingo", a2.AmericaSaoPaulo = "America/Sao_Paulo", a2.AmericaScoresbysund = "America/Scoresbysund", a2.AmericaShiprock = "America/Shiprock", a2.AmericaSitka = "America/Sitka", a2.AmericaStBarthelemy = "America/St_Barthelemy", a2.AmericaStJohns = "America/St_Johns", a2.AmericaStKitts = "America/St_Kitts", a2.AmericaStLucia = "America/St_Lucia", a2.AmericaStThomas = "America/St_Thomas", a2.AmericaStVincent = "America/St_Vincent", a2.AmericaSwiftCurrent = "America/Swift_Current", a2.AmericaTegucigalpa = "America/Tegucigalpa", a2.AmericaThule = "America/Thule", a2.AmericaThunderBay = "America/Thunder_Bay", a2.AmericaTijuana = "America/Tijuana", a2.AmericaToronto = "America/Toronto", a2.AmericaTortola = "America/Tortola", a2.AmericaVancouver = "America/Vancouver", a2.AmericaWhitehorse = "America/Whitehorse", a2.AmericaWinnipeg = "America/Winnipeg", a2.AmericaYakutat = "America/Yakutat", a2.AmericaYellowknife = "America/Yellowknife", a2.AntarcticaCasey = "Antarctica/Casey", a2.AntarcticaDavis = "Antarctica/Davis", a2.AntarcticaDumontDUrville = "Antarctica/DumontDUrville", a2.AntarcticaMacquarie = "Antarctica/Macquarie", a2.AntarcticaMawson = "Antarctica/Mawson", a2.AntarcticaMcMurdo = "Antarctica/McMurdo", a2.AntarcticaPalmer = "Antarctica/Palmer", a2.AntarcticaRothera = "Antarctica/Rothera", a2.AntarcticaSyowa = "Antarctica/Syowa", a2.AntarcticaTroll = "Antarctica/Troll", a2.AntarcticaVostok = "Antarctica/Vostok", a2.ArcticLongyearbyen = "Arctic/Longyearbyen", a2.AsiaAden = "Asia/Aden", a2.AsiaAlmaty = "Asia/Almaty", a2.AsiaAmman = "Asia/Amman", a2.AsiaAnadyr = "Asia/Anadyr", a2.AsiaAqtau = "Asia/Aqtau", a2.AsiaAqtobe = "Asia/Aqtobe", a2.AsiaAshgabat = "Asia/Ashgabat", a2.AsiaBaghdad = "Asia/Baghdad", a2.AsiaBahrain = "Asia/Bahrain", a2.AsiaBaku = "Asia/Baku", a2.AsiaBangkok = "Asia/Bangkok", a2.AsiaBarnaul = "Asia/Barnaul", a2.AsiaBeirut = "Asia/Beirut", a2.AsiaBishkek = "Asia/Bishkek", a2.AsiaBrunei = "Asia/Brunei", a2.AsiaChita = "Asia/Chita", a2.AsiaChoibalsan = "Asia/Choibalsan", a2.AsiaColombo = "Asia/Colombo", a2.AsiaDamascus = "Asia/Damascus", a2.AsiaDhaka = "Asia/Dhaka", a2.AsiaDili = "Asia/Dili", a2.AsiaDubai = "Asia/Dubai", a2.AsiaDushanbe = "Asia/Dushanbe", a2.AsiaFamagusta = "Asia/Famagusta", a2.AsiaGaza = "Asia/Gaza", a2.AsiaHebron = "Asia/Hebron", a2.AsiaHoChiMinh = "Asia/Ho_Chi_Minh", a2.AsiaHongKong = "Asia/Hong_Kong", a2.AsiaHovd = "Asia/Hovd", a2.AsiaIrkutsk = "Asia/Irkutsk", a2.AsiaJakarta = "Asia/Jakarta", a2.AsiaJayapura = "Asia/Jayapura", a2.AsiaJerusalem = "Asia/Jerusalem", a2.AsiaKabul = "Asia/Kabul", a2.AsiaKamchatka = "Asia/Kamchatka", a2.AsiaKarachi = "Asia/Karachi", a2.AsiaKathmandu = "Asia/Kathmandu", a2.AsiaKhandyga = "Asia/Khandyga", a2.AsiaKolkata = "Asia/Kolkata", a2.AsiaKrasnoyarsk = "Asia/Krasnoyarsk", a2.AsiaKualaLumpur = "Asia/Kuala_Lumpur", a2.AsiaKuching = "Asia/Kuching", a2.AsiaKuwait = "Asia/Kuwait", a2.AsiaMacau = "Asia/Macau", a2.AsiaMagadan = "Asia/Magadan", a2.AsiaMakassar = "Asia/Makassar", a2.AsiaManila = "Asia/Manila", a2.AsiaMuscat = "Asia/Muscat", a2.AsiaNicosia = "Asia/Nicosia", a2.AsiaNovokuznetsk = "Asia/Novokuznetsk", a2.AsiaNovosibirsk = "Asia/Novosibirsk", a2.AsiaOmsk = "Asia/Omsk", a2.AsiaOral = "Asia/Oral", a2.AsiaPhnomPenh = "Asia/Phnom_Penh", a2.AsiaPontianak = "Asia/Pontianak", a2.AsiaPyongyang = "Asia/Pyongyang", a2.AsiaQatar = "Asia/Qatar", a2.AsiaQyzylorda = "Asia/Qyzylorda", a2.AsiaRangoon = "Asia/Rangoon", a2.AsiaRiyadh = "Asia/Riyadh", a2.AsiaSakhalin = "Asia/Sakhalin", a2.AsiaSamarkand = "Asia/Samarkand", a2.AsiaSeoul = "Asia/Seoul", a2.AsiaShanghai = "Asia/Shanghai", a2.AsiaSingapore = "Asia/Singapore", a2.AsiaSrednekolymsk = "Asia/Srednekolymsk", a2.AsiaTaipei = "Asia/Taipei", a2.AsiaTashkent = "Asia/Tashkent", a2.AsiaTbilisi = "Asia/Tbilisi", a2.AsiaTehran = "Asia/Tehran", a2.AsiaThimphu = "Asia/Thimphu", a2.AsiaTokyo = "Asia/Tokyo", a2.AsiaTomsk = "Asia/Tomsk", a2.AsiaUlaanbaatar = "Asia/Ulaanbaatar", a2.AsiaUrumqi = "Asia/Urumqi", a2.AsiaUstNera = "Asia/Ust-Nera", a2.AsiaVientiane = "Asia/Vientiane", a2.AsiaVladivostok = "Asia/Vladivostok", a2.AsiaYakutsk = "Asia/Yakutsk", a2.AsiaYekaterinburg = "Asia/Yekaterinburg", a2.AsiaYerevan = "Asia/Yerevan", a2.AtlanticAzores = "Atlantic/Azores", a2.AtlanticBermuda = "Atlantic/Bermuda", a2.AtlanticCanary = "Atlantic/Canary", a2.AtlanticCapeVerde = "Atlantic/Cape_Verde", a2.AtlanticFaroe = "Atlantic/Faroe", a2.AtlanticMadeira = "Atlantic/Madeira", a2.AtlanticReykjavik = "Atlantic/Reykjavik", a2.AtlanticSouthGeorgia = "Atlantic/South_Georgia", a2.AtlanticStHelena = "Atlantic/St_Helena", a2.AtlanticStanley = "Atlantic/Stanley", a2.AustraliaAdelaide = "Australia/Adelaide", a2.AustraliaBrisbane = "Australia/Brisbane", a2.AustraliaBrokenHill = "Australia/Broken_Hill", a2.AustraliaCanberra = "Australia/Canberra", a2.AustraliaCurrie = "Australia/Currie", a2.AustraliaDarwin = "Australia/Darwin", a2.AustraliaEucla = "Australia/Eucla", a2.AustraliaHobart = "Australia/Hobart", a2.AustraliaLindeman = "Australia/Lindeman", a2.AustraliaLordHowe = "Australia/Lord_Howe", a2.AustraliaMelbourne = "Australia/Melbourne", a2.AustraliaPerth = "Australia/Perth", a2.AustraliaSydney = "Australia/Sydney", a2.EuropeAmsterdam = "Europe/Amsterdam", a2.EuropeAndorra = "Europe/Andorra", a2.EuropeAthens = "Europe/Athens", a2.EuropeBelgrade = "Europe/Belgrade", a2.EuropeBerlin = "Europe/Berlin", a2.EuropeBratislava = "Europe/Bratislava", a2.EuropeBrussels = "Europe/Brussels", a2.EuropeBucharest = "Europe/Bucharest", a2.EuropeBudapest = "Europe/Budapest", a2.EuropeBusingen = "Europe/Busingen", a2.EuropeChisinau = "Europe/Chisinau", a2.EuropeCopenhagen = "Europe/Copenhagen", a2.EuropeDublin = "Europe/Dublin", a2.EuropeGibraltar = "Europe/Gibraltar", a2.EuropeGuernsey = "Europe/Guernsey", a2.EuropeHelsinki = "Europe/Helsinki", a2.EuropeIsleOfMan = "Europe/Isle_of_Man", a2.EuropeIstanbul = "Europe/Istanbul", a2.EuropeJersey = "Europe/Jersey", a2.EuropeKaliningrad = "Europe/Kaliningrad", a2.EuropeKiev = "Europe/Kiev", a2.EuropeKirov = "Europe/Kirov", a2.EuropeLisbon = "Europe/Lisbon", a2.EuropeLjubljana = "Europe/Ljubljana", a2.EuropeLondon = "Europe/London", a2.EuropeLuxembourg = "Europe/Luxembourg", a2.EuropeMadrid = "Europe/Madrid", a2.EuropeMalta = "Europe/Malta", a2.EuropeMariehamn = "Europe/Mariehamn", a2.EuropeMinsk = "Europe/Minsk", a2.EuropeMonaco = "Europe/Monaco", a2.EuropeMoscow = "Europe/Moscow", a2.EuropeOslo = "Europe/Oslo", a2.EuropeParis = "Europe/Paris", a2.EuropePodgorica = "Europe/Podgorica", a2.EuropePrague = "Europe/Prague", a2.EuropeRiga = "Europe/Riga", a2.EuropeRome = "Europe/Rome", a2.EuropeSamara = "Europe/Samara", a2.EuropeSanMarino = "Europe/San_Marino", a2.EuropeSarajevo = "Europe/Sarajevo", a2.EuropeSimferopol = "Europe/Simferopol", a2.EuropeSkopje = "Europe/Skopje", a2.EuropeSofia = "Europe/Sofia", a2.EuropeStockholm = "Europe/Stockholm", a2.EuropeTallinn = "Europe/Tallinn", a2.EuropeTirane = "Europe/Tirane", a2.EuropeUzhgorod = "Europe/Uzhgorod", a2.EuropeVaduz = "Europe/Vaduz", a2.EuropeVatican = "Europe/Vatican", a2.EuropeVienna = "Europe/Vienna", a2.EuropeVilnius = "Europe/Vilnius", a2.EuropeVolgograd = "Europe/Volgograd", a2.EuropeWarsaw = "Europe/Warsaw", a2.EuropeZagreb = "Europe/Zagreb", a2.EuropeZaporozhye = "Europe/Zaporozhye", a2.EuropeZurich = "Europe/Zurich", a2.GMT = "GMT", a2.IndianAntananarivo = "Indian/Antananarivo", a2.IndianChagos = "Indian/Chagos", a2.IndianChristmas = "Indian/Christmas", a2.IndianCocos = "Indian/Cocos", a2.IndianComoro = "Indian/Comoro", a2.IndianKerguelen = "Indian/Kerguelen", a2.IndianMahe = "Indian/Mahe", a2.IndianMaldives = "Indian/Maldives", a2.IndianMauritius = "Indian/Mauritius", a2.IndianMayotte = "Indian/Mayotte", a2.IndianReunion = "Indian/Reunion", a2.PacificApia = "Pacific/Apia", a2.PacificAuckland = "Pacific/Auckland", a2.PacificBougainville = "Pacific/Bougainville", a2.PacificChatham = "Pacific/Chatham", a2.PacificChuuk = "Pacific/Chuuk", a2.PacificEaster = "Pacific/Easter", a2.PacificEfate = "Pacific/Efate", a2.PacificEnderbury = "Pacific/Enderbury", a2.PacificFakaofo = "Pacific/Fakaofo", a2.PacificFiji = "Pacific/Fiji", a2.PacificFunafuti = "Pacific/Funafuti", a2.PacificGalapagos = "Pacific/Galapagos", a2.PacificGambier = "Pacific/Gambier", a2.PacificGuadalcanal = "Pacific/Guadalcanal", a2.PacificGuam = "Pacific/Guam", a2.PacificHonolulu = "Pacific/Honolulu", a2.PacificJohnston = "Pacific/Johnston", a2.PacificKiritimati = "Pacific/Kiritimati", a2.PacificKosrae = "Pacific/Kosrae", a2.PacificKwajalein = "Pacific/Kwajalein", a2.PacificMajuro = "Pacific/Majuro", a2.PacificMarquesas = "Pacific/Marquesas", a2.PacificMidway = "Pacific/Midway", a2.PacificNauru = "Pacific/Nauru", a2.PacificNiue = "Pacific/Niue", a2.PacificNorfolk = "Pacific/Norfolk", a2.PacificNoumea = "Pacific/Noumea", a2.PacificPagoPago = "Pacific/Pago_Pago", a2.PacificPalau = "Pacific/Palau", a2.PacificPitcairn = "Pacific/Pitcairn", a2.PacificPohnpei = "Pacific/Pohnpei", a2.PacificPonape = "Pacific/Ponape", a2.PacificPortMoresby = "Pacific/Port_Moresby", a2.PacificRarotonga = "Pacific/Rarotonga", a2.PacificSaipan = "Pacific/Saipan", a2.PacificSamoa = "Pacific/Samoa", a2.PacificTahiti = "Pacific/Tahiti", a2.PacificTarawa = "Pacific/Tarawa", a2.PacificTongatapu = "Pacific/Tongatapu", a2.PacificTruk = "Pacific/Truk", a2.PacificWake = "Pacific/Wake", a2.PacificWallis = "Pacific/Wallis", a2.PacificYap = "Pacific/Yap";
})(u || (u = {}));
var n;
(function(a2) {
  a2.UTC_MINUS_12 = "UTC-12", a2.UTC_MINUS_11_30 = "UTC-11:30", a2.UTC_MINUS_11 = "UTC-11", a2.UTC_MINUS_10_30 = "UTC-10:30", a2.UTC_MINUS_10 = "UTC-10", a2.UTC_MINUS_9_30 = "UTC-9:30", a2.UTC_MINUS_9 = "UTC-09", a2.UTC_MINUS_8_45 = "UTC-8:45", a2.UTC_MINUS_8 = "UTC-08", a2.UTC_MINUS_7 = "UTC-07", a2.UTC_MINUS_6_30 = "UTC-6:30", a2.UTC_MINUS_6 = "UTC-06", a2.UTC_MINUS_5_45 = "UTC-5:45", a2.UTC_MINUS_5_30 = "UTC-5:30", a2.UTC_MINUS_5 = "UTC-05", a2.UTC_MINUS_4_30 = "UTC-4:30", a2.UTC_MINUS_4 = "UTC-04", a2.UTC_MINUS_3_30 = "UTC-3:30", a2.UTC_MINUS_3 = "UTC-03", a2.UTC_MINUS_2_30 = "UTC-2:30", a2.UTC_MINUS_2 = "UTC-02", a2.UTC_MINUS_1 = "UTC-01", a2.UTC_0 = "UTC+00", a2.UTC_PLUS_1 = "UTC+01", a2.UTC_PLUS_2 = "UTC+02", a2.UTC_PLUS_3 = "UTC+03", a2.UTC_PLUS_3_30 = "UTC+3:30", a2.UTC_PLUS_4 = "UTC+04", a2.UTC_PLUS_4_30 = "UTC+4:30", a2.UTC_PLUS_5 = "UTC+05", a2.UTC_PLUS_5_30 = "UTC+5:30", a2.UTC_PLUS_5_45 = "UTC+5:45", a2.UTC_PLUS_6 = "UTC+06", a2.UTC_PLUS_6_30 = "UTC+6:30", a2.UTC_PLUS_7 = "UTC+07", a2.UTC_PLUS_8 = "UTC+08", a2.UTC_PLUS_8_45 = "UTC+8:45", a2.UTC_PLUS_9 = "UTC+09", a2.UTC_PLUS_9_30 = "UTC+9:30", a2.UTC_PLUS_10 = "UTC+10", a2.UTC_PLUS_10_30 = "UTC+10:30", a2.UTC_PLUS_11 = "UTC+11", a2.UTC_PLUS_11_30 = "UTC+11:30", a2.UTC_PLUS_12 = "UTC+12", a2.UTC_PLUS_12_45 = "UTC+12:45", a2.UTC_PLUS_13 = "UTC+13", a2.UTC_PLUS_13_45 = "UTC+13:45", a2.UTC_PLUS_14 = "UTC+14";
})(n || (n = {}));
var s;
(function(a2) {
  a2.AcreTime = "ACT", a2.AfghanistanTime = "AFT", a2.AIXCentralEuropeanTime = "DFT", a2.AlaskaDaylightTime = "AKDT", a2.AlaskaStandardTime = "AKST", a2.AlmaAtaTime = "ALMT", a2.AmazonSummerTime = "AMST", a2.AmazonTime = "AMT", a2.AnadyrTime = "ANAT", a2.AqtobeTime = "AQTT", a2.ArabiaStandardTime = "AST", a2.ArgentinaTime = "ART", a2.ArmeniaTime = "AMT", a2.ASEANCommonTime = "ASEAN", a2.AtlanticDaylightTime = "ADT", a2.AtlanticStandardTime = "AST", a2.AustralianCentralDaylightSavingTime = "ACDT", a2.AustralianCentralStandardTime = "ACST", a2.AustralianCentralWesternStandardTime = "ACWST", a2.AustralianEasternDaylightSavingTime = "AEDT", a2.AustralianEasternStandardTime = "AEST", a2.AustralianEasternTime = "AET", a2.AustralianWesternStandardTime = "AWST", a2.AzerbaijanTime = "AZT", a2.AzoresStandardTime = "AZOT", a2.AzoresSummerTime = "AZOST", a2.BakerIslandTime = "BIT", a2.BangladeshStandardTime = "BST", a2.BhutanTime = "BTT", a2.BoliviaTime = "BOT", a2.BougainvilleStandardTime = "BST", a2.BrasiliaSummerTime = "BRST", a2.BrasiliaTime = "BRT", a2.BritishIndianOceanTime = "BIOT", a2.BritishSummerTime = "BST", a2.BruneiTime = "BNT", a2.CapeVerdeTime = "CVT", a2.CentralAfricaTime = "CAT", a2.CentralDaylightTime = "CDT", a2.CentralEuropeanSummerTime = "CEST", a2.CentralEuropeanTime = "CET", a2.CentralIndonesiaTime = "WITA", a2.CentralStandardTime = "CST", a2.CentralTime = "CT", a2.CentralWesternStandardTime = "CWST", a2.ChamorroStandardTime = "CHST", a2.ChathamDaylightTime = "CHADT", a2.ChathamStandardTime = "CHAST", a2.ChileStandardTime = "CLT", a2.ChileSummerTime = "CLST", a2.ChinaStandardTime = "CST", a2.ChoibalsanStandardTime = "CHOT", a2.ChoibalsanSummerTime = "CHOST", a2.ChristmasIslandTime = "CXT", a2.ChuukTime = "CHUT", a2.ClipptertonIslandStandardTime = "CIST", a2.CocosIslandsTime = "CCT", a2.ColombiaSummerTime = "COST", a2.ColombiaTime = "COT", a2.CookIslandTime = "CKT", a2.CoordinatedUniversalTime = "UTC", a2.CubaDaylightTime = "CDT", a2.CubaStandardTime = "CST", a2.DavisTime = "DAVT", a2.DumontDUrvilleTime = "DDUT", a2.EastAfricaTime = "EAT", a2.EasterIslandStandardTime = "EAST", a2.EasterIslandSummerTime = "EASST", a2.EasternCaribbeanTime = "ECT", a2.EasternDaylightTime = "EDT", a2.EasternEuropeanSummerTime = "EEST", a2.EasternEuropeanTime = "EET", a2.EasternGreenlandSummerTime = "EGST", a2.EasternGreenlandTime = "EGT", a2.EasternIndonesianTime = "WIT", a2.EasternStandardTime = "EST", a2.EasternTime = "ET", a2.EcuadorTime = "ECT", a2.FalklandIslandsSummerTime = "FKST", a2.FalklandIslandsTime = "FKT", a2.FernandoDeNoronhaTime = "FNT", a2.FijiTime = "FJT", a2.FrenchGuianaTime = "GFT", a2.FrenchSouthernAndAntarcticTime = "TFT", a2.FurtherEasternEuropeanTime = "FET", a2.GalapagosTime = "GALT", a2.GambierIslandTime = "GIT", a2.GambierIslandsTime = "GAMT", a2.GeorgiaStandardTime = "GET", a2.GilbertIslandTime = "GILT", a2.GreenwichMeanTime = "GMT", a2.GulfStandardTime = "GST", a2.GuyanaTime = "GYT", a2.HawaiiAleutianDaylightTime = "HDT", a2.HawaiiAleutianStandardTime = "HST", a2.HeardAndMcDonaldIslandsTime = "HMT", a2.HeureAvanceeDEuropeCentraleTime = "HAEC", a2.HongKongTime = "HKT", a2.HovdSummerTime = "HOVST", a2.HovdTime = "HOVT", a2.IndianOceanTime = "IOT", a2.IndianStandardTime = "IST", a2.IndochinaTime = "ICT", a2.InternationalDayLineWestTime = "IDLW", a2.IranDaylightTime = "IRDT", a2.IranStandardTime = "IRST", a2.IrishStandardTime = "IST", a2.IrkutskSummerTime = "IRKST", a2.IrkutskTime = "IRKT", a2.IsraelDaylightTime = "IDT", a2.IsraelStandardTime = "IST", a2.JapanStandardTime = "JST", a2.KaliningradTime = "KALT", a2.KamchatkaTime = "KAMT", a2.KoreaStandardTime = "KST", a2.KosraeTime = "KOST", a2.KrasnoyarskSummerTime = "KRAST", a2.KrasnoyarskTime = "KRAT", a2.KyrgyzstanTime = "KGT", a2.LineIslandsTime = "LINT", a2.KazakhstanStandardTime = "KAST", a2.LordHoweStandardTime = "LHST", a2.LordHoweSummerTime = "LHST", a2.MacquarieIslandStationTime = "MIST", a2.MagadanTime = "MAGT", a2.MalaysiaStandardTime = "MST", a2.MalaysiaTime = "MYT", a2.MaldivesTime = "MVT", a2.MarquesasIslandsTime = "MART", a2.MarshallIslandsTime = "MHT", a2.MauritiusTime = "MUT", a2.MawsonStationTime = "MAWT", a2.MiddleEuropeanSummerTime = "MEDT", a2.MiddleEuropeanTime = "MET", a2.MoscowTime = "MSK", a2.MountainDaylightTime = "MDT", a2.MountainStandardTime = "MST", a2.MyanmarStandardTime = "MMT", a2.NepalTime = "NCT", a2.NauruTime = "NRT", a2.NewCaledoniaTime = "NCT", a2.NewZealandDaylightTime = "NZDT", a2.NewZealandStandardTime = "NZST", a2.NewfoundlandDaylightTime = "NDT", a2.NewfoundlandStandardTime = "NST", a2.NewfoundlandTime = "NT", a2.NiueTime = "NUT", a2.NorfolkIslandTime = "NFT", a2.NovosibirskTime = "NOVT", a2.OmskTime = "OMST", a2.OralTime = "ORAT", a2.PacificDaylightTime = "PDT", a2.PacificStandardTime = "PST", a2.PakistanStandardTime = "PKT", a2.PalauTime = "PWT", a2.PapuaNewGuineaTime = "PGT", a2.ParaguaySummerTime = "PYST", a2.ParaguayTime = "PYT", a2.PeruTime = "PET", a2.PhilippineStandardTime = "PHST", a2.PhilippineTime = "PHT", a2.PhoenixIslandTime = "PHOT", a2.PitcairnTime = "PST", a2.PohnpeiStandardTime = "PONT", a2.ReunionTime = "RET", a2.RotheraResearchStationTime = "ROTT", a2.SaintPierreAndMiquelonDaylightTime = "PMDT", a2.SaintPierreAndMiquelonStandardTime = "PMST", a2.SakhalinIslandTime = "SAKT", a2.SamaraTime = "SAMT", a2.SamoaDaylightTime = "SDT", a2.SamoaStandardTime = "SST", a2.SeychellesTime = "SCT", a2.ShowaStationTime = "SYOT", a2.SingaporeStandardTime = "SST", a2.SingaporeTime = "SGT", a2.SolomonIslandsTime = "SBT", a2.SouthAfricanStandardTime = "SAST", a2.SouthGeorgiaAndTheSouthSandwichIslandsTime = "GST", a2.SrednekolymskTime = "SRET", a2.SriLankaStandardTime = "SLST", a2.SurinameTime = "SRT", a2.TahitiTime = "TAHT", a2.TajikistanTime = "TJT", a2.ThailandStandardTime = "THA", a2.TimorLesteTime = "TLT", a2.TokelauTime = "TKT", a2.TongaTime = "TOT", a2.TurkeyTime = "TRT", a2.TurkmenistanTime = "TMT", a2.TuvaluTime = "TVT", a2.UlaanbaatarStandardTime = "ULAT", a2.UlaanbaatarSummerTime = "ULAST", a2.UruguayStandardTime = "UYT", a2.UruguaySummerTime = "UYST", a2.UzbekistanTime = "UZT", a2.VanuatuTime = "VUT", a2.VenezuelaStandardTime = "VET", a2.VladivostokTime = "VLAT", a2.VolgogradTime = "VOLT", a2.VostokStationTime = "VOST", a2.WakeIslandTime = "WAKT", a2.WestAfricaSummerTime = "WAST", a2.WestAfricaTime = "WAT", a2.WestGreenlandSummerTime = "WGST", a2.WestGreenlandTime = "WGT", a2.WestKazakhstanTime = "WKT", a2.WesternEuropeanSummerTime = "WEDT", a2.WesternEuropeanTime = "WET", a2.WesternIndonesianTime = "WIT", a2.WesternStandardTime = "WST", a2.YakutskTime = "YAKT", a2.YekaterinburgTime = "YEKT";
})(s || (s = {}));
({ dst: { is: false, uses: true }, id: s.AcreTime, name: "Acre Time", offset: n.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: s.AfghanistanTime, name: "Afghanistan Time", offset: n.UTC_PLUS_4_30 });
({ dst: { is: false, uses: true }, id: s.AIXCentralEuropeanTime, name: "AIX Central European Time", offset: n.UTC_PLUS_1 });
({ dst: { is: true, uses: true }, id: s.AlaskaDaylightTime, name: "Alaska Daylight Time", offset: n.UTC_MINUS_8 });
({ dst: { is: false, uses: true }, id: s.AlaskaStandardTime, name: "Alaska Standard Time", offset: n.UTC_MINUS_9 });
({ dst: { is: false, uses: true }, id: s.AlmaAtaTime, name: "Alma-Ata Time", offset: n.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: s.AmazonSummerTime, name: "Amazon Summer Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.AmazonTime, name: "Amazon Time", offset: n.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: s.AnadyrTime, name: "Anadyr Time", offset: n.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: s.AqtobeTime, name: "Aqtobe Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.ArabiaStandardTime, name: "Arabia Standard Time", offset: n.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: s.ArgentinaTime, name: "Argentina Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.ArmeniaTime, name: "Armenia Time", offset: n.UTC_PLUS_4 });
({ dst: { is: true, uses: true }, id: s.AtlanticDaylightTime, name: "Atlantic Daylight Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.AtlanticStandardTime, name: "Atlantic Standard Time", offset: n.UTC_MINUS_4 });
({ dst: { is: true, uses: true }, id: s.AustralianCentralDaylightSavingTime, name: "Australian Central Daylight Saving Time", offset: n.UTC_PLUS_10_30 });
({ dst: { is: false, uses: true }, id: s.AustralianCentralStandardTime, name: "Australian Central Standard Time", offset: n.UTC_PLUS_9_30 });
({ dst: { is: false, uses: true }, id: s.AustralianCentralWesternStandardTime, name: "Australian Central Western Standard Time", offset: n.UTC_PLUS_8_45 });
({ dst: { is: true, uses: true }, id: s.AustralianEasternDaylightSavingTime, name: "Australian Eastern Daylight Saving Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.AustralianEasternStandardTime, name: "Australian Eastern Standard Time", offset: n.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: s.AustralianEasternTime, name: "Australian Eastern Time", offset: n.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: s.AustralianWesternStandardTime, name: "Australian Western Standard Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.AzerbaijanTime, name: "Azerbaijan Time", offset: n.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: s.AzoresStandardTime, name: "Azores Standard Time", offset: n.UTC_MINUS_1 });
({ dst: { is: true, uses: true }, id: s.AzoresSummerTime, name: "Azores Summer Time", offset: n.UTC_0 });
({ dst: { is: false, uses: true }, id: s.BakerIslandTime, name: "Baker Island Time", offset: n.UTC_MINUS_12 });
({ dst: { is: false, uses: true }, id: s.BangladeshStandardTime, name: "Bangladesh Standard Time", offset: n.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: s.BhutanTime, name: "Bhutan Time", offset: n.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: s.BoliviaTime, name: "Bolivia Time", offset: n.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: s.BougainvilleStandardTime, name: "Bougainville Standard Time", offset: n.UTC_PLUS_11 });
({ dst: { is: true, uses: true }, id: s.BrasiliaSummerTime, name: "Brasilia Summer Time", offset: n.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: s.BrasiliaTime, name: "Brasilia Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.BritishIndianOceanTime, name: "British Indian Ocean Time", offset: n.UTC_PLUS_6 });
({ dst: { is: true, uses: true }, id: s.BritishSummerTime, name: "British Summer Time", offset: n.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: s.BruneiTime, name: "Brunei Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.CapeVerdeTime, name: "Cape Verde Time", offset: n.UTC_MINUS_1 });
({ dst: { is: false, uses: true }, id: s.CentralAfricaTime, name: "Central Africa Time", offset: n.UTC_PLUS_2 });
({ dst: { is: true, uses: true }, id: s.CentralDaylightTime, name: "Central Daylight Time", offset: n.UTC_MINUS_5 });
({ dst: { is: true, uses: true }, id: s.CentralEuropeanSummerTime, name: "Central European Summer Time", offset: n.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: s.CentralEuropeanTime, name: "Central European Time", offset: n.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: s.CentralIndonesiaTime, name: "Central Indonesia Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.CentralStandardTime, name: "Central Standard Time", offset: n.UTC_MINUS_6 });
({ dst: { is: false, uses: true }, id: s.CentralTime, name: "Central Time", offset: n.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: s.CentralWesternStandardTime, name: "Central Western Standard Time", offset: n.UTC_PLUS_8_45 });
({ dst: { is: false, uses: true }, id: s.ChamorroStandardTime, name: "Chamorro Standard Time", offset: n.UTC_PLUS_10 });
({ dst: { is: true, uses: true }, id: s.ChathamDaylightTime, name: "Chatham Daylight Time", offset: n.UTC_PLUS_13_45 });
({ dst: { is: false, uses: true }, id: s.ChathamStandardTime, name: "Chatham Standard Time", offset: n.UTC_PLUS_12_45 });
({ dst: { is: false, uses: true }, id: s.ChileStandardTime, name: "Chile Standard Time", offset: n.UTC_MINUS_4 });
({ dst: { is: true, uses: true }, id: s.ChileSummerTime, name: "Chile Summer Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.ChinaStandardTime, name: "China Standard Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.ChoibalsanStandardTime, name: "Choibalsan Standard Time", offset: n.UTC_PLUS_8 });
({ dst: { is: true, uses: true }, id: s.ChoibalsanSummerTime, name: "Choibalsan Summer Time", offset: n.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: s.ChristmasIslandTime, name: "Christmas Island Time", offset: n.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: s.ChuukTime, name: "Chuuk Time", offset: n.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: s.ClipptertonIslandStandardTime, name: "Clippterton Island Standard Time", offset: n.UTC_MINUS_8 });
({ dst: { is: false, uses: true }, id: s.CocosIslandsTime, name: "Cocos Standard Time", offset: n.UTC_PLUS_6_30 });
({ dst: { is: true, uses: true }, id: s.ColombiaSummerTime, name: "Colombia Summer Time", offset: n.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: s.ColombiaTime, name: "Colombia Time", offset: n.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: s.CookIslandTime, name: "Cook Island Time", offset: n.UTC_MINUS_10 });
({ dst: { is: false, uses: true }, id: s.CoordinatedUniversalTime, name: "Coordinated Universal Time", offset: n.UTC_0 });
({ dst: { is: true, uses: true }, id: s.CubaDaylightTime, name: "Cuba Daylight Time", offset: n.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: s.CubaStandardTime, name: "Cuba Standard Time", offset: n.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: s.DavisTime, name: "Davis Time", offset: n.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: s.DumontDUrvilleTime, name: "Dumont D'Urville Time", offset: n.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: s.EastAfricaTime, name: "East Africa Time", offset: n.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: s.EasterIslandStandardTime, name: "Easter Island Standard Time", offset: n.UTC_MINUS_6 });
({ dst: { is: true, uses: true }, id: s.EasterIslandSummerTime, name: "Easter Island Summer Time", offset: n.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: s.EasternCaribbeanTime, name: "Eastern Caribbean Time", offset: n.UTC_MINUS_4 });
({ dst: { is: true, uses: true }, id: s.EasternDaylightTime, name: "Eastern Daylight Time", offset: n.UTC_MINUS_4 });
({ dst: { is: true, uses: true }, id: s.EasternEuropeanSummerTime, name: "Eastern European Summer Time", offset: n.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: s.EasternEuropeanTime, name: "Eastern European Time", offset: n.UTC_PLUS_2 });
({ dst: { is: true, uses: true }, id: s.EasternGreenlandSummerTime, name: "Eastern Greenland Summer Time", offset: n.UTC_0 });
({ dst: { is: false, uses: true }, id: s.EasternGreenlandTime, name: "Eastern Greenland Time", offset: n.UTC_MINUS_1 });
({ dst: { is: false, uses: true }, id: s.EasternIndonesianTime, name: "Eastern Indonesian Time", offset: n.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: s.EasternStandardTime, name: "Eastern Standard Time", offset: n.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: s.EasternTime, name: "Eastern Time", offset: n.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: s.EcuadorTime, name: "Ecuador Time", offset: n.UTC_MINUS_5 });
({ dst: { is: true, uses: true }, id: s.FalklandIslandsSummerTime, name: "Falkland Islands Summer Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.FalklandIslandsTime, name: "Falkland Islands Time", offset: n.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: s.FernandoDeNoronhaTime, name: "Fernando de Noronha Time", offset: n.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: s.FijiTime, name: "Fiji Time", offset: n.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: s.FrenchGuianaTime, name: "French Guiana Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.FrenchSouthernAndAntarcticTime, name: "French Southern and Antarctic Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.FurtherEasternEuropeanTime, name: "Further Eastern European Time", offset: n.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: s.GalapagosTime, name: "Galapagos Time", offset: n.UTC_MINUS_6 });
({ dst: { is: false, uses: true }, id: s.GambierIslandTime, name: "Gambier Island Time", offset: n.UTC_MINUS_9 });
({ dst: { is: false, uses: true }, id: s.GambierIslandsTime, name: "Gambier Islands Time", offset: n.UTC_MINUS_9 });
({ dst: { is: false, uses: true }, id: s.GeorgiaStandardTime, name: "Georgia Standard Time", offset: n.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: s.GilbertIslandTime, name: "Gilbert Island Time", offset: n.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: s.GreenwichMeanTime, name: "Greenwich Mean Time", offset: n.UTC_0 });
({ dst: { is: false, uses: true }, id: s.GulfStandardTime, name: "Gulf Standard Time", offset: n.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: s.GuyanaTime, name: "Guyana Time", offset: n.UTC_MINUS_4 });
({ dst: { is: true, uses: true }, id: s.HawaiiAleutianDaylightTime, name: "Hawaii-Aleutian Daylight Time", offset: n.UTC_MINUS_9 });
({ dst: { is: false, uses: true }, id: s.HawaiiAleutianStandardTime, name: "Hawaii-Aleutian Standard Time", offset: n.UTC_MINUS_10 });
({ dst: { is: false, uses: true }, id: s.HeardAndMcDonaldIslandsTime, name: "Heard and McDonald Islands Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.HongKongTime, name: "Hong Kong Time", offset: n.UTC_PLUS_8 });
({ dst: { is: true, uses: true }, id: s.HovdSummerTime, name: "Hovd Summer Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.HovdTime, name: "Hovd Time", offset: n.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: s.IndianOceanTime, name: "Indian Ocean Time", offset: n.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: s.IndianStandardTime, name: "Indian Standard Time", offset: n.UTC_PLUS_5_30 });
({ dst: { is: false, uses: true }, id: s.IndochinaTime, name: "Indochina Time", offset: n.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: s.InternationalDayLineWestTime, name: "International Day Line West Time", offset: n.UTC_MINUS_12 });
({ dst: { is: true, uses: true }, id: s.IranDaylightTime, name: "Iran Daylight Time", offset: n.UTC_PLUS_4_30 });
({ dst: { is: false, uses: true }, id: s.IranStandardTime, name: "Iran Standard Time", offset: n.UTC_PLUS_3_30 });
({ dst: { is: false, uses: true }, id: s.IrishStandardTime, name: "Irish Standard Time", offset: n.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: s.IrkutskTime, name: "Irkutsk Time", offset: n.UTC_PLUS_8 });
({ dst: { is: true, uses: true }, id: s.IsraelDaylightTime, name: "Israel Daylight Time", offset: n.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: s.IsraelStandardTime, name: "Israel Standard Time", offset: n.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: s.JapanStandardTime, name: "Japan Standard Time", offset: n.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: s.KaliningradTime, name: "Kaliningrad Time", offset: n.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: s.KamchatkaTime, name: "Kamchatka Time", offset: n.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: s.KoreaStandardTime, name: "Korea Standard Time", offset: n.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: s.KosraeTime, name: "Kosrae Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.KrasnoyarskTime, name: "Krasnoyarsk Time", offset: n.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: s.KyrgyzstanTime, name: "Kyrgyzstan Time", offset: n.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: s.LineIslandsTime, name: "Line Islands Time", offset: n.UTC_PLUS_14 });
({ dst: { is: false, uses: true }, id: s.LordHoweStandardTime, name: "Lord Howe Standard Time", offset: n.UTC_PLUS_10_30 });
({ dst: { is: false, uses: true }, id: s.LordHoweSummerTime, name: "Lord Howe Summer Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.MacquarieIslandStationTime, name: "Macquarie Island Station Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.MagadanTime, name: "Magadan Time", offset: n.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: s.MalaysiaStandardTime, name: "Malaysia Standard Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.MalaysiaTime, name: "Malaysia Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.MaldivesTime, name: "Maldives Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.MarquesasIslandsTime, name: "Marquesas Islands Time", offset: n.UTC_PLUS_9_30 });
({ dst: { is: false, uses: true }, id: s.MarshallIslandsTime, name: "Marshall Islands Time", offset: n.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: s.MauritiusTime, name: "Mauritius Time", offset: n.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: s.MawsonStationTime, name: "Mawson Station Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.MiddleEuropeanSummerTime, name: "Middle European Summer Time", offset: n.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: s.MiddleEuropeanTime, name: "Middle European Time", offset: n.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: s.MoscowTime, name: "Moscow Time", offset: n.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: s.MountainDaylightTime, name: "Mountain Daylight Time", offset: n.UTC_MINUS_6 });
({ dst: { is: false, uses: true }, id: s.MountainStandardTime, name: "Mountain Standard Time", offset: n.UTC_MINUS_7 });
({ dst: { is: false, uses: true }, id: s.MyanmarStandardTime, name: "Myanmar Standard Time", offset: n.UTC_PLUS_6_30 });
({ dst: { is: false, uses: true }, id: s.NepalTime, name: "Nepal Time", offset: n.UTC_PLUS_5_45 });
({ dst: { is: false, uses: true }, id: s.NauruTime, name: "Nauru Time", offset: n.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: s.NewCaledoniaTime, name: "New Caledonia Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.NewZealandDaylightTime, name: "New Zealand Daylight Time", offset: n.UTC_PLUS_13 });
({ dst: { is: false, uses: true }, id: s.NewZealandStandardTime, name: "New Zealand Standard Time", offset: n.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: s.NewfoundlandDaylightTime, name: "Newfoundland Daylight Time", offset: n.UTC_MINUS_2_30 });
({ dst: { is: false, uses: true }, id: s.NewfoundlandTime, name: "Newfoundland Time", offset: n.UTC_MINUS_3_30 });
({ dst: { is: false, uses: true }, id: s.NiueTime, name: "Niue Time", offset: n.UTC_MINUS_11 });
({ dst: { is: false, uses: true }, id: s.NorfolkIslandTime, name: "Norfolk Island Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.NovosibirskTime, name: "Novosibirsk Time", offset: n.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: s.OmskTime, name: "Omsk Time", offset: n.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: s.OralTime, name: "Oral Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.PacificDaylightTime, name: "Pacific Daylight Time", offset: n.UTC_MINUS_7 });
({ dst: { is: false, uses: true }, id: s.PacificStandardTime, name: "Pacific Standard Time", offset: n.UTC_MINUS_8 });
({ dst: { is: false, uses: true }, id: s.PakistanStandardTime, name: "Pakistan Standard Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.PalauTime, name: "Palau Time", offset: n.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: s.PapuaNewGuineaTime, name: "Papua New Guinea Time", offset: n.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: s.ParaguaySummerTime, name: "Paraguay Summer Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.ParaguayTime, name: "Paraguay Time", offset: n.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: s.PeruTime, name: "Peru Time", offset: n.UTC_MINUS_5 });
({ dst: { is: false, uses: true }, id: s.PhilippineStandardTime, name: "Philippine Standard Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.PhilippineTime, name: "Philippine Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.PhoenixIslandTime, name: "Phoenix Island Time", offset: n.UTC_PLUS_13 });
({ dst: { is: false, uses: true }, id: s.PitcairnTime, name: "Pitcairn Time", offset: n.UTC_MINUS_8 });
({ dst: { is: false, uses: true }, id: s.PohnpeiStandardTime, name: "Pohnpei Standard Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.ReunionTime, name: "Reunion Time", offset: n.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: s.RotheraResearchStationTime, name: "Rothera Research Station Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.SaintPierreAndMiquelonDaylightTime, name: "Saint Pierre and Miquelon Daylight Time", offset: n.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: s.SaintPierreAndMiquelonStandardTime, name: "Saint Pierre and Miquelon Standard Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.SakhalinIslandTime, name: "Sakhalin Island Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.SamaraTime, name: "Samara Time", offset: n.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: s.SamoaDaylightTime, name: "Samoa Daylight Time", offset: n.UTC_MINUS_10 });
({ dst: { is: false, uses: true }, id: s.SamoaStandardTime, name: "Samoa Standard Time", offset: n.UTC_MINUS_11 });
({ dst: { is: false, uses: true }, id: s.SeychellesTime, name: "Seychelles Time", offset: n.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: s.ShowaStationTime, name: "Showa Station Time", offset: n.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: s.SingaporeStandardTime, name: "Singapore Standard Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.SingaporeTime, name: "Singapore Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.SolomonIslandsTime, name: "Solomon Islands Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.SouthAfricanStandardTime, name: "South African Standard Time", offset: n.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: s.SouthGeorgiaAndTheSouthSandwichIslandsTime, name: "South Georgia and the South Sandwich Islands Time", offset: n.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: s.SrednekolymskTime, name: "Srednekolymsk Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.SriLankaStandardTime, name: "Sri Lanka Standard Time", offset: n.UTC_PLUS_5_30 });
({ dst: { is: false, uses: true }, id: s.SurinameTime, name: "Suriname Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.TahitiTime, name: "Tahiti Time", offset: n.UTC_MINUS_10 });
({ dst: { is: false, uses: true }, id: s.TajikistanTime, name: "Tajikistan Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.ThailandStandardTime, name: "Thailand Standard Time", offset: n.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: s.TimorLesteTime, name: "Timor-Leste Time", offset: n.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: s.TokelauTime, name: "Tokelau Time", offset: n.UTC_PLUS_13 });
({ dst: { is: false, uses: true }, id: s.TongaTime, name: "Tonga Time", offset: n.UTC_PLUS_13 });
({ dst: { is: false, uses: true }, id: s.TurkeyTime, name: "Turkey Time", offset: n.UTC_PLUS_3 });
({ dst: { is: false, uses: true }, id: s.TurkmenistanTime, name: "Turkmenistan Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.TuvaluTime, name: "Tuvalu Time", offset: n.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: s.UlaanbaatarStandardTime, name: "Ulaanbaatar Standard Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.UlaanbaatarSummerTime, name: "Ulaanbaatar Summer Time", offset: n.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: s.UruguayStandardTime, name: "Uruguay Standard Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.UruguaySummerTime, name: "Uruguay Summer Time", offset: n.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: s.UzbekistanTime, name: "Uzbekistan Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.VanuatuTime, name: "Vanuatu Time", offset: n.UTC_PLUS_11 });
({ dst: { is: false, uses: true }, id: s.VenezuelaStandardTime, name: "Venezuela Standard Time", offset: n.UTC_MINUS_4 });
({ dst: { is: false, uses: true }, id: s.VladivostokTime, name: "Vladivostok Time", offset: n.UTC_PLUS_10 });
({ dst: { is: false, uses: true }, id: s.VolgogradTime, name: "Volgograd Time", offset: n.UTC_PLUS_4 });
({ dst: { is: false, uses: true }, id: s.VostokStationTime, name: "Vostok Station Time", offset: n.UTC_PLUS_6 });
({ dst: { is: false, uses: true }, id: s.WakeIslandTime, name: "Wake Island Time", offset: n.UTC_PLUS_12 });
({ dst: { is: false, uses: true }, id: s.WestAfricaSummerTime, name: "West Africa Summer Time", offset: n.UTC_PLUS_2 });
({ dst: { is: false, uses: true }, id: s.WestAfricaTime, name: "West Africa Time", offset: n.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: s.WestGreenlandSummerTime, name: "West Greenland Summer Time", offset: n.UTC_MINUS_2 });
({ dst: { is: false, uses: true }, id: s.WestGreenlandTime, name: "West Greenland Time", offset: n.UTC_MINUS_3 });
({ dst: { is: false, uses: true }, id: s.WestKazakhstanTime, name: "West Kazakhstan Time", offset: n.UTC_PLUS_5 });
({ dst: { is: false, uses: true }, id: s.WesternEuropeanSummerTime, name: "Western European Summer Time", offset: n.UTC_PLUS_1 });
({ dst: { is: false, uses: true }, id: s.WesternEuropeanTime, name: "Western European Time", offset: n.UTC_0 });
({ dst: { is: false, uses: true }, id: s.WesternIndonesianTime, name: "Western Indonesian Time", offset: n.UTC_PLUS_7 });
({ dst: { is: false, uses: true }, id: s.WesternStandardTime, name: "Western Standard Time", offset: n.UTC_PLUS_8 });
({ dst: { is: false, uses: true }, id: s.YakutskTime, name: "Yakutsk Time", offset: n.UTC_PLUS_9 });
({ dst: { is: false, uses: true }, id: s.YekaterinburgTime, name: "Yekaterinburg Time", offset: n.UTC_PLUS_5 });
var T;
(function(a2) {
  a2.Africa = "Africa", a2.Americas = "Americas", a2.Asia = "Asia", a2.Europe = "Europe", a2.Oceania = "Oceania", a2.Polar = "Polar";
})(T || (T = {}));
var p;
(function(a2) {
  a2.CentralAmerica = "Central America", a2.EasternAsia = "Eastern Asia", a2.EasternEurope = "Eastern Europe", a2.EasternAfrica = "Eastern Africa", a2.MiddleAfrica = "Middle Africa", a2.MiddleEast = "Middle East", a2.NorthernAfrica = "Northern Africa", a2.NorthernAmerica = "Northern America", a2.NorthernEurope = "Northern Europe", a2.Polynesia = "Polynesia", a2.SouthAmerica = "South America", a2.SouthernAfrica = "Southern Africa", a2.SouthernAsia = "Southern Asia", a2.SouthernEurope = "Southern Europe", a2.WesternAfrica = "Western Africa", a2.WesternAsia = "Western Asia", a2.WesternEurope = "Western Europe", a2.WesternAustralia = "Western Australia";
})(p || (p = {}));
({ Afghanistan: { i18n: { calling_codes: [93], currencies: [m.AfghanistanAfghani], languages: [e.Pashto, e.Dari, e.Turkmen, e.Uzbek], tz: { offsets: [n.UTC_PLUS_4_30], regions: [u.AsiaKabul], timezones: [s.AfghanistanTime] } }, id: r.Afghanistan, info: { flag: { emoji: "\u{1F1E6}\u{1F1EB}", emoji_unicode: "U+1F1E6 U+1F1EB", svg: "https://www.countryflags.io/af/flat/64.svg" }, tld: [".af"] }, iso: { alpha2: r.Afghanistan, alpha3: "AFG", numeric: "004" }, name: { alt_spellings: ["AF", "Af\u0121\u0101nist\u0101n"], demonym: "Afghan", native: { endonym: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646" }, official: "Islamic Republic of Afghanistan", short: "Afghanistan", translations: { [e.Afrikaans]: "Afghanistan", [e.Albanian]: "Shqip\xEBri", [e.Amharic]: "\u12A0\u134D\u130B\u1295", [e.Arabic]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", [e.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576", [e.Azerbaijani]: "Az\u0259rbaycan", [e.Bashkir]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Basque]: "Afganist\xE1n", [e.Belarusian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Bengali]: "\u0986\u09AB\u0997\u09BE\u09A8\u09BF\u09B8\u09CD\u09A4\u09BE\u09A8", [e.Berber]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", [e.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F51\u0F7C\u0F53\u0F0B\u0F63\u0F7A\u0F0B\u0F66\u0F90\u0F51\u0F0B\u0F46\u0F0D", [e.Bosnian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Breton]: "Afganistan", [e.Bulgarian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Burmese]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A", [e.Catalan]: "Afganistan", [e.Chinese]: "\u963F\u5BCC\u6C57", [e.Croatian]: "Afganistan", [e.Czech]: "Afganistan", [e.Danish]: "Afghanistan", [e.Dutch]: "Afghanistan", [e.English]: "Afghanistan", [e.Esperanto]: "Afganistan", [e.Estonian]: "Afganistan", [e.Finnish]: "Afghanistan", [e.French]: "Afghanistan", [e.Frisian]: "Afghanistan", [e.Galician]: "Afganist\xE1n", [e.Georgian]: "\u10D0\u10D5\u10E6\u10D0\u10DC\u10D4\u10D7\u10D8", [e.German]: "Afghanistan", [e.Greenlandic]: "Afghanistan", [e.Greek]: "\u0391\u03C6\u03B3\u03B1\u03BD\u03B9\u03C3\u03C4\u03AC\u03BD", [e.Gujarati]: "\u0A85\u0AAB\u0A97\u0ABE\u0AA8\u0ABF\u0AB8\u0ACD\u0AA4\u0ABE\u0AA8", [e.Haitian]: "Afghanistan", [e.Hausa]: "Afghanistan", [e.Hebrew]: "\u05D0\u05E4\u05D2\u05E0\u05D9\u05E1\u05D8\u05DF", [e.Hindi]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", [e.Hungarian]: "Afganistan", [e.Icelandic]: "Afghanistan", [e.Igbo]: "Afghanistan", [e.Indonesian]: "Afghanistan", [e.Irish]: "Afghanistan", [e.Italian]: "Afghanistan", [e.Japanese]: "\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3", [e.Javanese]: "Afghanistan", [e.Kannada]: "\u0C85\u0CAB\u0C97\u0CBE\u0CA8\u0CBF\u0CB8\u0CCD\u0CA4\u0CBE\u0CA8", [e.Kazakh]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Khmer]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17B7\u1780", [e.Korean]: "\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4", [e.Kurdish]: "Afghanistan", [e.Kyrgyz]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Lao]: "\u0EAD\u0EB2\u0E9F\u0EB2\u0EA5\u0EBD\u0E99", [e.Latin]: "Afghanistan", [e.Latvian]: "Afghanistan", [e.Lithuanian]: "Afganistanas", [e.Luxembourgish]: "Afghanistan", [e.Macedonian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Malagasy]: "Afghanistan", [e.Malay]: "Afghanistan", [e.Malayalam]: "\u0D05\u0D2B\u0D17\u0D3E\u0D28\u0D3F\u0D38\u0D4D\u0D24\u0D3E\u0D28", [e.Maltese]: "Afghanistan", [e.Maori]: "Afghanistan", [e.Marathi]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", [e.Mongolian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Nepali]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", [e.Norwegian]: "Afghanistan", [e.Pashto]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", [e.Persian]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", [e.Polish]: "Afganistan", [e.Portuguese]: "Afghanistan", [e.Punjabi]: "Afghanistan", [e.Romanian]: "Afghanistan", [e.Polish]: "Afganistan", [e.Russian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Samoan]: "Afghanistan", [e.Sanskrit]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", [e.Scots]: "Afghanistan", [e.Serbian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Sesotho]: "Afghanistan", [e.Shona]: "Afghanistan", [e.Sindhi]: "Afghanistan", [e.Sinhala]: "\u0D86\u0D9C\u0DCA\u200D\u0DBB\u0DDC\u0D9A\u0DCA\u0D9A\u0DD2\u0DBA\u0DCF\u0DC0", [e.Slovak]: "Afganistan", [e.Slovenian]: "Afganistan", [e.Somali]: "Afghanistan", [e.Spanish]: "Afganist\xE1n", [e.Sudanese]: "Afghanistan", [e.Swahili]: "Afghanistan", [e.Swedish]: "Afghanistan", [e.Tagalog]: "Afghanistan", [e.Tajik]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Tatar]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Tamil]: "\u0B86\u0BAA\u0BCD\u0BAA\u0B95\u0BBE\u0BA9\u0BBF\u0BB8\u0BCD\u0BA4\u0BBE\u0BA9\u0BCD", [e.Telugu]: "\u0C06\u0C2B\u0C4D\u0C18\u0C28\u0C3F\u0C38\u0C4D\u0C24\u0C3E\u0C28\u0C4D", [e.Thai]: "\u0E2D\u0E31\u0E1F\u0E01\u0E32\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19", [e.Tibetan]: "\u0F68\u0F55\u0F0B\u0F42\u0F7A\u0F0B\u0F53\u0F72\u0F66\u0F72\u0F0B\u0F4F\u0F7A\u0F53\u0F66\u0F72\u0F0D", [e.Turkish]: "Afganistan", [e.Ukrainian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Urdu]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", [e.Uzbek]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", [e.Vietnamese]: "Afghanistan", [e.Welsh]: "Afghanistan", [e.Xhosa]: "Afghanistan", [e.Yiddish]: "Afghanistan", [e.Yoruba]: "Afghanistan", [e.Zulu]: "Afghanistan" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Kabul", total: 341e5 } }, geography: { area: 652230, region: T.Asia, sub_region: p.SouthernAsia }, government: { capital: "Kabul", type: "Islamic Emirate" } } }, Albania: { i18n: { calling_codes: [355], currencies: [m.AlbaniaLek], languages: [e.Albanian, e.Greek, e.Turkish], tz: { offsets: [n.UTC_PLUS_1], regions: [u.EuropeBrussels], timezones: [s.CentralEuropeanTime] } }, id: r.Albania, info: { flag: { emoji: "\u{1F1E6}\u{1F1F1}", emoji_unicode: "U+1F1E6 U+1F1F1", svg: "https://www.countryflags.io/al/flat/64.svg" }, tld: [".al"] }, iso: { alpha2: r.Albania, alpha3: "ALB", numeric: "008" }, name: { alt_spellings: ["AL", "Shqip\xEBri", "Shqip\xEBria", "Shqipnia"], demonym: "Albanian", native: { endonym: "Shqip\xEBri" }, official: "Republic of Albania", short: "Albania", translations: { [e.Afrikaans]: "Albania", [e.Albanian]: "Albania", [e.Amharic]: "\u12A0\u120D\u1263\u1295\u12EB", [e.Arabic]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627", [e.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576", [e.Azerbaijani]: "Az\u0259rbaycan", [e.Bashkir]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e.Basque]: "Albania", [e.Belarusian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e.Bengali]: "\u0986\u09B2\u09AC\u09BE\u09A8\u09BF\u09AF\u09BC\u09BE", [e.Berber]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627", [e.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B", [e.Bosnian]: "Albanija", [e.Breton]: "Albania", [e.Bulgarian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e.Burmese]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A", [e.Catalan]: "Alb\xE0nia", [e.Chinese]: "\u963F\u5C14\u5DF4\u5C3C\u4E9A", [e.Croatian]: "Albanija", [e.Czech]: "Alb\xE1nie", [e.Danish]: "Albanien", [e.Dutch]: "Albani\xEB", [e.English]: "Albania", [e.Esperanto]: "Albanio", [e.Estonian]: "Albaania", [e.Finnish]: "Albania", [e.French]: "Albanie", [e.Frisian]: "Albani\xEB", [e.Galician]: "Alb\xE2nia", [e.Georgian]: "\u10D0\u10DA\u10D1\u10D0\u10DC\u10D8\u10D0", [e.German]: "Albanien", [e.Greenlandic]: "Albania", [e.Greek]: "\u0391\u03BB\u03B2\u03B1\u03BD\u03AF\u03B1", [e.Gujarati]: "\u0A85\u0AB2\u0AAC\u0AA8\u0ABF\u0AAF\u0ABE", [e.Haitian]: "Albanais", [e.Hausa]: "Albania", [e.Hebrew]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05D4", [e.Hindi]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E", [e.Hungarian]: "Alb\xE1nia", [e.Icelandic]: "Alb\xFAnir", [e.Igbo]: "Albania", [e.Indonesian]: "Albania", [e.Irish]: "Alb\xE1in", [e.Italian]: "Albania", [e.Japanese]: "\u30A2\u30EB\u30D0\u30CB\u30A2", [e.Javanese]: "Albania", [e.Kannada]: "\u0C85\u0CB2\u0CCD\u0CAC\u0CBE\u0CA8\u0CBF\u0CAF\u0CBE", [e.Kazakh]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e.Khmer]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17C1\u179F\u17CA\u17B8", [e.Korean]: "\uC54C\uBC14\uB2C8\uC544", [e.Kurdish]: "\u0622\u0644\u0628\u0627\u0646\u06CC\u0627", [e.Kyrgyz]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e.Lao]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E99\u0EB5", [e.Latin]: "Albania", [e.Latvian]: "Alb\u0101nija", [e.Lithuanian]: "Albanija", [e.Luxembourgish]: "Albani\xEB", [e.Macedonian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430", [e.Malagasy]: "Albania", [e.Malay]: "Albania", [e.Malayalam]: "\u0D05\u0D32\u0D4D\u0D2C\u0D3E\u0D28\u0D3F\u0D2F\u0D3E", [e.Maltese]: "Albania", [e.Maori]: "Albania", [e.Marathi]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E", [e.Mongolian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e.Nepali]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E", [e.Norwegian]: "Albania", [e.Pashto]: "\u0627\u0627\u0644\u0628\u0627\u0646\u06CC", [e.Persian]: "\u0622\u0644\u0628\u0627\u0646\u06CC", [e.Polish]: "Albania", [e.Portuguese]: "Alb\xE2nia", [e.Punjabi]: "\u0A05\u0A32\u0A2C\u0A28\u0A40\u0A06", [e.Romanian]: "Alb\u0103n", [e.Russian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e.Samoan]: "Albania", [e.Sanskrit]: "Albani", [e.Scots]: "Alb\xE0inia", [e.Serbian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430", [e.Sesotho]: "Albania", [e.Shona]: "Albania", [e.Sindhi]: "Albania", [e.Sinhala]: "\u0D87\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA", [e.Slovak]: "Alb\xE1nsko", [e.Slovenian]: "Albanija", [e.Somali]: "Albania", [e.Spanish]: "Albania", [e.Sudanese]: "Albania", [e.Swahili]: "Albania", [e.Swedish]: "Albanien", [e.Tagalog]: "Albania", [e.Tajik]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e.Tamil]: "\u0B85\u0BB2\u0BCD\u0BAA\u0BBE\u0BA9\u0BBF\u0BAF\u0BBE", [e.Tatar]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e.Telugu]: "\u0C05\u0C32\u0C4D\u0C2C\u0C3E\u0C28\u0C3F\u0C2F\u0C3E", [e.Thai]: "\u0E2D\u0E31\u0E25\u0E41\u0E1A\u0E19\u0E34\u0E19\u0E35", [e.Tibetan]: "\u0F68\u0F63\u0F0B\u0F56\u0F72\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F72", [e.Turkish]: "Albaniye", [e.Ukrainian]: "\u0410\u043B\u0431\u0430\u043D\u0456\u044F", [e.Urdu]: "\u0622\u0644\u0628\u0627\u0646\u06CC", [e.Uzbek]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", [e.Vietnamese]: "Albanie", [e.Welsh]: "Albania", [e.Xhosa]: "Albania", [e.Yiddish]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05E9", [e.Yoruba]: "Albania", [e.Zulu]: "Albania" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Tirana", total: 2853e3 } }, geography: { area: 28748, region: T.Europe, sub_region: p.SouthernEurope }, government: { capital: "Tirana", type: "Republic" } } }, Algeria: { i18n: { calling_codes: [213], currencies: [m.AlgeriaDinar], languages: [e.Arabic, e.French, e.Berber, e.Tamazight], tz: { offsets: [n.UTC_PLUS_1, n.UTC_PLUS_2], regions: [u.AfricaAlgiers], timezones: [s.CentralEuropeanTime] } }, id: r.Algeria, info: { flag: { emoji: "\u{1F1E9}\u{1F1FF}", emoji_unicode: "U+1F1E9 U+1F1FF", svg: "https://www.countryflags.io/dz/flat/64.svg" }, tld: [".dz", ".\u062C\u0632\u0627\u0626\u0631"] }, iso: { alpha2: r.Algeria, alpha3: "DZA", numeric: "012" }, name: { alt_spellings: ["DZ", "Dzayer", "Alg\xE9rie"], demonym: "Algerian", native: { endonym: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631" }, official: "People's Democratic Republic of Algeria", short: "Algeria", translations: { [e.Afrikaans]: "Algerije", [e.Albanian]: "Algeria", [e.Amharic]: "\u12A0\u120D\u1300\u122D\u1235", [e.Arabic]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631", [e.Armenian]: "\u0531\u056C\u0563\u0578\u0580\u056B\u0561", [e.Azerbaijani]: "Az\u0259rbaycan", [e.Bashkir]: "\u0410\u043B\u0436\u0438\u0440", [e.Basque]: "Algeria", [e.Belarusian]: "\u0410\u043B\u0436\u0438\u0440", [e.Bengali]: "\u0986\u09B2\u099C\u09C7\u09B0", [e.Berber]: "\u062C\u0632\u0627\u0626\u0631", [e.Bhutani]: "\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41", [e.Bosnian]: "Al\u017Eir", [e.Breton]: "Algeria", [e.Bulgarian]: "\u0410\u043B\u0436\u0438\u0440", [e.Burmese]: "\u1021\u102C\u101B\u1015\u103A", [e.Catalan]: "Alg\xE8ria", [e.Chinese]: "\u963F\u5C14\u53CA\u5229\u4E9A", [e.Croatian]: "Al\u017Eir", [e.Czech]: "Al\u017E\xEDrsko", [e.Danish]: "Algeriet", [e.Dutch]: "Algerije", [e.English]: "Algeria", [e.Esperanto]: "Al\u011Derio", [e.Estonian]: "Al\u017Eira", [e.Finnish]: "Algeria", [e.French]: "Alg\xE9rie", [e.Frisian]: "Algeri\xEB", [e.Galician]: "Alxeria", [e.Georgian]: "\u10D0\u10DA\u10D2\u10D8\u10E3\u10E0\u10D8", [e.German]: "Algerien", [e.Greenlandic]: "Algeria", [e.Greek]: "\u0391\u03BB\u03B3\u03B5\u03C1\u03AF\u03B1", [e.Gujarati]: "\u0A86\u0AB2\u0AC7\u0A97\u0AB0\u0ABF\u0AAF\u0ABE", [e.Haitian]: "Alg\xE9rie", [e.Hausa]: "Algeria", [e.Hebrew]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4", [e.Hindi]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", [e.Hungarian]: "Alg\xE1r", [e.Icelandic]: "Alg\xFAra", [e.Igbo]: "Algeria", [e.Indonesian]: "Aljir", [e.Irish]: "Alg\xE9rie", [e.Italian]: "Algeria", [e.Japanese]: "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2", [e.Javanese]: "Aljir", [e.Kannada]: "\u0C86\u0CB2\u0CCD\u0C97\u0CC7\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD", [e.Kazakh]: "\u0410\u043B\u0436\u0438\u0440", [e.Khmer]: "\u17A2\u17B6\u179B\u17CB\u1794\u17B6\u1793\u17B8", [e.Korean]: "\uC54C\uC81C\uB9AC", [e.Kurdish]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631", [e.Kyrgyz]: "\u0410\u043B\u0436\u0438\u0440", [e.Lao]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E88\u0EB5\u0E99", [e.Latin]: "Algeria", [e.Latvian]: "Al\u017E\u012Brija", [e.Lithuanian]: "Al\u017Eyras", [e.Luxembourgish]: "Algeria", [e.Macedonian]: "\u0410\u043B\u0436\u0438\u0440", [e.Malagasy]: "Alg\xE9rie", [e.Malay]: "Aljir", [e.Malayalam]: "\u0D06\u0D32\u0D02\u0D17\u0D47\u0D30\u0D3F\u0D2F\u0D7B", [e.Maltese]: "Alg\xE9rie", [e.Maori]: "Algeria", [e.Marathi]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", [e.Mongolian]: "\u0410\u043B\u0436\u0438\u0440", [e.Nepali]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", [e.Norwegian]: "Algeria", [e.Pashto]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631", [e.Persian]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0639\u0631\u0628", [e.Polish]: "Algieria", [e.Portuguese]: "Alg\xE9ria", [e.Punjabi]: "\u0A06\u0A32\u0A47\u0A17\u0A40\u0A06", [e.Romanian]: "Algeria", [e.Russian]: "\u0410\u043B\u0436\u0438\u0440", [e.Samoan]: "Algeria", [e.Sanskrit]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", [e.Scots]: "Algeria", [e.Serbian]: "\u0410\u043B\u0436\u0438\u0440", [e.Sesotho]: "Algeria", [e.Shona]: "Algeria", [e.Sindhi]: "Algeria", [e.Sinhala]: "\u0D86\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA", [e.Slovak]: "Al\u017E\xEDrsko", [e.Slovenian]: "Al\u017Eir", [e.Somali]: "Algeria", [e.Spanish]: "Algeria", [e.Sudanese]: "Aljir", [e.Swahili]: "Aljir", [e.Swedish]: "Algeriet", [e.Tagalog]: "Algeria", [e.Tajik]: "\u0410\u043B\u0436\u0438\u0440", [e.Tamil]: "\u0B86\u0BB2\u0BCD\u0B95\u0BC7\u0BB0\u0BBF\u0BAF\u0BBE", [e.Tatar]: "\u0410\u043B\u0436\u0438\u0440", [e.Telugu]: "\u0C06\u0C32\u0C4D\u0C17\u0C47\u0C30\u0C3F\u0C2F\u0C3E", [e.Thai]: "\u0E2D\u0E32\u0E23\u0E32\u0E01\u0E2D\u0E19", [e.Tibetan]: "\u0F68\u0F63\u0F9F\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F61\u0F72", [e.Turkish]: "Cezayir", [e.Ukrainian]: "\u0410\u043B\u0436\u0438\u0440", [e.Urdu]: "\u0622\u0644\u062C\u06CC\u0631", [e.Uzbek]: "\u0410\u043B\u0436\u0438\u0440", [e.Vietnamese]: "\u1EA2\u0301\u1EA1\u1EA3\u1EAD\u1EB5", [e.Welsh]: "Algeria", [e.Xhosa]: "Algeria", [e.Yiddish]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4", [e.Yoruba]: "Algeria", [e.Zulu]: "Algeria" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Oran", total: 371e5 } }, geography: { area: 2381740, region: T.Africa, sub_region: p.NorthernAfrica }, government: { capital: "Algiers", type: "Republic" } } }, AmericanSamoa: { i18n: { calling_codes: [1684], currencies: [m.AmericanSamoaTala], languages: [e.English, e.Samoan], tz: { offsets: [n.UTC_MINUS_11], regions: [u.PacificSamoa], timezones: [s.SamoaStandardTime] } }, id: r.AmericanSamoa, info: { flag: { emoji: "\u{1F1E6}\u{1F1F8}", emoji_unicode: "U+1F1E6 U+1F1F8", svg: "https://www.countryflags.io/as/flat/64.svg" }, tld: [".as"] }, iso: { alpha2: r.AmericanSamoa, alpha3: "ASM", numeric: "016" }, name: { alt_spellings: ["AS", "Amerika S\u0101moa", "Amelika S\u0101moa", "S\u0101moa Amelika"], demonym: "American Samoan", native: { endonym: "American Samoa" }, official: "American Samoa", short: "American Samoa", translations: { [e.Afrikaans]: "Amerikaans Samoa", [e.Albanian]: "Samoa Amerikane", [e.Amharic]: "\u1233\u121E\u12A0\u122D", [e.Arabic]: "\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629", [e.Armenian]: "\u054D\u0561\u0570\u0561\u0574\u0561\u056C\u056B\u0561", [e.Azerbaijani]: "Samoa Amerikana", [e.Bashkir]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0421\u0430\u043C\u043E\u0430", [e.Basque]: "Samoa Amerikana", [e.Belarusian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430", [e.Bengali]: "\u0986\u09AE\u09C7\u09B0\u09BF\u0995\u09BE\u09A8 \u09B8\u09BE\u09AE\u09CB\u09AF\u09BC\u09BE", [e.Berber]: "\u062C\u0632\u0631 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629", [e.Bhutani]: "\u0F68\u0F62\u0F92\u0FB1\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F58\u0F44\u0F66\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F66\u0F90\u0F56\u0F66\u0F0B\u0F62\u0F92\u0FB1\u0F74\u0F51\u0F0B\u0F46\u0F7A\u0F53\u0F0B\u0F54\u0F7C\u0F0D", [e.Bosnian]: "Ameri\u010Dka Samoa", [e.Breton]: "Samoa Amerikan", [e.Bulgarian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", [e.Burmese]: "\u1021\u1019\u1039\u1038\u1019\u101B\u102D\u102F\u1018\u102C\u101E\u102C", [e.Catalan]: "Samoa Americana", [e.Chinese]: "\u7F8E\u5C5E\u8428\u6469\u4E9A", [e.Croatian]: "Ameri\u010Dka Samoa", [e.Czech]: "Americk\xE1 Samoa", [e.Danish]: "Amerikansk Samoa", [e.Dutch]: "Amerikaans Samoa", [e.English]: "American Samoa", [e.Esperanto]: "Samoa Amerika", [e.Estonian]: "Ameerika Samoa", [e.Finnish]: "Amerikka Samoa", [e.French]: "American Samoa", [e.Frisian]: "Amerikaans Samoa", [e.Galician]: "Samoa Americana", [e.Georgian]: "\u10D0\u10DB\u10D4\u10E0\u10D8\u10D9\u10D8\u10E1 \u10E1\u10D0\u10DB\u10DD\u10D0", [e.German]: "Amerikanisch-Samoa", [e.Greenlandic]: "Amerikaans Samoa", [e.Greek]: "\u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AE \u03A3\u03B1\u03BC\u03CC\u03B1", [e.Gujarati]: "\u0A86\u0AAE\u0AC7\u0AB0\u0ABF\u0A95\u0AA8 \u0AB8\u0ABE\u0AAE\u0ACB\u0AAF\u0ABE", [e.Haitian]: "Amerikaans Samoa", [e.Hausa]: "Amerikaans Samoa", [e.Hebrew]: "\u05D0\u05DE\u05E8\u05D9\u05E7\u05E0\u05D9\u05D4 \u05E1\u05DE\u05D5\u05D0\u05D4", [e.Hindi]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", [e.Hungarian]: "Amerikai Szamoa", [e.Icelandic]: "Amerikai Szamoa", [e.Igbo]: "Ikina Amerika", [e.Indonesian]: "Samoa Amerika", [e.Irish]: "Samoa Amerikana", [e.Italian]: "Samoa Americane", [e.Japanese]: "\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2", [e.Javanese]: "Samoa Amerika", [e.Kannada]: "\u0C85\u0CAE\u0CC7\u0CB0\u0CBF\u0C95\u0CA8\u0CCD \u0CB8\u0CAE\u0CCB\u0C86", [e.Kazakh]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430", [e.Khmer]: "\u17A2\u17B6\u1798\u17C9\u17B6\u179A\u17B8\u179F\u17D2\u178F\u1784\u17CB", [e.Korean]: "\uC544\uBA54\uB9AC\uCE74 \uC0AC\uBAA8\uC544", [e.Kurdish]: "Amerikaans Samoa", [e.Kyrgyz]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430", [e.Lao]: "\u0EAD\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94", [e.Latin]: "Samoa Amerikana", [e.Latvian]: "Amerikas Samoa", [e.Lithuanian]: "Amerikos Samoa", [e.Luxembourgish]: "Amerikaans Samoa", [e.Macedonian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", [e.Malagasy]: "Samoa Amerika", [e.Malay]: "Amerika Samo", [e.Malayalam]: "\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D28\u0D4D\u0D31\u0D4D \u0D38\u0D2E\u0D4B\u0D06", [e.Maltese]: "Samoa Amerika", [e.Maori]: "Samoa Amerika", [e.Marathi]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", [e.Mongolian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430", [e.Nepali]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", [e.Norwegian]: "Amerikansk Samoa", [e.Pashto]: "\u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627", [e.Persian]: "\u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627", [e.Polish]: "Samoa Ameryka\u0144skie", [e.Portuguese]: "Samoa Americana", [e.Punjabi]: "\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40 \u0A38\u0A3E\u0A2E\u0A4B\u0A06", [e.Romanian]: "Samoa americane", [e.Russian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430", [e.Samoan]: "Samoa Amerika", [e.Sanskrit]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", [e.Scots]: "Amerikaans Samoa", [e.Serbian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", [e.Sesotho]: "Amerikaans Samoa", [e.Shona]: "Amerikaans Samoa", [e.Sindhi]: "Amerikaans Samoa", [e.Sinhala]: "\u0D86\u0DBB\u0DCA\u0DA2\u0DD2\u0DB1\u0DCF\u0DB1\u0DD4 \u0DC3\u0DD0\u0DB8\u0DD0\u0DBD\u0DCA\u0DC0", [e.Slovak]: "Amerikaans Samoa", [e.Slovenian]: "Amerikaans Samoa", [e.Somali]: "Amerikaans Samoa", [e.Spanish]: "Samoa Americana", [e.Sudanese]: "Amerikaans Samoa", [e.Swahili]: "Amerikaans Samoa", [e.Swedish]: "Amerikansk Samoa", [e.Tagalog]: "Amerikaans Samoa", [e.Tajik]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430", [e.Tamil]: "\u0B85\u0BAE\u0BC6\u0BB0\u0BBF\u0B95\u0BCD \u0B9A\u0BAE\u0BCB\u0BB5\u0BBE", [e.Tatar]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430", [e.Telugu]: "\u0C05\u0C2E\u0C46\u0C30\u0C3F\u0C15\u0C4D \u0C38\u0C2E\u0C4B\u0C35\u0C3E", [e.Thai]: "\u0E2A\u0E2B\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E41\u0E2D\u0E1F\u0E23\u0E34\u0E01\u0E32", [e.Tibetan]: "\u0F68\u0F7A\u0F0B\u0F62\u0F72\u0F0B\u0F40\u0F0B\u0F68\u0F7A\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F74\u0F0B\u0F61\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F40", [e.Turkish]: "Amerikan Samoas\u0131", [e.Ukrainian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", [e.Urdu]: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627", [e.Uzbek]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430", [e.Vietnamese]: "Amerikaans Samoa", [e.Welsh]: "Amerikaans Samoa", [e.Xhosa]: "Amerikaans Samoa", [e.Yiddish]: "Amerikaans Samoa", [e.Yoruba]: "Amerikaans Samoa", [e.Zulu]: "Amerikaans Samoa" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Pago Pago", total: 558e3 } }, geography: { area: 199, region: T.Oceania, sub_region: p.Polynesia }, government: { capital: "Pago Pago", type: "Nonmetropolitan Territory of the US" } } }, Andorra: { i18n: { calling_codes: [376], currencies: [m.Euro], languages: [e.Catalan, e.Spanish], tz: { offsets: [n.UTC_PLUS_1, n.UTC_PLUS_2], regions: [u.EuropeAndorra], timezones: [s.CentralEuropeanTime] } }, id: r.Andorra, info: { flag: { emoji: "\u{1F1E6}\u{1F1F4}", emoji_unicode: "U+1F1E6 U+1F1F4", svg: "https://www.countryflags.io/ad/flat/64.svg" }, tld: [".ad"] }, iso: { alpha2: r.Andorra, alpha3: "AND", numeric: "020" }, name: { alt_spellings: ["AD", "Principality of Andorra", "Principat d'Andorra"], demonym: "Andorran", native: { endonym: "Andorra" }, official: "Principality of Andorra", short: "Andorra", translations: { [e.Afrikaans]: "Andorra", [e.Albanian]: "Andorra", [e.Amharic]: "\u12A0\u1295\u12F6\u122B", [e.Arabic]: "\u0623\u0646\u062F\u0648\u0631\u0627", [e.Armenian]: "\u0540\u0561\u0576\u0564\u0561\u0580\u0561\u057E\u0561\u0575\u0584", [e.Azerbaijani]: "Andorra", [e.Bashkir]: "\u0410\u043D\u0434\u043E\u0440\u0430", [e.Basque]: "Andorra", [e.Belarusian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Bengali]: "\u0985\u09A8\u09CD\u09A1\u09CB\u09B0\u09BE", [e.Berber]: "\u0623\u0646\u062F\u0648\u0631\u0627", [e.Bhutani]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B", [e.Bosnian]: "Andora", [e.Breton]: "Andorra", [e.Bulgarian]: "\u0410\u043D\u0434\u043E\u0440\u0430", [e.Burmese]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102D\u102F\u1038", [e.Catalan]: "Andorra", [e.Chinese]: "\u5B89\u9053\u5C14", [e.Croatian]: "Andora", [e.Czech]: "Andorra", [e.Danish]: "Andorra", [e.Dutch]: "Andorra", [e.English]: "Andorra", [e.Esperanto]: "Andora", [e.Estonian]: "Andorra", [e.Finnish]: "Andorra", [e.French]: "Andorra", [e.Frisian]: "Andorra", [e.Galician]: "Andorra", [e.Georgian]: "\u12A0\u1295\u12F6\u122B", [e.German]: "Andorra", [e.Greek]: "\u0391\u03BD\u03B4\u03CC\u03C1\u03B1", [e.Hebrew]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4", [e.Hindi]: "\u0905\u0902\u0921\u094B\u0930\u093E", [e.Hungarian]: "Andorra", [e.Icelandic]: "Andorra", [e.Igbo]: "Andorra", [e.Indonesian]: "Andorra", [e.Irish]: "Andorra", [e.Italian]: "Andorra", [e.Japanese]: "\u30A2\u30F3\u30C9\u30E9", [e.Javanese]: "Andorra", [e.Kannada]: "\u0C85\u0C82\u0CA1\u0CCB\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD", [e.Kazakh]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Khmer]: "\u17A2\u1784\u17CB\u178A\u17B6\u179A\u17B6", [e.Korean]: "\uC548\uB3C4\uB77C", [e.Kurdish]: "Andorra", [e.Kyrgyz]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Lao]: "\u0EAD\u0EB1\u0E99\u0EC2\u0E94\u0EA3\u0EB2", [e.Latin]: "Andorra", [e.Latvian]: "Andora", [e.Lithuanian]: "Andora", [e.Luxembourgish]: "Andorra", [e.Macedonian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Malagasy]: "Andorra", [e.Malay]: "Andorra", [e.Malayalam]: "\u0D05\u0D02\u0D21\u0D4B\u0D30\u0D3F\u0D2F\u0D28\u0D4D", [e.Maltese]: "Andorra", [e.Maori]: "Andorra", [e.Marathi]: "\u0905\u0902\u0921\u094B\u0930\u093E", [e.Mongolian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Nepali]: "\u0905\u0902\u0921\u094B\u0930\u093E", [e.Norwegian]: "Andorra", [e.Pashto]: "\u0622\u0646\u062F\u0648\u0631\u0627", [e.Persian]: "\u0622\u0646\u062F\u0648\u0631\u0627", [e.Polish]: "Andora", [e.Portuguese]: "Andorra", [e.Punjabi]: "\u0A05\u0A70\u0A21\u0A4B\u0A30\u0A3E", [e.Romanian]: "Andorra", [e.Russian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Samoan]: "Andorra", [e.Sanskrit]: "\u0905\u0902\u0921\u094B\u0930\u093E", [e.Scots]: "Andorra", [e.Serbian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Sesotho]: "Andorra", [e.Shona]: "Andorra", [e.Sindhi]: "\u0905\u0902\u0921\u094B\u0930\u093E", [e.Sinhala]: "\u0D86\u0DB1\u0DCA\u0DAF\u0DDA", [e.Slovak]: "Andorra", [e.Slovenian]: "Andora", [e.Somali]: "Andorra", [e.Spanish]: "Andorra", [e.Sudanese]: "Andorra", [e.Swahili]: "Andorra", [e.Swedish]: "Andorra", [e.Tagalog]: "Andorra", [e.Tajik]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Tamil]: "\u0B85\u0BA9\u0BCB\u0BB0\u0BCD\u0B9F\u0BBE", [e.Tatar]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Telugu]: "\u0C05\u0C02\u0C21\u0C4B\u0C30\u0C4D\u0C30\u0C3E", [e.Thai]: "\u0E2D\u0E31\u0E19\u0E14\u0E2D\u0E23\u0E4C\u0E23\u0E32", [e.Tibetan]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B", [e.Turkish]: "Andora", [e.Ukrainian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Urdu]: "\u0622\u0646\u062F\u0648\u0631\u0627", [e.Uzbek]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", [e.Vietnamese]: "Andorra", [e.Welsh]: "Andorra", [e.Xhosa]: "Andorra", [e.Yiddish]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4", [e.Yoruba]: "Andorra", [e.Zulu]: "Andorra" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Andorra la Vella", total: 78e3 } }, geography: { area: 468, region: T.Europe, sub_region: p.SouthernEurope }, government: { capital: "Andorra la Vella", type: "Constitutional Monarchy" } } }, Angola: { i18n: { calling_codes: [244], currencies: [m.AngolaKwanza], languages: [e.Portuguese, e.Spanish, e.French, e.Italian, e.German, e.English], tz: { offsets: [n.UTC_0, n.UTC_PLUS_1, n.UTC_PLUS_2], regions: [u.AfricaLuanda], timezones: [s.WestAfricaTime] } }, id: r.Angola, info: { flag: { emoji: "\u{1F1E6}\u{1F1EC}", emoji_unicode: "U+1F1E6 U+1F1EC", svg: "https://www.countryflags.io/ao/flat/64.svg" }, tld: [".ao"] }, iso: { alpha2: r.Angola, alpha3: "AGO", numeric: "024" }, name: { alt_spellings: ["AO", "Rep\xFAblica de Angola", "\u0281\u025Bpublika de an"], demonym: "Angolan", native: { endonym: "Angola" }, official: "Republic of Angola", short: "Angola", translations: { [e.Afrikaans]: "Angola", [e.Albanian]: "Ang\xF2la", [e.Amharic]: "\u12A0\u1295\u130E\u120A\u12EB", [e.Arabic]: "\u0623\u0646\u063A\u0648\u0644\u0627", [e.Armenian]: "\u0540\u0561\u0576\u0563\u0561\u056C\u0561\u056F\u0561", [e.Azerbaijani]: "Ang\u0259l", [e.Bashkir]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Basque]: "Angola", [e.Belarusian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Bengali]: "\u0985\u0999\u09CD\u0997\u09B2\u09BE", [e.Berber]: "Angola", [e.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42", [e.Bosnian]: "Angola", [e.Breton]: "Angola", [e.Bulgarian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Burmese]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A", [e.Catalan]: "Angola", [e.Chinese]: "\u5B89\u54E5\u62C9", [e.Croatian]: "Angola", [e.Czech]: "Angola", [e.Danish]: "Angola", [e.Dutch]: "Angola", [e.English]: "Angola", [e.Esperanto]: "Angolo", [e.Estonian]: "Angola", [e.Finnish]: "Angola", [e.French]: "Angola", [e.Frisian]: "Angola", [e.Galician]: "Angola", [e.Georgian]: "\u10D0\u10DC\u10D2\u10DD\u10DA\u10D0", [e.German]: "Angola", [e.Greenlandic]: "Angola", [e.Greek]: "\u0391\u03B3\u03BA\u03CC\u03BB\u03B1", [e.Gujarati]: "\u0A85\u0A82\u0A97\u0ACB\u0AB2\u0ABE", [e.Haitian]: "Angola", [e.Hausa]: "Angola", [e.Hebrew]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4", [e.Hindi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", [e.Hungarian]: "Angola", [e.Icelandic]: "Angola", [e.Igbo]: "Angola", [e.Indonesian]: "Angola", [e.Irish]: "Angola", [e.Italian]: "Angola", [e.Japanese]: "\u30A2\u30F3\u30B4\u30E9", [e.Javanese]: "Anggol", [e.Kannada]: "\u0C85\u0C82\u0C97\u0CCB\u0CB2\u0CBE", [e.Kazakh]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Khmer]: "\u17A2\u1784\u17CB\u1780\u17B6\u179B\u17A2\u1784\u17CB\u1782\u17D2\u179B\u17C1\u179F", [e.Korean]: "\uC559\uACE8\uB77C", [e.Kurdish]: "Angola", [e.Kyrgyz]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Lao]: "\u0EAD\u0EB0\u0E99\u0EB2\u0E94\u0EB2", [e.Latin]: "Angola", [e.Latvian]: "Angola", [e.Lithuanian]: "Angola", [e.Luxembourgish]: "Angola", [e.Macedonian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Malagasy]: "Angola", [e.Malay]: "Angola", [e.Malayalam]: "\u0D05\u0D02\u0D17\u0D4B\u0D33\u0D3E", [e.Maltese]: "Angola", [e.Maori]: "Angola", [e.Marathi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", [e.Mongolian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Nepali]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", [e.Norwegian]: "Angola", [e.Pashto]: "\u0627\u0646\u06AB\u0648\u0644\u0627", [e.Persian]: "\u0622\u0646\u06AF\u0648\u0644\u0627", [e.Polish]: "Angola", [e.Portuguese]: "Angola", [e.Punjabi]: "\u0A05\u0A19\u0A4D\u0A17\u0A4B\u0A32\u0A3E", [e.Romanian]: "Angole", [e.Russian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Samoan]: "Angola", [e.Sanskrit]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", [e.Scots]: "Angola", [e.Serbian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Sesotho]: "Angola", [e.Shona]: "Angola", [e.Sindhi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", [e.Sinhala]: "\u0D86\u0D9C\u0DBD\u0DD2\u0DBA\u0DCF\u0DC0", [e.Slovak]: "Angola", [e.Slovenian]: "Angola", [e.Somali]: "Angola", [e.Spanish]: "Angola", [e.Sudanese]: "Angola", [e.Swahili]: "Angola", [e.Swedish]: "Angola", [e.Tagalog]: "Angola", [e.Tajik]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Tamil]: "\u0B85\u0B99\u0BCD\u0B95\u0BCB\u0BB2\u0BBE", [e.Tatar]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Telugu]: "\u0C05\u0C02\u0C17\u0C4B\u0C32\u0C3E", [e.Thai]: "\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E32\u0E23\u0E2D\u0E32\u0E19\u0E32\u0E21\u0E34\u0E2A\u0E16\u0E32\u0E19", [e.Tibetan]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B", [e.Turkish]: "Angola", [e.Ukrainian]: "\u0410\u043D\u0433\u043E\u043B\u0430", [e.Urdu]: "\u0627\u0646\u06AF\u0648\u0644\u0627", [e.Uzbek]: "Angola", [e.Vietnamese]: "Angola", [e.Xhosa]: "Angola", [e.Welsh]: "Angola", [e.Yiddish]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4", [e.Yoruba]: "Angola", [e.Zulu]: "Angola" } } }, Anguilla: { i18n: { calling_codes: [1264], currencies: [m.DominicaDollar, m.EastCaribbeanDollar, m.Euro, m.UnitedStatesDollar, m.BritishPound], languages: [e.English, e.Spanish], tz: { offsets: [n.UTC_MINUS_4], regions: [u.AmericaAnguilla], timezones: [s.AtlanticStandardTime] } }, id: r.Anguilla, info: { flag: { emoji: "\u{1F1E6}\u{1F1EC}", emoji_unicode: "U+1F1E6 U+1F1EC", svg: "https://www.countryflags.io/ai/flat/64.svg" }, tld: [".ai"] }, iso: { alpha2: r.Anguilla, alpha3: "AIA", numeric: "660" }, name: { alt_spellings: ["AI"], demonym: "Anguillian", native: { endonym: "Anguilla" }, official: "Anguilla", short: "Anguilla", translations: { [e.Afrikaans]: "Anguilla", [e.Albanian]: "Anguilla", [e.Amharic]: "\u12A0\u1295\u1309\u120B", [e.Arabic]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627", [e.Armenian]: "\u0531\u0576\u0563\u056B\u056C\u0561", [e.Azerbaijani]: "Az\u0259rbaycan", [e.Bashkir]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Basque]: "Angila", [e.Belarusian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Bengali]: "\u0985\u0999\u09CD\u0997\u09C0\u09B2\u09BE", [e.Berber]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627", [e.Bhutani]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B", [e.Bosnian]: "Angila", [e.Breton]: "Angila", [e.Bulgarian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Burmese]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A", [e.Catalan]: "Angilla", [e.Chinese]: "\u5B89\u572D\u62C9", [e.Croatian]: "Angila", [e.Czech]: "Anguilla", [e.Danish]: "Anguilla", [e.Dutch]: "Anguilla", [e.English]: "Anguilla", [e.Esperanto]: "Angila", [e.Estonian]: "Anguilla", [e.Finnish]: "Anguilla", [e.French]: "Anguilla", [e.Frisian]: "Angila", [e.Galician]: "Anguilla", [e.Georgian]: "\u10D0\u10DC\u10D2\u10D8\u10DA\u10D0", [e.German]: "Anguilla", [e.Greenlandic]: "Anguilla", [e.Greek]: "\u0391\u03BD\u03B3\u03BA\u03C5\u03BB\u03AC", [e.Gujarati]: "\u0A85\u0A82\u0A97\u0ACD\u0AAF\u0ABE\u0AB2\u0ABE", [e.Haitian]: "Anguilla", [e.Hausa]: "Anguilla", [e.Hebrew]: "\u05D0\u05E0\u05D2\u05D5\u05D9\u05D0\u05DC\u05D4", [e.Hindi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", [e.Hungarian]: "Anguilla", [e.Icelandic]: "Anguilla", [e.Igbo]: "Anguilla", [e.Indonesian]: "Anguilla", [e.Irish]: "Anguilla", [e.Italian]: "Anguilla", [e.Japanese]: "\u30A2\u30F3\u30AE\u30E9", [e.Javanese]: "Anguilla", [e.Kannada]: "\u0C85\u0C82\u0C97\u0CCD\u0CB5\u0CC7\u0CB2\u0CBE", [e.Kazakh]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Khmer]: "\u17A2\u1784\u17CB\u1780\u17B6\u179A\u17A0\u17D2\u1782\u17B8\u1798", [e.Korean]: "\uC575\uADC8\uB77C", [e.Kurdish]: "Anguilla", [e.Kyrgyz]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Lao]: "\u0EAD\u0EB0\u0E99\u0EB0\u0E88\u0EB3", [e.Latin]: "Anguilla", [e.Latvian]: "Anguilla", [e.Lithuanian]: "Anguilla", [e.Luxembourgish]: "Angilla", [e.Macedonian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Malagasy]: "Angila", [e.Malay]: "Anguilla", [e.Malayalam]: "\u0D05\u0D02\u0D17\u0D4D\u0D35\u0D47\u0D32\u0D3E", [e.Maltese]: "Anguilla", [e.Maori]: "Anguilla", [e.Marathi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", [e.Mongolian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Nepali]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", [e.Norwegian]: "Anguilla", [e.Pashto]: "\u0622\u0646\u06AF\u0648\u0644\u0627", [e.Persian]: "\u0622\u0646\u06AF\u0648\u0644\u0627", [e.Polish]: "Anguilla", [e.Portuguese]: "Anguilla", [e.Punjabi]: "\u0A05\u0A02\u0A17\u0A40\u0A32\u0A3E", [e.Romanian]: "Anguilla", [e.Russian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Samoan]: "Anguilla", [e.Sanskrit]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", [e.Scots]: "Anguilla", [e.Serbian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Sesotho]: "Anguilla", [e.Shona]: "Anguilla", [e.Sindhi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", [e.Sinhala]: "\u0D86\u0D82\u0D9C\u0DD2\u0DBD\u0DCF\u0DC0", [e.Slovak]: "Anguilla", [e.Slovenian]: "Anguilla", [e.Somali]: "Anguilla", [e.Spanish]: "Anguilla", [e.Sudanese]: "Anguilla", [e.Swahili]: "Anguilla", [e.Swedish]: "Anguilla", [e.Tagalog]: "Anguilla", [e.Tajik]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Tamil]: "\u0B85\u0B99\u0BCD\u0B95\u0BC8\u0BB2\u0BBE", [e.Tatar]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Telugu]: "\u0C05\u0C02\u0C17\u0C4D\u0C35\u0C47\u0C32\u0C3E", [e.Thai]: "\u0E2D\u0E31\u0E07\u0E01\u0E32\u0E25\u0E32", [e.Tibetan]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B", [e.Turkish]: "Anguilla", [e.Ukrainian]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Urdu]: "\u0622\u0646\u06AF\u0648\u0644\u0627", [e.Uzbek]: "\u0410\u043D\u0433\u0438\u043B\u0438", [e.Vietnamese]: "Anguilla", [e.Welsh]: "Anguilla", [e.Xhosa]: "Anguilla", [e.Yiddish]: "Anguilla", [e.Yoruba]: "Anguilla", [e.Zulu]: "Anguilla" } } }, Antarctica: { i18n: { calling_codes: [672], currencies: [m.UnitedStatesDollar, m.Euro], languages: [e.English, e.Spanish, e.French, e.Portuguese, e.Italian, e.Dutch, e.German, e.Swedish, e.Norwegian, e.Danish, e.Finnish], tz: { offsets: [n.UTC_PLUS_1, n.UTC_PLUS_2], regions: [u.AntarcticaCasey, u.AntarcticaDavis, u.AntarcticaMcMurdo, u.AntarcticaPalmer, u.AntarcticaRothera], timezones: [s.AtlanticStandardTime, s.CentralTime, s.EasternTime, s.AtlanticStandardTime, s.AzoresStandardTime, s.NewfoundlandStandardTime] } }, id: r.Antarctica, info: { flag: { emoji: "\u{1F1E6}\u{1F1F6}", emoji_unicode: "U+1F1E6 U+1F1F6", svg: "https://www.countryflags.io/aq/flat/64.svg" }, tld: [".aq"] }, iso: { alpha2: r.Antarctica, alpha3: "ATA", numeric: "010" }, name: { alt_spellings: ["AQ"], demonym: "Antarctican", native: { endonym: "Antarctica" }, official: "Antarctica", short: "Antarctica", translations: { [e.Afrikaans]: "Antarctica", [e.Albanian]: "Antarktika", [e.Amharic]: "\u12A0\u1295\u1272\u120D\u12AB\u1293", [e.Arabic]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627", [e.Armenian]: "\u0540\u0561\u0576\u0561\u0580\u0561\u057F\u056F\u0578", [e.Azerbaijani]: "Az\u0259rbaycan", [e.Bashkir]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Basque]: "Antarktika", [e.Belarusian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Bengali]: "\u0985\u09A8\u09CD\u09A4\u09B0\u09BE\u09B6\u09CD\u09AC\u09C0", [e.Berber]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627", [e.Bhutani]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B", [e.Bosnian]: "Antarktika", [e.Breton]: "Antarktika", [e.Bulgarian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Burmese]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102E\u1038\u101A\u102C\u1038", [e.Catalan]: "Ant\xE0rtida", [e.Chinese]: "\u5357\u6781\u6D32", [e.Croatian]: "Antarktika", [e.Czech]: "Antarktida", [e.Danish]: "Antarktis", [e.Dutch]: "Antarctica", [e.English]: "Antarctica", [e.Esperanto]: "Antarktika", [e.Estonian]: "Antarktika", [e.Finnish]: "Antarktis", [e.French]: "Antarctica", [e.Frisian]: "Antarktis", [e.Galician]: "Ant\xE1rtida", [e.Georgian]: "\u10D0\u10DC\u10E2\u10D0\u10E0\u10E5\u10E2\u10D8\u10D9\u10D0", [e.German]: "Antarktis", [e.Greenlandic]: "Antarktis", [e.Greek]: "\u0391\u03BD\u03C4\u03B1\u03C1\u03BA\u03C4\u03B9\u03BA\u03AE", [e.Gujarati]: "\u0A85\u0AA8\u0ACD\u0AA4\u0AB0\u0ABE\u0AB6\u0ACD\u0AB5\u0AC0", [e.Haitian]: "Antarctica", [e.Hausa]: "Antarktika", [e.Hebrew]: "\u05D0\u05E0\u05D8\u05E8\u05E7\u05D8\u05D9\u05E7\u05D4", [e.Hindi]: "\u0905\u0928\u094D\u0924\u0930\u0915\u094D\u0937\u0947\u0924\u094D\u0930", [e.Hungarian]: "Antarktika", [e.Icelandic]: "Antarktis", [e.Igbo]: "Antarktika", [e.Indonesian]: "Antarktika", [e.Irish]: "Antarktika", [e.Italian]: "Antartide", [e.Japanese]: "\u5357\u6975", [e.Javanese]: "Antarktika", [e.Kannada]: "\u0C85\u0CA8\u0CCD\u0CA4\u0CB0\u0CBE\u0CB6\u0CCD\u0CB5\u0CBF", [e.Kazakh]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Khmer]: "\u17A2\u1784\u17CB\u179F\u17D2\u1780\u179A\u17A2\u17B6\u1798\u17C9\u17BB\u1799", [e.Korean]: "\uC564\uD2F0\uCE74\uD1A0\uB2C9", [e.Kurdish]: "Antarktika", [e.Kyrgyz]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Lao]: "\u0EAD\u0EB0\u0E99\u0EAD\u0EA5\u0EB2\u0E81\u0EB4\u0EAA\u0EB0", [e.Latin]: "Antarctica", [e.Latvian]: "Antarktika", [e.Lithuanian]: "Antarktis", [e.Luxembourgish]: "Antarktis", [e.Macedonian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Malagasy]: "Antarctica", [e.Malay]: "Antarktika", [e.Malayalam]: "\u0D05\u0D28\u0D4D\u0D24\u0D30\u0D3E\u0D36\u0D4D\u0D35\u0D3F", [e.Maltese]: "Antarktika", [e.Maori]: "Antarktika", [e.Marathi]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E", [e.Mongolian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Nepali]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E", [e.Norwegian]: "Antarktis", [e.Pashto]: "\u0627\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627", [e.Persian]: "\u0622\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627", [e.Polish]: "Antarktyka", [e.Portuguese]: "Ant\xE1rtida", [e.Punjabi]: "\u0A05\u0A28\u0A4D\u0A24\u0A30\u0A3E\u0A36\u0A3F\u0A15\u0A3E", [e.Romanian]: "Antarctica", [e.Russian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Samoan]: "Antarktika", [e.Sanskrit]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E", [e.Scots]: "Antarktika", [e.Serbian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Sesotho]: "Antarktika", [e.Shona]: "Antarktika", [e.Sindhi]: "Antarktika", [e.Sinhala]: "\u0D86\u0DB1\u0DCA\u0DA7\u0DCA\u0DA7\u0DD2\u0D9A\u0DCF\u0DC0", [e.Slovak]: "Antarktika", [e.Slovenian]: "Antarktika", [e.Somali]: "Antarktika", [e.Spanish]: "Ant\xE1rtida", [e.Sudanese]: "Antarktika", [e.Swahili]: "Antarktika", [e.Swedish]: "Antarktis", [e.Tagalog]: "Antarktika", [e.Tajik]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Tamil]: "\u0B85\u0BA9\u0BCD\u0BA4\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BBF\u0B95\u0BCD", [e.Tatar]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Telugu]: "\u0C05\u0C28\u0C4D\u0C24\u0C30\u0C3E\u0C36\u0C4D\u0C35\u0C3F\u0C15\u0C3E", [e.Thai]: "\u0E20\u0E39\u0E21\u0E34\u0E20\u0E32\u0E04\u0E2D\u0E32\u0E19\u0E31\u0E19\u0E15\u0E34\u0E01\u0E32", [e.Tibetan]: "\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72\u0F0B\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72", [e.Turkish]: "Antarktika", [e.Ukrainian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Urdu]: "\u0627\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627", [e.Uzbek]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", [e.Vietnamese]: "\u0110\u1EA5t Antarktik", [e.Welsh]: "Antarktika", [e.Xhosa]: "Antarktika", [e.Yiddish]: "Antarktika", [e.Yoruba]: "Antarktika", [e.Zulu]: "Antarktika" } } }, Armenia: { i18n: { calling_codes: [374], currencies: [m.ArmeniaDram], languages: [e.Armenian], tz: { offsets: [n.UTC_PLUS_4], regions: [u.AsiaJakarta], timezones: [s.ArmeniaTime] } }, id: r.Armenia, info: { flag: { emoji: "\u{1F1E6}\u{1F1F2}", emoji_unicode: "U+1F1E6 U+1F1F2", svg: "https://www.countryflags.io/am/flat/64.svg" }, tld: [".am"] }, iso: { alpha2: r.Armenia, alpha3: "ARM", numeric: "051" }, name: { alt_spellings: ["AM", "Hayastan", "Republic of Armenia", "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"], demonym: "Armenian", native: { endonym: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576" }, official: "Republic of Armenia", short: "Armenia", translations: { [e.Afrikaans]: "Armeni\xEB", [e.Albanian]: "Armenia", [e.Amharic]: "\u12A0\u121B\u122D\u129B", [e.Arabic]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627", [e.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576", [e.Azerbaijani]: "Az\u0259rbaycan", [e.Bashkir]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e.Basque]: "Arm\xE9nia", [e.Belarusian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e.Bengali]: "\u0986\u09B0\u09CD\u09AE\u09C7\u09A8\u09BF", [e.Berber]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627", [e.Bhutani]: "\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42", [e.Bosnian]: "Armenija", [e.Breton]: "Armeni\xEB", [e.Bulgarian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e.Burmese]: "\u1021\u102C\u1019\u1010\u102D\u1010\u1039", [e.Catalan]: "Arm\xE8nia", [e.Chinese]: "\u4E9A\u7F8E\u5C3C\u4E9A", [e.Croatian]: "Armenija", [e.Czech]: "Arm\xE9nie", [e.Danish]: "Armenien", [e.Dutch]: "Armeni\xEB", [e.English]: "Armenia", [e.Esperanto]: "Armenia", [e.Estonian]: "Armeenia", [e.Finnish]: "Armenia", [e.French]: "Armenia", [e.Frisian]: "Armeenia", [e.Galician]: "Arm\xE9nia", [e.Georgian]: "\u10D0\u10E0\u10DB\u10DD\u10DC\u10D8", [e.German]: "Armenien", [e.Greenlandic]: "Armenia", [e.Greek]: "\u0391\u03C1\u03BC\u03B5\u03BD\u03AF\u03B1", [e.Gujarati]: "\u0A85\u0AB0\u0ACD\u0AAE\u0AC7\u0AA8\u0ABF", [e.Haitian]: "Armenia", [e.Hausa]: "Armenia", [e.Hebrew]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4", [e.Hindi]: "\u0905\u05E8\u05DE\u05E0\u093F\u092F\u093E", [e.Hungarian]: "\xD6rm\xE9nyorsz\xE1g", [e.Icelandic]: "Armenia", [e.Igbo]: "Armenia", [e.Indonesian]: "Armenia", [e.Irish]: "Armenia", [e.Italian]: "Armenia", [e.Japanese]: "\u30A2\u30EB\u30E1\u30CB\u30A2", [e.Javanese]: "Armenia", [e.Kannada]: "\u0C85\u0CB0\u0CCD\u0CAE\u0CC7\u0CA8\u0CBF", [e.Kazakh]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e.Khmer]: "\u17A2\u17B6\u1798\u17C9\u17C1\u179A\u17B8", [e.Korean]: "\uC544\uB974\uBA54\uB2C8\uC544", [e.Kurdish]: "Armenia", [e.Kyrgyz]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e.Lao]: "\u0EAD\u0EB2\u0EAB\u0EBC\u0E99\u0EB2", [e.Latin]: "Armenia", [e.Latvian]: "Armeenia", [e.Lithuanian]: "Arm\u0117nija", [e.Luxembourgish]: "Armenien", [e.Macedonian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430", [e.Malagasy]: "Armenia", [e.Malay]: "Armenia", [e.Malayalam]: "\u0D05\u0D30\u0D4D\u200D\u0D2E\u0D47\u0D28\u0D3F", [e.Maltese]: "Armenia", [e.Maori]: "Armenia", [e.Marathi]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F", [e.Mongolian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e.Nepali]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F", [e.Norwegian]: "Armenia", [e.Pashto]: "\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627", [e.Persian]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646", [e.Polish]: "Armenia", [e.Portuguese]: "Armenia", [e.Punjabi]: "\u0A05\u0A30\u0A2E\u0A40\u0A28\u0A40", [e.Romanian]: "Armenia", [e.Russian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e.Samoan]: "Armenia", [e.Sanskrit]: "Armenia", [e.Scots]: "Armenia", [e.Serbian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430", [e.Sesotho]: "Armenia", [e.Shona]: "Armenia", [e.Sindhi]: "Armenia", [e.Sinhala]: "\u0D86\u0DBB\u0DCA\u0DB8\u0DD3\u0DB1\u0DD2", [e.Slovak]: "Armenia", [e.Slovenian]: "Armenija", [e.Somali]: "Armenia", [e.Spanish]: "Armenia", [e.Sudanese]: "Armenia", [e.Swahili]: "Armenia", [e.Swedish]: "Armenien", [e.Tagalog]: "Armenia", [e.Tajik]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e.Tamil]: "\u0B85\u0BB0\u0BCD\u0BAE\u0BC7\u0BA9\u0BBF\u0BAF\u0BA9\u0BCD", [e.Tatar]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e.Telugu]: "\u0C05\u0C30\u0C4D\u0C2E\u0C47\u0C28\u0C3F", [e.Thai]: "\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E21\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19", [e.Tibetan]: "\u0F68\u0F62\u0F0B\u0F58\u0F7A\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F74\u0F0D", [e.Turkish]: "Ermenistan", [e.Ukrainian]: "\u0410\u0440\u043C\u0435\u043D\u0456\u044F", [e.Urdu]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646", [e.Uzbek]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", [e.Vietnamese]: "Armenia", [e.Welsh]: "Armenia", [e.Xhosa]: "Armenia", [e.Yiddish]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4", [e.Yoruba]: "Armenia", [e.Zulu]: "Armenia" } } }, SomeCountry: { i18n: { calling_codes: [], currencies: [], languages: [], tz: { offsets: [], regions: [], timezones: [] } }, id: r.AmericanSamoa, info: { flag: { emoji: "", emoji_unicode: "", svg: "" }, tld: [] }, iso: { alpha2: r.AmericanSamoa, alpha3: "", numeric: "" }, name: { alt_spellings: [], demonym: "", native: { endonym: "" }, official: "", short: "", translations: { [e.Afrikaans]: "", [e.Albanian]: "", [e.Amharic]: "", [e.Arabic]: "", [e.Armenian]: "", [e.Azerbaijani]: "", [e.Bashkir]: "", [e.Basque]: "", [e.Belarusian]: "", [e.Bengali]: "", [e.Berber]: "", [e.Bhutani]: "", [e.Bosnian]: "", [e.Breton]: "", [e.Bulgarian]: "", [e.Burmese]: "", [e.Catalan]: "", [e.Chinese]: "", [e.Croatian]: "", [e.Czech]: "", [e.Danish]: "", [e.Dutch]: "", [e.English]: "", [e.Esperanto]: "", [e.Estonian]: "", [e.Finnish]: "", [e.French]: "", [e.Frisian]: "", [e.Galician]: "", [e.Georgian]: "", [e.German]: "", [e.Greenlandic]: "", [e.Greek]: "", [e.Gujarati]: "", [e.Haitian]: "", [e.Hausa]: "", [e.Hebrew]: "", [e.Hindi]: "", [e.Hungarian]: "", [e.Icelandic]: "", [e.Igbo]: "", [e.Indonesian]: "", [e.Irish]: "", [e.Italian]: "", [e.Japanese]: "", [e.Javanese]: "", [e.Kannada]: "", [e.Kazakh]: "", [e.Khmer]: "", [e.Korean]: "", [e.Kurdish]: "", [e.Kyrgyz]: "", [e.Lao]: "", [e.Latin]: "", [e.Latvian]: "", [e.Lithuanian]: "", [e.Luxembourgish]: "", [e.Macedonian]: "", [e.Malagasy]: "", [e.Malay]: "", [e.Malayalam]: "", [e.Maltese]: "", [e.Maori]: "", [e.Marathi]: "", [e.Mongolian]: "", [e.Nepali]: "", [e.Norwegian]: "", [e.Pashto]: "", [e.Persian]: "", [e.Polish]: "", [e.Portuguese]: "", [e.Punjabi]: "", [e.Romanian]: "", [e.Russian]: "", [e.Samoan]: "", [e.Sanskrit]: "", [e.Scots]: "", [e.Serbian]: "", [e.Sesotho]: "", [e.Shona]: "", [e.Sindhi]: "", [e.Sinhala]: "", [e.Slovak]: "", [e.Slovenian]: "", [e.Somali]: "", [e.Spanish]: "", [e.Sudanese]: "", [e.Swahili]: "", [e.Swedish]: "", [e.Tagalog]: "", [e.Tajik]: "", [e.Tamil]: "", [e.Tatar]: "", [e.Telugu]: "", [e.Thai]: "", [e.Tibetan]: "", [e.Turkish]: "", [e.Ukrainian]: "", [e.Urdu]: "", [e.Uzbek]: "", [e.Vietnamese]: "", [e.Welsh]: "", [e.Xhosa]: "", [e.Yiddish]: "", [e.Yoruba]: "", [e.Zulu]: "" } } } });
({ id: e.Afrikaans, language: { code: t.Afrikaans, name: "Afrikaans", native: "Afrikaans" }, name: "Afrikaans", native_name: "Afrikaans", rtl: false });
({ country: { code: r.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e.AfrikaansSouthAfrica, language: { code: t.Afrikaans, name: "Afrikaans", native: "Afrikaans" }, name: "Afrikaans (South Africa)", native_name: "Afrikaans (Suid-Afrika)", rtl: false });
({ id: e.Albanian, language: { code: t.Albanian, name: "Albanian", native: "Shqip" }, name: "Albanian", native_name: "Shqip", rtl: false });
({ country: { code: r.Albania, name: "Albania", native: "Shqip\xEBria" }, id: e.AlbanianAlbania, language: { code: t.Albanian, name: "Albanian", native: "Shqip" }, name: "Albanian (Albania)", native_name: "Shqip (Shqip\xEBria)", rtl: false });
({ id: e.Amharic, language: { code: t.Amharic, name: "Amharic", native: "\u12A0\u121B\u122D\u129B" }, name: "Amharic", native_name: "\u12A0\u121B\u122D\u129B", rtl: false });
({ country: { code: r.Ethiopia, name: "Ethiopia", native: "\u12A2\u1275\u12EE\u1335\u12EB" }, id: e.AmharicEthiopia, language: { code: t.Amharic, name: "Amharic", native: "\u12A0\u121B\u122D\u129B" }, name: "Amharic (Ethiopia)", native_name: "\u12A0\u121B\u122D\u129B (\u12A2\u1275\u12EE\u1335\u12EB)", rtl: false });
({ id: e.Arabic, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629", rtl: true });
({ country: { code: r.Algeria, name: "Algeria", native: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631" }, id: e.ArabicAlgeria, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Algeria)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u062C\u0632\u0627\u0626\u0631)", rtl: true });
({ country: { code: r.Bahrain, name: "Bahrain", native: "\u0627\u0644\u0628\u062D\u0631\u064A\u0646" }, id: e.ArabicBahrain, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Bahrain)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0628\u062D\u0631\u064A\u0646)", rtl: true });
({ country: { code: r.Egypt, name: "Egypt", native: "\u0645\u0635\u0631" }, id: e.ArabicEgypt, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Egypt)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0645\u0635\u0631)", rtl: true });
({ country: { code: r.Iraq, name: "Iraq", native: "\u0627\u0644\u0639\u0631\u0627\u0642" }, id: e.ArabicIraq, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Iraq)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0639\u0631\u0627\u0642)", rtl: true });
({ country: { code: r.Jordan, name: "Jordan", native: "\u0627\u0644\u0623\u0631\u062F\u0646" }, id: e.ArabicJordan, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Jordan)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0623\u0631\u062F\u0646)", rtl: true });
({ country: { code: r.Kuwait, name: "Kuwait", native: "\u0627\u0644\u0643\u0648\u064A\u062A" }, id: e.ArabicKuwait, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Kuwait)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0643\u0648\u064A\u062A)", rtl: true });
({ country: { code: r.Lebanon, name: "Lebanon", native: "\u0644\u0628\u0646\u0627\u0646" }, id: e.ArabicLebanon, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Lebanon)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u0628\u0646\u0627\u0646)", rtl: true });
({ country: { code: r.Libya, name: "Libya", native: "\u0644\u064A\u0628\u064A\u0627" }, id: e.ArabicLibya, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Libya)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u064A\u0628\u064A\u0627)", rtl: true });
({ country: { code: r.Morocco, name: "Morocco", native: "\u0627\u0644\u0645\u063A\u0631\u0628" }, id: e.ArabicMorocco, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Morocco)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u063A\u0631\u0628)", rtl: true });
({ country: { code: r.Oman, name: "Oman", native: "\u0639\u0645\u0627\u0646" }, id: e.ArabicOman, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Oman)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0639\u0645\u0627\u0646)", rtl: true });
({ country: { code: r.Qatar, name: "Qatar", native: "\u0642\u0637\u0631" }, id: e.ArabicQatar, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Qatar)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0642\u0637\u0631)", rtl: true });
({ country: { code: r.SaudiArabia, name: "Saudi Arabia", native: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629" }, id: e.ArabicSaudiArabia, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Saudi Arabia)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629)", rtl: true });
({ country: { code: r.Tunisia, name: "Tunisia", native: "\u062A\u0648\u0646\u0633" }, id: e.ArabicTunisia, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Tunisia)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u062A\u0648\u0646\u0633)", rtl: true });
({ country: { code: r.UnitedArabEmirates, name: "United Arab Emirates", native: "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629" }, id: e.ArabicUnitedArabEmirates, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (United Arab Emirates)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629)", rtl: true });
({ country: { code: r.Yemen, name: "Yemen", native: "\u0627\u0644\u064A\u0645\u0646" }, id: e.ArabicYemen, language: { code: t.Arabic, name: "Arabic", native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" }, name: "Arabic (Yemen)", native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u064A\u0645\u0646)", rtl: true });
({ id: e.Armenian, language: { code: t.Armenian, name: "Armenian", native: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576" }, name: "Armenian", native_name: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576", rtl: false });
({ country: { code: r.Armenia, name: "Armenia", native: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576" }, id: e.ArmenianArmenia, language: { code: t.Armenian, name: "Armenian", native: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576" }, name: "Armenian (Armenia)", native_name: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576 (\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576)", rtl: false });
({ id: e.Azerbaijani, language: { code: t.Azerbaijani, name: "Azeribaijani", native: "Az\u0259rbaycan" }, name: "Azeri", native_name: "Az\u0259rbaycan", rtl: false });
({ country: { code: r.Azerbaijan, name: "Azerbaijan", native: "Az\u0259rbaycan" }, id: e.AzerbaijaniAzerbaijan, language: { code: t.Azerbaijani, name: "Azerbaijani", native: "Az\u0259rbaycan" }, name: "Azeri (Azerbaijan)", native_name: "Az\u0259rbaycan (Az\u0259rbaycan)", rtl: false });
({ id: e.Basque, language: { code: t.Basque, name: "Basque", native: "Euskara" }, name: "Basque", native_name: "Euskara", rtl: false });
({ country: { code: r.Spain, name: "Spain", native: "Espa\xF1a" }, id: e.BasqueSpain, language: { code: t.Basque, name: "Basque", native: "Euskara" }, name: "Basque (Spain)", native_name: "Euskara (Espa\xF1a)", rtl: false });
({ id: e.Belarusian, language: { code: t.Belarusian, name: "Belarusian", native: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F" }, name: "Belarusian", native_name: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F", rtl: false });
({ country: { code: r.Belarus, name: "Belarus", native: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C" }, id: e.BelarusianBelarus, language: { code: t.Belarusian, name: "Belarusian", native: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F" }, name: "Belarusian (Belarus)", native_name: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C)", rtl: false });
({ id: e.Bengali, language: { code: t.Bengali, name: "Bengali", native: "\u09AC\u09BE\u0982\u09B2\u09BE" }, name: "Bengali", native_name: "\u09AC\u09BE\u0982\u09B2\u09BE", rtl: false });
({ country: { code: r.Bangladesh, name: "Bangladesh", native: "\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6" }, id: e.BengaliBangladesh, language: { code: t.Bengali, name: "Bengali", native: "\u09AC\u09BE\u0982\u09B2\u09BE" }, name: "Bengali (Bangladesh)", native_name: "\u09AC\u09BE\u0982\u09B2\u09BE (\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6)", rtl: false });
({ id: e.Bhutani, language: { code: t.Bhutani, name: "Bhutani", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Bhutani", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42", rtl: false });
({ country: { code: r.Bhutan, name: "Bhutan", native: "\u0F60\u0F56\u0FB2\u0F74\u0F42" }, id: e.BhutaniBhutan, language: { code: t.Bhutani, name: "Bhutani", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Bhutani (Bhutan)", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42)", rtl: false });
({ id: e.Bulgarian, language: { code: t.Bulgarian, name: "Bulgarian", native: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438" }, name: "Bulgarian", native_name: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438", rtl: false });
({ country: { code: r.Bulgaria, name: "Bulgaria", native: "\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F" }, id: e.BulgarianBulgaria, language: { code: t.Bulgarian, name: "Bulgarian", native: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438" }, name: "Bulgarian (Bulgaria)", native_name: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 (\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F)", rtl: false });
({ id: e.Burmese, language: { code: t.Burmese, name: "Burmese", native: "\u1017\u1019\u102C\u1005\u102C" }, name: "Burmese", native_name: "\u1017\u1019\u102C\u1005\u102C", rtl: false });
({ country: { code: r.Myanmar, name: "Myanmar", native: "\u1019\u103C\u1014\u103A\u1019\u102C" }, id: e.BurmeseMyanmar, language: { code: t.Burmese, name: "Burmese", native: "\u1017\u1019\u102C\u1005\u102C" }, name: "Burmese (Myanmar)", native_name: "\u1017\u1019\u102C\u1005\u102C (\u1019\u103C\u1014\u103A\u1019\u102C)", rtl: false });
({ id: e.Cantonese, language: { code: t.Cantonese, name: "Cantonese", native: "\u5EE3\u6771\u8A71" }, name: "Cantonese", native_name: "\u5EE3\u6771\u8A71", rtl: false });
({ country: { code: r.HongKong, name: "Hong Kong", native: "\u9999\u6E2F" }, id: e.CantoneseHongKong, language: { code: t.Cantonese, name: "Cantonese", native: "\u5EE3\u6771\u8A71" }, name: "Cantonese (Hong Kong)", native_name: "\u5EE3\u6771\u8A71 (\u9999\u6E2F)", rtl: false });
({ id: e.Catalan, language: { code: t.Catalan, name: "Catalan", native: "Catal\xE0" }, name: "Catalan", native_name: "Catal\xE0", rtl: false });
({ country: { code: r.Spain, name: "Spain", native: "Espa\xF1a" }, id: e.CatalanSpain, language: { code: t.Catalan, name: "Catalan", native: "Catal\xE0" }, name: "Catalan (Spain)", native_name: "Catal\xE0 (Espanya)", rtl: false });
({ id: e.ChineseSimplified, language: { code: t.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Simplified)", native_name: "\u4E2D\u6587", rtl: false });
({ country: { code: r.China, name: "China", native: "\u4E2D\u56FD" }, id: e.ChineseSimplifiedChina, language: { code: t.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Simplified/China)", native_name: "\u4E2D\u6587 (\u4E2D\u56FD)", rtl: false });
({ country: { code: r.HongKong, name: "Hong Kong", native: "\u9999\u6E2F" }, id: e.ChineseSimplifiedHongKong, language: { code: t.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Simplified/Hong Kong)", native_name: "\u4E2D\u6587 (\u9999\u6E2F)", rtl: false });
({ country: { code: r.Macau, name: "Macau", native: "\u6FB3\u9580" }, id: e.ChineseSimplifiedMacau, language: { code: t.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Simplified/Macau)", native_name: "\u4E2D\u6587 (\u6FB3\u9580)", rtl: false });
({ country: { code: r.Singapore, name: "Singapore", native: "\u65B0\u52A0\u5761" }, id: e.ChineseSimplifiedSingapore, language: { code: t.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Simplified/Singapore)", native_name: "\u4E2D\u6587 (\u65B0\u52A0\u5761)", rtl: false });
({ id: e.ChineseTraditional, language: { code: t.Chinese, name: "Chinese", native: "\u4E2D\u6587" }, name: "Chinese (Traditional)", native_name: "\u4E2D\u6587", rtl: false });
({ country: { code: r.HongKong, name: "Hong Kong", native: "\u9999\u6E2F" }, id: e.ChineseTraditionalHongKong, language: { code: t.Chinese, name: "Chinese (Traditional/Hong Kong)", native: "\u4E2D\u6587" }, name: "Chinese (Hong Kong)", native_name: "\u4E2D\u6587 (\u9999\u6E2F)", rtl: false });
({ country: { code: r.Macau, name: "Macau", native: "\u6FB3\u9580" }, id: e.ChineseTraditionalMacau, language: { code: t.Chinese, name: "Chinese (Traditional/Macau)", native: "\u4E2D\u6587" }, name: "Chinese (Macau)", native_name: "\u4E2D\u6587 (\u6FB3\u9580)", rtl: false });
({ country: { code: r.Singapore, name: "Singapore", native: "\u65B0\u52A0\u5761" }, id: e.ChineseTraditionalSingapore, language: { code: t.Chinese, name: "Chinese (Traditional/Singapore)", native: "\u4E2D\u6587" }, name: "Chinese (Singapore)", native_name: "\u4E2D\u6587 (\u65B0\u52A0\u5761)", rtl: false });
({ id: e.Croatian, language: { code: t.Croatian, name: "Croatian", native: "Hrvatski" }, name: "Croatian", native_name: "Hrvatski", rtl: false });
({ country: { code: r.BosniaAndHerzegovina, name: "Bosnia and Herzegovina", native: "Bosna i Hercegovina" }, id: e.CroatianBosniaAndHerzegovina, language: { code: t.Croatian, name: "Croatian", native: "Hrvatski" }, name: "Croatian (Bosnia and Herzegovina)", native_name: "Hrvatski (Bosna i Hercegovina)", rtl: false });
({ country: { code: r.Croatia, name: "Croatia", native: "Hrvatska" }, id: e.CroatianCroatia, language: { code: t.Croatian, name: "Croatian", native: "Hrvatski" }, name: "Croatian (Croatia)", native_name: "Hrvatski (Hrvatska)", rtl: false });
({ id: e.Czech, language: { code: t.Czech, name: "Czech", native: "\u010Ce\u0161tina" }, name: "Czech", native_name: "\u010Ce\u0161tina", rtl: false });
({ country: { code: r.CzechRepublic, name: "Czech Republic", native: "\u010Cesk\xE1 republika" }, id: e.CzechCzechRepublic, language: { code: t.Czech, name: "Czech", native: "\u010Ce\u0161tina" }, name: "Czech (Czech Republic)", native_name: "\u010Ce\u0161tina (\u010Cesk\xE1 republika)", rtl: false });
({ id: e.Danish, language: { code: t.Danish, name: "Danish", native: "Dansk" }, name: "Danish", native_name: "Dansk", rtl: false });
({ country: { code: r.Denmark, name: "Denmark", native: "Danmark" }, id: e.DanishDenmark, language: { code: t.Danish, name: "Danish", native: "Dansk" }, name: "Danish (Denmark)", native_name: "Dansk (Danmark)", rtl: false });
({ id: e.Divehi, language: { code: t.Divehi, name: "Divehi", native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0" }, name: "Divehi", native_name: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0", rtl: true });
({ country: { code: r.Maldives, name: "Maldives", native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC" }, id: e.DivehiMaldives, language: { code: t.Divehi, name: "Divehi", native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0" }, name: "Divehi (Maldives)", native_name: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0 (\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC)", rtl: true });
({ id: e.Dutch, language: { code: t.Dutch, name: "Dutch", native: "Nederlands" }, name: "Dutch", native_name: "Nederlands", rtl: false });
({ country: { code: r.Belgium, name: "Belgium", native: "Belgi\xEB" }, id: e.DutchBelgium, language: { code: t.Dutch, name: "Dutch", native: "Nederlands" }, name: "Dutch (Belgium)", native_name: "Nederlands (Belgi\xEB)", rtl: false });
({ country: { code: r.Netherlands, name: "Netherlands", native: "Nederland" }, id: e.DutchNetherlands, language: { code: t.Dutch, name: "Dutch", native: "Nederlands" }, name: "Dutch (Netherlands)", native_name: "Nederlands (Nederland)", rtl: false });
({ id: e.English, language: { code: t.English, name: "English", native: "English" }, name: "English", native_name: "English", rtl: false });
({ country: { code: r.Australia, name: "Australia", native: "Australia" }, id: e.EnglishAustralia, language: { code: t.English, name: "English", native: "English" }, name: "English (Australia)", native_name: "English (Australia)", rtl: false });
({ country: { code: r.Belgium, name: "Belgium", native: "Belgi\xEB" }, id: e.EnglishBelgium, language: { code: t.English, name: "English", native: "English" }, name: "English (Belgium)", native_name: "English (Belgi\xEB)", rtl: false });
({ country: { code: r.Canada, name: "Canada", native: "Canada" }, id: e.EnglishCanada, language: { code: t.English, name: "English", native: "English" }, name: "English (Canada)", native_name: "English (Canada)", rtl: false });
({ country: { code: r.Ireland, name: "Ireland", native: "\xC9ire" }, id: e.EnglishIreland, language: { code: t.English, name: "English", native: "English" }, name: "English (Ireland)", native_name: "English (\xC9ire)", rtl: false });
({ country: { code: r.Jamaica, name: "Jamaica", native: "Jamaica" }, id: e.EnglishJamaica, language: { code: t.English, name: "English", native: "English" }, name: "English (Jamaica)", native_name: "English (Jamaica)", rtl: false });
({ country: { code: r.NewZealand, name: "New Zealand", native: "New Zealand" }, id: e.EnglishNewZealand, language: { code: t.English, name: "English", native: "English" }, name: "English (New Zealand)", native_name: "English (New Zealand)", rtl: false });
({ country: { code: r.Philippines, name: "Philippines", native: "Philippines" }, id: e.EnglishPhilippines, language: { code: t.English, name: "English", native: "English" }, name: "English (Philippines)", native_name: "English (Philippines)", rtl: false });
({ country: { code: r.Singapore, name: "Singapore", native: "Singapore" }, id: e.EnglishSingapore, language: { code: t.English, name: "English", native: "English" }, name: "English (Singapore)", native_name: "English (Singapore)", rtl: false });
({ country: { code: r.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e.EnglishSouthAfrica, language: { code: t.English, name: "English", native: "English" }, name: "English (South Africa)", native_name: "English (South Africa)", rtl: false });
({ country: { code: r.TrinidadAndTobago, name: "Trinidad and Tobago", native: "Trinidad and Tobago" }, id: e.EnglishTrinidadAndTobago, language: { code: t.English, name: "English", native: "English" }, name: "English (Trinidad and Tobago)", native_name: "English (Trinidad and Tobago)", rtl: false });
({ country: { code: r.UnitedKingdom, name: "United Kingdom", native: "United Kingdom" }, id: e.EnglishUnitedKingdom, language: { code: t.English, name: "English", native: "English" }, name: "English (United Kingdom)", native_name: "English (United Kingdom)", rtl: false });
({ country: { code: r.UnitedStates, name: "United States", native: "United States" }, id: e.EnglishUnitedStates, language: { code: t.English, name: "English", native: "English" }, name: "English (United States)", native_name: "English (United States)", rtl: false });
({ country: { code: r.Zimbabwe, name: "Zimbabwe", native: "Zimbabwe" }, id: e.EnglishZimbabwe, language: { code: t.English, name: "English", native: "English" }, name: "English (Zimbabwe)", native_name: "English (Zimbabwe)", rtl: false });
({ id: e.Esperanto, language: { code: t.Esperanto, name: "Esperanto", native: "Esperanto" }, name: "Esperanto", native_name: "Esperanto", rtl: false });
({ id: e.Estonian, language: { code: t.Estonian, name: "Estonian", native: "Eesti" }, name: "Estonian", native_name: "Eesti", rtl: false });
({ country: { code: r.Estonia, name: "Estonia", native: "Eesti" }, id: e.EstonianEstonia, language: { code: t.Estonian, name: "Estonian", native: "Eesti" }, name: "Estonian (Estonia)", native_name: "Eesti (Eesti)", rtl: false });
({ id: e.Faroese, language: { code: t.Faroese, name: "Faroese", native: "F\xF8royskt" }, name: "Faroese", native_name: "F\xF8royskt", rtl: false });
({ country: { code: r.FaroeIslands, name: "Faroe Islands", native: "F\xF8royar" }, id: e.FaroeseFaroeIslands, language: { code: t.Faroese, name: "Faroese", native: "F\xF8royskt" }, name: "Faroese (Faroe Islands)", native_name: "F\xF8royskt (F\xF8royar)", rtl: false });
({ id: e.Farsi, language: { code: t.Farsi, name: "Farsi", native: "\u0641\u0627\u0631\u0633\u06CC" }, name: "Farsi", native_name: "\u0641\u0627\u0631\u0633\u06CC", rtl: true });
({ country: { code: r.Iran, name: "Iran", native: "\u0627\u06CC\u0631\u0627\u0646" }, id: e.FarsiIran, language: { code: t.Farsi, name: "Farsi", native: "\u0641\u0627\u0631\u0633\u06CC" }, name: "Farsi (Iran)", native_name: "\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)", rtl: true });
({ id: e.Filipino, language: { code: t.Filipino, name: "Filipino", native: "Filipino" }, name: "Filipino", native_name: "Filipino", rtl: false });
({ country: { code: r.Philippines, name: "Philippines", native: "Pilipinas" }, id: e.FilipinoPhilippines, language: { code: t.Filipino, name: "Filipino", native: "Filipino" }, name: "Filipino (Philippines)", native_name: "Filipino (Pilipinas)", rtl: false });
({ id: e.Finnish, language: { code: t.Finnish, name: "Finnish", native: "Suomi" }, name: "Finnish", native_name: "Suomi", rtl: false });
({ country: { code: r.Finland, name: "Finland", native: "Suomi" }, id: e.FinnishFinland, language: { code: t.Finnish, name: "Finnish", native: "Suomi" }, name: "Finnish (Finland)", native_name: "Suomi (Suomi)", rtl: false });
({ id: e.French, language: { code: t.French, name: "French", native: "Fran\xE7ais" }, name: "French", native_name: "Fran\xE7ais", rtl: false });
({ country: { code: r.Belgium, name: "Belgium", native: "Belgique" }, id: e.FrenchBelgium, language: { code: t.French, name: "French", native: "Fran\xE7ais" }, name: "French (Belgium)", native_name: "Fran\xE7ais (Belgique)", rtl: false });
({ country: { code: r.Canada, name: "Canada", native: "Canada" }, id: e.FrenchCanada, language: { code: t.French, name: "French", native: "Fran\xE7ais" }, name: "French (Canada)", native_name: "Fran\xE7ais (Canada)", rtl: false });
({ country: { code: r.France, name: "France", native: "France" }, id: e.FrenchFrance, language: { code: t.French, name: "French", native: "Fran\xE7ais" }, name: "French (France)", native_name: "Fran\xE7ais (France)", rtl: false });
({ country: { code: r.Luxembourg, name: "Luxembourg", native: "Luxembourg" }, id: e.FrenchLuxembourg, language: { code: t.French, name: "French", native: "Fran\xE7ais" }, name: "French (Luxembourg)", native_name: "Fran\xE7ais (Luxembourg)", rtl: false });
({ country: { code: r.Monaco, name: "Monaco", native: "Monaco" }, id: e.FrenchMonaco, language: { code: t.French, name: "French", native: "Fran\xE7ais" }, name: "French (Monaco)", native_name: "Fran\xE7ais (Monaco)", rtl: false });
({ country: { code: r.Reunion, name: "Reunion", native: "La R\xE9union" }, id: e.FrenchReunion, language: { code: t.French, name: "French", native: "Fran\xE7ais" }, name: "French (Reunion)", native_name: "Fran\xE7ais (La R\xE9union)", rtl: false });
({ country: { code: r.Switzerland, name: "Switzerland", native: "Suisse" }, id: e.FrenchSwitzerland, language: { code: t.French, name: "French", native: "Fran\xE7ais" }, name: "French (Switzerland)", native_name: "Fran\xE7ais (Suisse)", rtl: false });
({ id: e.Frisian, language: { code: t.Frisian, name: "Frisian", native: "Frysk" }, name: "Frisian", native_name: "Frysk", rtl: false });
({ country: { code: r.Netherlands, name: "Netherlands", native: "Nederland" }, id: e.FrisianNetherlands, language: { code: t.Frisian, name: "Frisian", native: "Frysk" }, name: "Frisian (Netherlands)", native_name: "Frysk (Nederland)", rtl: false });
({ id: e.Galician, language: { code: t.Galician, name: "Galician", native: "Galego" }, name: "Galician", native_name: "Galego", rtl: false });
({ country: { code: r.Spain, name: "Spain", native: "Espa\xF1a" }, id: e.GalicianSpain, language: { code: t.Galician, name: "Galician", native: "Galego" }, name: "Galician (Spain)", native_name: "Galego (Espa\xF1a)", rtl: false });
({ id: e.Georgian, language: { code: t.Georgian, name: "Georgian", native: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8" }, name: "Georgian", native_name: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8", rtl: false });
({ country: { code: r.Georgia, name: "Georgia", native: "\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD" }, id: e.GeorgianGeorgia, language: { code: t.Georgian, name: "Georgian", native: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8" }, name: "Georgian (Georgia)", native_name: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8 (\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD)", rtl: false });
({ id: e.German, language: { code: t.German, name: "German", native: "Deutsch" }, name: "German", native_name: "Deutsch", rtl: false });
({ country: { code: r.Austria, name: "Austria", native: "\xD6sterreich" }, id: e.GermanAustria, language: { code: t.German, name: "German", native: "Deutsch" }, name: "German (Austria)", native_name: "Deutsch (\xD6sterreich)", rtl: false });
({ country: { code: r.Belgium, name: "Belgium", native: "Belgi\xEB" }, id: e.GermanBelgium, language: { code: t.German, name: "German", native: "Deutsch" }, name: "German (Belgium)", native_name: "Deutsch (Belgi\xEB)", rtl: false });
({ country: { code: r.Switzerland, name: "Switzerland", native: "Suisse" }, id: e.GermanSwitzerland, language: { code: t.German, name: "German", native: "Deutsch" }, name: "German (Switzerland)", native_name: "Deutsch (Suisse)", rtl: false });
({ country: { code: r.Liechtenstein, name: "Liechtenstein", native: "Liechtenstein" }, id: e.GermanLiechtenstein, language: { code: t.German, name: "German", native: "Deutsch" }, name: "German (Liechtenstein)", native_name: "Deutsch (Liechtenstein)", rtl: false });
({ country: { code: r.Luxembourg, name: "Luxembourg", native: "Luxembourg" }, id: e.GermanLuxembourg, language: { code: t.German, name: "German", native: "Deutsch" }, name: "German (Luxembourg)", native_name: "Deutsch (Luxembourg)", rtl: false });
({ id: e.Greek, language: { code: t.Greek, name: "Greek", native: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC" }, name: "Greek", native_name: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC", rtl: false });
({ country: { code: r.Greece, name: "Greece", native: "\u0395\u03BB\u03BB\u03AC\u03B4\u03B1" }, id: e.GreekGreece, language: { code: t.Greek, name: "Greek", native: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC" }, name: "Greek (Greece)", native_name: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC (\u0395\u03BB\u03BB\u03AC\u03B4\u03B1)", rtl: false });
({ id: e.Greenlandic, language: { code: t.Greenlandic, name: "Greenlandic", native: "Kalaallisut" }, name: "Greenlandic", native_name: "Kalaallisut", rtl: false });
({ country: { code: r.Greenland, name: "Greenland", native: "Kalaallit Nunaat" }, id: e.GreenlandicGreenland, language: { code: t.Greenlandic, name: "Greenlandic", native: "Kalaallisut" }, name: "Greenlandic (Greenland)", native_name: "Kalaallisut (Kalaallit Nunaat)", rtl: false });
({ id: e.Gujarati, language: { code: t.Gujarati, name: "Gujarati", native: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0" }, name: "Gujarati", native_name: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0", rtl: false });
({ country: { code: r.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e.GujaratiIndia, language: { code: t.Gujarati, name: "Gujarati", native: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0" }, name: "Gujarati (India)", native_name: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0 (\u092D\u093E\u0930\u0924)", rtl: false });
({ id: e.Hausa, language: { code: t.Hausa, name: "Hausa", native: "\u0647\u064E\u0648\u064F\u0633\u064E" }, name: "Hausa", native_name: "\u0647\u064E\u0648\u064F\u0633\u064E", rtl: false });
({ country: { code: r.Ghana, name: "Ghana", native: "Ghana" }, id: e.HausaGhana, language: { code: t.Hausa, name: "Hausa", native: "\u0647\u064E\u0648\u064F\u0633\u064E" }, name: "Hausa (Ghana)", native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Ghana)", rtl: false });
({ country: { code: r.Niger, name: "Niger", native: "Niger" }, id: e.HausaNiger, language: { code: t.Hausa, name: "Hausa", native: "\u0647\u064E\u0648\u064F\u0633\u064E" }, name: "Hausa (Niger)", native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Niger)", rtl: false });
({ country: { code: r.Nigeria, name: "Nigeria", native: "Nigeria" }, id: e.HausaNigeria, language: { code: t.Hausa, name: "Hausa", native: "\u0647\u064E\u0648\u064F\u0633\u064E" }, name: "Hausa (Nigeria)", native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Nigeria)", rtl: false });
({ id: e.Hebrew, language: { code: t.Hebrew, name: "Hebrew", native: "\u05E2\u05D1\u05E8\u05D9\u05EA" }, name: "Hebrew", native_name: "\u05E2\u05D1\u05E8\u05D9\u05EA", rtl: true });
({ country: { code: r.Israel, name: "Hebrew", native: "" }, id: e.HebrewIsrael, language: { code: t.Hebrew, name: "Hebrew", native: "" }, name: "Hebrew (Israel)", native_name: "", rtl: true });
({ id: e.Hindi, language: { code: t.Hindi, name: "Hindi", native: "\u0939\u093F\u0928\u094D\u0926\u0940" }, name: "Hindi", native_name: "\u0939\u093F\u0928\u094D\u0926\u0940", rtl: false });
({ country: { code: r.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e.HindiIndia, language: { code: t.Hindi, name: "Hindi", native: "\u092D\u093E\u0930\u0924\u0940\u092F" }, name: "Hindi (India)", native_name: "\u092D\u093E\u0930\u0924\u0940\u092F", rtl: false });
({ id: e.Hungarian, language: { code: t.Hungarian, name: "Hungarian", native: "Magyar" }, name: "Hungarian", native_name: "Magyar", rtl: false });
({ country: { code: r.Hungary, name: "Hungary", native: "Magyarorsz\xE1g" }, id: e.HungarianHungary, language: { code: t.Hungarian, name: "Hungarian", native: "Magyar" }, name: "Hungarian (Hungary)", native_name: "Magyar (Magyarorsz\xE1g)", rtl: false });
({ id: e.Icelandic, language: { code: t.Icelandic, name: "Icelandic", native: "\xCDslenska" }, name: "Icelandic", native_name: "\xCDslenska", rtl: false });
({ country: { code: r.Iceland, name: "Iceland", native: "\xCDsland" }, id: e.IcelandicIceland, language: { code: t.Icelandic, name: "Icelandic", native: "\xCDslenska" }, name: "Icelandic (Iceland)", native_name: "\xCDslenska (\xCDsland)", rtl: false });
({ id: e.Igbo, language: { code: t.Igbo, name: "Igbo", native: "Igbo" }, name: "Igbo", native_name: "Igbo", rtl: false });
({ id: e.Indonesian, language: { code: t.Indonesian, name: "Indonesian", native: "Bahasa Indonesia" }, name: "Indonesian", native_name: "Bahasa Indonesia", rtl: false });
({ country: { code: r.Indonesia, name: "Indonesia", native: "Indonesia" }, id: e.IndonesianIndonesia, language: { code: t.Indonesian, name: "Indonesian", native: "Bahasa Indonesia" }, name: "Indonesian (Indonesia)", native_name: "Bahasa Indonesia (Indonesia)", rtl: false });
({ id: e.Irish, language: { code: t.Irish, name: "Irish", native: "Gaeilge" }, name: "Irish", native_name: "Gaeilge", rtl: false });
({ country: { code: r.Ireland, name: "Ireland", native: "\xC9ire" }, id: e.IrishIreland, language: { code: t.Irish, name: "Irish", native: "Gaeilge" }, name: "Irish (Ireland)", native_name: "Gaeilge (\xC9ire)", rtl: false });
({ id: e.Italian, language: { code: t.Italian, name: "Italian", native: "Italiano" }, name: "Italian", native_name: "Italiano", rtl: false });
({ country: { code: r.Italy, name: "Italy", native: "Italia" }, id: e.ItalianItaly, language: { code: t.Italian, name: "Italian", native: "Italiano" }, name: "Italian (Italy)", native_name: "Italiano (Italia)", rtl: false });
({ country: { code: r.Switzerland, name: "Switzerland", native: "Schweiz" }, id: e.ItalianSwitzerland, language: { code: t.Italian, name: "Italian", native: "Italiano" }, name: "Italian (Switzerland)", native_name: "Italiano (Svizzera)", rtl: false });
({ id: e.Japanese, language: { code: t.Japanese, name: "Japanese", native: "\u65E5\u672C\u8A9E" }, name: "Japanese", native_name: "\u65E5\u672C\u8A9E", rtl: false });
({ country: { code: r.Japan, name: "Japan", native: "\u65E5\u672C" }, id: e.JapaneseJapan, language: { code: t.Japanese, name: "Japanese", native: "\u65E5\u672C\u8A9E" }, name: "Japanese (Japan)", native_name: "\u65E5\u672C\u8A9E (\u65E5\u672C)", rtl: false });
({ id: e.Kannada, language: { code: t.Kannada, name: "Kannada", native: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1" }, name: "Kannada", native_name: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1", rtl: false });
({ country: { code: r.India, name: "India", native: "\u0CAD\u0CBE\u0CB0\u0CA4" }, id: e.KannadaIndia, language: { code: t.Kannada, name: "Kannada", native: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1" }, name: "Kannada (India)", native_name: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1 (\u0CAD\u0CBE\u0CB0\u0CA4)", rtl: false });
({ id: e.Kazakh, language: { code: t.Kazakh, name: "Kazakh", native: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456" }, name: "Kazakh", native_name: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456", rtl: false });
({ country: { code: r.Kazakhstan, name: "Kazakhstan", native: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D" }, id: e.KazakhKazakhstan, language: { code: t.Kazakh, name: "Kazakh", native: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456" }, name: "Kazakh (Kazakhstan)", native_name: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)", rtl: false });
({ id: e.Khmer, language: { code: t.Khmer, name: "Khmer", native: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A" }, name: "Khmer", native_name: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A", rtl: false });
({ country: { code: r.Cambodia, name: "Cambodia", native: "\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6" }, id: e.KhmerCambodia, language: { code: t.Khmer, name: "Khmer", native: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A" }, name: "Khmer (Cambodia)", native_name: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A (\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6)", rtl: false });
({ id: e.Konkani, language: { code: t.Konkani, name: "Konkani", native: "\u0915\u094B\u0902\u0915\u0923\u0940" }, name: "Konkani", native_name: "\u0915\u094B\u0902\u0915\u0923\u0940", rtl: false });
({ country: { code: r.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e.KonkaniIndia, language: { code: t.Konkani, name: "Konkani", native: "\u0915\u094B\u0902\u0915\u0923\u0940" }, name: "Konkani (India)", native_name: "\u0915\u094B\u0902\u0915\u0923\u0940 (\u092D\u093E\u0930\u0924)", rtl: false });
({ id: e.Korean, language: { code: t.Korean, name: "Korean", native: "\uD55C\uAD6D\uC5B4" }, name: "Korean", native_name: "\uD55C\uAD6D\uC5B4", rtl: false });
({ country: { code: r.SouthKorea, name: "South Korea", native: "\uB300\uD55C\uBBFC\uAD6D" }, id: e.KoreanSouthKorea, language: { code: t.Korean, name: "Korean", native: "\uD55C\uAD6D\uC5B4" }, name: "Korean (South Korea)", native_name: "\uD55C\uAD6D\uC5B4 (\uB300\uD55C\uBBFC\uAD6D)", rtl: false });
({ id: e.Kurdish, language: { code: t.Kurdish, name: "Kurdish", native: "Kurd\xEE" }, name: "Kurdish", native_name: "Kurd\xEE", rtl: false });
({ country: { code: r.Iraq, name: "Iraq", native: "\u0627\u0644\u0639\u0631\u0627\u0642" }, id: e.KurdishIraq, language: { code: t.Kurdish, name: "Kurdish", native: "Kurd\xEE" }, name: "Kurdish (Iraq)", native_name: "Kurd\xEE (\u0627\u0644\u0639\u0631\u0627\u0642)", rtl: false });
({ country: { code: r.Turkey, name: "Turkey", native: "T\xFCrkiye" }, id: e.KurdishTurkey, language: { code: t.Kurdish, name: "Kurdish", native: "Kurd\xEE" }, name: "Kurdish (Turkey)", native_name: "Kurd\xEE (T\xFCrkiye)", rtl: false });
({ id: e.Kyrgyz, language: { code: t.Kyrgyz, name: "Kyrgyz", native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430" }, name: "Kyrgyz", native_name: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430", rtl: false });
({ country: { code: r.Kyrgyzstan, name: "Kyrgyzstan", native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D" }, id: e.KyrgyzKyrgyzstan, language: { code: t.Kyrgyz, name: "Kyrgyz", native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430" }, name: "Kyrgyz (Kyrgyzstan)", native_name: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430 (\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D)", rtl: false });
({ id: e.Lao, language: { code: t.Lao, name: "Lao", native: "\u0EA5\u0EB2\u0EA7" }, name: "Lao", native_name: "\u0EA5\u0EB2\u0EA7", rtl: false });
({ country: { code: r.Laos, name: "Laos", native: "\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95" }, id: e.LaoLaos, language: { code: t.Lao, name: "Lao", native: "\u0EA5\u0EB2\u0EA7" }, name: "Lao (Laos)", native_name: "\u0EA5\u0EB2\u0EA7 (\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95)", rtl: false });
({ id: e.Latvian, language: { code: t.Latvian, name: "Latvian", native: "Latvie\u0161u" }, name: "Latvian", native_name: "Latvie\u0161u", rtl: false });
({ country: { code: r.Latvia, name: "Latvia", native: "Latvija" }, id: e.LatvianLatvia, language: { code: t.Latvian, name: "Latvian", native: "Latvie\u0161u" }, name: "Latvian (Latvia)", native_name: "Latvie\u0161u (Latvija)", rtl: false });
({ id: e.Lithuanian, language: { code: t.Lithuanian, name: "Lithuanian", native: "Lietuvi\u0173" }, name: "Lithuanian", native_name: "Lietuvi\u0173", rtl: false });
({ country: { code: r.Lithuania, name: "Lithuania", native: "Lietuva" }, id: e.LithuanianLithuania, language: { code: t.Lithuanian, name: "Lithuanian", native: "Lietuvi\u0173" }, name: "Lithuanian (Lithuania)", native_name: "Lietuvi\u0173 (Lietuva)", rtl: false });
({ id: e.Luxembourgish, language: { code: t.Luxembourgish, name: "Luxembourgish", native: "L\xEBtzebuergesch" }, name: "Luxembourgish", native_name: "L\xEBtzebuergesch", rtl: false });
({ country: { code: r.Belgium, name: "Belgium", native: "Belgi\xEB" }, id: e.LuxembourgishBelgium, language: { code: t.Luxembourgish, name: "Luxembourgish", native: "L\xEBtzebuergesch" }, name: "Luxembourgish (Belgium)", native_name: "L\xEBtzebuergesch (Belgi\xEB)", rtl: false });
({ country: { code: r.Luxembourg, name: "Luxembourg", native: "Luxembourg" }, id: e.LuxembourgishLuxembourg, language: { code: t.Luxembourgish, name: "Luxembourgish", native: "L\xEBtzebuergesch" }, name: "Luxembourgish (Luxembourg)", native_name: "L\xEBtzebuergesch (Luxembourg)", rtl: false });
({ id: e.Macedonian, language: { code: t.Macedonian, name: "Macedonian", native: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438" }, name: "Macedonian", native_name: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438", rtl: false });
({ country: { code: r.NorthMacedonia, name: "Macedonia", native: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430" }, id: e.MacedonianNorthMacedonia, language: { code: t.Macedonian, name: "Macedonian", native: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438" }, name: "Macedonian (North Macedonia)", native_name: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 (\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430)", rtl: false });
({ id: e.Malay, language: { code: t.Malay, name: "Malay", native: "Bahasa Melayu" }, name: "Malay", native_name: "Bahasa Melayu", rtl: false });
({ country: { code: r.Brunei, name: "Brunei", native: "Negara Brunei Darussalam" }, id: e.MalayBrunei, language: { code: t.Malay, name: "Malay", native: "Bahasa Melayu" }, name: "Malay (Brunei)", native_name: "Bahasa Melayu (Negara Brunei Darussalam)", rtl: false });
({ country: { code: r.Malaysia, name: "Malaysia", native: "Malaysia" }, id: e.MalayMalaysia, language: { code: t.Malay, name: "Malay", native: "Bahasa Melayu" }, name: "Malay (Malaysia)", native_name: "Bahasa Melayu (Malaysia)", rtl: false });
({ country: { code: r.Singapore, name: "Singapore", native: "Singapore" }, id: e.MalaySingapore, language: { code: t.Malay, name: "Malay", native: "Bahasa Melayu" }, name: "Malay (Singapore)", native_name: "Bahasa Melayu (Singapore)", rtl: false });
({ country: { code: r.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e.MalayIndia, language: { code: t.Malay, name: "Malay", native: "Bahasa Melayu" }, name: "Malay (India)", native_name: "Bahasa Melayu (\u092D\u093E\u0930\u0924)", rtl: false });
({ id: e.Maltese, language: { code: t.Maltese, name: "Maltese", native: "Malti" }, name: "Maltese", native_name: "Malti", rtl: false });
({ country: { code: r.Malta, name: "Malta", native: "Malta" }, id: e.MalteseMalta, language: { code: t.Maltese, name: "Maltese", native: "Malti" }, name: "Maltese (Malta)", native_name: "Malti (Malta)", rtl: false });
({ id: e.Maori, language: { code: t.Maori, name: "Maori", native: "M\u0101ori" }, name: "Maori", native_name: "M\u0101ori", rtl: false });
({ country: { code: r.NewZealand, name: "New Zealand", native: "New Zealand" }, id: e.MaoriNewZealand, language: { code: t.Maori, name: "Maori", native: "M\u0101ori" }, name: "Maori (New Zealand)", native_name: "M\u0101ori (New Zealand)", rtl: false });
({ id: e.Marathi, language: { code: t.Marathi, name: "Marathi", native: "\u092E\u0930\u093E\u0920\u0940" }, name: "Marathi", native_name: "\u092E\u0930\u093E\u0920\u0940", rtl: false });
({ country: { code: r.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e.MarathiIndia, language: { code: t.Marathi, name: "Marathi", native: "\u092E\u0930\u093E\u0920\u0940" }, name: "Marathi (India)", native_name: "\u092E\u0930\u093E\u0920\u0940 (\u092D\u093E\u0930\u0924)", rtl: false });
({ id: e.Mongolian, language: { code: t.Mongolian, name: "Mongolian", native: "\u041C\u043E\u043D\u0433\u043E\u043B" }, name: "Mongolian", native_name: "\u041C\u043E\u043D\u0433\u043E\u043B", rtl: false });
({ country: { code: r.Mongolia, name: "Mongolia", native: "\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441" }, id: e.MongolianMongolia, language: { code: t.Mongolian, name: "Mongolian", native: "\u041C\u043E\u043D\u0433\u043E\u043B" }, name: "Mongolian (Mongolia)", native_name: "\u041C\u043E\u043D\u0433\u043E\u043B (\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441)", rtl: false });
({ id: e.Montenegrin, language: { code: t.Montenegrin, name: "Montenegrin", native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A" }, name: "Montenegrin", native_name: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A", rtl: false });
({ country: { code: r.Montenegro, name: "Montenegro", native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A" }, id: e.MontenegrinMontenegro, language: { code: t.Montenegrin, name: "Montenegrin", native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A" }, name: "Montenegrin (Montenegro)", native_name: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A (\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A)", rtl: false });
({ id: e.Nepali, language: { code: t.Nepali, name: "Nepali", native: "\u0928\u0947\u092A\u093E\u0932\u0940" }, name: "Nepali", native_name: "\u0928\u0947\u092A\u093E\u0932\u0940", rtl: false });
({ country: { code: r.Nepal, name: "Nepal", native: "\u0928\u0947\u092A\u093E\u0932" }, id: e.NepaliNepal, language: { code: t.Nepali, name: "Nepali", native: "\u0928\u0947\u092A\u093E\u0932\u0940" }, name: "Nepali (Nepal)", native_name: "\u0928\u0947\u092A\u093E\u0932\u0940 (\u0928\u0947\u092A\u093E\u0932)", rtl: false });
({ id: e.NorthernSotho, language: { code: t.NorthernSotho, name: "Northern Sotho", native: "Sesotho sa Leboa" }, name: "Northern Sotho", native_name: "Sesotho sa Leboa", rtl: false });
({ country: { code: r.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e.NorthernSothoSouthAfrica, language: { code: t.NorthernSotho, name: "Northern Sotho", native: "Sesotho sa Leboa" }, name: "Northern Sotho (South Africa)", native_name: "Sesotho sa Leboa (South Africa)", rtl: false });
({ id: e.Norwegian, language: { code: t.Norwegian, name: "Norwegian", native: "Norsk" }, name: "Norwegian", native_name: "Norsk", rtl: false });
({ country: { code: r.Norway, name: "Norway", native: "Norge" }, id: e.NorwegianBokmalNorway, language: { code: t.NorwegianBokmal, name: "Norwegian", native: "Norsk" }, name: "Norwegian (Bokmal)", native_name: "Norsk (Bokm\xE5l)", rtl: false });
({ country: { code: r.Norway, name: "Norway", native: "Norge" }, id: e.NorwegianNynorskNorway, language: { code: t.NorwegianNynorsk, name: "Norwegian", native: "Norsk" }, name: "Norwegian (Nynorsk)", native_name: "Norsk (Nynorsk)", rtl: false });
({ id: e.Oriya, language: { code: t.Oriya, name: "Oriya", native: "\u0B13\u0B21\u0B3C\u0B3F\u0B06" }, name: "Oriya", native_name: "\u0B13\u0B21\u0B3C\u0B3F\u0B06", rtl: false });
({ country: { code: r.India, name: "India", native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE" }, id: e.OriyaIndia, language: { code: t.Oriya, name: "Oriya", native: "\u0B13\u0B21\u0B3C\u0B3F\u0B06" }, name: "Oriya (India)", native_name: "\u0B13\u0B21\u0B3C\u0B3F\u0B06 (\u0B2D\u0B3E\u0B30\u0B24)", rtl: false });
({ id: e.Pashto, language: { code: t.Pashto, name: "Pashto", native: "\u067E\u069A\u062A\u0648" }, name: "Pashto", native_name: "\u067E\u069A\u062A\u0648", rtl: true });
({ country: { code: r.Afghanistan, name: "Afghanistan", native: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646" }, id: e.PashtoAfghanistan, language: { code: t.Pashto, name: "Pashto", native: "\u067E\u069A\u062A\u0648" }, name: "Pashto (Afghanistan)", native_name: "\u067E\u069A\u062A\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)", rtl: true });
({ id: e.Persian, language: { code: t.Persian, name: "Persian", native: "\u0641\u0627\u0631\u0633\u06CC" }, name: "Persian", native_name: "\u0641\u0627\u0631\u0633\u06CC", rtl: true });
({ country: { code: r.Iran, name: "Iran", native: "\u0627\u06CC\u0631\u0627\u0646" }, id: e.PersianIran, language: { code: t.Persian, name: "Persian", native: "\u0641\u0627\u0631\u0633\u06CC" }, name: "Persian (Iran)", native_name: "\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)", rtl: true });
({ id: e.Polish, language: { code: t.Polish, name: "Polish", native: "Polski" }, name: "Polish", native_name: "Polski", rtl: false });
({ country: { code: r.Poland, name: "Poland", native: "Polska" }, id: e.PolishPoland, language: { code: t.Polish, name: "Polish", native: "Polski" }, name: "Polish (Poland)", native_name: "Polski (Polska)", rtl: false });
({ id: e.Portuguese, language: { code: t.Portuguese, name: "Portuguese", native: "Portugu\xEAs" }, name: "Portuguese", native_name: "Portugu\xEAs", rtl: false });
({ country: { code: r.Brazil, name: "Brazil", native: "Brasil" }, id: e.PortugueseBrazil, language: { code: t.Portuguese, name: "Portuguese", native: "Portugu\xEAs" }, name: "Portuguese (Brazil)", native_name: "Portugu\xEAs (Brasil)", rtl: false });
({ country: { code: r.Portugal, name: "Portugal", native: "Portugal" }, id: e.PortuguesePortugal, language: { code: t.Portuguese, name: "Portuguese", native: "Portugu\xEAs" }, name: "Portuguese (Portugal)", native_name: "Portugu\xEAs (Portugal)", rtl: false });
({ id: e.Punjabi, language: { code: t.Punjabi, name: "Punjabi", native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40" }, name: "Punjabi", native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40", rtl: true });
({ country: { code: r.Pakistan, name: "Pakistan", native: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646" }, id: e.PunjabiPakistan, language: { code: t.Punjabi, name: "Punjabi", native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40" }, name: "Punjabi (Pakistan)", native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)", rtl: true });
({ country: { code: r.India, name: "India", native: "\u0A2D\u0A3E\u0A30\u0A24" }, id: e.PunjabiIndia, language: { code: t.Punjabi, name: "Punjabi", native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40" }, name: "Punjabi (India)", native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u0A2D\u0A3E\u0A30\u0A24)", rtl: true });
({ id: e.Quechua, language: { code: t.Quechua, name: "Quechua", native: "Runa Simi" }, name: "Quechua", native_name: "Runa Simi", rtl: false });
({ country: { code: r.Bolivia, name: "Bolivia", native: "Bolivia" }, id: e.QuechuaBolivia, language: { code: t.Quechua, name: "Quechua", native: "Runa Simi" }, name: "Quechua (Bolivia)", native_name: "Runa Simi (Bolivia)", rtl: false });
({ country: { code: r.Ecuador, name: "Ecuador", native: "Ecuador" }, id: e.QuechuaEcuador, language: { code: t.Quechua, name: "Quechua", native: "Runa Simi" }, name: "Quechua (Ecuador)", native_name: "Runa Simi (Ecuador)", rtl: false });
({ country: { code: r.Peru, name: "Peru", native: "Per\xFA" }, id: e.QuechuaPeru, language: { code: t.Quechua, name: "Quechua", native: "Runa Simi" }, name: "Quechua (Peru)", native_name: "Runa Simi (Per\xFA)", rtl: false });
({ id: e.Romanian, language: { code: t.Romanian, name: "Romanian", native: "Rom\xE2n\u0103" }, name: "Romanian", native_name: "Rom\xE2n\u0103", rtl: false });
({ country: { code: r.Romania, name: "Romania", native: "Rom\xE2nia" }, id: e.RomanianRomania, language: { code: t.Romanian, name: "Romanian", native: "Rom\xE2n\u0103" }, name: "Romanian (Romania)", native_name: "Rom\xE2n\u0103 (Rom\xE2nia)", rtl: false });
({ id: e.Russian, language: { code: t.Russian, name: "Russian", native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }, name: "Russian", native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439", rtl: false });
({ country: { code: r.RussianFederation, name: "Russian Federation", native: "\u0420\u043E\u0441\u0441\u0438\u044F" }, id: e.RussianRussia, language: { code: t.Russian, name: "Russian", native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }, name: "Russian (Russia)", native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0420\u043E\u0441\u0441\u0438\u044F)", rtl: false });
({ country: { code: r.Ukraine, name: "Ukraine", native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430" }, id: e.RussianUkraine, language: { code: t.Russian, name: "Russian", native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }, name: "Russian (Ukraine)", native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)", rtl: false });
({ country: { code: r.Kazakhstan, name: "Kazakhstan", native: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D" }, id: e.RussianKazakhstan, language: { code: t.Russian, name: "Russian", native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }, name: "Russian (Kazakhstan)", native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)", rtl: false });
({ country: { code: r.Kyrgyzstan, name: "Kyrgyzstan", native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430" }, id: e.RussianKyrgyzstan, language: { code: t.Russian, name: "Russian", native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }, name: "Russian (Kyrgyzstan)", native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430)", rtl: false });
({ id: e.Sanskrit, language: { code: t.Sanskrit, name: "Sanskrit", native: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D" }, name: "Sanskrit", native_name: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D", rtl: false });
({ country: { code: r.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e.SanskritIndia, language: { code: t.Sanskrit, name: "Sanskrit", native: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D" }, name: "Sanskrit (India)", native_name: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D (\u092D\u093E\u0930\u0924)", rtl: false });
({ id: e.Sami, language: { code: t.Sami, name: "Sami", native: "S\xE1megiella" }, name: "Sami", native_name: "S\xE1megiella", rtl: false });
({ country: { code: r.Finland, name: "Finland", native: "Suomi" }, id: e.SamiFinland, language: { code: t.Sami, name: "Sami", native: "S\xE1megiella" }, name: "Sami (Finland)", native_name: "S\xE1megiella (Suomi)", rtl: false });
({ country: { code: r.Norway, name: "Norway", native: "Norge" }, id: e.SamiNorway, language: { code: t.Sami, name: "Sami", native: "S\xE1megiella" }, name: "Sami (Norway)", native_name: "S\xE1megiella (Norge)", rtl: false });
({ country: { code: r.Sweden, name: "Sweden", native: "Sverige" }, id: e.SamiSweden, language: { code: t.Sami, name: "Sami", native: "S\xE1megiella" }, name: "Sami (Sweden)", native_name: "S\xE1megiella (Sverige)", rtl: false });
({ id: e.Samoan, language: { code: t.Samoan, name: "Samoan", native: "Gagana fa\u2019a S\u0101moa" }, name: "Samoan", native_name: "Gagana fa\u2019a S\u0101moa", rtl: false });
({ country: { code: r.Samoa, name: "Samoa", native: "Samoa" }, id: e.SamoanSamoa, language: { code: t.Samoan, name: "Samoan", native: "Gagana fa\u2019a S\u0101moa" }, name: "Samoan (Samoa)", native_name: "Gagana fa\u2019a S\u0101moa (Samoa)", rtl: false });
({ id: e.Serbian, language: { code: t.Serbian, name: "Serbian (Latin)", native: "Srpski (Latinica)" }, name: "Serbian (Latin)", native_name: "Srpski (Latinica)", rtl: false });
({ country: { code: r.BosniaAndHerzegovina, name: "Bosnia and Herzegovina", native: "Bosna i Hercegovina" }, id: e.SerbianBosniaAndHerzegovina, language: { code: t.Serbian, name: "Serbian (Latin)", native: "Srpski (Latinica)" }, name: "Serbian (Latin) (Bosnia and Herzegovina)", native_name: "Srpski (Latinica) (Bosna i Hercegovina)", rtl: false });
({ country: { code: r.SerbiaAndMontenegro, name: "Serbia and Montenegro", native: "Srbija i Crna Gora" }, id: e.SerbianSerbiaAndMontenegro, language: { code: t.Serbian, name: "Serbian (Latin)", native: "Srpski (Latinica)" }, name: "Serbian (Latin) (Serbia and Montenegro)", native_name: "Srpski (Latinica) (Srbija i Crna Gora)", rtl: false });
({ id: e.SerbianCyrillic, language: { code: t.SerbianCyrillic, name: "Serbian", native: "\u0421\u0440\u043F\u0441\u043A\u0438" }, name: "Serbian (Cyrillic)", native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430)", rtl: false });
({ country: { code: r.BosniaAndHerzegovina, name: "Bosnia and Herzegovina", native: "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430" }, id: e.SerbianCyrillicBosniaAndHerzegovina, language: { code: t.SerbianCyrillic, name: "Serbian", native: "\u0421\u0440\u043F\u0441\u043A\u0438" }, name: "Serbian (Cyrillic, Bosnia and Herzegovina)", native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430)", rtl: false });
({ country: { code: r.SerbiaAndMontenegro, name: "Serbia and Montenegro", native: "\u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430" }, id: e.SerbianCyrillicSerbiaAndMontenegro, language: { code: t.SerbianCyrillic, name: "Serbian", native: "\u0421\u0440\u043F\u0441\u043A\u0438" }, name: "Serbian (Cyrillic, Serbia and Montenegro)", native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430)", rtl: false });
({ id: e.Slovak, language: { code: t.Slovak, name: "Slovak", native: "Sloven\u010Dina" }, name: "Slovak", native_name: "Sloven\u010Dina", rtl: false });
({ country: { code: r.Slovakia, name: "Slovakia", native: "Slovensko" }, id: e.SlovakSlovakia, language: { code: t.Slovak, name: "Slovak", native: "Sloven\u010Dina" }, name: "Slovak (Slovakia)", native_name: "Sloven\u010Dina (Slovensko)", rtl: false });
({ id: e.Slovenian, language: { code: t.Slovenian, name: "Slovenian", native: "Sloven\u0161\u010Dina" }, name: "Slovenian", native_name: "Sloven\u0161\u010Dina", rtl: false });
({ country: { code: r.Slovenia, name: "Slovenia", native: "Slovenija" }, id: e.SlovenianSlovenia, language: { code: t.Slovenian, name: "Slovenian", native: "Sloven\u0161\u010Dina" }, name: "Slovenian (Slovenia)", native_name: "Sloven\u0161\u010Dina (Slovenija)", rtl: false });
({ id: e.Somali, language: { code: t.Somali, name: "Somali", native: "Soomaaliga" }, name: "Somali", native_name: "Soomaaliga", rtl: true });
({ country: { code: r.Somalia, name: "Somalia", native: "Soomaaliya" }, id: e.SomaliSomalia, language: { code: t.Somali, name: "Somali", native: "Soomaaliga" }, name: "Somali (Somalia)", native_name: "Soomaaliga (Soomaaliya)", rtl: true });
({ id: e.Spanish, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish", native_name: "Espa\xF1ol", rtl: false });
({ country: { code: r.Argentina, name: "Argentina", native: "Argentina" }, id: e.SpanishArgentina, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Argentina)", native_name: "Espa\xF1ol (Argentina)", rtl: false });
({ country: { code: r.Bolivia, name: "Bolivia", native: "Bolivia" }, id: e.SpanishBolivia, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Bolivia)", native_name: "Espa\xF1ol (Bolivia)", rtl: false });
({ country: { code: r.Chile, name: "Chile", native: "Chile" }, id: e.SpanishChile, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Chile)", native_name: "Espa\xF1ol (Chile)", rtl: false });
({ country: { code: r.Colombia, name: "Colombia", native: "Colombia" }, id: e.SpanishColombia, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Colombia)", native_name: "Espa\xF1ol (Colombia)", rtl: false });
({ country: { code: r.CostaRica, name: "Costa Rica", native: "Costa Rica" }, id: e.SpanishCostaRica, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Costa Rica)", native_name: "Espa\xF1ol (Costa Rica)", rtl: false });
({ country: { code: r.Cuba, name: "Cuba", native: "Cuba" }, id: e.SpanishCuba, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Cuba)", native_name: "Espa\xF1ol (Cuba)", rtl: false });
({ country: { code: r.DominicanRepublic, name: "Dominican Republic", native: "Rep\xFAblica Dominicana" }, id: e.SpanishDominicanRepublic, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Dominican Republic)", native_name: "Espa\xF1ol (Rep\xFAblica Dominicana)", rtl: false });
({ country: { code: r.Ecuador, name: "Ecuador", native: "Ecuador" }, id: e.SpanishEcuador, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Ecuador)", native_name: "Espa\xF1ol (Ecuador)", rtl: false });
({ country: { code: r.ElSalvador, name: "El Salvador", native: "El Salvador" }, id: e.SpanishElSalvador, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (El Salvador)", native_name: "Espa\xF1ol (El Salvador)", rtl: false });
({ country: { code: r.EquatorialGuinea, name: "Equatorial Guinea", native: "Guinea Ecuatorial" }, id: e.SpanishEquatorialGuinea, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Equatorial Guinea)", native_name: "Espa\xF1ol (Guinea Ecuatorial)", rtl: false });
({ country: { code: r.Guatemala, name: "Guatemala", native: "Guatemala" }, id: e.SpanishGuatemala, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Guatemala)", native_name: "Espa\xF1ol (Guatemala)", rtl: false });
({ country: { code: r.Honduras, name: "Honduras", native: "Honduras" }, id: e.SpanishHonduras, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Honduras)", native_name: "Espa\xF1ol (Honduras)", rtl: false });
({ country: { code: r.Mexico, name: "Mexico", native: "M\xE9xico" }, id: e.SpanishMexico, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Mexico)", native_name: "Espa\xF1ol (M\xE9xico)", rtl: false });
({ country: { code: r.Nicaragua, name: "Nicaragua", native: "Nicaragua" }, id: e.SpanishNicaragua, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Nicaragua)", native_name: "Espa\xF1ol (Nicaragua)", rtl: false });
({ country: { code: r.Panama, name: "Panama", native: "Panam\xE1" }, id: e.SpanishPanama, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Panama)", native_name: "Espa\xF1ol (Panam\xE1)", rtl: false });
({ country: { code: r.Paraguay, name: "Paraguay", native: "Paraguay" }, id: e.SpanishParaguay, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Paraguay)", native_name: "Espa\xF1ol (Paraguay)", rtl: false });
({ country: { code: r.Peru, name: "Peru", native: "Per\xFA" }, id: e.SpanishPeru, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Peru)", native_name: "Espa\xF1ol (Per\xFA)", rtl: false });
({ country: { code: r.PuertoRico, name: "Puerto Rico", native: "Puerto Rico" }, id: e.SpanishPuertoRico, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Puerto Rico)", native_name: "Espa\xF1ol (Puerto Rico)", rtl: false });
({ country: { code: r.Uruguay, name: "Uruguay", native: "Uruguay" }, id: e.SpanishUruguay, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Uruguay)", native_name: "Espa\xF1ol (Uruguay)", rtl: false });
({ country: { code: r.Venezuela, name: "Venezuela", native: "Venezuela" }, id: e.SpanishVenezuela, language: { code: t.Spanish, name: "Spanish", native: "Espa\xF1ol" }, name: "Spanish (Venezuela)", native_name: "Espa\xF1ol (Venezuela)", rtl: false });
({ country: { code: r.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e.SutuSouthAfrica, language: { code: t.Sutu, name: "Sutu", native: "Sesotho" }, name: "Sutu (South Africa)", native_name: "Sesotho (Afrika Borwa)", rtl: false });
({ id: e.Swahili, language: { code: t.Swahili, name: "Swahili", native: "Kiswahili" }, name: "Swahili", native_name: "Kiswahili", rtl: false });
({ country: { code: r.Kenya, name: "Kenya", native: "Kenya" }, id: e.SwahiliKenya, language: { code: t.Swahili, name: "Swahili", native: "Kiswahili" }, name: "Swahili (Kenya)", native_name: "Kiswahili (Kenya)", rtl: false });
({ id: e.Swedish, language: { code: t.Swedish, name: "Swedish", native: "Svenska" }, name: "Swedish", native_name: "Svenska", rtl: false });
({ country: { code: r.Finland, name: "Finland", native: "Suomi" }, id: e.SwedishFinland, language: { code: t.Swedish, name: "Swedish", native: "Svenska" }, name: "Swedish (Finland)", native_name: "Svenska (Finland)", rtl: false });
({ country: { code: r.Sweden, name: "Sweden", native: "Sverige" }, id: e.SwedishSweden, language: { code: t.Swedish, name: "Swedish", native: "Svenska" }, name: "Swedish (Sweden)", native_name: "Svenska (Sverige)", rtl: false });
({ id: e.Syriac, language: { code: t.Syriac, name: "Syriac", native: "\u0723\u0718\u072A\u071D\u071D\u0710" }, name: "Syriac", native_name: "\u0723\u0718\u072A\u071D\u071D\u0710", rtl: true });
({ country: { code: r.Syria, name: "Syria", native: "\u0633\u0648\u0631\u064A\u0627" }, id: e.SyriacSyria, language: { code: t.Syriac, name: "Syriac", native: "\u0723\u0718\u072A\u071D\u071D\u0710" }, name: "Syriac (Syria)", native_name: "\u0723\u0718\u072A\u071D\u071D\u0710 (\u0633\u0648\u0631\u064A\u0627)", rtl: true });
({ id: e.Tajik, language: { code: t.Tajik, name: "Tajik", native: "\u0422\u043E\u04B7\u0438\u043A\u04E3" }, name: "Tajik", native_name: "\u0422\u043E\u04B7\u0438\u043A\u04E3", rtl: false });
({ country: { code: r.Tajikistan, name: "Tajikistan", native: "\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D" }, id: e.TajikTajikistan, language: { code: t.Tajik, name: "Tajik", native: "\u0422\u043E\u04B7\u0438\u043A\u04E3" }, name: "Tajik (Tajikistan)", native_name: "\u0422\u043E\u04B7\u0438\u043A\u04E3 (\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D)", rtl: false });
({ id: e.Tagalog, language: { code: t.Tagalog, name: "Tagalog", native: "Tagalog" }, name: "Tagalog", native_name: "Tagalog", rtl: false });
({ country: { code: r.Philippines, name: "Philippines", native: "Pilipinas" }, id: e.TagalogPhilippines, language: { code: t.Tagalog, name: "Tagalog", native: "Tagalog" }, name: "Tagalog (Philippines)", native_name: "Tagalog (Pilipinas)", rtl: false });
({ id: e.Tamil, language: { code: t.Tamil, name: "Tamil", native: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD" }, name: "Tamil", native_name: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD", rtl: false });
({ country: { code: r.India, name: "India", native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE" }, id: e.TamilIndia, language: { code: t.Tamil, name: "Tamil", native: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD" }, name: "Tamil (India)", native_name: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)", rtl: false });
({ id: e.Telugu, language: { code: t.Telugu, name: "Telugu", native: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41" }, name: "Telugu", native_name: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41", rtl: false });
({ country: { code: r.India, name: "India", native: "\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02" }, id: e.TeluguIndia, language: { code: t.Telugu, name: "Telugu", native: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41" }, name: "Telugu (India)", native_name: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41 (\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02)", rtl: false });
({ id: e.Thai, language: { code: t.Thai, name: "Thai", native: "\u0E44\u0E17\u0E22" }, name: "Thai", native_name: "\u0E44\u0E17\u0E22", rtl: false });
({ country: { code: r.Thailand, name: "Thailand", native: "\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22" }, id: e.ThaiThailand, language: { code: t.Thai, name: "Thai", native: "\u0E44\u0E17\u0E22" }, name: "Thai (Thailand)", native_name: "\u0E44\u0E17\u0E22 (\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22)", rtl: false });
({ id: e.Tibetan, language: { code: t.Tibetan, name: "Tibetan", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Tibetan", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42", rtl: false });
({ country: { code: r.China, name: "China", native: "\u4E2D\u56FD" }, id: e.TibetanChina, language: { code: t.Tibetan, name: "Tibetan", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Tibetan (China)", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42)", rtl: false });
({ country: { code: r.Bhutan, name: "Bhutan", native: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D" }, id: e.TibetanBhutan, language: { code: t.Tibetan, name: "Tibetan", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Tibetan (Bhutan)", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D)", rtl: false });
({ country: { code: r.India, name: "India", native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE" }, id: e.TibetanIndia, language: { code: t.Tibetan, name: "Tibetan", native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42" }, name: "Tibetan (India)", native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)", rtl: false });
({ id: e.Tsonga, language: { code: t.Tsonga, name: "Tsonga", native: "Xitsonga" }, name: "Tsonga", native_name: "Xitsonga", rtl: false });
({ id: e.Tswana, language: { code: t.Tswana, name: "Tswana", native: "Setswana" }, name: "Tswana", native_name: "Setswana", rtl: false });
({ country: { code: r.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e.TswanaSouthAfrica, language: { code: t.Tswana, name: "Tswana", native: "Setswana" }, name: "Tswana (South Africa)", native_name: "Setswana (South Africa)", rtl: false });
({ id: e.Turkish, language: { code: t.Turkish, name: "Turkish", native: "T\xFCrk\xE7e" }, name: "Turkish", native_name: "T\xFCrk\xE7e", rtl: false });
({ country: { code: r.Turkey, name: "Turkey", native: "T\xFCrkiye" }, id: e.TurkishTurkey, language: { code: t.Turkish, name: "Turkish", native: "T\xFCrk\xE7e" }, name: "Turkish (Turkey)", native_name: "T\xFCrk\xE7e (T\xFCrkiye)", rtl: false });
({ id: e.Ukrainian, language: { code: t.Ukrainian, name: "Ukrainian", native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430" }, name: "Ukrainian", native_name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430", rtl: false });
({ country: { code: r.Ukraine, name: "Ukraine", native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430" }, id: e.UkrainianUkraine, language: { code: t.Ukrainian, name: "Ukrainian", native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430" }, name: "Ukrainian (Ukraine)", native_name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)", rtl: false });
({ id: e.Urdu, language: { code: t.Urdu, name: "Urdu", native: "\u0627\u0631\u062F\u0648" }, name: "Urdu", native_name: "\u0627\u0631\u062F\u0648", rtl: true });
({ country: { code: r.Afghanistan, name: "Afghanistan", native: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646" }, id: e.UrduAfghanistan, language: { code: t.Urdu, name: "Urdu", native: "\u0627\u0631\u062F\u0648" }, name: "Urdu (Afghanistan)", native_name: "\u0627\u0631\u062F\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)", rtl: true });
({ country: { code: r.India, name: "India", native: "\u092D\u093E\u0930\u0924" }, id: e.UrduIndia, language: { code: t.Urdu, name: "Urdu", native: "\u0627\u0631\u062F\u0648" }, name: "Urdu (India)", native_name: "\u0627\u0631\u062F\u0648 (\u092D\u093E\u0930\u0924)", rtl: true });
({ country: { code: r.Pakistan, name: "Pakistan", native: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646" }, id: e.UrduPakistan, language: { code: t.Urdu, name: "Urdu", native: "\u0627\u0631\u062F\u0648" }, name: "Urdu (Pakistan)", native_name: "\u0627\u0631\u062F\u0648 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)", rtl: true });
({ id: e.Uzbek, language: { code: t.Uzbek, name: "Uzbek", native: "O\u02BBzbekcha" }, name: "Uzbek", native_name: "O\u02BBzbekcha", rtl: false });
({ country: { code: r.Uzbekistan, name: "Uzbekistan", native: "O\u02BBzbekiston" }, id: e.UzbekUzbekistan, language: { code: t.Uzbek, name: "Uzbek", native: "O\u02BBzbekcha" }, name: "Uzbek (Latin, Uzbekistan)", native_name: "O\u02BBzbekcha (O\u02BBzbekiston)", rtl: false });
({ country: { code: r.Uzbekistan, name: "Uzbekistan", native: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D" }, id: e.UzbekCyrillic, language: { code: t.Uzbek, name: "Uzbek", native: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D" }, name: "Uzbek (Cyrillic)", native_name: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D (\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D)", rtl: false });
({ id: e.Vietnamese, language: { code: t.Vietnamese, name: "Vietnamese", native: "Ti\u1EBFng Vi\u1EC7t" }, name: "Vietnamese", native_name: "Ti\u1EBFng Vi\u1EC7t", rtl: false });
({ country: { code: r.Vietnam, name: "Vietnam", native: "Vi\u1EC7t Nam" }, id: e.VietnameseVietnam, language: { code: t.Vietnamese, name: "Vietnamese", native: "Ti\u1EBFng Vi\u1EC7t" }, name: "Vietnamese (Vietnam)", native_name: "Ti\u1EBFng Vi\u1EC7t (Vi\u1EC7t Nam)", rtl: false });
({ id: e.Welsh, language: { code: t.Welsh, name: "Welsh", native: "Cymraeg" }, name: "Welsh", native_name: "Cymraeg", rtl: false });
({ country: { code: r.UnitedKingdom, name: "United Kingdom", native: "United Kingdom" }, id: e.WelshUnitedKingdom, language: { code: t.Welsh, name: "Welsh", native: "Cymraeg" }, name: "Welsh (United Kingdom)", native_name: "Cymraeg (United Kingdom)", rtl: false });
({ id: e.Xhosa, language: { code: t.Xhosa, name: "Xhosa", native: "isiXhosa" }, name: "Xhosa", native_name: "isiXhosa", rtl: false });
({ country: { code: r.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e.XhosaSouthAfrica, language: { code: t.Xhosa, name: "Xhosa", native: "isiXhosa" }, name: "Xhosa (South Africa)", native_name: "isiXhosa (South Africa)", rtl: false });
({ id: e.Yiddish, language: { code: t.Yiddish, name: "Yiddish", native: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9" }, name: "Yiddish", native_name: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9", rtl: false });
({ id: e.Yoruba, language: { code: t.Yoruba, name: "Yoruba", native: "Yor\xF9b\xE1" }, name: "Yoruba", native_name: "Yor\xF9b\xE1", rtl: false });
({ country: { code: r.Nigeria, name: "Nigeria", native: "Nigeria" }, id: e.YorubaNigeria, language: { code: t.Yoruba, name: "Yoruba", native: "Yor\xF9b\xE1" }, name: "Yoruba (Nigeria)", native_name: "Yor\xF9b\xE1 (Nigeria)", rtl: false });
({ id: e.Zulu, language: { code: t.Zulu, name: "Zulu", native: "isiZulu" }, name: "Zulu", native_name: "isiZulu", rtl: false });
({ country: { code: r.SouthAfrica, name: "South Africa", native: "South Africa" }, id: e.ZuluSouthAfrica, language: { code: t.Zulu, name: "Zulu", native: "isiZulu" }, name: "Zulu (South Africa)", native_name: "isiZulu (South Africa)", rtl: false });
({ id: u.AfricaAbidjan, name: "Africa/Abidjan", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaAccra, name: "Africa/Accra", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaAddisAbaba, name: "Africa/Addis_Ababa", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.AfricaAlgiers, name: "Africa/Algiers", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.AfricaAsmara, name: "Africa/Asmara", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.AfricaBamako, name: "Africa/Bamako", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaBangui, name: "Africa/Bangui", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaBanjul, name: "Africa/Banjul", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaBissau, name: "Africa/Bissau", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaBlantyre, name: "Africa/Blantyre", offset: n.UTC_PLUS_2, timezone: s.CentralAfricaTime });
({ id: u.AfricaBrazzaville, name: "Africa/Brazzaville", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaBujumbura, name: "Africa/Bujumbura", offset: n.UTC_PLUS_2, timezone: s.CentralAfricaTime });
({ id: u.AfricaCairo, name: "Africa/Cairo", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.AfricaCasablanca, name: "Africa/Casablanca", offset: n.UTC_PLUS_1, timezone: s.WesternEuropeanTime });
({ id: u.AfricaCeuta, name: "Africa/Ceuta", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.AfricaConakry, name: "Africa/Conakry", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaDakar, name: "Africa/Dakar", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaDarEsSalaam, name: "Africa/Dar_es_Salaam", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.AfricaDjibouti, name: "Africa/Djibouti", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.AfricaDouala, name: "Africa/Douala", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaElAaiun, name: "Africa/El_Aaiun", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaFreetown, name: "Africa/Freetown", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaGaborone, name: "Africa/Gaborone", offset: n.UTC_PLUS_2, timezone: s.CentralAfricaTime });
({ id: u.AfricaHarare, name: "Africa/Harare", offset: n.UTC_PLUS_2, timezone: s.CentralAfricaTime });
({ id: u.AfricaJohannesburg, name: "Africa/Johannesburg", offset: n.UTC_PLUS_2, timezone: s.SouthAfricanStandardTime });
({ id: u.AfricaJuba, name: "Africa/Juba", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.AfricaKampala, name: "Africa/Kampala", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.AfricaKhartoum, name: "Africa/Khartoum", offset: n.UTC_PLUS_2, timezone: s.EastAfricaTime });
({ id: u.AfricaKigali, name: "Africa/Kigali", offset: n.UTC_PLUS_2, timezone: s.CentralAfricaTime });
({ id: u.AfricaKinshasa, name: "Africa/Kinshasa", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaLagos, name: "Africa/Lagos", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaLibreville, name: "Africa/Libreville", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaLome, name: "Africa/Lome", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaLuanda, name: "Africa/Luanda", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaLubumbashi, name: "Africa/Lubumbashi", offset: n.UTC_PLUS_2, timezone: s.CentralAfricaTime });
({ id: u.AfricaLusaka, name: "Africa/Lusaka", offset: n.UTC_PLUS_2, timezone: s.CentralAfricaTime });
({ id: u.AfricaMalabo, name: "Africa/Malabo", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaMaputo, name: "Africa/Maputo", offset: n.UTC_PLUS_2, timezone: s.CentralAfricaTime });
({ id: u.AfricaMaseru, name: "Africa/Maseru", offset: n.UTC_PLUS_2, timezone: s.SouthAfricanStandardTime });
({ id: u.AfricaMbabane, name: "Africa/Mbabane", offset: n.UTC_PLUS_2, timezone: s.SouthAfricanStandardTime });
({ id: u.AfricaMogadishu, name: "Africa/Mogadishu", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.AfricaMonrovia, name: "Africa/Monrovia", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaNairobi, name: "Africa/Nairobi", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.AfricaNdjamena, name: "Africa/Ndjamena", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaNiamey, name: "Africa/Niamey", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaNouakchott, name: "Africa/Nouakchott", offset: n.UTC_0, timezone: s.GreenwichMeanTime });
({ id: u.AfricaOuagadougou, name: "Africa/Ouagadougou", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaPortoNovo, name: "Africa/Porto-Novo", offset: n.UTC_PLUS_1, timezone: s.WestAfricaTime });
({ id: u.AfricaSaoTome, name: "Africa/SaoTome", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaTripoli, name: "Africa/Tripoli", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaTunis, name: "Africa/Tunis", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AfricaWindhoek, name: "Africa/Windhoek", offset: n.UTC_PLUS_2, timezone: s.WestAfricaTime });
({ id: u.AmericaAdak, name: "America/Adak", offset: n.UTC_PLUS_10, timezone: s.HawaiiAleutianStandardTime });
({ id: u.AmericaAnchorage, name: "America/Anchorage", offset: n.UTC_PLUS_9, timezone: s.AlaskaStandardTime });
({ id: u.AmericaAnguilla, name: "America/Anguilla", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaAntigua, name: "America/Antigua", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaAraguaina, name: "America/Araguaina", offset: n.UTC_MINUS_3, timezone: s.BrasiliaTime });
({ id: u.AmericaArgentinaBuenosAires, name: "America/Argentina/Buenos_Aires", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaCatamarca, name: "America/Argentina/Catamarca", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaCordoba, name: "America/Argentina/Cordoba", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaJujuy, name: "America/Argentina/Jujuy", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaLaRioja, name: "America/Argentina/La_Rioja", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaMendoza, name: "America/Argentina/Mendoza", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaRioGallegos, name: "America/Argentina/Rio_Gallegos", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaSalta, name: "America/Argentina/Salta", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaSanJuan, name: "America/Argentina/San_Juan", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaSanLuis, name: "America/Argentina/San_Luis", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaTucuman, name: "America/Argentina/Tucuman", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaArgentinaUshuaia, name: "America/Argentina/Ushuaia", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaAruba, name: "America/Aruba", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaAsuncion, name: "America/Asuncion", offset: n.UTC_MINUS_4, timezone: s.ParaguayTime });
({ id: u.AmericaAtikokan, name: "America/Atikokan", offset: n.UTC_0, timezone: s.EasternStandardTime });
({ id: u.AmericaAtka, name: "America/Atka", offset: n.UTC_MINUS_10, timezone: s.HawaiiAleutianStandardTime });
({ id: u.AmericaBahia, name: "America/Bahia", offset: n.UTC_MINUS_3, timezone: s.BrasiliaTime });
({ id: u.AmericaBahiaBanderas, name: "America/Bahia_Banderas", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaBarbados, name: "America/Barbados", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaBelem, name: "America/Belem", offset: n.UTC_MINUS_3, timezone: s.BrasiliaTime });
({ id: u.AmericaBelize, name: "America/Belize", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaBlancSablon, name: "America/Blanc-Sablon", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaBoaVista, name: "America/Boa_Vista", offset: n.UTC_MINUS_4, timezone: s.AmazonTime });
({ id: u.AmericaBogota, name: "America/Bogota", offset: n.UTC_MINUS_5, timezone: s.ColombiaTime });
({ id: u.AmericaBoise, name: "America/Boise", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaCambridgeBay, name: "America/Cambridge_Bay", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaCampoGrande, name: "America/Campo_Grande", offset: n.UTC_MINUS_4, timezone: s.AmazonTime });
({ id: u.AmericaCancun, name: "America/Cancun", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaCaracas, name: "America/Caracas", offset: n.UTC_MINUS_4, timezone: s.VenezuelaStandardTime });
({ id: u.AmericaCayenne, name: "America/Cayenne", offset: n.UTC_MINUS_3, timezone: s.FrenchGuianaTime });
({ id: u.AmericaCayman, name: "America/Cayman", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaChicago, name: "America/Chicago", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaChihuahua, name: "America/Chihuahua", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaCoralHarbour, name: "America/Coral_Harbour", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaCordoba, name: "America/Cordoba", offset: n.UTC_MINUS_3, timezone: s.ArgentinaTime });
({ id: u.AmericaCostaRica, name: "America/Costa_Rica", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaCreston, name: "America/Creston", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaCuiaba, name: "America/Cuiaba", offset: n.UTC_MINUS_4, timezone: s.AmazonTime });
({ id: u.AmericaCuracao, name: "America/Curacao", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaDanmarkshavn, name: "America/Danmarkshavn", offset: n.UTC_0, timezone: s.GreenwichMeanTime });
({ id: u.AmericaDawson, name: "America/Dawson", offset: n.UTC_MINUS_8, timezone: s.PacificStandardTime });
({ id: u.AmericaDawsonCreek, name: "America/Dawson_Creek", offset: n.UTC_MINUS_8, timezone: s.PacificStandardTime });
({ id: u.AmericaDenver, name: "America/Denver", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaDetroit, name: "America/Detroit", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaDominica, name: "America/Dominica", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaEdmonton, name: "America/Edmonton", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaEirunepe, name: "America/Eirunepe", offset: n.UTC_MINUS_5, timezone: s.AcreTime });
({ id: u.AmericaElSalvador, name: "America/El_Salvador", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaFortaleza, name: "America/Fortaleza", offset: n.UTC_MINUS_3, timezone: s.BrasiliaTime });
({ id: u.AmericaGlaceBay, name: "America/Glace_Bay", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaGodthab, name: "America/Godthab", offset: n.UTC_MINUS_3, timezone: s.WestGreenlandTime });
({ id: u.AmericaGooseBay, name: "America/Goose_Bay", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaGrandTurk, name: "America/Grand_Turk", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaGrenada, name: "America/Grenada", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaGuadeloupe, name: "America/Guadeloupe", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaGuatemala, name: "America/Guatemala", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaGuayaquil, name: "America/Guayaquil", offset: n.UTC_MINUS_5, timezone: s.EcuadorTime });
({ id: u.AmericaGuyana, name: "America/Guyana", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaHalifax, name: "America/Halifax", offset: n.UTC_0, timezone: s.AtlanticStandardTime });
({ id: u.AmericaHavana, name: "America/Havana", offset: n.UTC_MINUS_5, timezone: s.CubaStandardTime });
({ id: u.AmericaHermosillo, name: "America/Hermosillo", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaIndianaIndianapolis, name: "America/Indiana/Indianapolis", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaIndianaKnox, name: "America/Indiana/Knox", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaIndianaMarengo, name: "America/Indiana/Marengo", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaIndianaPetersburg, name: "America/Indiana/Petersburg", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaIndianaTellCity, name: "America/Indiana/Tell_City", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaIndianaVevay, name: "America/Indiana/Vevay", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaIndianaVincennes, name: "America/Indiana/Vincennes", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaIndianaWinamac, name: "America/Indiana/Winamac", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaInuvik, name: "America/Inuvik", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaIqaluit, name: "America/Iqaluit", offset: n.UTC_0, timezone: s.EasternStandardTime });
({ id: u.AmericaJamaica, name: "America/Jamaica", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaJuneau, name: "America/Juneau", offset: n.UTC_MINUS_9, timezone: s.AlaskaStandardTime });
({ id: u.AmericaKentuckyLouisville, name: "America/Kentucky/Louisville", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaKentuckyMonticello, name: "America/Kentucky/Monticello", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaKralendijk, name: "America/Kralendijk", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaLaPaz, name: "America/La_Paz", offset: n.UTC_MINUS_4, timezone: s.BoliviaTime });
({ id: u.AmericaLima, name: "America/Lima", offset: n.UTC_MINUS_5, timezone: s.PeruTime });
({ id: u.AmericaLosAngeles, name: "America/Los_Angeles", offset: n.UTC_MINUS_8, timezone: s.PacificStandardTime });
({ id: u.AmericaLouisville, name: "America/Louisville", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaLowerPrinces, name: "America/Lower_Princes", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaMaceio, name: "America/Maceio", offset: n.UTC_MINUS_3, timezone: s.BrasiliaTime });
({ id: u.AmericaManagua, name: "America/Managua", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaManaus, name: "America/Manaus", offset: n.UTC_MINUS_4, timezone: s.AmazonTime });
({ id: u.AmericaMarigot, name: "America/Marigot", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaMartinique, name: "America/Martinique", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaMatamoros, name: "America/Matamoros", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaMazatlan, name: "America/Mazatlan", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaMenominee, name: "America/Menominee", offset: n.UTC_MINUS_5, timezone: s.CentralStandardTime });
({ id: u.AmericaMerida, name: "America/Merida", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaMetlakatla, name: "America/Metlakatla", offset: n.UTC_MINUS_9, timezone: s.AlaskaStandardTime });
({ id: u.AmericaMexicoCity, name: "America/Mexico_City", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaMiquelon, name: "America/Miquelon", offset: n.UTC_MINUS_3, timezone: s.SaintPierreAndMiquelonStandardTime });
({ id: u.AmericaMoncton, name: "America/Moncton", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaMonterrey, name: "America/Monterrey", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaMontevideo, name: "America/Montevideo", offset: n.UTC_MINUS_3, timezone: s.UruguayStandardTime });
({ id: u.AmericaMontreal, name: "America/Montreal", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaMontserrat, name: "America/Montserrat", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaNassau, name: "America/Nassau", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaNewYork, name: "America/New_York", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaNipigon, name: "America/Nipigon", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaNome, name: "America/Nome", offset: n.UTC_MINUS_9, timezone: s.AlaskaStandardTime });
({ id: u.AmericaNoronha, name: "America/Noronha", offset: n.UTC_MINUS_2, timezone: s.FernandoDeNoronhaTime });
({ id: u.AmericaNorthDakotaBeulah, name: "America/North_Dakota/Beulah", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaNorthDakotaCenter, name: "America/North_Dakota/Center", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaNorthDakotaNewSalem, name: "America/North_Dakota/New_Salem", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaOjinaga, name: "America/Ojinaga", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaPanama, name: "America/Panama", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaPangnirtung, name: "America/Pangnirtung", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaParamaribo, name: "America/Paramaribo", offset: n.UTC_MINUS_3, timezone: s.SurinameTime });
({ id: u.AmericaPhoenix, name: "America/Phoenix", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaPortAuPrince, name: "America/Port-au-Prince", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaPortOfSpain, name: "America/Port_of_Spain", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaPortoVelho, name: "America/Porto_Velho", offset: n.UTC_MINUS_4, timezone: s.AmazonTime });
({ id: u.AmericaPuertoRico, name: "America/Puerto_Rico", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaRainyRiver, name: "America/Rainy_River", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaRankinInlet, name: "America/Rankin_Inlet", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaRecife, name: "America/Recife", offset: n.UTC_MINUS_3, timezone: s.BrasiliaTime });
({ id: u.AmericaRegina, name: "America/Regina", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaResolute, name: "America/Resolute", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaRioBranco, name: "America/Rio_Branco", offset: n.UTC_MINUS_5, timezone: s.AcreTime });
({ id: u.AmericaSantaIsabel, name: "America/Santa_Isabel", offset: n.UTC_MINUS_8, timezone: s.PacificStandardTime });
({ id: u.AmericaSantarem, name: "America/Santarem", offset: n.UTC_MINUS_3, timezone: s.BrasiliaTime });
({ id: u.AmericaSantiago, name: "America/Santiago", offset: n.UTC_MINUS_4, timezone: s.ChileStandardTime });
({ id: u.AmericaSantoDomingo, name: "America/Santo_Domingo", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaSaoPaulo, name: "America/Sao_Paulo", offset: n.UTC_MINUS_3, timezone: s.BrasiliaTime });
({ id: u.AmericaScoresbysund, name: "America/Scoresbysund", offset: n.UTC_MINUS_1, timezone: s.EasternGreenlandTime });
({ id: u.AmericaShiprock, name: "America/Shiprock", offset: n.UTC_MINUS_7, timezone: s.MountainStandardTime });
({ id: u.AmericaSitka, name: "America/Sitka", offset: n.UTC_MINUS_9, timezone: s.AlaskaStandardTime });
({ id: u.AmericaStBarthelemy, name: "America/St_Barthelemy", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaStJohns, name: "America/St_Johns", offset: n.UTC_MINUS_3, timezone: s.NewfoundlandStandardTime });
({ id: u.AmericaStKitts, name: "America/St_Kitts", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaStLucia, name: "America/St_Lucia", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaStThomas, name: "America/St_Thomas", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaStVincent, name: "America/St_Vincent", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaSwiftCurrent, name: "America/Swift_Current", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaTegucigalpa, name: "America/Tegucigalpa", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaThule, name: "America/Thule", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaThunderBay, name: "America/Thunder_Bay", offset: n.UTC_MINUS_4, timezone: s.EasternStandardTime });
({ id: u.AmericaTijuana, name: "America/Tijuana", offset: n.UTC_MINUS_8, timezone: s.PacificStandardTime });
({ id: u.AmericaToronto, name: "America/Toronto", offset: n.UTC_MINUS_5, timezone: s.EasternStandardTime });
({ id: u.AmericaTortola, name: "America/Tortola", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AmericaVancouver, name: "America/Vancouver", offset: n.UTC_MINUS_8, timezone: s.PacificStandardTime });
({ id: u.AmericaWhitehorse, name: "America/Whitehorse", offset: n.UTC_MINUS_8, timezone: s.PacificStandardTime });
({ id: u.AmericaWinnipeg, name: "America/Winnipeg", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AmericaYakutat, name: "America/Yakutat", offset: n.UTC_MINUS_9, timezone: s.AlaskaStandardTime });
({ id: u.AmericaYellowknife, name: "America/Yellowknife", offset: n.UTC_MINUS_6, timezone: s.MountainStandardTime });
({ id: u.AntarcticaCasey, name: "Antarctica/Casey", offset: n.UTC_MINUS_8, timezone: s.WesternStandardTime });
({ id: u.AntarcticaDavis, name: "Antarctica/Davis", offset: n.UTC_MINUS_7, timezone: s.NewfoundlandStandardTime });
({ id: u.AntarcticaDumontDUrville, name: "Antarctica/DumontDUrville", offset: n.UTC_MINUS_10, timezone: s.CentralStandardTime });
({ id: u.AntarcticaMacquarie, name: "Antarctica/Macquarie", offset: n.UTC_MINUS_11, timezone: s.CentralStandardTime });
({ id: u.AntarcticaMawson, name: "Antarctica/Mawson", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.AntarcticaMcMurdo, name: "Antarctica/McMurdo", offset: n.UTC_MINUS_12, timezone: s.NewZealandStandardTime });
({ id: u.AntarcticaPalmer, name: "Antarctica/Palmer", offset: n.UTC_MINUS_4, timezone: s.ChathamStandardTime });
({ id: u.AntarcticaRothera, name: "Antarctica/Rothera", offset: n.UTC_MINUS_3, timezone: s.RotheraResearchStationTime });
({ id: u.AntarcticaSyowa, name: "Antarctica/Syowa", offset: n.UTC_MINUS_3, timezone: s.ShowaStationTime });
({ id: u.AntarcticaTroll, name: "Antarctica/Troll", offset: n.UTC_MINUS_2, timezone: s.CentralStandardTime });
({ id: u.AntarcticaVostok, name: "Antarctica/Vostok", offset: n.UTC_MINUS_6, timezone: s.CentralStandardTime });
({ id: u.ArcticLongyearbyen, name: "Arctic/Longyearbyen", offset: n.UTC_MINUS_1, timezone: s.CentralEuropeanTime });
({ id: u.AsiaAden, name: "Asia/Aden", offset: n.UTC_PLUS_3, timezone: s.ArabiaStandardTime });
({ id: u.AsiaAlmaty, name: "Asia/Almaty", offset: n.UTC_PLUS_6, timezone: s.AlmaAtaTime });
({ id: u.AsiaAmman, name: "Asia/Amman", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.AsiaAnadyr, name: "Asia/Anadyr", offset: n.UTC_PLUS_12, timezone: s.NewCaledoniaTime });
({ id: u.AsiaAqtau, name: "Asia/Aqtau", offset: n.UTC_PLUS_5, timezone: s.AqtobeTime });
({ id: u.AsiaAqtobe, name: "Asia/Aqtobe", offset: n.UTC_PLUS_5, timezone: s.AqtobeTime });
({ id: u.AsiaAshgabat, name: "Asia/Ashgabat", offset: n.UTC_PLUS_5, timezone: s.TurkmenistanTime });
({ id: u.AsiaBaghdad, name: "Asia/Baghdad", offset: n.UTC_PLUS_3, timezone: s.ArabiaStandardTime });
({ id: u.AsiaBahrain, name: "Asia/Bahrain", offset: n.UTC_PLUS_3, timezone: s.ArabiaStandardTime });
({ id: u.AsiaBaku, name: "Asia/Baku", offset: n.UTC_PLUS_4, timezone: s.AzerbaijanTime });
({ id: u.AsiaBangkok, name: "Asia/Bangkok", offset: n.UTC_PLUS_7, timezone: s.IndochinaTime });
({ id: u.AsiaBarnaul, name: "Asia/Barnaul", offset: n.UTC_PLUS_7, timezone: s.KrasnoyarskTime });
({ id: u.AsiaBeirut, name: "Asia/Beirut", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.AsiaBishkek, name: "Asia/Bishkek", offset: n.UTC_PLUS_6, timezone: s.KyrgyzstanTime });
({ id: u.AsiaBrunei, name: "Asia/Brunei", offset: n.UTC_PLUS_8, timezone: s.BruneiTime });
({ id: u.AsiaChita, name: "Asia/Chita", offset: n.UTC_PLUS_9, timezone: s.YakutskTime });
({ id: u.AsiaChoibalsan, name: "Asia/Choibalsan", offset: n.UTC_PLUS_8, timezone: s.ChoibalsanStandardTime });
({ id: u.AsiaColombo, name: "Asia/Colombo", offset: n.UTC_PLUS_5, timezone: s.IndianStandardTime });
({ id: u.AsiaDamascus, name: "Asia/Damascus", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.AsiaDhaka, name: "Asia/Dhaka", offset: n.UTC_PLUS_6, timezone: s.BangladeshStandardTime });
({ id: u.AsiaDili, name: "Asia/Dili", offset: n.UTC_PLUS_9, timezone: s.JapanStandardTime });
({ id: u.AsiaDubai, name: "Asia/Dubai", offset: n.UTC_PLUS_4, timezone: s.GulfStandardTime });
({ id: u.AsiaDushanbe, name: "Asia/Dushanbe", offset: n.UTC_PLUS_5, timezone: s.TajikistanTime });
({ id: u.AsiaFamagusta, name: "Asia/Famagusta", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.AsiaGaza, name: "Asia/Gaza", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.AsiaHebron, name: "Asia/Hebron", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.AsiaHoChiMinh, name: "Asia/Ho_Chi_Minh", offset: n.UTC_PLUS_7, timezone: s.IndochinaTime });
({ id: u.AsiaHongKong, name: "Asia/Hong_Kong", offset: n.UTC_PLUS_8, timezone: s.HongKongTime });
({ id: u.AsiaHovd, name: "Asia/Hovd", offset: n.UTC_PLUS_7, timezone: s.HovdTime });
({ id: u.AsiaIrkutsk, name: "Asia/Irkutsk", offset: n.UTC_PLUS_8, timezone: s.IrkutskTime });
({ id: u.AsiaJakarta, name: "Asia/Jakarta", offset: n.UTC_PLUS_7, timezone: s.WesternIndonesianTime });
({ id: u.AsiaJayapura, name: "Asia/Jayapura", offset: n.UTC_PLUS_9, timezone: s.JapanStandardTime });
({ id: u.AsiaJerusalem, name: "Asia/Jerusalem", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.AsiaKabul, name: "Asia/Kabul", offset: n.UTC_PLUS_4, timezone: s.AfghanistanTime });
({ id: u.AsiaKamchatka, name: "Asia/Kamchatka", offset: n.UTC_PLUS_12, timezone: s.KamchatkaTime });
({ id: u.AsiaKarachi, name: "Asia/Karachi", offset: n.UTC_PLUS_5, timezone: s.PakistanStandardTime });
({ id: u.AsiaKathmandu, name: "Asia/Kathmandu", offset: n.UTC_PLUS_5, timezone: s.NepalTime });
({ id: u.AsiaKhandyga, name: "Asia/Khandyga", offset: n.UTC_PLUS_9, timezone: s.YakutskTime });
({ id: u.AsiaKolkata, name: "Asia/Kolkata", offset: n.UTC_PLUS_5, timezone: s.IndianStandardTime });
({ id: u.AsiaKrasnoyarsk, name: "Asia/Krasnoyarsk", offset: n.UTC_PLUS_7, timezone: s.KrasnoyarskTime });
({ id: u.AsiaKualaLumpur, name: "Asia/Kuala_Lumpur", offset: n.UTC_PLUS_8, timezone: s.MalaysiaStandardTime });
({ id: u.AsiaKuching, name: "Asia/Kuching", offset: n.UTC_PLUS_8, timezone: s.MalaysiaStandardTime });
({ id: u.AsiaKuwait, name: "Asia/Kuwait", offset: n.UTC_PLUS_3, timezone: s.ArabiaStandardTime });
({ id: u.AsiaMacau, name: "Asia/Macau", offset: n.UTC_PLUS_8, timezone: s.ChinaStandardTime });
({ id: u.AsiaMagadan, name: "Asia/Magadan", offset: n.UTC_PLUS_11, timezone: s.MagadanTime });
({ id: u.AsiaMakassar, name: "Asia/Makassar", offset: n.UTC_PLUS_8, timezone: s.MalaysiaTime });
({ id: u.AsiaManila, name: "Asia/Manila", offset: n.UTC_PLUS_8, timezone: s.PhilippineTime });
({ id: u.AsiaMuscat, name: "Asia/Muscat", offset: n.UTC_PLUS_4, timezone: s.GulfStandardTime });
({ id: u.AsiaNovokuznetsk, name: "Asia/Novokuznetsk", offset: n.UTC_PLUS_6, timezone: s.NovosibirskTime });
({ id: u.AsiaNovosibirsk, name: "Asia/Novosibirsk", offset: n.UTC_PLUS_6, timezone: s.NovosibirskTime });
({ id: u.AsiaOmsk, name: "Asia/Omsk", offset: n.UTC_PLUS_6, timezone: s.OmskTime });
({ id: u.AsiaOral, name: "Asia/Oral", offset: n.UTC_PLUS_5, timezone: s.OralTime });
({ id: u.AsiaPhnomPenh, name: "Asia/Phnom_Penh", offset: n.UTC_PLUS_7, timezone: s.IndochinaTime });
({ id: u.AsiaPontianak, name: "Asia/Pontianak", offset: n.UTC_PLUS_7, timezone: s.WesternIndonesianTime });
({ id: u.AsiaPyongyang, name: "Asia/Pyongyang", offset: n.UTC_PLUS_9, timezone: s.KoreaStandardTime });
({ id: u.AsiaQatar, name: "Asia/Qatar", offset: n.UTC_PLUS_3, timezone: s.ArabiaStandardTime });
({ id: u.AsiaQyzylorda, name: "Asia/Qyzylorda", offset: n.UTC_PLUS_5, timezone: s.WestKazakhstanTime });
({ id: u.AsiaRangoon, name: "Asia/Rangoon", offset: n.UTC_PLUS_6, timezone: s.MyanmarStandardTime });
({ id: u.AsiaRiyadh, name: "Asia/Riyadh", offset: n.UTC_PLUS_3, timezone: s.ArabiaStandardTime });
({ id: u.AsiaSakhalin, name: "Asia/Sakhalin", offset: n.UTC_PLUS_11, timezone: s.SakhalinIslandTime });
({ id: u.AsiaSamarkand, name: "Asia/Samarkand", offset: n.UTC_PLUS_5, timezone: s.UzbekistanTime });
({ id: u.AsiaSeoul, name: "Asia/Seoul", offset: n.UTC_PLUS_9, timezone: s.KoreaStandardTime });
({ id: u.AsiaShanghai, name: "Asia/Shanghai", offset: n.UTC_PLUS_8, timezone: s.ChinaStandardTime });
({ id: u.AsiaSingapore, name: "Asia/Singapore", offset: n.UTC_PLUS_8, timezone: s.SingaporeStandardTime });
({ id: u.AsiaSrednekolymsk, name: "Asia/Srednekolymsk", offset: n.UTC_PLUS_11, timezone: s.SrednekolymskTime });
({ id: u.AsiaTaipei, name: "Asia/Taipei", offset: n.UTC_PLUS_8, timezone: s.ChinaStandardTime });
({ id: u.AsiaTashkent, name: "Asia/Tashkent", offset: n.UTC_PLUS_5, timezone: s.UzbekistanTime });
({ id: u.AsiaTbilisi, name: "Asia/Tbilisi", offset: n.UTC_PLUS_4, timezone: s.GeorgiaStandardTime });
({ id: u.AsiaTehran, name: "Asia/Tehran", offset: n.UTC_PLUS_3, timezone: s.IranStandardTime });
({ id: u.AsiaThimphu, name: "Asia/Thimphu", offset: n.UTC_PLUS_6, timezone: s.BhutanTime });
({ id: u.AsiaTokyo, name: "Asia/Tokyo", offset: n.UTC_PLUS_9, timezone: s.JapanStandardTime });
({ id: u.AsiaTomsk, name: "Asia/Tomsk", offset: n.UTC_PLUS_6, timezone: s.KrasnoyarskTime });
({ id: u.AsiaUlaanbaatar, name: "Asia/Ulaanbaatar", offset: n.UTC_PLUS_8, timezone: s.UlaanbaatarStandardTime });
({ id: u.AsiaUrumqi, name: "Asia/Urumqi", offset: n.UTC_PLUS_8, timezone: s.ChinaStandardTime });
({ id: u.AsiaUstNera, name: "Asia/Ust-Nera", offset: n.UTC_PLUS_10, timezone: s.VladivostokTime });
({ id: u.AsiaVientiane, name: "Asia/Vientiane", offset: n.UTC_PLUS_7, timezone: s.IndochinaTime });
({ id: u.AsiaVladivostok, name: "Asia/Vladivostok", offset: n.UTC_PLUS_10, timezone: s.VladivostokTime });
({ id: u.AsiaYakutsk, name: "Asia/Yakutsk", offset: n.UTC_PLUS_9, timezone: s.YakutskTime });
({ id: u.AsiaYekaterinburg, name: "Asia/Yekaterinburg", offset: n.UTC_PLUS_5, timezone: s.YekaterinburgTime });
({ id: u.AsiaYerevan, name: "Asia/Yerevan", offset: n.UTC_PLUS_4, timezone: s.ArmeniaTime });
({ id: u.AtlanticAzores, name: "Atlantic/Azores", offset: n.UTC_MINUS_1, timezone: s.AzoresStandardTime });
({ id: u.AtlanticBermuda, name: "Atlantic/Bermuda", offset: n.UTC_MINUS_4, timezone: s.AtlanticStandardTime });
({ id: u.AtlanticCanary, name: "Atlantic/Canary", offset: n.UTC_MINUS_1, timezone: s.WesternEuropeanTime });
({ id: u.AtlanticCapeVerde, name: "Atlantic/Cape_Verde", offset: n.UTC_0, timezone: s.CapeVerdeTime });
({ id: u.AtlanticFaroe, name: "Atlantic/Faroe", offset: n.UTC_0, timezone: s.GreenwichMeanTime });
({ id: u.AtlanticMadeira, name: "Atlantic/Madeira", offset: n.UTC_0, timezone: s.WesternEuropeanTime });
({ id: u.AtlanticReykjavik, name: "Atlantic/Reykjavik", offset: n.UTC_0, timezone: s.GreenwichMeanTime });
({ id: u.AtlanticSouthGeorgia, name: "Atlantic/South_Georgia", offset: n.UTC_0, timezone: s.CoordinatedUniversalTime });
({ id: u.AtlanticStHelena, name: "Atlantic/St_Helena", offset: n.UTC_0, timezone: s.GreenwichMeanTime });
({ id: u.AtlanticStanley, name: "Atlantic/Stanley", offset: n.UTC_0, timezone: s.FalklandIslandsTime });
({ id: u.AustraliaAdelaide, name: "Australia/Adelaide", offset: n.UTC_PLUS_9_30, timezone: s.AustralianCentralStandardTime });
({ id: u.AustraliaBrisbane, name: "Australia/Brisbane", offset: n.UTC_PLUS_10, timezone: s.AustralianEasternStandardTime });
({ id: u.AustraliaBrokenHill, name: "Australia/Broken_Hill", offset: n.UTC_PLUS_9_30, timezone: s.AustralianCentralStandardTime });
({ id: u.AustraliaCanberra, name: "Australia/Canberra", offset: n.UTC_PLUS_10, timezone: s.AustralianEasternStandardTime });
({ id: u.AustraliaCurrie, name: "Australia/Currie", offset: n.UTC_PLUS_10, timezone: s.AustralianEasternStandardTime });
({ id: u.AustraliaDarwin, name: "Australia/Darwin", offset: n.UTC_PLUS_9_30, timezone: s.AustralianCentralStandardTime });
({ id: u.AustraliaEucla, name: "Australia/Eucla", offset: n.UTC_PLUS_8_45, timezone: s.AustralianCentralWesternStandardTime });
({ id: u.AustraliaHobart, name: "Australia/Hobart", offset: n.UTC_PLUS_10, timezone: s.AustralianEasternStandardTime });
({ id: u.AustraliaLindeman, name: "Australia/Lindeman", offset: n.UTC_PLUS_10, timezone: s.AustralianEasternStandardTime });
({ id: u.AustraliaLordHowe, name: "Australia/Lord_Howe", offset: n.UTC_PLUS_10_30, timezone: s.LordHoweStandardTime });
({ id: u.AustraliaMelbourne, name: "Australia/Melbourne", offset: n.UTC_PLUS_10, timezone: s.AustralianEasternStandardTime });
({ id: u.AustraliaPerth, name: "Australia/Perth", offset: n.UTC_PLUS_8, timezone: s.AustralianWesternStandardTime });
({ id: u.AustraliaSydney, name: "Australia/Sydney", offset: n.UTC_PLUS_10, timezone: s.AustralianEasternStandardTime });
({ id: u.EuropeAmsterdam, name: "Europe/Amsterdam", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeAndorra, name: "Europe/Andorra", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeAthens, name: "Europe/Athens", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeBelgrade, name: "Europe/Belgrade", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeBerlin, name: "Europe/Berlin", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeBratislava, name: "Europe/Bratislava", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeBrussels, name: "Europe/Brussels", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeBucharest, name: "Europe/Bucharest", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeBudapest, name: "Europe/Budapest", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeBusingen, name: "Europe/Busingen", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeChisinau, name: "Europe/Chisinau", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeCopenhagen, name: "Europe/Copenhagen", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeDublin, name: "Europe/Dublin", offset: n.UTC_0, timezone: s.GreenwichMeanTime });
({ id: u.EuropeGibraltar, name: "Europe/Gibraltar", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeGuernsey, name: "Europe/Guernsey", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeHelsinki, name: "Europe/Helsinki", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeIsleOfMan, name: "Europe/Isle_of_Man", offset: n.UTC_0, timezone: s.GreenwichMeanTime });
({ id: u.EuropeIstanbul, name: "Europe/Istanbul", offset: n.UTC_PLUS_3, timezone: s.EasternEuropeanTime });
({ id: u.EuropeJersey, name: "Europe/Jersey", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeKaliningrad, name: "Europe/Kaliningrad", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeKiev, name: "Europe/Kiev", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeLisbon, name: "Europe/Lisbon", offset: n.UTC_0, timezone: s.GreenwichMeanTime });
({ id: u.EuropeLjubljana, name: "Europe/Ljubljana", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeLondon, name: "Europe/London", offset: n.UTC_0, timezone: s.GreenwichMeanTime });
({ id: u.EuropeLuxembourg, name: "Europe/Luxembourg", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeMadrid, name: "Europe/Madrid", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeMalta, name: "Europe/Malta", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeMariehamn, name: "Europe/Mariehamn", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeMinsk, name: "Europe/Minsk", offset: n.UTC_PLUS_3, timezone: s.EasternEuropeanTime });
({ id: u.EuropeMonaco, name: "Europe/Monaco", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeMoscow, name: "Europe/Moscow", offset: n.UTC_PLUS_3, timezone: s.EasternEuropeanTime });
({ id: u.EuropeOslo, name: "Europe/Oslo", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeParis, name: "Europe/Paris", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropePodgorica, name: "Europe/Podgorica", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropePrague, name: "Europe/Prague", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeRiga, name: "Europe/Riga", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeRome, name: "Europe/Rome", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeSamara, name: "Europe/Samara", offset: n.UTC_PLUS_4, timezone: s.EasternEuropeanTime });
({ id: u.EuropeSanMarino, name: "Europe/San_Marino", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeSarajevo, name: "Europe/Sarajevo", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeSimferopol, name: "Europe/Simferopol", offset: n.UTC_PLUS_3, timezone: s.EasternEuropeanTime });
({ id: u.EuropeSkopje, name: "Europe/Skopje", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeSofia, name: "Europe/Sofia", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeStockholm, name: "Europe/Stockholm", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeTallinn, name: "Europe/Tallinn", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeTirane, name: "Europe/Tirane", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeUzhgorod, name: "Europe/Uzhgorod", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeVaduz, name: "Europe/Vaduz", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeVatican, name: "Europe/Vatican", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeVienna, name: "Europe/Vienna", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeVilnius, name: "Europe/Vilnius", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeVolgograd, name: "Europe/Volgograd", offset: n.UTC_PLUS_4, timezone: s.EasternEuropeanTime });
({ id: u.EuropeWarsaw, name: "Europe/Warsaw", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeZagreb, name: "Europe/Zagreb", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.EuropeZaporozhye, name: "Europe/Zaporozhye", offset: n.UTC_PLUS_2, timezone: s.EasternEuropeanTime });
({ id: u.EuropeZurich, name: "Europe/Zurich", offset: n.UTC_PLUS_1, timezone: s.CentralEuropeanTime });
({ id: u.IndianAntananarivo, name: "Indian/Antananarivo", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.IndianChagos, name: "Indian/Chagos", offset: n.UTC_PLUS_6, timezone: s.IndianOceanTime });
({ id: u.IndianChristmas, name: "Indian/Christmas", offset: n.UTC_PLUS_7, timezone: s.ChristmasIslandTime });
({ id: u.IndianCocos, name: "Indian/Cocos", offset: n.UTC_PLUS_6, timezone: s.CocosIslandsTime });
({ id: u.IndianComoro, name: "Indian/Comoro", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.IndianKerguelen, name: "Indian/Kerguelen", offset: n.UTC_PLUS_5, timezone: s.FrenchSouthernAndAntarcticTime });
({ id: u.IndianMahe, name: "Indian/Mahe", offset: n.UTC_PLUS_4, timezone: s.SeychellesTime });
({ id: u.IndianMaldives, name: "Indian/Maldives", offset: n.UTC_PLUS_5, timezone: s.MaldivesTime });
({ id: u.IndianMauritius, name: "Indian/Mauritius", offset: n.UTC_PLUS_4, timezone: s.MauritiusTime });
({ id: u.IndianMayotte, name: "Indian/Mayotte", offset: n.UTC_PLUS_3, timezone: s.EastAfricaTime });
({ id: u.IndianReunion, name: "Indian/Reunion", offset: n.UTC_PLUS_4, timezone: s.ReunionTime });
({ id: u.PacificApia, name: "Pacific/Apia", offset: n.UTC_PLUS_13, timezone: s.SamoaStandardTime });
({ id: u.PacificAuckland, name: "Pacific/Auckland", offset: n.UTC_PLUS_13, timezone: s.NewZealandStandardTime });
({ id: u.PacificChatham, name: "Pacific/Chatham", offset: n.UTC_PLUS_13, timezone: s.ChathamStandardTime });
({ id: u.PacificEaster, name: "Pacific/Easter", offset: n.UTC_PLUS_6, timezone: s.EasterIslandStandardTime });
({ id: u.PacificEfate, name: "Pacific/Efate", offset: n.UTC_PLUS_11, timezone: s.VanuatuTime });
({ id: u.PacificEnderbury, name: "Pacific/Enderbury", offset: n.UTC_PLUS_13, timezone: s.TongaTime });
({ id: u.PacificFakaofo, name: "Pacific/Fakaofo", offset: n.UTC_PLUS_13, timezone: s.TongaTime });
({ id: u.PacificFiji, name: "Pacific/Fiji", offset: n.UTC_PLUS_12, timezone: s.FijiTime });
({ id: u.PacificFunafuti, name: "Pacific/Funafuti", offset: n.UTC_PLUS_12, timezone: s.TuvaluTime });
({ id: u.PacificGalapagos, name: "Pacific/Galapagos", offset: n.UTC_PLUS_6, timezone: s.GalapagosTime });
({ id: u.PacificGambier, name: "Pacific/Gambier", offset: n.UTC_PLUS_9, timezone: s.GambierIslandTime });
({ id: u.PacificGuadalcanal, name: "Pacific/Guadalcanal", offset: n.UTC_PLUS_11, timezone: s.SolomonIslandsTime });
({ id: u.PacificGuam, name: "Pacific/Guam", offset: n.UTC_PLUS_10, timezone: s.ChamorroStandardTime });
({ id: u.PacificHonolulu, name: "Pacific/Honolulu", offset: n.UTC_PLUS_10, timezone: s.HawaiiAleutianStandardTime });
({ id: u.PacificJohnston, name: "Pacific/Johnston", offset: n.UTC_PLUS_10, timezone: s.HawaiiAleutianStandardTime });
({ id: u.PacificKiritimati, name: "Pacific/Kiritimati", offset: n.UTC_PLUS_14, timezone: s.LineIslandsTime });
({ id: u.PacificKosrae, name: "Pacific/Kosrae", offset: n.UTC_PLUS_11, timezone: s.KosraeTime });
({ id: u.PacificKwajalein, name: "Pacific/Kwajalein", offset: n.UTC_PLUS_12, timezone: s.MarshallIslandsTime });
({ id: u.PacificMajuro, name: "Pacific/Majuro", offset: n.UTC_PLUS_12, timezone: s.MarshallIslandsTime });
({ id: u.PacificMarquesas, name: "Pacific/Marquesas", offset: n.UTC_PLUS_9, timezone: s.MarquesasIslandsTime });
({ id: u.PacificMidway, name: "Pacific/Midway", offset: n.UTC_PLUS_11, timezone: s.SamoaStandardTime });
({ id: u.PacificNauru, name: "Pacific/Nauru", offset: n.UTC_PLUS_12, timezone: s.NauruTime });
({ id: u.PacificNiue, name: "Pacific/Niue", offset: n.UTC_PLUS_11, timezone: s.NiueTime });
({ id: u.PacificNorfolk, name: "Pacific/Norfolk", offset: n.UTC_PLUS_11, timezone: s.NorfolkIslandTime });
({ id: u.PacificNoumea, name: "Pacific/Noumea", offset: n.UTC_PLUS_11, timezone: s.NewCaledoniaTime });
({ id: u.PacificPagoPago, name: "Pacific/Pago_Pago", offset: n.UTC_PLUS_11, timezone: s.SamoaStandardTime });
({ id: u.PacificPalau, name: "Pacific/Palau", offset: n.UTC_PLUS_9, timezone: s.PalauTime });
({ id: u.PacificPitcairn, name: "Pacific/Pitcairn", offset: n.UTC_PLUS_8, timezone: s.PitcairnTime });
({ id: u.PacificPonape, name: "Pacific/Ponape", offset: n.UTC_PLUS_11, timezone: s.PohnpeiStandardTime });
({ id: u.PacificPortMoresby, name: "Pacific/Port_Moresby", offset: n.UTC_PLUS_10, timezone: s.PapuaNewGuineaTime });
({ id: u.PacificRarotonga, name: "Pacific/Rarotonga", offset: n.UTC_PLUS_10, timezone: s.CookIslandTime });
({ id: u.PacificSaipan, name: "Pacific/Saipan", offset: n.UTC_PLUS_10, timezone: s.ChamorroStandardTime });
({ id: u.PacificTahiti, name: "Pacific/Tahiti", offset: n.UTC_PLUS_10, timezone: s.TahitiTime });
({ id: u.PacificTarawa, name: "Pacific/Tarawa", offset: n.UTC_PLUS_12, timezone: s.GilbertIslandTime });
({ id: u.PacificTongatapu, name: "Pacific/Tongatapu", offset: n.UTC_PLUS_13, timezone: s.TongaTime });
({ id: u.PacificChuuk, name: "Pacific/Chuuk", offset: n.UTC_PLUS_10, timezone: s.ChuukTime });
({ id: u.PacificPohnpei, name: "Pacific/Pohnpei", offset: n.UTC_PLUS_11, timezone: s.PohnpeiStandardTime });
({ id: u.PacificYap, name: "Pacific/Yap", offset: n.UTC_PLUS_10, timezone: s.ChuukTime });
var ye = (a2 = 21) => {
  let l2 = "", c2 = crypto.getRandomValues(new Uint8Array(a2));
  for (; a2--; ) {
    let A2 = c2[a2] & 63;
    A2 < 36 ? l2 += A2.toString(36) : A2 < 62 ? l2 += (A2 - 26).toString(36).toUpperCase() : A2 < 63 ? l2 += "_" : l2 += "-";
  }
  return l2;
};
var Ai = [{ property: "name", enumerable: false }, { property: "message", enumerable: false }, { property: "stack", enumerable: false }, { property: "code", enumerable: true }], y = Symbol(".toJSON was called"), di = (a2) => {
  a2[y] = true;
  let l2 = a2.toJSON();
  return delete a2[y], l2;
}, Fe = ({ from: a2, seen: l2, to_: c2, forceEnumerable: A2, maxDepth: o2, depth: I2 }) => {
  let d2 = c2 || (Array.isArray(a2) ? [] : {});
  if (l2.push(a2), I2 >= o2)
    return d2;
  if (typeof a2.toJSON == "function" && a2[y] !== true)
    return di(a2);
  for (let [g2, E2] of Object.entries(a2)) {
    if (typeof Buffer == "function" && Buffer.isBuffer(E2)) {
      d2[g2] = "[object Buffer]";
      continue;
    }
    if (typeof E2 != "function") {
      if (!E2 || typeof E2 != "object") {
        d2[g2] = E2;
        continue;
      }
      if (!l2.includes(a2[g2])) {
        I2++, d2[g2] = Fe({ from: a2[g2], seen: [...l2], forceEnumerable: A2, maxDepth: o2, depth: I2 });
        continue;
      }
      d2[g2] = "[Circular]";
    }
  }
  for (let { property: g2, enumerable: E2 } of Ai)
    typeof a2[g2] == "string" && Object.defineProperty(d2, g2, { value: a2[g2], enumerable: A2 ? true : E2, configurable: true, writable: true });
  return d2;
};
function Le(a2, l2 = {}) {
  let { maxDepth: c2 = Number.POSITIVE_INFINITY } = l2;
  return typeof a2 == "object" && a2 !== null ? Fe({ from: a2, seen: [], forceEnumerable: true, maxDepth: c2, depth: 0 }) : typeof a2 == "function" ? `[Function: ${a2.name || "anonymous"}]` : a2;
}
var b;
(function(a2) {
  a2[a2.Warning = 999] = "Warning", a2[a2.Exception = 1e3] = "Exception", a2[a2.UnmanagedException = 1001] = "UnmanagedException", a2[a2.CaughtException = 1002] = "CaughtException", a2[a2.UncaughtException = 1003] = "UncaughtException", a2[a2.UnhandledPromiseRejectionException = 1004] = "UnhandledPromiseRejectionException", a2[a2.AuthenticationException = 2e3] = "AuthenticationException", a2[a2.AuthenticationExpiredAccessTokenException = 2001] = "AuthenticationExpiredAccessTokenException", a2[a2.AuthenticationInvalidAccessTokenException = 2002] = "AuthenticationInvalidAccessTokenException", a2[a2.AuthenticationMissingAccessTokenException = 2003] = "AuthenticationMissingAccessTokenException", a2[a2.AuthenticationExpiredRefreshTokenException = 2004] = "AuthenticationExpiredRefreshTokenException", a2[a2.AuthenticationInvalidRefreshTokenException = 2005] = "AuthenticationInvalidRefreshTokenException", a2[a2.AuthenticationMissingRefreshTokenException = 2006] = "AuthenticationMissingRefreshTokenException", a2[a2.AuthenticationMissingDeviceKeyException = 2007] = "AuthenticationMissingDeviceKeyException", a2[a2.AuthenticationUnAuthorizedAccessException = 2008] = "AuthenticationUnAuthorizedAccessException", a2[a2.AuthenticationCodeMismatchException = 2009] = "AuthenticationCodeMismatchException", a2[a2.AuthenticationExpiredCodeException = 2010] = "AuthenticationExpiredCodeException", a2[a2.AuthenticationLoginException = 2011] = "AuthenticationLoginException", a2[a2.AuthenticationLoginInvalidCredentialsException = 2012] = "AuthenticationLoginInvalidCredentialsException", a2[a2.AuthenticationLoginTooManyFailedAttemptsException = 2013] = "AuthenticationLoginTooManyFailedAttemptsException", a2[a2.AuthenticationLimitExceededException = 2014] = "AuthenticationLimitExceededException", a2[a2.AuthenticationUnauthorizedAccessException = 2015] = "AuthenticationUnauthorizedAccessException", a2[a2.AuthenticationTooManyRequestsException = 2016] = "AuthenticationTooManyRequestsException", a2[a2.AuthenticationUserNotFoundException = 2017] = "AuthenticationUserNotFoundException", a2[a2.AuthenticationSignupException = 2018] = "AuthenticationSignupException", a2[a2.AuthenticationUsernameAvailabilityCheckException = 2019] = "AuthenticationUsernameAvailabilityCheckException", a2[a2.AuthenticationUsernameExistsException = 2020] = "AuthenticationUsernameExistsException", a2[a2.AuthenticationAliasExistException = 2021] = "AuthenticationAliasExistException", a2[a2.AuthenticationCodeDeliveryFailureException = 2022] = "AuthenticationCodeDeliveryFailureException", a2[a2.AuthenticationMFAMethodNotFoundException = 2023] = "AuthenticationMFAMethodNotFoundException", a2[a2.AuthenticationNotAuthorizedException = 2024] = "AuthenticationNotAuthorizedException", a2[a2.AuthenticationPasswordResetRequiredException = 2025] = "AuthenticationPasswordResetRequiredException", a2[a2.AuthenticationUserNotConfirmedException = 2026] = "AuthenticationUserNotConfirmedException", a2[a2.DatabaseException = 3e3] = "DatabaseException", a2[a2.SequelizeNotInitializedException = 3001] = "SequelizeNotInitializedException", a2[a2.ProcessException = 4e3] = "ProcessException", a2[a2.ProcessWarningException = 4001] = "ProcessWarningException", a2[a2.KillProcessException = 4002] = "KillProcessException", a2[a2.FatalException = 4003] = "FatalException", a2[a2.ProcessSigTermException = 4004] = "ProcessSigTermException", a2[a2.ProcessSigIntException = 4005] = "ProcessSigIntException", a2[a2.MissingEnvironmentVariable = 4006] = "MissingEnvironmentVariable", a2[a2.NetworkException = 5e3] = "NetworkException", a2[a2.HttpException = 5001] = "HttpException", a2[a2.HttpRequestException = 5002] = "HttpRequestException", a2[a2.HttpRequestResourceNotFoundException = 5003] = "HttpRequestResourceNotFoundException", a2[a2.HttpResponseException = 5004] = "HttpResponseException", a2[a2.ServiceProviderException = 6e3] = "ServiceProviderException", a2[a2.AWSException = 6001] = "AWSException", a2[a2.AWSMissingAccessKeyException = 6002] = "AWSMissingAccessKeyException", a2[a2.AWSMissingSecretKeyException = 6003] = "AWSMissingSecretKeyException", a2[a2.CognitoException = 6004] = "CognitoException", a2[a2.CognitoInternalErrorException = 6005] = "CognitoInternalErrorException", a2[a2.CognitoInvalidEmailRoleAccessPolicyException = 6006] = "CognitoInvalidEmailRoleAccessPolicyException", a2[a2.CognitoInvalidLambdaResponseException = 6007] = "CognitoInvalidLambdaResponseException", a2[a2.CognitoUserLambdaValidationException = 6008] = "CognitoUserLambdaValidationException", a2[a2.CognitoInvalidParameterException = 6009] = "CognitoInvalidParameterException", a2[a2.CognitoInvalidSmsRoleAccessPolicyException = 6010] = "CognitoInvalidSmsRoleAccessPolicyException", a2[a2.CognitoInvalidSmsRoleTrustRelationshipException = 6011] = "CognitoInvalidSmsRoleTrustRelationshipException", a2[a2.CognitoInvalidUserPoolConfigurationException = 6012] = "CognitoInvalidUserPoolConfigurationException", a2[a2.CognitoResourceNotFoundException = 6013] = "CognitoResourceNotFoundException", a2[a2.CognitoMissingUserPoolClientIdException = 6014] = "CognitoMissingUserPoolClientIdException", a2[a2.CognitoMissingUserPoolIdException = 6015] = "CognitoMissingUserPoolIdException", a2[a2.CognitoUnexpectedLambdaException = 6016] = "CognitoUnexpectedLambdaException", a2[a2.StripeException = 6017] = "StripeException", a2[a2.StripeMissingSecretKeyException = 6018] = "StripeMissingSecretKeyException", a2[a2.StripeSubscriptionCreationFailedException = 6019] = "StripeSubscriptionCreationFailedException", a2[a2.StripePaymentMethodRequiredException = 6020] = "StripePaymentMethodRequiredException", a2[a2.UserException = 7e3] = "UserException", a2[a2.NullUserException = 7001] = "NullUserException", a2[a2.UserStateConflictException = 7002] = "UserStateConflictException", a2[a2.NullAccountException = 7003] = "NullAccountException", a2[a2.ValidationException = 8e3] = "ValidationException", a2[a2.InvalidTypeException = 8001] = "InvalidTypeException", a2[a2.MissingArgumentException = 8002] = "MissingArgumentException", a2[a2.MissingPropertyException = 8003] = "MissingPropertyException", a2[a2.InvalidArgumentException = 8004] = "InvalidArgumentException", a2[a2.InvalidPropertyException = 8005] = "InvalidPropertyException", a2[a2.MissingRequestBodyPropertyException = 8006] = "MissingRequestBodyPropertyException", a2[a2.MissingRequestUrlParameterException = 8007] = "MissingRequestUrlParameterException", a2[a2.MissingCookieException = 8008] = "MissingCookieException";
})(b || (b = {}));
var D = class extends Error {
  constructor(l2, c2) {
    super(l2);
    h(this, "cause");
    h(this, "code", b.Exception);
    h(this, "context");
    h(this, "created");
    h(this, "data");
    h(this, "description");
    h(this, "model");
    h(this, "form");
    h(this, "friendlyMessage", "An unknown error has occurred. :(");
    h(this, "id");
    h(this, "logLevel", v.Exception);
    h(this, "origin");
    h(this, "pii");
    h(this, "request");
    h(this, "response");
    h(this, "scope");
    h(this, "remediation");
    h(this, "tags");
    h(this, "task");
    h(this, "user");
    h(this, "__proto__");
    var o2, I2, d2, g2;
    let A2 = new.target.prototype;
    if (this.__proto__ = A2, Error.captureStackTrace && Error.captureStackTrace((o2 = c2 == null ? void 0 : c2.cause) != null ? o2 : this, D), this.id = ye(), this.name = this.constructor.name, this.created = new Date().toString(), this.description = (I2 = c2 == null ? void 0 : c2.description) != null ? I2 : this.description, this.remediation = (d2 = c2 == null ? void 0 : c2.remediation) != null ? d2 : this.remediation, this.scope = (g2 = c2 == null ? void 0 : c2.scope) != null ? g2 : this.scope, c2) {
      let { cause: E2, context: Je2, data: Ze2, model: Ye2, form: $e2, origin: Qe2, pii: Xe2, request: Ce2, response: ai2, tags: ei2, task: ii2, user: ni2 } = c2;
      this.cause = E2, this.context = Je2, this.data = Ze2, this.model = Ye2, this.form = $e2, this.origin = Qe2, this.pii = Xe2, this.request = Ce2, this.response = ai2, this.task = ii2, this.tags = ei2, this.user = ni2;
    }
  }
  toJSON() {
    return Le(this);
  }
};
var k = class extends D {
  constructor() {
    super(...arguments);
    h(this, "code", b.InvalidPropertyException);
    h(this, "description", "An object property is invalid.");
    h(this, "logLevel", v.Exception);
    h(this, "remediation", { response: { code: 400 }, retry: false });
  }
};
var Re = L(Ge(), 1), N = L(We(), 1);
function Si(a2, l2) {
  return Object.entries(l2).filter((A2) => {
    if (!A2)
      return false;
    let o2 = A2[0];
    if (!Object.values(i$2).includes(o2))
      throw new k(`Configuration property "${A2[0]}" is not supported.`, {});
    return true;
  }).map(([A2, o2]) => {
    let I2 = (d2, g2) => ({ condition: d2, message: Ti(d2, g2), value: a2 });
    switch (A2) {
      case i$2.IsRequired:
        if (typeof o2 != "boolean")
          throw new TypeError('Configuration property "IsRequired" must be a boolean.');
        if (o2 === true && (!a2 || a2 === ""))
          return I2(A2);
        break;
      case i$2.HasLetterCount:
        {
          if ((Number.isNaN(o2) || !Number.isInteger(o2)) && typeof o2 != "boolean")
            throw new TypeError('Configuration property "HasLetterCount" must be a number or boolean');
          let d2 = new N.default();
          if (o2 === 0 || o2 === false ? d2.has().not().letters() : d2.has().letters(o2), !a2 || typeof a2 != "string" || !d2.validate(a2))
            return I2(A2, { requirement: o2 });
        }
        break;
      case i$2.HasLowercaseCount:
        {
          if ((Number.isNaN(o2) || !Number.isInteger(o2)) && typeof o2 != "boolean")
            throw new TypeError('Configuration property "HasLowercaseCount" must be a number or boolean');
          let d2 = new N.default();
          if (o2 === 0 ? d2.has().not().lowercase() : d2.has().lowercase(o2), !a2 || typeof a2 != "string" || !d2.validate(a2))
            return I2(A2, { requirement: o2 });
        }
        break;
      case i$2.HasNumberCount:
        {
          if ((Number.isNaN(o2) || !Number.isInteger(o2)) && typeof o2 != "boolean")
            throw new TypeError('Configuration property "HasNumberCount" must be a number or boolean');
          let d2 = new N.default();
          if (o2 === 0 ? d2.has().not().digits() : d2.has().digits(o2), !a2 || typeof a2 != "string" || !d2.validate(a2))
            return I2(A2, { requirement: o2 });
        }
        break;
      case i$2.HasSymbolCount:
        {
          if ((Number.isNaN(o2) || !Number.isInteger(o2)) && typeof o2 != "boolean")
            throw new TypeError('Configuration property "HasSymbolCount" must be a number or boolean');
          let d2 = new N.default();
          if (o2 === 0 ? d2.has().not().symbols() : d2.has().symbols(o2), !a2 || typeof a2 != "string" || !d2.validate(a2))
            return I2(A2, { requirement: o2 });
        }
        break;
      case i$2.HasUppercaseCount:
        {
          if ((Number.isNaN(o2) || !Number.isInteger(o2)) && typeof o2 != "boolean")
            throw new TypeError('Configuration property "HasUppercaseCount" must be a number or boolean');
          let d2 = new N.default();
          if (o2 === 0 ? d2.has().not().uppercase() : d2.has().uppercase(o2), !a2 || typeof a2 != "string" || !d2.validate(a2))
            return I2(A2, { requirement: o2 });
        }
        break;
      case i$2.IsEmailAddress:
        if (typeof o2 != "boolean")
          throw new TypeError('Configuration property "IsEmailAddress" must be a boolean.');
        if (typeof a2 != "string" || !Re.default.validate(a2))
          return I2(A2);
        break;
      case i$2.IsEqual:
        if (a2 !== o2)
          return I2(A2);
        break;
      case i$2.IsNotNull:
        if (typeof o2 != "boolean")
          throw new TypeError('Configuration property "IsNotNull" must be a boolean.');
        if (a2 === null)
          return I2(A2);
        break;
      case i$2.IsLengthEqual:
        if (Number.isNaN(o2) || !Number.isInteger(o2))
          throw new TypeError('Configuration property "IsLengthEqual" must be a number.');
        if (typeof a2 != "string" || a2.length !== o2)
          return I2(A2, { requirement: o2 });
        break;
      case i$2.IsLengthGreaterThanOrEqual:
        if (!o2 || Number.isNaN(o2) || !Number.isInteger(o2))
          throw new TypeError('Configuration property "IsLengthGreaterThanOrEqual" must be a number.');
        if (typeof a2 != "string" || a2.length < o2)
          return I2(A2, { requirement: o2 });
        break;
      case i$2.IsLengthLessThanOrEqual:
        if (!o2 || Number.isNaN(o2) || !Number.isInteger(o2))
          throw new TypeError('Configuration property "IsLengthLessThanOrEqual" must be a number.');
        if (typeof a2 != "string" || a2.length > o2)
          return I2(A2, { requirement: o2 });
        break;
    }
  }).filter((A2) => !!A2) || [];
}
function Ti(a2, l2) {
  switch (a2) {
    case i$2.Contains:
      return { long: "Missing a required pattern.", short: "Missing string pattern" };
    case i$2.HasCharacterCount:
      return { long: "Does not meet character length requirement.", short: "Not enough characters" };
    case i$2.HasNumberCount:
      return { long: "Does not meet number count requirement.", short: "Not enough numbers" };
    case i$2.HasLetterCount:
      return { long: "Does not contain required number of characters.", short: "Not enough letters" };
    case i$2.HasLowercaseCount:
      return { long: "Does not contain enough lowercase letters.", short: "Not enough lowercase letters" };
    case i$2.HasSpacesCount:
      return { long: "Does not contain enough spaces.", short: "Not enough spaces" };
    case i$2.HasSymbolCount:
      return { long: "Does not meet symbol count requirement.", short: "Not enough symbols" };
    case i$2.HasUppercaseCount:
      return { long: "Does not contain enough uppercase letters.", short: "Not enough uppercase letters" };
    case i$2.IsAfter:
      return { long: `Value is not after ${l2 == null ? void 0 : l2.requirement}`, short: `Is not after ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsAfterOrEqual:
      return { long: `Value is not after or equal to ${l2 == null ? void 0 : l2.requirement}`, short: `Is not equal or after ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsAirport:
      return { long: "Value is not a valid airport identifier code.", short: "Invalid airport code" };
    case i$2.IsAlpha:
      return { long: "Value does not consist of only letters.", short: "Only letters allowed" };
    case i$2.IsAlphanumeric:
      return { long: "Provided value is not alphanumeric.", short: "Only letters and numbers allowed" };
    case i$2.IsAlgorithmHash:
      return { long: "Value does not match algorithm hash.", short: "Invalid algorithm hash" };
    case i$2.IsAscii:
      return { long: "Value is not valid ASCII string.", short: "Not valid ASCII" };
    case i$2.IsBase64:
      return { long: "Value is not valid Base64 string.", short: "Not valid Base64" };
    case i$2.IsBefore:
      return { long: `Value is not before ${l2 == null ? void 0 : l2.requirement}.`, short: `Not before ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsBeforeOrAfter:
      return { long: `Value is not before or after ${l2 == null ? void 0 : l2.requirement}.`, short: `Not before or after to ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsBeforeOrEqual:
      return { long: `Value is not before or equal to${l2 == null ? void 0 : l2.requirement}.`, short: `Not before or equal to ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsBetween:
      return { long: `Value is not between ${l2 == null ? void 0 : l2.requirement}.`, short: `Value is not between ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsBIC:
      return { long: "Not a valid BIC number.", short: "Invalid BIC ID" };
    case i$2.IsBitcoinAddress:
      return { long: "Not a valid Bitcoin address.", short: "Invalid Bitcoin address" };
    case i$2.IsBoolean:
      return { long: "Not a valid boolean value.", short: "Must be boolean value" };
    case i$2.IsColor:
      return { long: "Not a valid color value.", short: "Invalid color" };
    case i$2.IsComplexEnough:
      return { long: "Does not meet complexity requirements.", short: "Not complex enough" };
    case i$2.IsCountry:
      return { long: "Not a valid country code.", short: "Invalid country code" };
    case i$2.IsCreditCard:
      return { long: "Not a valid credit card number.", short: "Invalid credit card number" };
    case i$2.IsCurrency:
      return { long: "Not a valid currency code.", short: "Invalid currency code" };
    case i$2.IsDataURI:
      return { long: "Not a valid data URI.", short: "Invalid data URI" };
    case i$2.IsDate:
      return { long: "Not a valid date.", short: "Invalid date" };
    case i$2.IsDateRange:
      return { long: "Not a valid date range.", short: "Invalid date range" };
    case i$2.IsDateTime:
      return { long: "Not a valid DateTime value.", short: "Invalid DateTime value" };
    case i$2.IsDayOfMonth:
      return { long: "Not a day of the month.", short: "Not valid day of month" };
    case i$2.IsDecimal:
      return { long: "Not a valid decimal value.", short: "Invalid decimal value" };
    case i$2.IsDivisibleBy:
      return { long: `Not divisible by ${l2 == null ? void 0 : l2.requirement}.`, short: `Not divisible by ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsDomainName:
      return { long: "Not a valid domain name.", short: "Invalid domain name" };
    case i$2.IsEmailAddress:
      return { long: "Not a valid email address.", short: "Invalid email address" };
    case i$2.IsEthereumAddress:
      return { long: "Not a valid Ethereum address.", short: "Invalid Ethereum address" };
    case i$2.IsEAN:
      return { long: "Not a valid EAN number.", short: "Invalid EAN number" };
    case i$2.IsEIN:
      return { long: "Not a valid EIN number.", short: "Invalid EIN number" };
    case i$2.IsEqual:
      return { long: `Value is not equal to ${l2 == null ? void 0 : l2.requirement}.`, short: `Not equal to ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsEvenNumber:
      return { long: "Value is not an even number.", short: "Not an even number" };
    case i$2.IsFloat:
      return { long: "Value is not a floating point integer.", short: "Invalid float value" };
    case i$2.IsIBAN:
      return { long: "Not a valid IBAN number.", short: "Invalid IBAN number" };
    case i$2.IsGreaterThan:
      return { long: `Value is not greater than ${l2 == null ? void 0 : l2.requirement}.`, short: `Not greater than ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsGreaterThanOrEqual:
      return { long: `Value is not greater than or equal to ${l2 == null ? void 0 : l2.requirement}`, short: `Not greater or equal to ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsHSLColor:
      return { long: "Value is not valid HSL color string.", short: "Invalid HSL value" };
    case i$2.IsHexColor:
      return { long: "Not a valid hexadecimal color code string.", short: "Invalid hex color code" };
    case i$2.IsHexadecimal:
      return { long: "Not a valid hexadecimal string.", short: "Not hexadecimal value" };
    case i$2.IsIdentityCardCode:
      return { long: "Not a valid identity card code.", short: "Invalid ID card" };
    case i$2.IsIMEI:
      return { long: "Not a valid IMEI number.", short: "Invalid IMEI number" };
    case i$2.IsInIPAddressRange:
      return { long: `Value is not within ${l2 == null ? void 0 : l2.requirement} IP range`, short: "Not in IP range" };
    case i$2.IsInList:
      return { long: "Value is not included in given list.", short: "Not in list" };
    case i$2.IsInTheLast:
      return { long: "Value is not the last item in given list.", short: "Not last in list" };
    case i$2.IsInteger:
      return { long: "Value is not a valid integer value.", short: "Not an integer" };
    case i$2.IsIPAddress:
      return { long: "Value is not a valid IP address.", short: "Invalid IP address" };
    case i$2.IsIPAddressRange:
      return { long: "Not a valid IP address range.", short: "Invalid IP address range" };
    case i$2.IsISBN:
      return { long: "Value is not valid ISBN number.", short: "Invalid ISBN number" };
    case i$2.IsISIN:
      return { long: "Value is not a valid ISIN number.", short: "Invalid ISIN number" };
    case i$2.IsISMN:
      return { long: "Value is not a valid ISMN number.", short: "Invalid ISMN number" };
    case i$2.IsISRC:
      return { long: "Value is not a valid ISRC number.", short: "Invalid ISRC number" };
    case i$2.IsISSN:
      return { long: "Value is not a valid ISSN number.", short: "Invalid ISSN number" };
    case i$2.IsISO4217:
      return { long: "Value is not ISO-4217 compliant currency code.", short: "Invalid currency code" };
    case i$2.IsISO8601:
      return { long: "Value is not ISO-8601 compliant date string.", short: "Invalid date" };
    case i$2.IsISO31661Alpha2:
      return { long: "Not a valid ISO-3166-1 Alpha 2 country code.", short: "Invalid country code" };
    case i$2.IsISO31661Alpha3:
      return { long: "Not a valid ISO-3166-1 Alpha 3 country code.", short: "Invalid country code" };
    case i$2.IsJSON:
      return { long: "Not valid JSON data.", short: "Invalid JSON" };
    case i$2.IsLanguage:
      return { long: "Value is not a valid language code.", short: "Invalid language code" };
    case i$2.IsLatitude:
      return { long: "Not a valid latitudinal coordinate.", short: "Invalid latitude coordinate" };
    case i$2.IsLongitude:
      return { long: "Not a valid longitudinal coordinate.", short: "Invalid longitude coordinate" };
    case i$2.IsLengthEqual:
      return { long: `Length of value is not equal to ${l2 == null ? void 0 : l2.requirement}.`, short: `Length not equal to ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsLengthGreaterThan:
      return { long: `Length of value is not greater than ${l2 == null ? void 0 : l2.requirement}.`, short: "Not long enough" };
    case i$2.IsLengthGreaterThanOrEqual:
      return { long: `Length of value is not greater than or equal to ${l2 == null ? void 0 : l2.requirement}.`, short: "Not long enough" };
    case i$2.IsLengthLessThan:
      return { long: `Length of value is not less than ${l2 == null ? void 0 : l2.requirement}.`, short: "Too long" };
    case i$2.IsLengthLessThanOrEqual:
      return { long: `Length of value is not less than or equal to ${l2 == null ? void 0 : l2.requirement}.`, short: "Too long" };
    case i$2.IsLessThan:
      return { long: `Value is not less than ${l2 == null ? void 0 : l2.requirement}.`, short: `Not less than ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsLessThanOrEqual:
      return { long: `Value is not less than or equal to ${l2 == null ? void 0 : l2.requirement}.`, short: `Not less or equal to ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsLicensePlateNumber:
      return { long: "Not a valid license plate number.", short: "Invalid license plate number" };
    case i$2.IsLowercase:
      return { long: "Value is not all lowercase.", short: "Not all lowercase" };
    case i$2.IsOctal:
      return { long: "Value is not a valid octal string.", short: "Invalid octal value" };
    case i$2.IsMACAddress:
      return { long: "Value is not a valid MAC address.", short: "Invalid MAC address" };
    case i$2.IsMD5:
      return { long: "Value is not valid MD5 hash string.", short: "Invalid MD5 string" };
    case i$2.IsMagnetURI:
      return { long: "Not a valid Magnet URI string.", short: "Invalid Magnet URI" };
    case i$2.IsMarkdown:
      return { long: "Value is not a valid markdown string.", short: "Invalid Markdown" };
    case i$2.IsMimeType:
      return { long: "Value is not a valid HTTP MIME type.", short: "Invalid MIME type" };
    case i$2.IsMonth:
      return { long: "Value is not a valid month.", short: "Invalid month" };
    case i$2.IsNegativeNumber:
      return { long: "Value is not a negative number.", short: "Number not negative" };
    case i$2.IsNotDate:
      return { long: "Value is not a valid date string.", short: "Invalid date" };
    case i$2.IsNotEqual:
      return { long: `Value is equal to ${l2 == null ? void 0 : l2.requirement}.`, short: `Can't be equal to ${l2 == null ? void 0 : l2.requirement}` };
    case i$2.IsNotInIPAddressRange:
      return { long: "Value is not within IP range.", short: "Not in IP address range" };
    case i$2.IsNotInList:
      return { long: "Value is not allowed.", short: "Not allowed" };
    case i$2.IsNotNull:
      return { long: "Value is required and must not be null.", short: "Cannot be null" };
    case i$2.IsNotRegexMatch:
      return { long: "Value does not match required pattern.", short: "Invalid pattern" };
    case i$2.IsNotToday:
      return { long: "Value must not be same date as current day.", short: "Cannot be today" };
    case i$2.IsNumber:
      return { long: "Value is not a number.", short: "Not a number" };
    case i$2.IsNumeric:
      return { long: "String value must be numeric only.", short: "Not numeric" };
    case i$2.IsOddNumber:
      return { long: "Value must be an odd number.", short: "Not an odd number" };
    case i$2.IsPassportNumber:
      return { long: "Not a valid password number.", short: "Invalid password number" };
    case i$2.IsPhoneNumber:
      return { long: "Not a valid phone number.", short: "Invalid phone number" };
    case i$2.IsPort:
      return { long: "Not a valid port number.", short: "Invalid port number" };
    case i$2.IsPositiveNumber:
      return { long: "Not a positive number.", short: "Not a positive number" };
    case i$2.IsPostalCode:
      return { long: "Not a valid postal code.", short: "Invalid postal code" };
    case i$2.IsProvince:
      return { long: "Not a valid province code.", short: "Invalid province code" };
    case i$2.IsRGBColor:
      return { long: "Not a valid RGB color string.", short: "Invalid RGB color" };
    case i$2.IsRegexMatch:
      return { long: "Value does not match required pattern.", short: "Missing string pattern" };
    case i$2.IsRequired:
      return { long: "Field is required.", short: "Required field" };
    case i$2.IsSemanticVersion:
      return { long: "Value is not a valid semantic version.", short: "Invalid version" };
    case i$2.IsSlug:
      return { long: "Not a valid URL slug string.", short: "Invalid URL slug" };
    case i$2.IsSSN:
      return { long: "Not a valid social security number.", short: "Invalid SSN" };
    case i$2.IsState:
      return { long: "Not a valid state code.", short: "Invalid state code" };
    case i$2.IsStreetAddress:
      return { long: "Not a valid street address.", short: "Invalid street address" };
    case i$2.IsString:
      return { long: "Value is not a valid string.", short: "Must be a string" };
    case i$2.IsStrongPassword:
      return { long: "A stronger password is required.", short: "Password must be stronger" };
    case i$2.IsTags:
      return { long: "Input value is not valid tags.", short: "Invalid tags" };
    case i$2.IsTaxIDNumber:
      return { long: "Value is not a valid tax ID number.", short: "Invalid tax ID number" };
    case i$2.IsThisMonth:
      return { long: "Date is not in the current month.", short: "Not current month" };
    case i$2.IsThisQuarter:
      return { long: "Date is not in the current quarter.", short: "Not current quarter" };
    case i$2.IsThisWeek:
      return { long: "Date is not this week.", short: "Not this week" };
    case i$2.IsThisWeekend:
      return { long: "Date is not date for upcoming weekend.", short: "Not this weekend" };
    case i$2.IsThisYear:
      return { long: "Date is not in the current year.", short: "Not in current year" };
    case i$2.IsTime:
      return { long: "Value is not a valid time string.", short: "Invalid time" };
    case i$2.IsTimeOfDay:
      return { long: "Value is not in required time of day.", short: "Invalid time of day" };
    case i$2.IsTimeRange:
      return { long: "Value is not a valid time range.", short: "Invalid time range" };
    case i$2.IsToday:
      return { long: "Date is not today.", short: "Not today's date" };
    case i$2.IsURL:
      return { long: "Value is not a valid URL string.", short: "Invalid URL" };
    case i$2.IsUUID:
      return { long: "Value is not a valid UUID string.", short: "Invalid UUID" };
    case i$2.IsUppercase:
      return { long: "String is not completely uppercased.", short: "Not uppercase" };
    case i$2.IsUsernameAvailable:
      return { long: "Username is not available.", short: "Username not available" };
    case i$2.IsValidStreetAddress:
      return { long: "Provided address is not valid.", short: "Invalid street address" };
    case i$2.IsVATIDNumber:
      return { long: "Value is not a valid VAT ID number.", short: "Invalid VAT ID" };
    case i$2.IsWeekday:
      return { long: "Date is not a weekday.", short: "Not a weekday" };
    case i$2.IsWeekend:
      return { long: "Date is not on a weekend.", short: "Not a weekend" };
    case i$2.IsYear:
      return { long: "Not a valid year string.", short: "Invalid year" };
  }
}
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
var AuthenticationDetails = /* @__PURE__ */ function() {
  function AuthenticationDetails2(data) {
    var _ref = data || {}, ValidationData = _ref.ValidationData, Username = _ref.Username, Password = _ref.Password, AuthParameters = _ref.AuthParameters, ClientMetadata = _ref.ClientMetadata;
    this.validationData = ValidationData || {};
    this.authParameters = AuthParameters || {};
    this.clientMetadata = ClientMetadata || {};
    this.username = Username;
    this.password = Password;
  }
  var _proto = AuthenticationDetails2.prototype;
  _proto.getUsername = function getUsername() {
    return this.username;
  };
  _proto.getPassword = function getPassword() {
    return this.password;
  };
  _proto.getValidationData = function getValidationData() {
    return this.validationData;
  };
  _proto.getAuthParameters = function getAuthParameters() {
    return this.authParameters;
  };
  _proto.getClientMetadata = function getClientMetadata() {
    return this.clientMetadata;
  };
  return AuthenticationDetails2;
}();
var buffer = {};
var base64Js = {};
base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i$1 = 0, len = code$1.length; i$1 < len; ++i$1) {
  lookup[i$1] = code$1[i$1];
  revLookup[code$1.charCodeAt(i$1)] = i$1;
}
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  var validLen = b64.indexOf("=");
  if (validLen === -1)
    validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0;
  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;
  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 255;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
  }
  return parts.join("");
}
var ieee754 = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
ieee754.read = function(buffer2, offset2, isLE, mLen, nBytes) {
  var e2, m2;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d2 = isLE ? -1 : 1;
  var s2 = buffer2[offset2 + i];
  i += d2;
  e2 = s2 & (1 << -nBits) - 1;
  s2 >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e2 = e2 * 256 + buffer2[offset2 + i], i += d2, nBits -= 8) {
  }
  m2 = e2 & (1 << -nBits) - 1;
  e2 >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m2 = m2 * 256 + buffer2[offset2 + i], i += d2, nBits -= 8) {
  }
  if (e2 === 0) {
    e2 = 1 - eBias;
  } else if (e2 === eMax) {
    return m2 ? NaN : (s2 ? -1 : 1) * Infinity;
  } else {
    m2 = m2 + Math.pow(2, mLen);
    e2 = e2 - eBias;
  }
  return (s2 ? -1 : 1) * m2 * Math.pow(2, e2 - mLen);
};
ieee754.write = function(buffer2, value, offset2, isLE, mLen, nBytes) {
  var e2, m2, c2;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d2 = isLE ? 1 : -1;
  var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m2 = isNaN(value) ? 1 : 0;
    e2 = eMax;
  } else {
    e2 = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c2 = Math.pow(2, -e2)) < 1) {
      e2--;
      c2 *= 2;
    }
    if (e2 + eBias >= 1) {
      value += rt / c2;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c2 >= 2) {
      e2++;
      c2 /= 2;
    }
    if (e2 + eBias >= eMax) {
      m2 = 0;
      e2 = eMax;
    } else if (e2 + eBias >= 1) {
      m2 = (value * c2 - 1) * Math.pow(2, mLen);
      e2 = e2 + eBias;
    } else {
      m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e2 = 0;
    }
  }
  for (; mLen >= 8; buffer2[offset2 + i] = m2 & 255, i += d2, m2 /= 256, mLen -= 8) {
  }
  e2 = e2 << mLen | m2;
  eLen += mLen;
  for (; eLen > 0; buffer2[offset2 + i] = e2 & 255, i += d2, e2 /= 256, eLen -= 8) {
  }
  buffer2[offset2 + i - d2] |= s2 * 128;
};
var toString = {}.toString;
var isarray = Array.isArray || function(arr) {
  return toString.call(arr) == "[object Array]";
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
(function(exports) {
  var base64 = base64Js;
  var ieee754$1 = ieee754;
  var isArray = isarray;
  exports.Buffer = Buffer2;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  Buffer2.TYPED_ARRAY_SUPPORT = commonjsGlobal.TYPED_ARRAY_SUPPORT !== void 0 ? commonjsGlobal.TYPED_ARRAY_SUPPORT : typedArraySupport();
  exports.kMaxLength = kMaxLength();
  function typedArraySupport() {
    try {
      var arr = new Uint8Array(1);
      arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
        return 42;
      } };
      return arr.foo() === 42 && typeof arr.subarray === "function" && arr.subarray(1, 1).byteLength === 0;
    } catch (e2) {
      return false;
    }
  }
  function kMaxLength() {
    return Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
  }
  function createBuffer(that, length) {
    if (kMaxLength() < length) {
      throw new RangeError("Invalid typed array length");
    }
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      that = new Uint8Array(length);
      that.__proto__ = Buffer2.prototype;
    } else {
      if (that === null) {
        that = new Buffer2(length);
      }
      that.length = length;
    }
    return that;
  }
  function Buffer2(arg, encodingOrOffset, length) {
    if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
      return new Buffer2(arg, encodingOrOffset, length);
    }
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new Error("If encoding is specified then the first argument must be a string");
      }
      return allocUnsafe(this, arg);
    }
    return from(this, arg, encodingOrOffset, length);
  }
  Buffer2.poolSize = 8192;
  Buffer2._augment = function(arr) {
    arr.__proto__ = Buffer2.prototype;
    return arr;
  };
  function from(that, value, encodingOrOffset, length) {
    if (typeof value === "number") {
      throw new TypeError('"value" argument must not be a number');
    }
    if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length);
    }
    if (typeof value === "string") {
      return fromString(that, value, encodingOrOffset);
    }
    return fromObject(that, value);
  }
  Buffer2.from = function(value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length);
  };
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    Buffer2.prototype.__proto__ = Uint8Array.prototype;
    Buffer2.__proto__ = Uint8Array;
    if (typeof Symbol !== "undefined" && Symbol.species && Buffer2[Symbol.species] === Buffer2) {
      Object.defineProperty(Buffer2, Symbol.species, {
        value: null,
        configurable: true
      });
    }
  }
  function assertSize(size) {
    if (typeof size !== "number") {
      throw new TypeError('"size" argument must be a number');
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative');
    }
  }
  function alloc(that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size);
    }
    if (fill !== void 0) {
      return typeof encoding === "string" ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
    }
    return createBuffer(that, size);
  }
  Buffer2.alloc = function(size, fill, encoding) {
    return alloc(null, size, fill, encoding);
  };
  function allocUnsafe(that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer2.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that;
  }
  Buffer2.allocUnsafe = function(size) {
    return allocUnsafe(null, size);
  };
  Buffer2.allocUnsafeSlow = function(size) {
    return allocUnsafe(null, size);
  };
  function fromString(that, string2, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer2.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding');
    }
    var length = byteLength3(string2, encoding) | 0;
    that = createBuffer(that, length);
    var actual = that.write(string2, encoding);
    if (actual !== length) {
      that = that.slice(0, actual);
    }
    return that;
  }
  function fromArrayLike(that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }
  function fromArrayBuffer(that, array, byteOffset, length) {
    array.byteLength;
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError("'offset' is out of bounds");
    }
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError("'length' is out of bounds");
    }
    if (byteOffset === void 0 && length === void 0) {
      array = new Uint8Array(array);
    } else if (length === void 0) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      that = array;
      that.__proto__ = Buffer2.prototype;
    } else {
      that = fromArrayLike(that, array);
    }
    return that;
  }
  function fromObject(that, obj) {
    if (Buffer2.isBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);
      if (that.length === 0) {
        return that;
      }
      obj.copy(that, 0, 0, len);
      return that;
    }
    if (obj) {
      if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
        if (typeof obj.length !== "number" || isnan(obj.length)) {
          return createBuffer(that, 0);
        }
        return fromArrayLike(that, obj);
      }
      if (obj.type === "Buffer" && isArray(obj.data)) {
        return fromArrayLike(that, obj.data);
      }
    }
    throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
  }
  function checked(length) {
    if (length >= kMaxLength()) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer2.alloc(+length);
  }
  Buffer2.isBuffer = function isBuffer(b2) {
    return !!(b2 != null && b2._isBuffer);
  };
  Buffer2.compare = function compare(a2, b2) {
    if (!Buffer2.isBuffer(a2) || !Buffer2.isBuffer(b2)) {
      throw new TypeError("Arguments must be Buffers");
    }
    if (a2 === b2)
      return 0;
    var x2 = a2.length;
    var y2 = b2.length;
    for (var i = 0, len = Math.min(x2, y2); i < len; ++i) {
      if (a2[i] !== b2[i]) {
        x2 = a2[i];
        y2 = b2[i];
        break;
      }
    }
    if (x2 < y2)
      return -1;
    if (y2 < x2)
      return 1;
    return 0;
  };
  Buffer2.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  Buffer2.concat = function concat(list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer2.alloc(0);
    }
    var i;
    if (length === void 0) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }
    var buffer2 = Buffer2.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!Buffer2.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      buf.copy(buffer2, pos);
      pos += buf.length;
    }
    return buffer2;
  };
  function byteLength3(string2, encoding) {
    if (Buffer2.isBuffer(string2)) {
      return string2.length;
    }
    if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string2) || string2 instanceof ArrayBuffer)) {
      return string2.byteLength;
    }
    if (typeof string2 !== "string") {
      string2 = "" + string2;
    }
    var len = string2.length;
    if (len === 0)
      return 0;
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len;
        case "utf8":
        case "utf-8":
        case void 0:
          return utf8ToBytes(string2).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len * 2;
        case "hex":
          return len >>> 1;
        case "base64":
          return base64ToBytes(string2).length;
        default:
          if (loweredCase)
            return utf8ToBytes(string2).length;
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.byteLength = byteLength3;
  function slowToString(encoding, start, end) {
    var loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding)
      encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.prototype._isBuffer = true;
  function swap(b2, n2, m2) {
    var i = b2[n2];
    b2[n2] = b2[m2];
    b2[m2] = i;
  }
  Buffer2.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this;
  };
  Buffer2.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this;
  };
  Buffer2.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this;
  };
  Buffer2.prototype.toString = function toString2() {
    var length = this.length | 0;
    if (length === 0)
      return "";
    if (arguments.length === 0)
      return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer2.prototype.equals = function equals(b2) {
    if (!Buffer2.isBuffer(b2))
      throw new TypeError("Argument must be a Buffer");
    if (this === b2)
      return true;
    return Buffer2.compare(this, b2) === 0;
  };
  Buffer2.prototype.inspect = function inspect() {
    var str = "";
    var max = exports.INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
      if (this.length > max)
        str += " ... ";
    }
    return "<Buffer " + str + ">";
  };
  Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (!Buffer2.isBuffer(target)) {
      throw new TypeError("Argument must be a Buffer");
    }
    if (start === void 0) {
      start = 0;
    }
    if (end === void 0) {
      end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
      thisStart = 0;
    }
    if (thisEnd === void 0) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError("out of range index");
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target)
      return 0;
    var x2 = thisEnd - thisStart;
    var y2 = end - start;
    var len = Math.min(x2, y2);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x2 = thisCopy[i];
        y2 = targetCopy[i];
        break;
      }
    }
    if (x2 < y2)
      return -1;
    if (y2 < x2)
      return 1;
    return 0;
  };
  function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
    if (buffer2.length === 0)
      return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (isNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer2.length - 1;
    }
    if (byteOffset < 0)
      byteOffset = buffer2.length + byteOffset;
    if (byteOffset >= buffer2.length) {
      if (dir)
        return -1;
      else
        byteOffset = buffer2.length - 1;
    } else if (byteOffset < 0) {
      if (dir)
        byteOffset = 0;
      else
        return -1;
    }
    if (typeof val === "string") {
      val = Buffer2.from(val, encoding);
    }
    if (Buffer2.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val & 255;
      if (Buffer2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i2) {
      if (indexSize === 1) {
        return buf[i2];
      } else {
        return buf.readUInt16BE(i2 * indexSize);
      }
    }
    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1)
            foundIndex = i;
          if (i - foundIndex + 1 === valLength)
            return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1)
            i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength)
        byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j2 = 0; j2 < valLength; j2++) {
          if (read(arr, i + j2) !== read(val, j2)) {
            found = false;
            break;
          }
        }
        if (found)
          return i;
      }
    }
    return -1;
  }
  Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string2, offset2, length) {
    offset2 = Number(offset2) || 0;
    var remaining = buf.length - offset2;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    var strLen = string2.length;
    if (strLen % 2 !== 0)
      throw new TypeError("Invalid hex string");
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string2.substr(i * 2, 2), 16);
      if (isNaN(parsed))
        return i;
      buf[offset2 + i] = parsed;
    }
    return i;
  }
  function utf8Write(buf, string2, offset2, length) {
    return blitBuffer(utf8ToBytes(string2, buf.length - offset2), buf, offset2, length);
  }
  function asciiWrite(buf, string2, offset2, length) {
    return blitBuffer(asciiToBytes(string2), buf, offset2, length);
  }
  function latin1Write(buf, string2, offset2, length) {
    return asciiWrite(buf, string2, offset2, length);
  }
  function base64Write(buf, string2, offset2, length) {
    return blitBuffer(base64ToBytes(string2), buf, offset2, length);
  }
  function ucs2Write(buf, string2, offset2, length) {
    return blitBuffer(utf16leToBytes(string2, buf.length - offset2), buf, offset2, length);
  }
  Buffer2.prototype.write = function write(string2, offset2, length, encoding) {
    if (offset2 === void 0) {
      encoding = "utf8";
      length = this.length;
      offset2 = 0;
    } else if (length === void 0 && typeof offset2 === "string") {
      encoding = offset2;
      length = this.length;
      offset2 = 0;
    } else if (isFinite(offset2)) {
      offset2 = offset2 | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === void 0)
          encoding = "utf8";
      } else {
        encoding = length;
        length = void 0;
      }
    } else {
      throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    }
    var remaining = this.length - offset2;
    if (length === void 0 || length > remaining)
      length = remaining;
    if (string2.length > 0 && (length < 0 || offset2 < 0) || offset2 > this.length) {
      throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding)
      encoding = "utf8";
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "hex":
          return hexWrite(this, string2, offset2, length);
        case "utf8":
        case "utf-8":
          return utf8Write(this, string2, offset2, length);
        case "ascii":
          return asciiWrite(this, string2, offset2, length);
        case "latin1":
        case "binary":
          return latin1Write(this, string2, offset2, length);
        case "base64":
          return base64Write(this, string2, offset2, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ucs2Write(this, string2, offset2, length);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer2.prototype.toJSON = function toJSON() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  var MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    var res = "";
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0)
      start = 0;
    if (!end || end < 0 || end > len)
      end = len;
    var out = "";
    for (var i = start; i < end; ++i) {
      out += toHex2(buf[i]);
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }
  Buffer2.prototype.slice = function slice2(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === void 0 ? len : ~~end;
    if (start < 0) {
      start += len;
      if (start < 0)
        start = 0;
    } else if (start > len) {
      start = len;
    }
    if (end < 0) {
      end += len;
      if (end < 0)
        end = 0;
    } else if (end > len) {
      end = len;
    }
    if (end < start)
      end = start;
    var newBuf;
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer2.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer2(sliceLen, void 0);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }
    return newBuf;
  };
  function checkOffset(offset2, ext, length) {
    if (offset2 % 1 !== 0 || offset2 < 0)
      throw new RangeError("offset is not uint");
    if (offset2 + ext > length)
      throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer2.prototype.readUIntLE = function readUIntLE(offset2, byteLength4, noAssert) {
    offset2 = offset2 | 0;
    byteLength4 = byteLength4 | 0;
    if (!noAssert)
      checkOffset(offset2, byteLength4, this.length);
    var val = this[offset2];
    var mul = 1;
    var i = 0;
    while (++i < byteLength4 && (mul *= 256)) {
      val += this[offset2 + i] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUIntBE = function readUIntBE(offset2, byteLength4, noAssert) {
    offset2 = offset2 | 0;
    byteLength4 = byteLength4 | 0;
    if (!noAssert) {
      checkOffset(offset2, byteLength4, this.length);
    }
    var val = this[offset2 + --byteLength4];
    var mul = 1;
    while (byteLength4 > 0 && (mul *= 256)) {
      val += this[offset2 + --byteLength4] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUInt8 = function readUInt8(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 1, this.length);
    return this[offset2];
  };
  Buffer2.prototype.readUInt16LE = function readUInt16LE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 2, this.length);
    return this[offset2] | this[offset2 + 1] << 8;
  };
  Buffer2.prototype.readUInt16BE = function readUInt16BE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 2, this.length);
    return this[offset2] << 8 | this[offset2 + 1];
  };
  Buffer2.prototype.readUInt32LE = function readUInt32LE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return (this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16) + this[offset2 + 3] * 16777216;
  };
  Buffer2.prototype.readUInt32BE = function readUInt32BE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return this[offset2] * 16777216 + (this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3]);
  };
  Buffer2.prototype.readIntLE = function readIntLE(offset2, byteLength4, noAssert) {
    offset2 = offset2 | 0;
    byteLength4 = byteLength4 | 0;
    if (!noAssert)
      checkOffset(offset2, byteLength4, this.length);
    var val = this[offset2];
    var mul = 1;
    var i = 0;
    while (++i < byteLength4 && (mul *= 256)) {
      val += this[offset2 + i] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength4);
    return val;
  };
  Buffer2.prototype.readIntBE = function readIntBE(offset2, byteLength4, noAssert) {
    offset2 = offset2 | 0;
    byteLength4 = byteLength4 | 0;
    if (!noAssert)
      checkOffset(offset2, byteLength4, this.length);
    var i = byteLength4;
    var mul = 1;
    var val = this[offset2 + --i];
    while (i > 0 && (mul *= 256)) {
      val += this[offset2 + --i] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength4);
    return val;
  };
  Buffer2.prototype.readInt8 = function readInt8(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 1, this.length);
    if (!(this[offset2] & 128))
      return this[offset2];
    return (255 - this[offset2] + 1) * -1;
  };
  Buffer2.prototype.readInt16LE = function readInt16LE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 2, this.length);
    var val = this[offset2] | this[offset2 + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt16BE = function readInt16BE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 2, this.length);
    var val = this[offset2 + 1] | this[offset2] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt32LE = function readInt32LE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16 | this[offset2 + 3] << 24;
  };
  Buffer2.prototype.readInt32BE = function readInt32BE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return this[offset2] << 24 | this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3];
  };
  Buffer2.prototype.readFloatLE = function readFloatLE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return ieee754$1.read(this, offset2, true, 23, 4);
  };
  Buffer2.prototype.readFloatBE = function readFloatBE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return ieee754$1.read(this, offset2, false, 23, 4);
  };
  Buffer2.prototype.readDoubleLE = function readDoubleLE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 8, this.length);
    return ieee754$1.read(this, offset2, true, 52, 8);
  };
  Buffer2.prototype.readDoubleBE = function readDoubleBE(offset2, noAssert) {
    if (!noAssert)
      checkOffset(offset2, 8, this.length);
    return ieee754$1.read(this, offset2, false, 52, 8);
  };
  function checkInt(buf, value, offset2, ext, max, min) {
    if (!Buffer2.isBuffer(buf))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min)
      throw new RangeError('"value" argument is out of bounds');
    if (offset2 + ext > buf.length)
      throw new RangeError("Index out of range");
  }
  Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset2, byteLength4, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    byteLength4 = byteLength4 | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength4) - 1;
      checkInt(this, value, offset2, byteLength4, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset2] = value & 255;
    while (++i < byteLength4 && (mul *= 256)) {
      this[offset2 + i] = value / mul & 255;
    }
    return offset2 + byteLength4;
  };
  Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset2, byteLength4, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    byteLength4 = byteLength4 | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength4) - 1;
      checkInt(this, value, offset2, byteLength4, maxBytes, 0);
    }
    var i = byteLength4 - 1;
    var mul = 1;
    this[offset2 + i] = value & 255;
    while (--i >= 0 && (mul *= 256)) {
      this[offset2 + i] = value / mul & 255;
    }
    return offset2 + byteLength4;
  };
  Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert)
      checkInt(this, value, offset2, 1, 255, 0);
    if (!Buffer2.TYPED_ARRAY_SUPPORT)
      value = Math.floor(value);
    this[offset2] = value & 255;
    return offset2 + 1;
  };
  function objectWriteUInt16(buf, value, offset2, littleEndian) {
    if (value < 0)
      value = 65535 + value + 1;
    for (var i = 0, j2 = Math.min(buf.length - offset2, 2); i < j2; ++i) {
      buf[offset2 + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
    }
  }
  Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert)
      checkInt(this, value, offset2, 2, 65535, 0);
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      this[offset2] = value & 255;
      this[offset2 + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset2, true);
    }
    return offset2 + 2;
  };
  Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert)
      checkInt(this, value, offset2, 2, 65535, 0);
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      this[offset2] = value >>> 8;
      this[offset2 + 1] = value & 255;
    } else {
      objectWriteUInt16(this, value, offset2, false);
    }
    return offset2 + 2;
  };
  function objectWriteUInt32(buf, value, offset2, littleEndian) {
    if (value < 0)
      value = 4294967295 + value + 1;
    for (var i = 0, j2 = Math.min(buf.length - offset2, 4); i < j2; ++i) {
      buf[offset2 + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
    }
  }
  Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert)
      checkInt(this, value, offset2, 4, 4294967295, 0);
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      this[offset2 + 3] = value >>> 24;
      this[offset2 + 2] = value >>> 16;
      this[offset2 + 1] = value >>> 8;
      this[offset2] = value & 255;
    } else {
      objectWriteUInt32(this, value, offset2, true);
    }
    return offset2 + 4;
  };
  Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert)
      checkInt(this, value, offset2, 4, 4294967295, 0);
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      this[offset2] = value >>> 24;
      this[offset2 + 1] = value >>> 16;
      this[offset2 + 2] = value >>> 8;
      this[offset2 + 3] = value & 255;
    } else {
      objectWriteUInt32(this, value, offset2, false);
    }
    return offset2 + 4;
  };
  Buffer2.prototype.writeIntLE = function writeIntLE(value, offset2, byteLength4, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength4 - 1);
      checkInt(this, value, offset2, byteLength4, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset2] = value & 255;
    while (++i < byteLength4 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset2 + i - 1] !== 0) {
        sub = 1;
      }
      this[offset2 + i] = (value / mul >> 0) - sub & 255;
    }
    return offset2 + byteLength4;
  };
  Buffer2.prototype.writeIntBE = function writeIntBE(value, offset2, byteLength4, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength4 - 1);
      checkInt(this, value, offset2, byteLength4, limit - 1, -limit);
    }
    var i = byteLength4 - 1;
    var mul = 1;
    var sub = 0;
    this[offset2 + i] = value & 255;
    while (--i >= 0 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset2 + i + 1] !== 0) {
        sub = 1;
      }
      this[offset2 + i] = (value / mul >> 0) - sub & 255;
    }
    return offset2 + byteLength4;
  };
  Buffer2.prototype.writeInt8 = function writeInt8(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert)
      checkInt(this, value, offset2, 1, 127, -128);
    if (!Buffer2.TYPED_ARRAY_SUPPORT)
      value = Math.floor(value);
    if (value < 0)
      value = 255 + value + 1;
    this[offset2] = value & 255;
    return offset2 + 1;
  };
  Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert)
      checkInt(this, value, offset2, 2, 32767, -32768);
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      this[offset2] = value & 255;
      this[offset2 + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset2, true);
    }
    return offset2 + 2;
  };
  Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert)
      checkInt(this, value, offset2, 2, 32767, -32768);
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      this[offset2] = value >>> 8;
      this[offset2 + 1] = value & 255;
    } else {
      objectWriteUInt16(this, value, offset2, false);
    }
    return offset2 + 2;
  };
  Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert)
      checkInt(this, value, offset2, 4, 2147483647, -2147483648);
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      this[offset2] = value & 255;
      this[offset2 + 1] = value >>> 8;
      this[offset2 + 2] = value >>> 16;
      this[offset2 + 3] = value >>> 24;
    } else {
      objectWriteUInt32(this, value, offset2, true);
    }
    return offset2 + 4;
  };
  Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 | 0;
    if (!noAssert)
      checkInt(this, value, offset2, 4, 2147483647, -2147483648);
    if (value < 0)
      value = 4294967295 + value + 1;
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      this[offset2] = value >>> 24;
      this[offset2 + 1] = value >>> 16;
      this[offset2 + 2] = value >>> 8;
      this[offset2 + 3] = value & 255;
    } else {
      objectWriteUInt32(this, value, offset2, false);
    }
    return offset2 + 4;
  };
  function checkIEEE754(buf, value, offset2, ext, max, min) {
    if (offset2 + ext > buf.length)
      throw new RangeError("Index out of range");
    if (offset2 < 0)
      throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value, offset2, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset2, 4);
    }
    ieee754$1.write(buf, value, offset2, littleEndian, 23, 4);
    return offset2 + 4;
  }
  Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset2, noAssert) {
    return writeFloat(this, value, offset2, true, noAssert);
  };
  Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset2, noAssert) {
    return writeFloat(this, value, offset2, false, noAssert);
  };
  function writeDouble(buf, value, offset2, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset2, 8);
    }
    ieee754$1.write(buf, value, offset2, littleEndian, 52, 8);
    return offset2 + 8;
  }
  Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset2, noAssert) {
    return writeDouble(this, value, offset2, true, noAssert);
  };
  Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset2, noAssert) {
    return writeDouble(this, value, offset2, false, noAssert);
  };
  Buffer2.prototype.copy = function copy2(target, targetStart, start, end) {
    if (!start)
      start = 0;
    if (!end && end !== 0)
      end = this.length;
    if (targetStart >= target.length)
      targetStart = target.length;
    if (!targetStart)
      targetStart = 0;
    if (end > 0 && end < start)
      end = start;
    if (end === start)
      return 0;
    if (target.length === 0 || this.length === 0)
      return 0;
    if (targetStart < 0) {
      throw new RangeError("targetStart out of bounds");
    }
    if (start < 0 || start >= this.length)
      throw new RangeError("sourceStart out of bounds");
    if (end < 0)
      throw new RangeError("sourceEnd out of bounds");
    if (end > this.length)
      end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    var len = end - start;
    var i;
    if (this === target && start < targetStart && targetStart < end) {
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
    }
    return len;
  };
  Buffer2.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === "string") {
      if (typeof start === "string") {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === "string") {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code2 = val.charCodeAt(0);
        if (code2 < 256) {
          val = code2;
        }
      }
      if (encoding !== void 0 && typeof encoding !== "string") {
        throw new TypeError("encoding must be a string");
      }
      if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
    } else if (typeof val === "number") {
      val = val & 255;
    }
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError("Out of range index");
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === void 0 ? this.length : end >>> 0;
    if (!val)
      val = 0;
    var i;
    if (typeof val === "number") {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer2.isBuffer(val) ? val : utf8ToBytes(new Buffer2(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }
    return this;
  };
  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = stringtrim(str).replace(INVALID_BASE64_RE, "");
    if (str.length < 2)
      return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function stringtrim(str) {
    if (str.trim)
      return str.trim();
    return str.replace(/^\s+|\s+$/g, "");
  }
  function toHex2(n2) {
    if (n2 < 16)
      return "0" + n2.toString(16);
    return n2.toString(16);
  }
  function utf8ToBytes(string2, units) {
    units = units || Infinity;
    var codePoint;
    var length = string2.length;
    var leadSurrogate = null;
    var bytes = [];
    for (var i = 0; i < length; ++i) {
      codePoint = string2.charCodeAt(i);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          } else if (i + 1 === length) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1)
          bytes.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0)
          break;
        bytes.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0)
          break;
        bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0)
          break;
        bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0)
          break;
        bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      byteArray.push(str.charCodeAt(i) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    var c2, hi2, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0)
        break;
      c2 = str.charCodeAt(i);
      hi2 = c2 >> 8;
      lo = c2 % 256;
      byteArray.push(lo);
      byteArray.push(hi2);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset2, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset2 >= dst.length || i >= src.length)
        break;
      dst[i + offset2] = src[i];
    }
    return i;
  }
  function isnan(val) {
    return val !== val;
  }
})(buffer);
var core$1 = { exports: {} };
(function(module, exports) {
  (function(root, factory) {
    {
      module.exports = factory();
    }
  })(commonjsGlobal, function() {
    var CryptoJS2 = CryptoJS2 || function(Math2, undefined$1) {
      var crypto2;
      if (typeof window !== "undefined" && window.crypto) {
        crypto2 = window.crypto;
      }
      if (typeof self !== "undefined" && self.crypto) {
        crypto2 = self.crypto;
      }
      if (typeof globalThis !== "undefined" && globalThis.crypto) {
        crypto2 = globalThis.crypto;
      }
      if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
        crypto2 = window.msCrypto;
      }
      if (!crypto2 && typeof commonjsGlobal !== "undefined" && commonjsGlobal.crypto) {
        crypto2 = commonjsGlobal.crypto;
      }
      if (!crypto2 && typeof commonjsRequire === "function") {
        try {
          crypto2 = require("crypto");
        } catch (err) {
        }
      }
      var cryptoSecureRandomInt2 = function() {
        if (crypto2) {
          if (typeof crypto2.getRandomValues === "function") {
            try {
              return crypto2.getRandomValues(new Uint32Array(1))[0];
            } catch (err) {
            }
          }
          if (typeof crypto2.randomBytes === "function") {
            try {
              return crypto2.randomBytes(4).readInt32LE();
            } catch (err) {
            }
          }
        }
        throw new Error("Native crypto module could not be used to get secure random number.");
      };
      var create2 = Object.create || function() {
        function F2() {
        }
        return function(obj) {
          var subtype;
          F2.prototype = obj;
          subtype = new F2();
          F2.prototype = null;
          return subtype;
        };
      }();
      var C2 = {};
      var C_lib = C2.lib = {};
      var Base = C_lib.Base = function() {
        return {
          extend: function(overrides) {
            var subtype = create2(this);
            if (overrides) {
              subtype.mixIn(overrides);
            }
            if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
              subtype.init = function() {
                subtype.$super.init.apply(this, arguments);
              };
            }
            subtype.init.prototype = subtype;
            subtype.$super = this;
            return subtype;
          },
          create: function() {
            var instance = this.extend();
            instance.init.apply(instance, arguments);
            return instance;
          },
          init: function() {
          },
          mixIn: function(properties) {
            for (var propertyName in properties) {
              if (properties.hasOwnProperty(propertyName)) {
                this[propertyName] = properties[propertyName];
              }
            }
            if (properties.hasOwnProperty("toString")) {
              this.toString = properties.toString;
            }
          },
          clone: function() {
            return this.init.prototype.extend(this);
          }
        };
      }();
      var WordArray2 = C_lib.WordArray = Base.extend({
        init: function(words, sigBytes) {
          words = this.words = words || [];
          if (sigBytes != undefined$1) {
            this.sigBytes = sigBytes;
          } else {
            this.sigBytes = words.length * 4;
          }
        },
        toString: function(encoder) {
          return (encoder || Hex).stringify(this);
        },
        concat: function(wordArray) {
          var thisWords = this.words;
          var thatWords = wordArray.words;
          var thisSigBytes = this.sigBytes;
          var thatSigBytes = wordArray.sigBytes;
          this.clamp();
          if (thisSigBytes % 4) {
            for (var i = 0; i < thatSigBytes; i++) {
              var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
            }
          } else {
            for (var j2 = 0; j2 < thatSigBytes; j2 += 4) {
              thisWords[thisSigBytes + j2 >>> 2] = thatWords[j2 >>> 2];
            }
          }
          this.sigBytes += thatSigBytes;
          return this;
        },
        clamp: function() {
          var words = this.words;
          var sigBytes = this.sigBytes;
          words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
          words.length = Math2.ceil(sigBytes / 4);
        },
        clone: function() {
          var clone2 = Base.clone.call(this);
          clone2.words = this.words.slice(0);
          return clone2;
        },
        random: function(nBytes) {
          var words = [];
          for (var i = 0; i < nBytes; i += 4) {
            words.push(cryptoSecureRandomInt2());
          }
          return new WordArray2.init(words, nBytes);
        }
      });
      var C_enc = C2.enc = {};
      var Hex = C_enc.Hex = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var hexChars = [];
          for (var i = 0; i < sigBytes; i++) {
            var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
            hexChars.push((bite >>> 4).toString(16));
            hexChars.push((bite & 15).toString(16));
          }
          return hexChars.join("");
        },
        parse: function(hexStr) {
          var hexStrLength = hexStr.length;
          var words = [];
          for (var i = 0; i < hexStrLength; i += 2) {
            words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
          }
          return new WordArray2.init(words, hexStrLength / 2);
        }
      };
      var Latin1 = C_enc.Latin1 = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var latin1Chars = [];
          for (var i = 0; i < sigBytes; i++) {
            var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
            latin1Chars.push(String.fromCharCode(bite));
          }
          return latin1Chars.join("");
        },
        parse: function(latin1Str) {
          var latin1StrLength = latin1Str.length;
          var words = [];
          for (var i = 0; i < latin1StrLength; i++) {
            words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
          }
          return new WordArray2.init(words, latin1StrLength);
        }
      };
      var Utf8 = C_enc.Utf8 = {
        stringify: function(wordArray) {
          try {
            return decodeURIComponent(escape(Latin1.stringify(wordArray)));
          } catch (e2) {
            throw new Error("Malformed UTF-8 data");
          }
        },
        parse: function(utf8Str) {
          return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
        }
      };
      var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
        reset: function() {
          this._data = new WordArray2.init();
          this._nDataBytes = 0;
        },
        _append: function(data) {
          if (typeof data == "string") {
            data = Utf8.parse(data);
          }
          this._data.concat(data);
          this._nDataBytes += data.sigBytes;
        },
        _process: function(doFlush) {
          var processedWords;
          var data = this._data;
          var dataWords = data.words;
          var dataSigBytes = data.sigBytes;
          var blockSize = this.blockSize;
          var blockSizeBytes = blockSize * 4;
          var nBlocksReady = dataSigBytes / blockSizeBytes;
          if (doFlush) {
            nBlocksReady = Math2.ceil(nBlocksReady);
          } else {
            nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
          }
          var nWordsReady = nBlocksReady * blockSize;
          var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
          if (nWordsReady) {
            for (var offset2 = 0; offset2 < nWordsReady; offset2 += blockSize) {
              this._doProcessBlock(dataWords, offset2);
            }
            processedWords = dataWords.splice(0, nWordsReady);
            data.sigBytes -= nBytesReady;
          }
          return new WordArray2.init(processedWords, nBytesReady);
        },
        clone: function() {
          var clone2 = Base.clone.call(this);
          clone2._data = this._data.clone();
          return clone2;
        },
        _minBufferSize: 0
      });
      C_lib.Hasher = BufferedBlockAlgorithm.extend({
        cfg: Base.extend(),
        init: function(cfg) {
          this.cfg = this.cfg.extend(cfg);
          this.reset();
        },
        reset: function() {
          BufferedBlockAlgorithm.reset.call(this);
          this._doReset();
        },
        update: function(messageUpdate) {
          this._append(messageUpdate);
          this._process();
          return this;
        },
        finalize: function(messageUpdate) {
          if (messageUpdate) {
            this._append(messageUpdate);
          }
          var hash2 = this._doFinalize();
          return hash2;
        },
        blockSize: 512 / 32,
        _createHelper: function(hasher) {
          return function(message, cfg) {
            return new hasher.init(cfg).finalize(message);
          };
        },
        _createHmacHelper: function(hasher) {
          return function(message, key) {
            return new C_algo.HMAC.init(hasher, key).finalize(message);
          };
        }
      });
      var C_algo = C2.algo = {};
      return C2;
    }(Math);
    return CryptoJS2;
  });
})(core$1);
var CryptoJS = core$1.exports;
var libTypedarrays = { exports: {} };
(function(module, exports) {
  (function(root, factory) {
    {
      module.exports = factory(core$1.exports);
    }
  })(commonjsGlobal, function(CryptoJS2) {
    (function() {
      if (typeof ArrayBuffer != "function") {
        return;
      }
      var C2 = CryptoJS2;
      var C_lib = C2.lib;
      var WordArray2 = C_lib.WordArray;
      var superInit = WordArray2.init;
      var subInit = WordArray2.init = function(typedArray) {
        if (typedArray instanceof ArrayBuffer) {
          typedArray = new Uint8Array(typedArray);
        }
        if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
          typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
        }
        if (typedArray instanceof Uint8Array) {
          var typedArrayByteLength = typedArray.byteLength;
          var words = [];
          for (var i = 0; i < typedArrayByteLength; i++) {
            words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
          }
          superInit.call(this, words, typedArrayByteLength);
        } else {
          superInit.apply(this, arguments);
        }
      };
      subInit.prototype = WordArray2;
    })();
    return CryptoJS2.lib.WordArray;
  });
})(libTypedarrays);
var sha256 = { exports: {} };
(function(module, exports) {
  (function(root, factory) {
    {
      module.exports = factory(core$1.exports);
    }
  })(commonjsGlobal, function(CryptoJS2) {
    (function(Math2) {
      var C2 = CryptoJS2;
      var C_lib = C2.lib;
      var WordArray2 = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C2.algo;
      var H2 = [];
      var K2 = [];
      (function() {
        function isPrime(n3) {
          var sqrtN = Math2.sqrt(n3);
          for (var factor = 2; factor <= sqrtN; factor++) {
            if (!(n3 % factor)) {
              return false;
            }
          }
          return true;
        }
        function getFractionalBits(n3) {
          return (n3 - (n3 | 0)) * 4294967296 | 0;
        }
        var n2 = 2;
        var nPrime = 0;
        while (nPrime < 64) {
          if (isPrime(n2)) {
            if (nPrime < 8) {
              H2[nPrime] = getFractionalBits(Math2.pow(n2, 1 / 2));
            }
            K2[nPrime] = getFractionalBits(Math2.pow(n2, 1 / 3));
            nPrime++;
          }
          n2++;
        }
      })();
      var W2 = [];
      var SHA2562 = C_algo.SHA256 = Hasher.extend({
        _doReset: function() {
          this._hash = new WordArray2.init(H2.slice(0));
        },
        _doProcessBlock: function(M2, offset2) {
          var H3 = this._hash.words;
          var a2 = H3[0];
          var b2 = H3[1];
          var c2 = H3[2];
          var d2 = H3[3];
          var e2 = H3[4];
          var f2 = H3[5];
          var g2 = H3[6];
          var h2 = H3[7];
          for (var i = 0; i < 64; i++) {
            if (i < 16) {
              W2[i] = M2[offset2 + i] | 0;
            } else {
              var gamma0x = W2[i - 15];
              var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
              var gamma1x = W2[i - 2];
              var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
              W2[i] = gamma0 + W2[i - 7] + gamma1 + W2[i - 16];
            }
            var ch = e2 & f2 ^ ~e2 & g2;
            var maj = a2 & b2 ^ a2 & c2 ^ b2 & c2;
            var sigma0 = (a2 << 30 | a2 >>> 2) ^ (a2 << 19 | a2 >>> 13) ^ (a2 << 10 | a2 >>> 22);
            var sigma1 = (e2 << 26 | e2 >>> 6) ^ (e2 << 21 | e2 >>> 11) ^ (e2 << 7 | e2 >>> 25);
            var t1 = h2 + sigma1 + ch + K2[i] + W2[i];
            var t2 = sigma0 + maj;
            h2 = g2;
            g2 = f2;
            f2 = e2;
            e2 = d2 + t1 | 0;
            d2 = c2;
            c2 = b2;
            b2 = a2;
            a2 = t1 + t2 | 0;
          }
          H3[0] = H3[0] + a2 | 0;
          H3[1] = H3[1] + b2 | 0;
          H3[2] = H3[2] + c2 | 0;
          H3[3] = H3[3] + d2 | 0;
          H3[4] = H3[4] + e2 | 0;
          H3[5] = H3[5] + f2 | 0;
          H3[6] = H3[6] + g2 | 0;
          H3[7] = H3[7] + h2 | 0;
        },
        _doFinalize: function() {
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8;
          dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
          data.sigBytes = dataWords.length * 4;
          this._process();
          return this._hash;
        },
        clone: function() {
          var clone2 = Hasher.clone.call(this);
          clone2._hash = this._hash.clone();
          return clone2;
        }
      });
      C2.SHA256 = Hasher._createHelper(SHA2562);
      C2.HmacSHA256 = Hasher._createHmacHelper(SHA2562);
    })(Math);
    return CryptoJS2.SHA256;
  });
})(sha256);
var SHA256 = sha256.exports;
var hmacSha256 = { exports: {} };
var hmac = { exports: {} };
(function(module, exports) {
  (function(root, factory) {
    {
      module.exports = factory(core$1.exports);
    }
  })(commonjsGlobal, function(CryptoJS2) {
    (function() {
      var C2 = CryptoJS2;
      var C_lib = C2.lib;
      var Base = C_lib.Base;
      var C_enc = C2.enc;
      var Utf8 = C_enc.Utf8;
      var C_algo = C2.algo;
      C_algo.HMAC = Base.extend({
        init: function(hasher, key) {
          hasher = this._hasher = new hasher.init();
          if (typeof key == "string") {
            key = Utf8.parse(key);
          }
          var hasherBlockSize = hasher.blockSize;
          var hasherBlockSizeBytes = hasherBlockSize * 4;
          if (key.sigBytes > hasherBlockSizeBytes) {
            key = hasher.finalize(key);
          }
          key.clamp();
          var oKey = this._oKey = key.clone();
          var iKey = this._iKey = key.clone();
          var oKeyWords = oKey.words;
          var iKeyWords = iKey.words;
          for (var i = 0; i < hasherBlockSize; i++) {
            oKeyWords[i] ^= 1549556828;
            iKeyWords[i] ^= 909522486;
          }
          oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
          this.reset();
        },
        reset: function() {
          var hasher = this._hasher;
          hasher.reset();
          hasher.update(this._iKey);
        },
        update: function(messageUpdate) {
          this._hasher.update(messageUpdate);
          return this;
        },
        finalize: function(messageUpdate) {
          var hasher = this._hasher;
          var innerHash = hasher.finalize(messageUpdate);
          hasher.reset();
          var hmac3 = hasher.finalize(this._oKey.clone().concat(innerHash));
          return hmac3;
        }
      });
    })();
  });
})(hmac);
(function(module, exports) {
  (function(root, factory, undef) {
    {
      module.exports = factory(core$1.exports, sha256.exports, hmac.exports);
    }
  })(commonjsGlobal, function(CryptoJS2) {
    return CryptoJS2.HmacSHA256;
  });
})(hmacSha256);
var HmacSHA256 = hmacSha256.exports;
var crypto$1;
if (typeof window !== "undefined" && window.crypto) {
  crypto$1 = window.crypto;
}
if (!crypto$1 && typeof window !== "undefined" && window.msCrypto) {
  crypto$1 = window.msCrypto;
}
if (!crypto$1 && typeof global !== "undefined" && global.crypto) {
  crypto$1 = global.crypto;
}
if (!crypto$1 && typeof require === "function") {
  try {
    crypto$1 = require("crypto");
  } catch (err) {
  }
}
function cryptoSecureRandomInt() {
  if (crypto$1) {
    if (typeof crypto$1.getRandomValues === "function") {
      try {
        return crypto$1.getRandomValues(new Uint32Array(1))[0];
      } catch (err) {
      }
    }
    if (typeof crypto$1.randomBytes === "function") {
      try {
        return crypto$1.randomBytes(4).readInt32LE();
      } catch (err) {
      }
    }
  }
  throw new Error("Native crypto module could not be used to get secure random number.");
}
function hexStringify(wordArray) {
  var words = wordArray.words;
  var sigBytes = wordArray.sigBytes;
  var hexChars = [];
  for (var i = 0; i < sigBytes; i++) {
    var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
    hexChars.push((bite >>> 4).toString(16));
    hexChars.push((bite & 15).toString(16));
  }
  return hexChars.join("");
}
var WordArray = /* @__PURE__ */ function() {
  function WordArray2(words, sigBytes) {
    words = this.words = words || [];
    if (sigBytes != void 0) {
      this.sigBytes = sigBytes;
    } else {
      this.sigBytes = words.length * 4;
    }
  }
  var _proto = WordArray2.prototype;
  _proto.random = function random(nBytes) {
    var words = [];
    for (var i = 0; i < nBytes; i += 4) {
      words.push(cryptoSecureRandomInt());
    }
    return new WordArray2(words, nBytes);
  };
  _proto.toString = function toString2() {
    return hexStringify(this);
  };
  return WordArray2;
}();
function BigInteger(a2, b2) {
  if (a2 != null)
    this.fromString(a2, b2);
}
function nbi() {
  return new BigInteger(null);
}
var dbits;
var canary = 244837814094590;
var j_lm = (canary & 16777215) == 15715070;
function am1(i, x2, w2, j2, c2, n2) {
  while (--n2 >= 0) {
    var v2 = x2 * this[i++] + w2[j2] + c2;
    c2 = Math.floor(v2 / 67108864);
    w2[j2++] = v2 & 67108863;
  }
  return c2;
}
function am2(i, x2, w2, j2, c2, n2) {
  var xl = x2 & 32767, xh = x2 >> 15;
  while (--n2 >= 0) {
    var l2 = this[i] & 32767;
    var h2 = this[i++] >> 15;
    var m2 = xh * l2 + h2 * xl;
    l2 = xl * l2 + ((m2 & 32767) << 15) + w2[j2] + (c2 & 1073741823);
    c2 = (l2 >>> 30) + (m2 >>> 15) + xh * h2 + (c2 >>> 30);
    w2[j2++] = l2 & 1073741823;
  }
  return c2;
}
function am3(i, x2, w2, j2, c2, n2) {
  var xl = x2 & 16383, xh = x2 >> 14;
  while (--n2 >= 0) {
    var l2 = this[i] & 16383;
    var h2 = this[i++] >> 14;
    var m2 = xh * l2 + h2 * xl;
    l2 = xl * l2 + ((m2 & 16383) << 14) + w2[j2] + c2;
    c2 = (l2 >> 28) + (m2 >> 14) + xh * h2;
    w2[j2++] = l2 & 268435455;
  }
  return c2;
}
var inBrowser = typeof navigator !== "undefined";
if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;
  dbits = 30;
} else if (inBrowser && j_lm && navigator.appName != "Netscape") {
  BigInteger.prototype.am = am1;
  dbits = 26;
} else {
  BigInteger.prototype.am = am3;
  dbits = 28;
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv) {
  BI_RC[rr++] = vv;
}
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) {
  BI_RC[rr++] = vv;
}
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) {
  BI_RC[rr++] = vv;
}
function int2char(n2) {
  return BI_RM.charAt(n2);
}
function intAt(s2, i) {
  var c2 = BI_RC[s2.charCodeAt(i)];
  return c2 == null ? -1 : c2;
}
function bnpCopyTo(r2) {
  for (var i = this.t - 1; i >= 0; --i) {
    r2[i] = this[i];
  }
  r2.t = this.t;
  r2.s = this.s;
}
function bnpFromInt(x2) {
  this.t = 1;
  this.s = x2 < 0 ? -1 : 0;
  if (x2 > 0)
    this[0] = x2;
  else if (x2 < -1)
    this[0] = x2 + this.DV;
  else
    this.t = 0;
}
function nbv(i) {
  var r2 = nbi();
  r2.fromInt(i);
  return r2;
}
function bnpFromString(s2, b2) {
  var k2;
  if (b2 == 16)
    k2 = 4;
  else if (b2 == 8)
    k2 = 3;
  else if (b2 == 2)
    k2 = 1;
  else if (b2 == 32)
    k2 = 5;
  else if (b2 == 4)
    k2 = 2;
  else
    throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
  this.t = 0;
  this.s = 0;
  var i = s2.length, mi2 = false, sh = 0;
  while (--i >= 0) {
    var x2 = intAt(s2, i);
    if (x2 < 0) {
      if (s2.charAt(i) == "-")
        mi2 = true;
      continue;
    }
    mi2 = false;
    if (sh == 0)
      this[this.t++] = x2;
    else if (sh + k2 > this.DB) {
      this[this.t - 1] |= (x2 & (1 << this.DB - sh) - 1) << sh;
      this[this.t++] = x2 >> this.DB - sh;
    } else
      this[this.t - 1] |= x2 << sh;
    sh += k2;
    if (sh >= this.DB)
      sh -= this.DB;
  }
  this.clamp();
  if (mi2)
    BigInteger.ZERO.subTo(this, this);
}
function bnpClamp() {
  var c2 = this.s & this.DM;
  while (this.t > 0 && this[this.t - 1] == c2) {
    --this.t;
  }
}
function bnToString(b2) {
  if (this.s < 0)
    return "-" + this.negate().toString(b2);
  var k2;
  if (b2 == 16)
    k2 = 4;
  else if (b2 == 8)
    k2 = 3;
  else if (b2 == 2)
    k2 = 1;
  else if (b2 == 32)
    k2 = 5;
  else if (b2 == 4)
    k2 = 2;
  else
    throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
  var km = (1 << k2) - 1, d2, m2 = false, r2 = "", i = this.t;
  var p2 = this.DB - i * this.DB % k2;
  if (i-- > 0) {
    if (p2 < this.DB && (d2 = this[i] >> p2) > 0) {
      m2 = true;
      r2 = int2char(d2);
    }
    while (i >= 0) {
      if (p2 < k2) {
        d2 = (this[i] & (1 << p2) - 1) << k2 - p2;
        d2 |= this[--i] >> (p2 += this.DB - k2);
      } else {
        d2 = this[i] >> (p2 -= k2) & km;
        if (p2 <= 0) {
          p2 += this.DB;
          --i;
        }
      }
      if (d2 > 0)
        m2 = true;
      if (m2)
        r2 += int2char(d2);
    }
  }
  return m2 ? r2 : "0";
}
function bnNegate() {
  var r2 = nbi();
  BigInteger.ZERO.subTo(this, r2);
  return r2;
}
function bnAbs() {
  return this.s < 0 ? this.negate() : this;
}
function bnCompareTo(a2) {
  var r2 = this.s - a2.s;
  if (r2 != 0)
    return r2;
  var i = this.t;
  r2 = i - a2.t;
  if (r2 != 0)
    return this.s < 0 ? -r2 : r2;
  while (--i >= 0) {
    if ((r2 = this[i] - a2[i]) != 0)
      return r2;
  }
  return 0;
}
function nbits(x2) {
  var r2 = 1, t2;
  if ((t2 = x2 >>> 16) != 0) {
    x2 = t2;
    r2 += 16;
  }
  if ((t2 = x2 >> 8) != 0) {
    x2 = t2;
    r2 += 8;
  }
  if ((t2 = x2 >> 4) != 0) {
    x2 = t2;
    r2 += 4;
  }
  if ((t2 = x2 >> 2) != 0) {
    x2 = t2;
    r2 += 2;
  }
  if ((t2 = x2 >> 1) != 0) {
    x2 = t2;
    r2 += 1;
  }
  return r2;
}
function bnBitLength() {
  if (this.t <= 0)
    return 0;
  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}
function bnpDLShiftTo(n2, r2) {
  var i;
  for (i = this.t - 1; i >= 0; --i) {
    r2[i + n2] = this[i];
  }
  for (i = n2 - 1; i >= 0; --i) {
    r2[i] = 0;
  }
  r2.t = this.t + n2;
  r2.s = this.s;
}
function bnpDRShiftTo(n2, r2) {
  for (var i = n2; i < this.t; ++i) {
    r2[i - n2] = this[i];
  }
  r2.t = Math.max(this.t - n2, 0);
  r2.s = this.s;
}
function bnpLShiftTo(n2, r2) {
  var bs = n2 % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << cbs) - 1;
  var ds = Math.floor(n2 / this.DB), c2 = this.s << bs & this.DM, i;
  for (i = this.t - 1; i >= 0; --i) {
    r2[i + ds + 1] = this[i] >> cbs | c2;
    c2 = (this[i] & bm) << bs;
  }
  for (i = ds - 1; i >= 0; --i) {
    r2[i] = 0;
  }
  r2[ds] = c2;
  r2.t = this.t + ds + 1;
  r2.s = this.s;
  r2.clamp();
}
function bnpRShiftTo(n2, r2) {
  r2.s = this.s;
  var ds = Math.floor(n2 / this.DB);
  if (ds >= this.t) {
    r2.t = 0;
    return;
  }
  var bs = n2 % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << bs) - 1;
  r2[0] = this[ds] >> bs;
  for (var i = ds + 1; i < this.t; ++i) {
    r2[i - ds - 1] |= (this[i] & bm) << cbs;
    r2[i - ds] = this[i] >> bs;
  }
  if (bs > 0)
    r2[this.t - ds - 1] |= (this.s & bm) << cbs;
  r2.t = this.t - ds;
  r2.clamp();
}
function bnpSubTo(a2, r2) {
  var i = 0, c2 = 0, m2 = Math.min(a2.t, this.t);
  while (i < m2) {
    c2 += this[i] - a2[i];
    r2[i++] = c2 & this.DM;
    c2 >>= this.DB;
  }
  if (a2.t < this.t) {
    c2 -= a2.s;
    while (i < this.t) {
      c2 += this[i];
      r2[i++] = c2 & this.DM;
      c2 >>= this.DB;
    }
    c2 += this.s;
  } else {
    c2 += this.s;
    while (i < a2.t) {
      c2 -= a2[i];
      r2[i++] = c2 & this.DM;
      c2 >>= this.DB;
    }
    c2 -= a2.s;
  }
  r2.s = c2 < 0 ? -1 : 0;
  if (c2 < -1)
    r2[i++] = this.DV + c2;
  else if (c2 > 0)
    r2[i++] = c2;
  r2.t = i;
  r2.clamp();
}
function bnpMultiplyTo(a2, r2) {
  var x2 = this.abs(), y2 = a2.abs();
  var i = x2.t;
  r2.t = i + y2.t;
  while (--i >= 0) {
    r2[i] = 0;
  }
  for (i = 0; i < y2.t; ++i) {
    r2[i + x2.t] = x2.am(0, y2[i], r2, i, 0, x2.t);
  }
  r2.s = 0;
  r2.clamp();
  if (this.s != a2.s)
    BigInteger.ZERO.subTo(r2, r2);
}
function bnpSquareTo(r2) {
  var x2 = this.abs();
  var i = r2.t = 2 * x2.t;
  while (--i >= 0) {
    r2[i] = 0;
  }
  for (i = 0; i < x2.t - 1; ++i) {
    var c2 = x2.am(i, x2[i], r2, 2 * i, 0, 1);
    if ((r2[i + x2.t] += x2.am(i + 1, 2 * x2[i], r2, 2 * i + 1, c2, x2.t - i - 1)) >= x2.DV) {
      r2[i + x2.t] -= x2.DV;
      r2[i + x2.t + 1] = 1;
    }
  }
  if (r2.t > 0)
    r2[r2.t - 1] += x2.am(i, x2[i], r2, 2 * i, 0, 1);
  r2.s = 0;
  r2.clamp();
}
function bnpDivRemTo(m2, q2, r2) {
  var pm = m2.abs();
  if (pm.t <= 0)
    return;
  var pt = this.abs();
  if (pt.t < pm.t) {
    if (q2 != null)
      q2.fromInt(0);
    if (r2 != null)
      this.copyTo(r2);
    return;
  }
  if (r2 == null)
    r2 = nbi();
  var y2 = nbi(), ts = this.s, ms = m2.s;
  var nsh = this.DB - nbits(pm[pm.t - 1]);
  if (nsh > 0) {
    pm.lShiftTo(nsh, y2);
    pt.lShiftTo(nsh, r2);
  } else {
    pm.copyTo(y2);
    pt.copyTo(r2);
  }
  var ys = y2.t;
  var y0 = y2[ys - 1];
  if (y0 == 0)
    return;
  var yt = y0 * (1 << this.F1) + (ys > 1 ? y2[ys - 2] >> this.F2 : 0);
  var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e2 = 1 << this.F2;
  var i = r2.t, j2 = i - ys, t2 = q2 == null ? nbi() : q2;
  y2.dlShiftTo(j2, t2);
  if (r2.compareTo(t2) >= 0) {
    r2[r2.t++] = 1;
    r2.subTo(t2, r2);
  }
  BigInteger.ONE.dlShiftTo(ys, t2);
  t2.subTo(y2, y2);
  while (y2.t < ys) {
    y2[y2.t++] = 0;
  }
  while (--j2 >= 0) {
    var qd = r2[--i] == y0 ? this.DM : Math.floor(r2[i] * d1 + (r2[i - 1] + e2) * d2);
    if ((r2[i] += y2.am(0, qd, r2, j2, 0, ys)) < qd) {
      y2.dlShiftTo(j2, t2);
      r2.subTo(t2, r2);
      while (r2[i] < --qd) {
        r2.subTo(t2, r2);
      }
    }
  }
  if (q2 != null) {
    r2.drShiftTo(ys, q2);
    if (ts != ms)
      BigInteger.ZERO.subTo(q2, q2);
  }
  r2.t = ys;
  r2.clamp();
  if (nsh > 0)
    r2.rShiftTo(nsh, r2);
  if (ts < 0)
    BigInteger.ZERO.subTo(r2, r2);
}
function bnMod(a2) {
  var r2 = nbi();
  this.abs().divRemTo(a2, null, r2);
  if (this.s < 0 && r2.compareTo(BigInteger.ZERO) > 0)
    a2.subTo(r2, r2);
  return r2;
}
function bnpInvDigit() {
  if (this.t < 1)
    return 0;
  var x2 = this[0];
  if ((x2 & 1) == 0)
    return 0;
  var y2 = x2 & 3;
  y2 = y2 * (2 - (x2 & 15) * y2) & 15;
  y2 = y2 * (2 - (x2 & 255) * y2) & 255;
  y2 = y2 * (2 - ((x2 & 65535) * y2 & 65535)) & 65535;
  y2 = y2 * (2 - x2 * y2 % this.DV) % this.DV;
  return y2 > 0 ? this.DV - y2 : -y2;
}
function bnEquals(a2) {
  return this.compareTo(a2) == 0;
}
function bnpAddTo(a2, r2) {
  var i = 0, c2 = 0, m2 = Math.min(a2.t, this.t);
  while (i < m2) {
    c2 += this[i] + a2[i];
    r2[i++] = c2 & this.DM;
    c2 >>= this.DB;
  }
  if (a2.t < this.t) {
    c2 += a2.s;
    while (i < this.t) {
      c2 += this[i];
      r2[i++] = c2 & this.DM;
      c2 >>= this.DB;
    }
    c2 += this.s;
  } else {
    c2 += this.s;
    while (i < a2.t) {
      c2 += a2[i];
      r2[i++] = c2 & this.DM;
      c2 >>= this.DB;
    }
    c2 += a2.s;
  }
  r2.s = c2 < 0 ? -1 : 0;
  if (c2 > 0)
    r2[i++] = c2;
  else if (c2 < -1)
    r2[i++] = this.DV + c2;
  r2.t = i;
  r2.clamp();
}
function bnAdd(a2) {
  var r2 = nbi();
  this.addTo(a2, r2);
  return r2;
}
function bnSubtract(a2) {
  var r2 = nbi();
  this.subTo(a2, r2);
  return r2;
}
function bnMultiply(a2) {
  var r2 = nbi();
  this.multiplyTo(a2, r2);
  return r2;
}
function bnDivide(a2) {
  var r2 = nbi();
  this.divRemTo(a2, r2, null);
  return r2;
}
function Montgomery(m2) {
  this.m = m2;
  this.mp = m2.invDigit();
  this.mpl = this.mp & 32767;
  this.mph = this.mp >> 15;
  this.um = (1 << m2.DB - 15) - 1;
  this.mt2 = 2 * m2.t;
}
function montConvert(x2) {
  var r2 = nbi();
  x2.abs().dlShiftTo(this.m.t, r2);
  r2.divRemTo(this.m, null, r2);
  if (x2.s < 0 && r2.compareTo(BigInteger.ZERO) > 0)
    this.m.subTo(r2, r2);
  return r2;
}
function montRevert(x2) {
  var r2 = nbi();
  x2.copyTo(r2);
  this.reduce(r2);
  return r2;
}
function montReduce(x2) {
  while (x2.t <= this.mt2) {
    x2[x2.t++] = 0;
  }
  for (var i = 0; i < this.m.t; ++i) {
    var j2 = x2[i] & 32767;
    var u0 = j2 * this.mpl + ((j2 * this.mph + (x2[i] >> 15) * this.mpl & this.um) << 15) & x2.DM;
    j2 = i + this.m.t;
    x2[j2] += this.m.am(0, u0, x2, i, 0, this.m.t);
    while (x2[j2] >= x2.DV) {
      x2[j2] -= x2.DV;
      x2[++j2]++;
    }
  }
  x2.clamp();
  x2.drShiftTo(this.m.t, x2);
  if (x2.compareTo(this.m) >= 0)
    x2.subTo(this.m, x2);
}
function montSqrTo(x2, r2) {
  x2.squareTo(r2);
  this.reduce(r2);
}
function montMulTo(x2, y2, r2) {
  x2.multiplyTo(y2, r2);
  this.reduce(r2);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
function bnModPow(e2, m2, callback) {
  var i = e2.bitLength(), k2, r2 = nbv(1), z2 = new Montgomery(m2);
  if (i <= 0)
    return r2;
  else if (i < 18)
    k2 = 1;
  else if (i < 48)
    k2 = 3;
  else if (i < 144)
    k2 = 4;
  else if (i < 768)
    k2 = 5;
  else
    k2 = 6;
  var g2 = new Array(), n2 = 3, k1 = k2 - 1, km = (1 << k2) - 1;
  g2[1] = z2.convert(this);
  if (k2 > 1) {
    var g22 = nbi();
    z2.sqrTo(g2[1], g22);
    while (n2 <= km) {
      g2[n2] = nbi();
      z2.mulTo(g22, g2[n2 - 2], g2[n2]);
      n2 += 2;
    }
  }
  var j2 = e2.t - 1, w2, is1 = true, r22 = nbi(), t2;
  i = nbits(e2[j2]) - 1;
  while (j2 >= 0) {
    if (i >= k1)
      w2 = e2[j2] >> i - k1 & km;
    else {
      w2 = (e2[j2] & (1 << i + 1) - 1) << k1 - i;
      if (j2 > 0)
        w2 |= e2[j2 - 1] >> this.DB + i - k1;
    }
    n2 = k2;
    while ((w2 & 1) == 0) {
      w2 >>= 1;
      --n2;
    }
    if ((i -= n2) < 0) {
      i += this.DB;
      --j2;
    }
    if (is1) {
      g2[w2].copyTo(r2);
      is1 = false;
    } else {
      while (n2 > 1) {
        z2.sqrTo(r2, r22);
        z2.sqrTo(r22, r2);
        n2 -= 2;
      }
      if (n2 > 0)
        z2.sqrTo(r2, r22);
      else {
        t2 = r2;
        r2 = r22;
        r22 = t2;
      }
      z2.mulTo(r22, g2[w2], r2);
    }
    while (j2 >= 0 && (e2[j2] & 1 << i) == 0) {
      z2.sqrTo(r2, r22);
      t2 = r2;
      r2 = r22;
      r22 = t2;
      if (--i < 0) {
        i = this.DB - 1;
        --j2;
      }
    }
  }
  var result = z2.revert(r2);
  callback(null, result);
  return result;
}
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.modPow = bnModPow;
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
function randomBytes(nBytes) {
  return buffer.Buffer.from(new WordArray().random(nBytes).toString(), "hex");
}
var HEX_MSB_REGEX = /^[89a-f]/i;
var initN = "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF";
var newPasswordRequiredChallengeUserAttributePrefix = "userAttributes.";
var AuthenticationHelper = /* @__PURE__ */ function() {
  function AuthenticationHelper2(PoolName) {
    this.N = new BigInteger(initN, 16);
    this.g = new BigInteger("2", 16);
    this.k = new BigInteger(this.hexHash("" + this.padHex(this.N) + this.padHex(this.g)), 16);
    this.smallAValue = this.generateRandomSmallA();
    this.getLargeAValue(function() {
    });
    this.infoBits = buffer.Buffer.from("Caldera Derived Key", "utf8");
    this.poolName = PoolName;
  }
  var _proto = AuthenticationHelper2.prototype;
  _proto.getSmallAValue = function getSmallAValue() {
    return this.smallAValue;
  };
  _proto.getLargeAValue = function getLargeAValue(callback) {
    var _this = this;
    if (this.largeAValue) {
      callback(null, this.largeAValue);
    } else {
      this.calculateA(this.smallAValue, function(err, largeAValue) {
        if (err) {
          callback(err, null);
        }
        _this.largeAValue = largeAValue;
        callback(null, _this.largeAValue);
      });
    }
  };
  _proto.generateRandomSmallA = function generateRandomSmallA() {
    var hexRandom = randomBytes(128).toString("hex");
    var randomBigInt = new BigInteger(hexRandom, 16);
    return randomBigInt;
  };
  _proto.generateRandomString = function generateRandomString() {
    return randomBytes(40).toString("base64");
  };
  _proto.getRandomPassword = function getRandomPassword() {
    return this.randomPassword;
  };
  _proto.getSaltDevices = function getSaltDevices() {
    return this.SaltToHashDevices;
  };
  _proto.getVerifierDevices = function getVerifierDevices() {
    return this.verifierDevices;
  };
  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {
    var _this2 = this;
    this.randomPassword = this.generateRandomString();
    var combinedString = "" + deviceGroupKey + username + ":" + this.randomPassword;
    var hashedString = this.hash(combinedString);
    var hexRandom = randomBytes(16).toString("hex");
    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));
    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function(err, verifierDevicesNotPadded) {
      if (err) {
        callback(err, null);
      }
      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);
      callback(null, null);
    });
  };
  _proto.calculateA = function calculateA(a2, callback) {
    var _this3 = this;
    this.g.modPow(a2, this.N, function(err, A2) {
      if (err) {
        callback(err, null);
      }
      if (A2.mod(_this3.N).equals(BigInteger.ZERO)) {
        callback(new Error("Illegal paramater. A mod N cannot be 0."), null);
      }
      callback(null, A2);
    });
  };
  _proto.calculateU = function calculateU(A2, B2) {
    this.UHexHash = this.hexHash(this.padHex(A2) + this.padHex(B2));
    var finalU = new BigInteger(this.UHexHash, 16);
    return finalU;
  };
  _proto.hash = function hash2(buf) {
    var str = buf instanceof buffer.Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;
    var hashHex = SHA256(str).toString();
    return new Array(64 - hashHex.length).join("0") + hashHex;
  };
  _proto.hexHash = function hexHash(hexStr) {
    return this.hash(buffer.Buffer.from(hexStr, "hex"));
  };
  _proto.computehkdf = function computehkdf(ikm, salt) {
    var infoBitsWordArray = CryptoJS.lib.WordArray.create(buffer.Buffer.concat([this.infoBits, buffer.Buffer.from(String.fromCharCode(1), "utf8")]));
    var ikmWordArray = ikm instanceof buffer.Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;
    var saltWordArray = salt instanceof buffer.Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;
    var prk = HmacSHA256(ikmWordArray, saltWordArray);
    var hmac3 = HmacSHA256(infoBitsWordArray, prk);
    return buffer.Buffer.from(hmac3.toString(), "hex").slice(0, 16);
  };
  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {
    var _this4 = this;
    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {
      throw new Error("B cannot be zero.");
    }
    this.UValue = this.calculateU(this.largeAValue, serverBValue);
    if (this.UValue.equals(BigInteger.ZERO)) {
      throw new Error("U cannot be zero.");
    }
    var usernamePassword = "" + this.poolName + username + ":" + password;
    var usernamePasswordHash = this.hash(usernamePassword);
    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);
    this.calculateS(xValue, serverBValue, function(err, sValue) {
      if (err) {
        callback(err, null);
      }
      var hkdf = _this4.computehkdf(buffer.Buffer.from(_this4.padHex(sValue), "hex"), buffer.Buffer.from(_this4.padHex(_this4.UValue), "hex"));
      callback(null, hkdf);
    });
  };
  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {
    var _this5 = this;
    this.g.modPow(xValue, this.N, function(err, gModPowXN) {
      if (err) {
        callback(err, null);
      }
      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));
      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function(err2, result) {
        if (err2) {
          callback(err2, null);
        }
        callback(null, result.mod(_this5.N));
      });
    });
  };
  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {
    return newPasswordRequiredChallengeUserAttributePrefix;
  };
  _proto.padHex = function padHex(bigInt) {
    if (!(bigInt instanceof BigInteger)) {
      throw new Error("Not a BigInteger");
    }
    var isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;
    var hexStr = bigInt.abs().toString(16);
    hexStr = hexStr.length % 2 !== 0 ? "0" + hexStr : hexStr;
    hexStr = HEX_MSB_REGEX.test(hexStr) ? "00" + hexStr : hexStr;
    if (isNegative) {
      var invertedNibbles = hexStr.split("").map(function(x2) {
        var invertedNibble = ~parseInt(x2, 16) & 15;
        return "0123456789ABCDEF".charAt(invertedNibble);
      }).join("");
      var flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);
      hexStr = flippedBitsBI.toString(16);
      if (hexStr.toUpperCase().startsWith("FF8")) {
        hexStr = hexStr.substring(2);
      }
    }
    return hexStr;
  };
  return AuthenticationHelper2;
}();
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
var CognitoJwtToken = /* @__PURE__ */ function() {
  function CognitoJwtToken2(token) {
    this.jwtToken = token || "";
    this.payload = this.decodePayload();
  }
  var _proto = CognitoJwtToken2.prototype;
  _proto.getJwtToken = function getJwtToken() {
    return this.jwtToken;
  };
  _proto.getExpiration = function getExpiration() {
    return this.payload.exp;
  };
  _proto.getIssuedAt = function getIssuedAt() {
    return this.payload.iat;
  };
  _proto.decodePayload = function decodePayload() {
    var payload2 = this.jwtToken.split(".")[1];
    try {
      return JSON.parse(buffer.Buffer.from(payload2, "base64").toString("utf8"));
    } catch (err) {
      return {};
    }
  };
  return CognitoJwtToken2;
}();
function _inheritsLoose$2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf$2(subClass, superClass);
}
function _setPrototypeOf$2(o2, p2) {
  _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf$2(o2, p2);
}
var CognitoAccessToken = /* @__PURE__ */ function(_CognitoJwtToken) {
  _inheritsLoose$2(CognitoAccessToken2, _CognitoJwtToken);
  function CognitoAccessToken2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, AccessToken = _ref.AccessToken;
    return _CognitoJwtToken.call(this, AccessToken || "") || this;
  }
  return CognitoAccessToken2;
}(CognitoJwtToken);
function _inheritsLoose$1(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf$1(subClass, superClass);
}
function _setPrototypeOf$1(o2, p2) {
  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf$1(o2, p2);
}
var CognitoIdToken = /* @__PURE__ */ function(_CognitoJwtToken) {
  _inheritsLoose$1(CognitoIdToken2, _CognitoJwtToken);
  function CognitoIdToken2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken;
    return _CognitoJwtToken.call(this, IdToken || "") || this;
  }
  return CognitoIdToken2;
}(CognitoJwtToken);
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
var CognitoRefreshToken = /* @__PURE__ */ function() {
  function CognitoRefreshToken2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, RefreshToken = _ref.RefreshToken;
    this.token = RefreshToken || "";
  }
  var _proto = CognitoRefreshToken2.prototype;
  _proto.getToken = function getToken() {
    return this.token;
  };
  return CognitoRefreshToken2;
}();
var encBase64 = { exports: {} };
(function(module, exports) {
  (function(root, factory) {
    {
      module.exports = factory(core$1.exports);
    }
  })(commonjsGlobal, function(CryptoJS2) {
    (function() {
      var C2 = CryptoJS2;
      var C_lib = C2.lib;
      var WordArray2 = C_lib.WordArray;
      var C_enc = C2.enc;
      C_enc.Base64 = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var map = this._map;
          wordArray.clamp();
          var base64Chars = [];
          for (var i = 0; i < sigBytes; i += 3) {
            var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
            var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
            var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
            var triplet = byte1 << 16 | byte2 << 8 | byte3;
            for (var j2 = 0; j2 < 4 && i + j2 * 0.75 < sigBytes; j2++) {
              base64Chars.push(map.charAt(triplet >>> 6 * (3 - j2) & 63));
            }
          }
          var paddingChar = map.charAt(64);
          if (paddingChar) {
            while (base64Chars.length % 4) {
              base64Chars.push(paddingChar);
            }
          }
          return base64Chars.join("");
        },
        parse: function(base64Str) {
          var base64StrLength = base64Str.length;
          var map = this._map;
          var reverseMap = this._reverseMap;
          if (!reverseMap) {
            reverseMap = this._reverseMap = [];
            for (var j2 = 0; j2 < map.length; j2++) {
              reverseMap[map.charCodeAt(j2)] = j2;
            }
          }
          var paddingChar = map.charAt(64);
          if (paddingChar) {
            var paddingIndex = base64Str.indexOf(paddingChar);
            if (paddingIndex !== -1) {
              base64StrLength = paddingIndex;
            }
          }
          return parseLoop(base64Str, base64StrLength, reverseMap);
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
      };
      function parseLoop(base64Str, base64StrLength, reverseMap) {
        var words = [];
        var nBytes = 0;
        for (var i = 0; i < base64StrLength; i++) {
          if (i % 4) {
            var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
            var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
            var bitsCombined = bits1 | bits2;
            words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
            nBytes++;
          }
        }
        return WordArray2.create(words, nBytes);
      }
    })();
    return CryptoJS2.enc.Base64;
  });
})(encBase64);
var Base64 = encBase64.exports;
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
var CognitoUserSession = /* @__PURE__ */ function() {
  function CognitoUserSession2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken, RefreshToken = _ref.RefreshToken, AccessToken = _ref.AccessToken, ClockDrift = _ref.ClockDrift;
    if (AccessToken == null || IdToken == null) {
      throw new Error("Id token and Access Token must be present.");
    }
    this.idToken = IdToken;
    this.refreshToken = RefreshToken;
    this.accessToken = AccessToken;
    this.clockDrift = ClockDrift === void 0 ? this.calculateClockDrift() : ClockDrift;
  }
  var _proto = CognitoUserSession2.prototype;
  _proto.getIdToken = function getIdToken() {
    return this.idToken;
  };
  _proto.getRefreshToken = function getRefreshToken() {
    return this.refreshToken;
  };
  _proto.getAccessToken = function getAccessToken() {
    return this.accessToken;
  };
  _proto.getClockDrift = function getClockDrift() {
    return this.clockDrift;
  };
  _proto.calculateClockDrift = function calculateClockDrift() {
    var now3 = Math.floor(new Date() / 1e3);
    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());
    return now3 - iat;
  };
  _proto.isValid = function isValid() {
    var now3 = Math.floor(new Date() / 1e3);
    var adjusted = now3 - this.clockDrift;
    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();
  };
  return CognitoUserSession2;
}();
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var weekNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var DateHelper = /* @__PURE__ */ function() {
  function DateHelper2() {
  }
  var _proto = DateHelper2.prototype;
  _proto.getNowString = function getNowString() {
    var now3 = new Date();
    var weekDay = weekNames[now3.getUTCDay()];
    var month = monthNames[now3.getUTCMonth()];
    var day = now3.getUTCDate();
    var hours = now3.getUTCHours();
    if (hours < 10) {
      hours = "0" + hours;
    }
    var minutes = now3.getUTCMinutes();
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    var seconds = now3.getUTCSeconds();
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    var year = now3.getUTCFullYear();
    var dateNow = weekDay + " " + month + " " + day + " " + hours + ":" + minutes + ":" + seconds + " UTC " + year;
    return dateNow;
  };
  return DateHelper2;
}();
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
var CognitoUserAttribute = /* @__PURE__ */ function() {
  function CognitoUserAttribute2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, Name = _ref.Name, Value = _ref.Value;
    this.Name = Name || "";
    this.Value = Value || "";
  }
  var _proto = CognitoUserAttribute2.prototype;
  _proto.getValue = function getValue() {
    return this.Value;
  };
  _proto.setValue = function setValue(value) {
    this.Value = value;
    return this;
  };
  _proto.getName = function getName() {
    return this.Name;
  };
  _proto.setName = function setName(name) {
    this.Name = name;
    return this;
  };
  _proto.toString = function toString2() {
    return JSON.stringify(this);
  };
  _proto.toJSON = function toJSON() {
    return {
      Name: this.Name,
      Value: this.Value
    };
  };
  return CognitoUserAttribute2;
}();
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
var dataMemory = {};
var MemoryStorage = /* @__PURE__ */ function() {
  function MemoryStorage2() {
  }
  MemoryStorage2.setItem = function setItem(key, value) {
    dataMemory[key] = value;
    return dataMemory[key];
  };
  MemoryStorage2.getItem = function getItem(key) {
    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : void 0;
  };
  MemoryStorage2.removeItem = function removeItem(key) {
    return delete dataMemory[key];
  };
  MemoryStorage2.clear = function clear2() {
    dataMemory = {};
    return dataMemory;
  };
  return MemoryStorage2;
}();
var StorageHelper = /* @__PURE__ */ function() {
  function StorageHelper2() {
    try {
      this.storageWindow = window.localStorage;
      this.storageWindow.setItem("aws.cognito.test-ls", 1);
      this.storageWindow.removeItem("aws.cognito.test-ls");
    } catch (exception) {
      this.storageWindow = MemoryStorage;
    }
  }
  var _proto = StorageHelper2.prototype;
  _proto.getStorage = function getStorage2() {
    return this.storageWindow;
  };
  return StorageHelper2;
}();
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
var isBrowser = typeof navigator !== "undefined";
var userAgent = isBrowser ? navigator.userAgent : "nodejs";
var CognitoUser = /* @__PURE__ */ function() {
  function CognitoUser2(data) {
    if (data == null || data.Username == null || data.Pool == null) {
      throw new Error("Username and Pool information are required.");
    }
    this.username = data.Username || "";
    this.pool = data.Pool;
    this.Session = null;
    this.client = data.Pool.client;
    this.signInUserSession = null;
    this.authenticationFlowType = "USER_SRP_AUTH";
    this.storage = data.Storage || new StorageHelper().getStorage();
    this.keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    this.userDataKey = this.keyPrefix + "." + this.username + ".userData";
  }
  var _proto = CognitoUser2.prototype;
  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {
    this.clearCachedUserData();
    this.signInUserSession = signInUserSession;
    this.cacheTokens();
  };
  _proto.getSignInUserSession = function getSignInUserSession() {
    return this.signInUserSession;
  };
  _proto.getUsername = function getUsername() {
    return this.username;
  };
  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {
    return this.authenticationFlowType;
  };
  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {
    this.authenticationFlowType = authenticationFlowType;
  };
  _proto.initiateAuth = function initiateAuth(authDetails, callback) {
    var _this = this;
    var authParameters = authDetails.getAuthParameters();
    authParameters.USERNAME = this.username;
    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
    var jsonReq = {
      AuthFlow: "CUSTOM_AUTH",
      ClientId: this.pool.getClientId(),
      AuthParameters: authParameters,
      ClientMetadata: clientMetaData
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("InitiateAuth", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      var challengeName = data.ChallengeName;
      var challengeParameters = data.ChallengeParameters;
      if (challengeName === "CUSTOM_CHALLENGE") {
        _this.Session = data.Session;
        return callback.customChallenge(challengeParameters);
      }
      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);
      _this.cacheTokens();
      return callback.onSuccess(_this.signInUserSession);
    });
  };
  _proto.authenticateUser = function authenticateUser(authDetails, callback) {
    if (this.authenticationFlowType === "USER_PASSWORD_AUTH") {
      return this.authenticateUserPlainUsernamePassword(authDetails, callback);
    } else if (this.authenticationFlowType === "USER_SRP_AUTH" || this.authenticationFlowType === "CUSTOM_AUTH") {
      return this.authenticateUserDefaultAuth(authDetails, callback);
    }
    return callback.onFailure(new Error("Authentication flow type is invalid."));
  };
  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {
    var _this2 = this;
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split("_")[1]);
    var dateHelper = new DateHelper();
    var serverBValue;
    var salt;
    var authParameters = {};
    if (this.deviceKey != null) {
      authParameters.DEVICE_KEY = this.deviceKey;
    }
    authParameters.USERNAME = this.username;
    authenticationHelper.getLargeAValue(function(errOnAValue, aValue) {
      if (errOnAValue) {
        callback.onFailure(errOnAValue);
      }
      authParameters.SRP_A = aValue.toString(16);
      if (_this2.authenticationFlowType === "CUSTOM_AUTH") {
        authParameters.CHALLENGE_NAME = "SRP_A";
      }
      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
      var jsonReq = {
        AuthFlow: _this2.authenticationFlowType,
        ClientId: _this2.pool.getClientId(),
        AuthParameters: authParameters,
        ClientMetadata: clientMetaData
      };
      if (_this2.getUserContextData(_this2.username)) {
        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);
      }
      _this2.client.request("InitiateAuth", jsonReq, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        var challengeParameters = data.ChallengeParameters;
        _this2.username = challengeParameters.USER_ID_FOR_SRP;
        _this2.userDataKey = _this2.keyPrefix + "." + _this2.username + ".userData";
        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);
        salt = new BigInteger(challengeParameters.SALT, 16);
        _this2.getCachedDeviceKeyAndPassword();
        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function(errOnHkdf, hkdf) {
          if (errOnHkdf) {
            callback.onFailure(errOnHkdf);
          }
          var dateNow = dateHelper.getNowString();
          var message = CryptoJS.lib.WordArray.create(buffer.Buffer.concat([buffer.Buffer.from(_this2.pool.getUserPoolId().split("_")[1], "utf8"), buffer.Buffer.from(_this2.username, "utf8"), buffer.Buffer.from(challengeParameters.SECRET_BLOCK, "base64"), buffer.Buffer.from(dateNow, "utf8")]));
          var key = CryptoJS.lib.WordArray.create(hkdf);
          var signatureString = Base64.stringify(HmacSHA256(message, key));
          var challengeResponses = {};
          challengeResponses.USERNAME = _this2.username;
          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
          challengeResponses.TIMESTAMP = dateNow;
          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
          if (_this2.deviceKey != null) {
            challengeResponses.DEVICE_KEY = _this2.deviceKey;
          }
          var respondToAuthChallenge = function respondToAuthChallenge2(challenge, challengeCallback) {
            return _this2.client.request("RespondToAuthChallenge", challenge, function(errChallenge, dataChallenge) {
              if (errChallenge && errChallenge.code === "ResourceNotFoundException" && errChallenge.message.toLowerCase().indexOf("device") !== -1) {
                challengeResponses.DEVICE_KEY = null;
                _this2.deviceKey = null;
                _this2.randomPassword = null;
                _this2.deviceGroupKey = null;
                _this2.clearCachedDeviceKeyAndPassword();
                return respondToAuthChallenge2(challenge, challengeCallback);
              }
              return challengeCallback(errChallenge, dataChallenge);
            });
          };
          var jsonReqResp = {
            ChallengeName: "PASSWORD_VERIFIER",
            ClientId: _this2.pool.getClientId(),
            ChallengeResponses: challengeResponses,
            Session: data.Session,
            ClientMetadata: clientMetaData
          };
          if (_this2.getUserContextData()) {
            jsonReqResp.UserContextData = _this2.getUserContextData();
          }
          respondToAuthChallenge(jsonReqResp, function(errAuthenticate, dataAuthenticate) {
            if (errAuthenticate) {
              return callback.onFailure(errAuthenticate);
            }
            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
          });
          return void 0;
        });
        return void 0;
      });
    });
  };
  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {
    var _this3 = this;
    var authParameters = {};
    authParameters.USERNAME = this.username;
    authParameters.PASSWORD = authDetails.getPassword();
    if (!authParameters.PASSWORD) {
      callback.onFailure(new Error("PASSWORD parameter is required"));
      return;
    }
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split("_")[1]);
    this.getCachedDeviceKeyAndPassword();
    if (this.deviceKey != null) {
      authParameters.DEVICE_KEY = this.deviceKey;
    }
    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
    var jsonReq = {
      AuthFlow: "USER_PASSWORD_AUTH",
      ClientId: this.pool.getClientId(),
      AuthParameters: authParameters,
      ClientMetadata: clientMetaData
    };
    if (this.getUserContextData(this.username)) {
      jsonReq.UserContextData = this.getUserContextData(this.username);
    }
    this.client.request("InitiateAuth", jsonReq, function(err, authResult) {
      if (err) {
        return callback.onFailure(err);
      }
      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);
    });
  };
  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {
    var _this4 = this;
    var challengeName = dataAuthenticate.ChallengeName;
    var challengeParameters = dataAuthenticate.ChallengeParameters;
    if (challengeName === "SMS_MFA") {
      this.Session = dataAuthenticate.Session;
      return callback.mfaRequired(challengeName, challengeParameters);
    }
    if (challengeName === "SELECT_MFA_TYPE") {
      this.Session = dataAuthenticate.Session;
      return callback.selectMFAType(challengeName, challengeParameters);
    }
    if (challengeName === "MFA_SETUP") {
      this.Session = dataAuthenticate.Session;
      return callback.mfaSetup(challengeName, challengeParameters);
    }
    if (challengeName === "SOFTWARE_TOKEN_MFA") {
      this.Session = dataAuthenticate.Session;
      return callback.totpRequired(challengeName, challengeParameters);
    }
    if (challengeName === "CUSTOM_CHALLENGE") {
      this.Session = dataAuthenticate.Session;
      return callback.customChallenge(challengeParameters);
    }
    if (challengeName === "NEW_PASSWORD_REQUIRED") {
      this.Session = dataAuthenticate.Session;
      var userAttributes = null;
      var rawRequiredAttributes = null;
      var requiredAttributes = [];
      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
      if (challengeParameters) {
        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);
        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);
      }
      if (rawRequiredAttributes) {
        for (var i = 0; i < rawRequiredAttributes.length; i++) {
          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);
        }
      }
      return callback.newPasswordRequired(userAttributes, requiredAttributes);
    }
    if (challengeName === "DEVICE_SRP_AUTH") {
      this.Session = dataAuthenticate.Session;
      this.getDeviceResponse(callback);
      return void 0;
    }
    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
    this.challengeName = challengeName;
    this.cacheTokens();
    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;
    if (newDeviceMetadata == null) {
      return callback.onSuccess(this.signInUserSession);
    }
    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {
      if (errGenHash) {
        return callback.onFailure(errGenHash);
      }
      var deviceSecretVerifierConfig = {
        Salt: buffer.Buffer.from(authenticationHelper.getSaltDevices(), "hex").toString("base64"),
        PasswordVerifier: buffer.Buffer.from(authenticationHelper.getVerifierDevices(), "hex").toString("base64")
      };
      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;
      _this4.randomPassword = authenticationHelper.getRandomPassword();
      _this4.client.request("ConfirmDevice", {
        DeviceKey: newDeviceMetadata.DeviceKey,
        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),
        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
        DeviceName: userAgent
      }, function(errConfirm, dataConfirm) {
        if (errConfirm) {
          return callback.onFailure(errConfirm);
        }
        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
        _this4.cacheDeviceKeyAndPassword();
        if (dataConfirm.UserConfirmationNecessary === true) {
          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);
        }
        return callback.onSuccess(_this4.signInUserSession);
      });
      return void 0;
    });
    return void 0;
  };
  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {
    var _this5 = this;
    if (!newPassword) {
      return callback.onFailure(new Error("New password is required."));
    }
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split("_")[1]);
    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
    var finalUserAttributes = {};
    if (requiredAttributeData) {
      Object.keys(requiredAttributeData).forEach(function(key) {
        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];
      });
    }
    finalUserAttributes.NEW_PASSWORD = newPassword;
    finalUserAttributes.USERNAME = this.username;
    var jsonReq = {
      ChallengeName: "NEW_PASSWORD_REQUIRED",
      ClientId: this.pool.getClientId(),
      ChallengeResponses: finalUserAttributes,
      Session: this.Session,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(errAuthenticate, dataAuthenticate) {
      if (errAuthenticate) {
        return callback.onFailure(errAuthenticate);
      }
      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
    });
    return void 0;
  };
  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {
    var _this6 = this;
    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);
    var dateHelper = new DateHelper();
    var authParameters = {};
    authParameters.USERNAME = this.username;
    authParameters.DEVICE_KEY = this.deviceKey;
    authenticationHelper.getLargeAValue(function(errAValue, aValue) {
      if (errAValue) {
        callback.onFailure(errAValue);
      }
      authParameters.SRP_A = aValue.toString(16);
      var jsonReq = {
        ChallengeName: "DEVICE_SRP_AUTH",
        ClientId: _this6.pool.getClientId(),
        ChallengeResponses: authParameters,
        ClientMetadata: clientMetadata,
        Session: _this6.Session
      };
      if (_this6.getUserContextData()) {
        jsonReq.UserContextData = _this6.getUserContextData();
      }
      _this6.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        var challengeParameters = data.ChallengeParameters;
        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);
        var salt = new BigInteger(challengeParameters.SALT, 16);
        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function(errHkdf, hkdf) {
          if (errHkdf) {
            return callback.onFailure(errHkdf);
          }
          var dateNow = dateHelper.getNowString();
          var message = CryptoJS.lib.WordArray.create(buffer.Buffer.concat([buffer.Buffer.from(_this6.deviceGroupKey, "utf8"), buffer.Buffer.from(_this6.deviceKey, "utf8"), buffer.Buffer.from(challengeParameters.SECRET_BLOCK, "base64"), buffer.Buffer.from(dateNow, "utf8")]));
          var key = CryptoJS.lib.WordArray.create(hkdf);
          var signatureString = Base64.stringify(HmacSHA256(message, key));
          var challengeResponses = {};
          challengeResponses.USERNAME = _this6.username;
          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
          challengeResponses.TIMESTAMP = dateNow;
          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
          challengeResponses.DEVICE_KEY = _this6.deviceKey;
          var jsonReqResp = {
            ChallengeName: "DEVICE_PASSWORD_VERIFIER",
            ClientId: _this6.pool.getClientId(),
            ChallengeResponses: challengeResponses,
            Session: data.Session
          };
          if (_this6.getUserContextData()) {
            jsonReqResp.UserContextData = _this6.getUserContextData();
          }
          _this6.client.request("RespondToAuthChallenge", jsonReqResp, function(errAuthenticate, dataAuthenticate) {
            if (errAuthenticate) {
              return callback.onFailure(errAuthenticate);
            }
            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
            _this6.cacheTokens();
            return callback.onSuccess(_this6.signInUserSession);
          });
          return void 0;
        });
        return void 0;
      });
    });
  };
  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      ConfirmationCode: confirmationCode,
      Username: this.username,
      ForceAliasCreation: forceAliasCreation,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("ConfirmSignUp", jsonReq, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
  };
  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {
    var _this7 = this;
    var challengeResponses = {};
    challengeResponses.USERNAME = this.username;
    challengeResponses.ANSWER = answerChallenge;
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split("_")[1]);
    this.getCachedDeviceKeyAndPassword();
    if (this.deviceKey != null) {
      challengeResponses.DEVICE_KEY = this.deviceKey;
    }
    var jsonReq = {
      ChallengeName: "CUSTOM_CHALLENGE",
      ChallengeResponses: challengeResponses,
      ClientId: this.pool.getClientId(),
      Session: this.Session,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      return _this7.authenticateUserInternal(data, authenticationHelper, callback);
    });
  };
  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {
    var _this8 = this;
    var challengeResponses = {};
    challengeResponses.USERNAME = this.username;
    challengeResponses.SMS_MFA_CODE = confirmationCode;
    var mfaTypeSelection = mfaType || "SMS_MFA";
    if (mfaTypeSelection === "SOFTWARE_TOKEN_MFA") {
      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;
    }
    if (this.deviceKey != null) {
      challengeResponses.DEVICE_KEY = this.deviceKey;
    }
    var jsonReq = {
      ChallengeName: mfaTypeSelection,
      ChallengeResponses: challengeResponses,
      ClientId: this.pool.getClientId(),
      Session: this.Session,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(err, dataAuthenticate) {
      if (err) {
        return callback.onFailure(err);
      }
      var challengeName = dataAuthenticate.ChallengeName;
      if (challengeName === "DEVICE_SRP_AUTH") {
        _this8.getDeviceResponse(callback);
        return void 0;
      }
      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
      _this8.cacheTokens();
      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {
        return callback.onSuccess(_this8.signInUserSession);
      }
      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split("_")[1]);
      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {
        if (errGenHash) {
          return callback.onFailure(errGenHash);
        }
        var deviceSecretVerifierConfig = {
          Salt: buffer.Buffer.from(authenticationHelper.getSaltDevices(), "hex").toString("base64"),
          PasswordVerifier: buffer.Buffer.from(authenticationHelper.getVerifierDevices(), "hex").toString("base64")
        };
        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;
        _this8.randomPassword = authenticationHelper.getRandomPassword();
        _this8.client.request("ConfirmDevice", {
          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,
          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),
          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
          DeviceName: userAgent
        }, function(errConfirm, dataConfirm) {
          if (errConfirm) {
            return callback.onFailure(errConfirm);
          }
          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
          _this8.cacheDeviceKeyAndPassword();
          if (dataConfirm.UserConfirmationNecessary === true) {
            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);
          }
          return callback.onSuccess(_this8.signInUserSession);
        });
        return void 0;
      });
      return void 0;
    });
  };
  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("ChangePassword", {
      PreviousPassword: oldUserPassword,
      ProposedPassword: newUserPassword,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      ClientMetadata: clientMetadata
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.enableMFA = function enableMFA(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    var mfaOptions = [];
    var mfaEnabled = {
      DeliveryMedium: "SMS",
      AttributeName: "phone_number"
    };
    mfaOptions.push(mfaEnabled);
    this.client.request("SetUserSettings", {
      MFAOptions: mfaOptions,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("SetUserMFAPreference", {
      SMSMfaSettings: smsMfaSettings,
      SoftwareTokenMfaSettings: softwareTokenMfaSettings,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.disableMFA = function disableMFA(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    var mfaOptions = [];
    this.client.request("SetUserSettings", {
      MFAOptions: mfaOptions,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.deleteUser = function deleteUser(callback, clientMetadata) {
    var _this9 = this;
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("DeleteUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      ClientMetadata: clientMetadata
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      _this9.clearCachedUser();
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {
    var _this10 = this;
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("UpdateUserAttributes", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      UserAttributes: attributes,
      ClientMetadata: clientMetadata
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return _this10.getUserData(function() {
        return callback(null, "SUCCESS");
      }, {
        bypassCache: true
      });
    });
    return void 0;
  };
  _proto.getUserAttributes = function getUserAttributes(callback) {
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("GetUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err, userData) {
      if (err) {
        return callback(err, null);
      }
      var attributeList = [];
      for (var i = 0; i < userData.UserAttributes.length; i++) {
        var attribute = {
          Name: userData.UserAttributes[i].Name,
          Value: userData.UserAttributes[i].Value
        };
        var userAttribute = new CognitoUserAttribute(attribute);
        attributeList.push(userAttribute);
      }
      return callback(null, attributeList);
    });
    return void 0;
  };
  _proto.getMFAOptions = function getMFAOptions(callback) {
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("GetUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err, userData) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, userData.MFAOptions);
    });
    return void 0;
  };
  _proto.createGetUserRequest = function createGetUserRequest() {
    return this.client.promisifyRequest("GetUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    });
  };
  _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {
    var _this11 = this;
    if (options === void 0) {
      options = {};
    }
    return new Promise(function(resolve3) {
      var refresh7 = _this11.signInUserSession.getRefreshToken();
      if (refresh7 && refresh7.getToken()) {
        _this11.refreshSession(refresh7, resolve3, options.clientMetadata);
      } else {
        resolve3();
      }
    });
  };
  _proto.getUserData = function getUserData(callback, params) {
    var _this12 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      this.clearCachedUserData();
      return callback(new Error("User is not authenticated"), null);
    }
    var userData = this.getUserDataFromCache();
    if (!userData) {
      this.fetchUserData().then(function(data) {
        callback(null, data);
      })["catch"](callback);
      return;
    }
    if (this.isFetchUserDataAndTokenRequired(params)) {
      this.fetchUserData().then(function(data) {
        return _this12.refreshSessionIfPossible(params).then(function() {
          return data;
        });
      }).then(function(data) {
        return callback(null, data);
      })["catch"](callback);
      return;
    }
    try {
      callback(null, JSON.parse(userData));
      return;
    } catch (err) {
      this.clearCachedUserData();
      callback(err, null);
      return;
    }
  };
  _proto.getUserDataFromCache = function getUserDataFromCache() {
    var userData = this.storage.getItem(this.userDataKey);
    return userData;
  };
  _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {
    var _ref = params || {}, _ref$bypassCache = _ref.bypassCache, bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;
    return bypassCache;
  };
  _proto.fetchUserData = function fetchUserData() {
    var _this13 = this;
    return this.createGetUserRequest().then(function(data) {
      _this13.cacheUserData(data);
      return data;
    });
  };
  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {
    var _this14 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("DeleteUserAttributes", {
      UserAttributeNames: attributeList,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return _this14.getUserData(function() {
        return callback(null, "SUCCESS");
      }, {
        bypassCache: true
      });
    });
    return void 0;
  };
  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      Username: this.username,
      ClientMetadata: clientMetadata
    };
    this.client.request("ResendConfirmationCode", jsonReq, function(err, result) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, result);
    });
  };
  _proto.getSession = function getSession(callback, options) {
    if (options === void 0) {
      options = {};
    }
    if (this.username == null) {
      return callback(new Error("Username is null. Cannot retrieve a new session"), null);
    }
    if (this.signInUserSession != null && this.signInUserSession.isValid()) {
      return callback(null, this.signInUserSession);
    }
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var idTokenKey = keyPrefix + ".idToken";
    var accessTokenKey = keyPrefix + ".accessToken";
    var refreshTokenKey = keyPrefix + ".refreshToken";
    var clockDriftKey = keyPrefix + ".clockDrift";
    if (this.storage.getItem(idTokenKey)) {
      var idToken = new CognitoIdToken({
        IdToken: this.storage.getItem(idTokenKey)
      });
      var accessToken = new CognitoAccessToken({
        AccessToken: this.storage.getItem(accessTokenKey)
      });
      var refreshToken = new CognitoRefreshToken({
        RefreshToken: this.storage.getItem(refreshTokenKey)
      });
      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;
      var sessionData = {
        IdToken: idToken,
        AccessToken: accessToken,
        RefreshToken: refreshToken,
        ClockDrift: clockDrift
      };
      var cachedSession = new CognitoUserSession(sessionData);
      if (cachedSession.isValid()) {
        this.signInUserSession = cachedSession;
        return callback(null, this.signInUserSession);
      }
      if (!refreshToken.getToken()) {
        return callback(new Error("Cannot retrieve a new session. Please authenticate."), null);
      }
      this.refreshSession(refreshToken, callback, options.clientMetadata);
    } else {
      callback(new Error("Local storage is missing an ID Token, Please authenticate"), null);
    }
    return void 0;
  };
  _proto.refreshSession = function refreshSession2(refreshToken, callback, clientMetadata) {
    var _this15 = this;
    var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;
    var authParameters = {};
    authParameters.REFRESH_TOKEN = refreshToken.getToken();
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    var lastUserKey = keyPrefix + ".LastAuthUser";
    if (this.storage.getItem(lastUserKey)) {
      this.username = this.storage.getItem(lastUserKey);
      var deviceKeyKey = keyPrefix + "." + this.username + ".deviceKey";
      this.deviceKey = this.storage.getItem(deviceKeyKey);
      authParameters.DEVICE_KEY = this.deviceKey;
    }
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      AuthFlow: "REFRESH_TOKEN_AUTH",
      AuthParameters: authParameters,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("InitiateAuth", jsonReq, function(err, authResult) {
      if (err) {
        if (err.code === "NotAuthorizedException") {
          _this15.clearCachedUser();
        }
        return wrappedCallback(err, null);
      }
      if (authResult) {
        var authenticationResult = authResult.AuthenticationResult;
        if (!Object.prototype.hasOwnProperty.call(authenticationResult, "RefreshToken")) {
          authenticationResult.RefreshToken = refreshToken.getToken();
        }
        _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);
        _this15.cacheTokens();
        return wrappedCallback(null, _this15.signInUserSession);
      }
      return void 0;
    });
  };
  _proto.cacheTokens = function cacheTokens() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    var idTokenKey = keyPrefix + "." + this.username + ".idToken";
    var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
    var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
    var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
    var lastUserKey = keyPrefix + ".LastAuthUser";
    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());
    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());
    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());
    this.storage.setItem(clockDriftKey, "" + this.signInUserSession.getClockDrift());
    this.storage.setItem(lastUserKey, this.username);
  };
  _proto.cacheUserData = function cacheUserData(userData) {
    this.storage.setItem(this.userDataKey, JSON.stringify(userData));
  };
  _proto.clearCachedUserData = function clearCachedUserData() {
    this.storage.removeItem(this.userDataKey);
  };
  _proto.clearCachedUser = function clearCachedUser() {
    this.clearCachedTokens();
    this.clearCachedUserData();
  };
  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var deviceKeyKey = keyPrefix + ".deviceKey";
    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
    this.storage.setItem(deviceKeyKey, this.deviceKey);
    this.storage.setItem(randomPasswordKey, this.randomPassword);
    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);
  };
  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var deviceKeyKey = keyPrefix + ".deviceKey";
    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
    if (this.storage.getItem(deviceKeyKey)) {
      this.deviceKey = this.storage.getItem(deviceKeyKey);
      this.randomPassword = this.storage.getItem(randomPasswordKey);
      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);
    }
  };
  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var deviceKeyKey = keyPrefix + ".deviceKey";
    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
    this.storage.removeItem(deviceKeyKey);
    this.storage.removeItem(randomPasswordKey);
    this.storage.removeItem(deviceGroupKeyKey);
  };
  _proto.clearCachedTokens = function clearCachedTokens() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    var idTokenKey = keyPrefix + "." + this.username + ".idToken";
    var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
    var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
    var lastUserKey = keyPrefix + ".LastAuthUser";
    var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
    this.storage.removeItem(idTokenKey);
    this.storage.removeItem(accessTokenKey);
    this.storage.removeItem(refreshTokenKey);
    this.storage.removeItem(lastUserKey);
    this.storage.removeItem(clockDriftKey);
  };
  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {
    var idToken = new CognitoIdToken(authResult);
    var accessToken = new CognitoAccessToken(authResult);
    var refreshToken = new CognitoRefreshToken(authResult);
    var sessionData = {
      IdToken: idToken,
      AccessToken: accessToken,
      RefreshToken: refreshToken
    };
    return new CognitoUserSession(sessionData);
  };
  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      Username: this.username,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("ForgotPassword", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      if (typeof callback.inputVerificationCode === "function") {
        return callback.inputVerificationCode(data);
      }
      return callback.onSuccess(data);
    });
  };
  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      Username: this.username,
      ConfirmationCode: confirmationCode,
      Password: newPassword,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("ConfirmForgotPassword", jsonReq, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
  };
  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("GetUserAttributeVerificationCode", {
      AttributeName: attributeName,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      ClientMetadata: clientMetadata
    }, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      if (typeof callback.inputVerificationCode === "function") {
        return callback.inputVerificationCode(data);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("VerifyUserAttribute", {
      AttributeName: attributeName,
      Code: confirmationCode,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.getDevice = function getDevice(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("GetDevice", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: this.deviceKey
    }, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess(data);
    });
    return void 0;
  };
  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("ForgetDevice", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: deviceKey
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.forgetDevice = function forgetDevice(callback) {
    var _this16 = this;
    this.forgetSpecificDevice(this.deviceKey, {
      onFailure: callback.onFailure,
      onSuccess: function onSuccess(result) {
        _this16.deviceKey = null;
        _this16.deviceGroupKey = null;
        _this16.randomPassword = null;
        _this16.clearCachedDeviceKeyAndPassword();
        return callback.onSuccess(result);
      }
    });
  };
  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("UpdateDeviceStatus", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: this.deviceKey,
      DeviceRememberedStatus: "remembered"
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("UpdateDeviceStatus", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: this.deviceKey,
      DeviceRememberedStatus: "not_remembered"
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.listDevices = function listDevices(limit, paginationToken, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    var requestParams = {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      Limit: limit
    };
    if (paginationToken) {
      requestParams.PaginationToken = paginationToken;
    }
    this.client.request("ListDevices", requestParams, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess(data);
    });
    return void 0;
  };
  _proto.globalSignOut = function globalSignOut(callback) {
    var _this17 = this;
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("GlobalSignOut", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      _this17.clearCachedUser();
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.signOut = function signOut(revokeTokenCallback) {
    var _this18 = this;
    if (!revokeTokenCallback || typeof revokeTokenCallback !== "function") {
      this.cleanClientData();
      return;
    }
    this.getSession(function(error2, _session) {
      if (error2) {
        return revokeTokenCallback(error2);
      }
      _this18.revokeTokens(function(err) {
        _this18.cleanClientData();
        revokeTokenCallback(err);
      });
    });
  };
  _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {
    if (revokeTokenCallback === void 0) {
      revokeTokenCallback = function revokeTokenCallback2() {
      };
    }
    if (typeof revokeTokenCallback !== "function") {
      throw new Error("Invalid revokeTokenCallback. It should be a function.");
    }
    if (!this.signInUserSession) {
      var error2 = new Error("User is not authenticated");
      return revokeTokenCallback(error2);
    }
    if (!this.signInUserSession.getAccessToken()) {
      var _error = new Error("No Access token available");
      return revokeTokenCallback(_error);
    }
    var refreshToken = this.signInUserSession.getRefreshToken().getToken();
    var accessToken = this.signInUserSession.getAccessToken();
    if (this.isSessionRevocable(accessToken)) {
      if (refreshToken) {
        return this.revokeToken({
          token: refreshToken,
          callback: revokeTokenCallback
        });
      }
    }
    revokeTokenCallback();
  };
  _proto.isSessionRevocable = function isSessionRevocable(token) {
    if (token && typeof token.decodePayload === "function") {
      try {
        var _token$decodePayload = token.decodePayload(), origin_jti = _token$decodePayload.origin_jti;
        return !!origin_jti;
      } catch (err) {
      }
    }
    return false;
  };
  _proto.cleanClientData = function cleanClientData() {
    this.signInUserSession = null;
    this.clearCachedUser();
  };
  _proto.revokeToken = function revokeToken(_ref2) {
    var token = _ref2.token, callback = _ref2.callback;
    this.client.requestWithRetry("RevokeToken", {
      Token: token,
      ClientId: this.pool.getClientId()
    }, function(err) {
      if (err) {
        return callback(err);
      }
      callback();
    });
  };
  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {
    var _this19 = this;
    var challengeResponses = {};
    challengeResponses.USERNAME = this.username;
    challengeResponses.ANSWER = answerChallenge;
    var jsonReq = {
      ChallengeName: "SELECT_MFA_TYPE",
      ChallengeResponses: challengeResponses,
      ClientId: this.pool.getClientId(),
      Session: this.Session
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      _this19.Session = data.Session;
      if (answerChallenge === "SMS_MFA") {
        return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);
      }
      if (answerChallenge === "SOFTWARE_TOKEN_MFA") {
        return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);
      }
      return void 0;
    });
  };
  _proto.getUserContextData = function getUserContextData() {
    var pool = this.pool;
    return pool.getUserContextData(this.username);
  };
  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {
    var _this20 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      this.client.request("AssociateSoftwareToken", {
        Session: this.Session
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        _this20.Session = data.Session;
        return callback.associateSecretCode(data.SecretCode);
      });
    } else {
      this.client.request("AssociateSoftwareToken", {
        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        return callback.associateSecretCode(data.SecretCode);
      });
    }
  };
  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {
    var _this21 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      this.client.request("VerifySoftwareToken", {
        Session: this.Session,
        UserCode: totpCode,
        FriendlyDeviceName: friendlyDeviceName
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        _this21.Session = data.Session;
        var challengeResponses = {};
        challengeResponses.USERNAME = _this21.username;
        var jsonReq = {
          ChallengeName: "MFA_SETUP",
          ClientId: _this21.pool.getClientId(),
          ChallengeResponses: challengeResponses,
          Session: _this21.Session
        };
        if (_this21.getUserContextData()) {
          jsonReq.UserContextData = _this21.getUserContextData();
        }
        _this21.client.request("RespondToAuthChallenge", jsonReq, function(errRespond, dataRespond) {
          if (errRespond) {
            return callback.onFailure(errRespond);
          }
          _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);
          _this21.cacheTokens();
          return callback.onSuccess(_this21.signInUserSession);
        });
        return void 0;
      });
    } else {
      this.client.request("VerifySoftwareToken", {
        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
        UserCode: totpCode,
        FriendlyDeviceName: friendlyDeviceName
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        return callback.onSuccess(data);
      });
    }
  };
  return CognitoUser2;
}();
function unfetch_module(e2, n2) {
  return n2 = n2 || {}, new Promise(function(t2, r2) {
    var s2 = new XMLHttpRequest(), o2 = [], u2 = [], i = {}, a2 = function() {
      return { ok: (s2.status / 100 | 0) == 2, statusText: s2.statusText, status: s2.status, url: s2.responseURL, text: function() {
        return Promise.resolve(s2.responseText);
      }, json: function() {
        return Promise.resolve(s2.responseText).then(JSON.parse);
      }, blob: function() {
        return Promise.resolve(new Blob([s2.response]));
      }, clone: a2, headers: { keys: function() {
        return o2;
      }, entries: function() {
        return u2;
      }, get: function(e3) {
        return i[e3.toLowerCase()];
      }, has: function(e3) {
        return e3.toLowerCase() in i;
      } } };
    };
    for (var l2 in s2.open(n2.method || "get", e2, true), s2.onload = function() {
      s2.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e3, n3, t3) {
        o2.push(n3 = n3.toLowerCase()), u2.push([n3, t3]), i[n3] = i[n3] ? i[n3] + "," + t3 : t3;
      }), t2(a2());
    }, s2.onerror = r2, s2.withCredentials = n2.credentials == "include", n2.headers)
      s2.setRequestHeader(l2, n2.headers[l2]);
    s2.send(n2.body || null);
  });
}
var unfetch_module$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": unfetch_module
}, Symbol.toStringTag, { value: "Module" }));
var require$$0 = /* @__PURE__ */ getAugmentedNamespace(unfetch_module$1);
self.fetch || (self.fetch = require$$0.default || require$$0);
var version$2 = "5.0.4";
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
var BASE_USER_AGENT = "aws-amplify/" + version$2;
var Platform = {
  userAgent: BASE_USER_AGENT + " js",
  product: "",
  navigator: null,
  isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
  Platform.product = navigator.product || "";
  Platform.navigator = navigator || null;
  switch (navigator.product) {
    case "ReactNative":
      Platform.userAgent = BASE_USER_AGENT + " react-native";
      Platform.isReactNative = true;
      break;
    default:
      Platform.userAgent = BASE_USER_AGENT + " js";
      Platform.isReactNative = false;
      break;
  }
}
var getUserAgent = function getUserAgent2() {
  return Platform.userAgent;
};
function UserAgent() {
}
UserAgent.prototype.userAgent = getUserAgent();
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a2 = [null];
      a2.push.apply(a2, args2);
      var Constructor = Function.bind.apply(Parent2, a2);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _isNativeFunction(fn2) {
  return Function.toString.call(fn2).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}
var CognitoError = /* @__PURE__ */ function(_Error) {
  _inheritsLoose(CognitoError2, _Error);
  function CognitoError2(message, code2, name, statusCode) {
    var _this;
    _this = _Error.call(this, message) || this;
    _this.code = code2;
    _this.name = name;
    _this.statusCode = statusCode;
    return _this;
  }
  return CognitoError2;
}(/* @__PURE__ */ _wrapNativeSuper(Error));
var Client = /* @__PURE__ */ function() {
  function Client2(region, endpoint, fetchOptions) {
    this.endpoint = endpoint || "https://cognito-idp." + region + ".amazonaws.com/";
    var _ref = fetchOptions || {}, credentials = _ref.credentials;
    this.fetchOptions = credentials ? {
      credentials
    } : {};
  }
  var _proto = Client2.prototype;
  _proto.promisifyRequest = function promisifyRequest(operation2, params) {
    var _this2 = this;
    return new Promise(function(resolve3, reject) {
      _this2.request(operation2, params, function(err, data) {
        if (err) {
          reject(new CognitoError(err.message, err.code, err.name, err.statusCode));
        } else {
          resolve3(data);
        }
      });
    });
  };
  _proto.requestWithRetry = function requestWithRetry(operation2, params, callback) {
    var _this3 = this;
    var MAX_DELAY_IN_MILLIS = 5 * 1e3;
    jitteredExponentialRetry(function(p2) {
      return new Promise(function(res, rej) {
        _this3.request(operation2, p2, function(error2, result) {
          if (error2) {
            rej(error2);
          } else {
            res(result);
          }
        });
      });
    }, [params], MAX_DELAY_IN_MILLIS).then(function(result) {
      return callback(null, result);
    })["catch"](function(error2) {
      return callback(error2);
    });
  };
  _proto.request = function request(operation2, params, callback) {
    var headers = {
      "Content-Type": "application/x-amz-json-1.1",
      "X-Amz-Target": "AWSCognitoIdentityProviderService." + operation2,
      "X-Amz-User-Agent": UserAgent.prototype.userAgent
    };
    var options = Object.assign({}, this.fetchOptions, {
      headers,
      method: "POST",
      mode: "cors",
      cache: "no-cache",
      body: JSON.stringify(params)
    });
    var response;
    fetch(this.endpoint, options).then(function(resp) {
      response = resp;
      return resp;
    }, function(err) {
      if (err instanceof TypeError) {
        throw new Error("Network error");
      }
      throw err;
    }).then(function(resp) {
      return resp.json()["catch"](function() {
        return {};
      });
    }).then(function(data) {
      if (response.ok)
        return callback(null, data);
      var code2 = (data.__type || data.code).split("#").pop();
      var error2 = new Error(data.message || data.Message || null);
      error2.name = code2;
      error2.code = code2;
      return callback(error2);
    })["catch"](function(err) {
      if (response && response.headers && response.headers.get("x-amzn-errortype")) {
        try {
          var code2 = response.headers.get("x-amzn-errortype").split(":")[0];
          var error2 = new Error(response.status ? response.status.toString() : null);
          error2.code = code2;
          error2.name = code2;
          error2.statusCode = response.status;
          return callback(error2);
        } catch (ex) {
          return callback(err);
        }
      } else if (err instanceof Error && err.message === "Network error") {
        err.code = "NetworkError";
      }
      return callback(err);
    });
  };
  return Client2;
}();
var logger$1 = {
  debug: function debug() {
  }
};
var isNonRetryableError = function isNonRetryableError2(obj) {
  var key = "nonRetryable";
  return obj && obj[key];
};
function retry(functionToRetry, args, delayFn, attempt) {
  if (attempt === void 0) {
    attempt = 1;
  }
  if (typeof functionToRetry !== "function") {
    throw Error("functionToRetry must be a function");
  }
  logger$1.debug(functionToRetry.name + " attempt #" + attempt + " with args: " + JSON.stringify(args));
  return functionToRetry.apply(void 0, args)["catch"](function(err) {
    logger$1.debug("error on " + functionToRetry.name, err);
    if (isNonRetryableError(err)) {
      logger$1.debug(functionToRetry.name + " non retryable error", err);
      throw err;
    }
    var retryIn = delayFn(attempt, args, err);
    logger$1.debug(functionToRetry.name + " retrying in " + retryIn + " ms");
    if (retryIn !== false) {
      return new Promise(function(res) {
        return setTimeout(res, retryIn);
      }).then(function() {
        return retry(functionToRetry, args, delayFn, attempt + 1);
      });
    } else {
      throw err;
    }
  });
}
function jitteredBackoff(maxDelayMs) {
  var BASE_TIME_MS = 100;
  var JITTER_FACTOR = 100;
  return function(attempt) {
    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
    return delay > maxDelayMs ? false : delay;
  };
}
var MAX_DELAY_MS = 5 * 60 * 1e3;
function jitteredExponentialRetry(functionToRetry, args, maxDelayMs) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  return retry(functionToRetry, args, jitteredBackoff(maxDelayMs));
}
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
var USER_POOL_ID_MAX_LENGTH = 55;
var CognitoUserPool = /* @__PURE__ */ function() {
  function CognitoUserPool2(data, wrapRefreshSessionCallback) {
    var _ref = data || {}, UserPoolId = _ref.UserPoolId, ClientId = _ref.ClientId, endpoint = _ref.endpoint, fetchOptions = _ref.fetchOptions, AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;
    if (!UserPoolId || !ClientId) {
      throw new Error("Both UserPoolId and ClientId are required.");
    }
    if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {
      throw new Error("Invalid UserPoolId format.");
    }
    var region = UserPoolId.split("_")[0];
    this.userPoolId = UserPoolId;
    this.clientId = ClientId;
    this.client = new Client(region, endpoint, fetchOptions);
    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;
    this.storage = data.Storage || new StorageHelper().getStorage();
    if (wrapRefreshSessionCallback) {
      this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;
    }
  }
  var _proto = CognitoUserPool2.prototype;
  _proto.getUserPoolId = function getUserPoolId() {
    return this.userPoolId;
  };
  _proto.getClientId = function getClientId() {
    return this.clientId;
  };
  _proto.signUp = function signUp2(username, password, userAttributes, validationData, callback, clientMetadata) {
    var _this = this;
    var jsonReq = {
      ClientId: this.clientId,
      Username: username,
      Password: password,
      UserAttributes: userAttributes,
      ValidationData: validationData,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData(username)) {
      jsonReq.UserContextData = this.getUserContextData(username);
    }
    this.client.request("SignUp", jsonReq, function(err, data) {
      if (err) {
        return callback(err, null);
      }
      var cognitoUser = {
        Username: username,
        Pool: _this,
        Storage: _this.storage
      };
      var returnData = {
        user: new CognitoUser(cognitoUser),
        userConfirmed: data.UserConfirmed,
        userSub: data.UserSub,
        codeDeliveryDetails: data.CodeDeliveryDetails
      };
      return callback(null, returnData);
    });
  };
  _proto.getCurrentUser = function getCurrentUser() {
    var lastUserKey = "CognitoIdentityServiceProvider." + this.clientId + ".LastAuthUser";
    var lastAuthUser = this.storage.getItem(lastUserKey);
    if (lastAuthUser) {
      var cognitoUser = {
        Username: lastAuthUser,
        Pool: this,
        Storage: this.storage
      };
      return new CognitoUser(cognitoUser);
    }
    return null;
  };
  _proto.getUserContextData = function getUserContextData(username) {
    if (typeof AmazonCognitoAdvancedSecurityData === "undefined") {
      return void 0;
    }
    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;
    if (this.advancedSecurityDataCollectionFlag) {
      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);
      if (advancedSecurityData) {
        var userContextData = {
          EncodedData: advancedSecurityData
        };
        return userContextData;
      }
    }
    return {};
  };
  return CognitoUserPool2;
}();
var js_cookie = { exports: {} };
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
(function(module, exports) {
  (function(factory) {
    var registeredInModuleLoader;
    {
      module.exports = factory();
      registeredInModuleLoader = true;
    }
    if (!registeredInModuleLoader) {
      var OldCookies = window.Cookies;
      var api2 = window.Cookies = factory();
      api2.noConflict = function() {
        window.Cookies = OldCookies;
        return api2;
      };
    }
  })(function() {
    function extend() {
      var i = 0;
      var result = {};
      for (; i < arguments.length; i++) {
        var attributes = arguments[i];
        for (var key in attributes) {
          result[key] = attributes[key];
        }
      }
      return result;
    }
    function decode2(s2) {
      return s2.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
    }
    function init(converter) {
      function api2() {
      }
      function set2(key, value, attributes) {
        if (typeof document === "undefined") {
          return;
        }
        attributes = extend({
          path: "/"
        }, api2.defaults, attributes);
        if (typeof attributes.expires === "number") {
          attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e5);
        }
        attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
        try {
          var result = JSON.stringify(value);
          if (/^[\{\[]/.test(result)) {
            value = result;
          }
        } catch (e2) {
        }
        value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
        key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
        var stringifiedAttributes = "";
        for (var attributeName in attributes) {
          if (!attributes[attributeName]) {
            continue;
          }
          stringifiedAttributes += "; " + attributeName;
          if (attributes[attributeName] === true) {
            continue;
          }
          stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
        }
        return document.cookie = key + "=" + value + stringifiedAttributes;
      }
      function get5(key, json2) {
        if (typeof document === "undefined") {
          return;
        }
        var jar = {};
        var cookies = document.cookie ? document.cookie.split("; ") : [];
        var i = 0;
        for (; i < cookies.length; i++) {
          var parts = cookies[i].split("=");
          var cookie = parts.slice(1).join("=");
          if (!json2 && cookie.charAt(0) === '"') {
            cookie = cookie.slice(1, -1);
          }
          try {
            var name = decode2(parts[0]);
            cookie = (converter.read || converter)(cookie, name) || decode2(cookie);
            if (json2) {
              try {
                cookie = JSON.parse(cookie);
              } catch (e2) {
              }
            }
            jar[name] = cookie;
            if (key === name) {
              break;
            }
          } catch (e2) {
          }
        }
        return key ? jar[key] : jar;
      }
      api2.set = set2;
      api2.get = function(key) {
        return get5(key, false);
      };
      api2.getJSON = function(key) {
        return get5(key, true);
      };
      api2.remove = function(key, attributes) {
        set2(key, "", extend(attributes, {
          expires: -1
        }));
      };
      api2.defaults = {};
      api2.withConverter = init;
      return api2;
    }
    return init(function() {
    });
  });
})(js_cookie);
var browser = { exports: {} };
var util$k = util_1;
function JsonBuilder$2() {
}
JsonBuilder$2.prototype.build = function(value, shape2) {
  return JSON.stringify(translate$2(value, shape2));
};
function translate$2(value, shape2) {
  if (!shape2 || value === void 0 || value === null)
    return void 0;
  switch (shape2.type) {
    case "structure":
      return translateStructure$1(value, shape2);
    case "map":
      return translateMap$1(value, shape2);
    case "list":
      return translateList$1(value, shape2);
    default:
      return translateScalar$1(value, shape2);
  }
}
function translateStructure$1(structure, shape2) {
  if (shape2.isDocument) {
    return structure;
  }
  var struct = {};
  util$k.each(structure, function(name, value) {
    var memberShape = shape2.members[name];
    if (memberShape) {
      if (memberShape.location !== "body")
        return;
      var locationName = memberShape.isLocationName ? memberShape.name : name;
      var result = translate$2(value, memberShape);
      if (result !== void 0)
        struct[locationName] = result;
    }
  });
  return struct;
}
function translateList$1(list, shape2) {
  var out = [];
  util$k.arrayEach(list, function(value) {
    var result = translate$2(value, shape2.member);
    if (result !== void 0)
      out.push(result);
  });
  return out;
}
function translateMap$1(map, shape2) {
  var out = {};
  util$k.each(map, function(key, value) {
    var result = translate$2(value, shape2.value);
    if (result !== void 0)
      out[key] = result;
  });
  return out;
}
function translateScalar$1(value, shape2) {
  return shape2.toWireFormat(value);
}
var builder$1 = JsonBuilder$2;
var util$j = util_1;
function JsonParser$2() {
}
JsonParser$2.prototype.parse = function(value, shape2) {
  return translate$1(JSON.parse(value), shape2);
};
function translate$1(value, shape2) {
  if (!shape2 || value === void 0)
    return void 0;
  switch (shape2.type) {
    case "structure":
      return translateStructure(value, shape2);
    case "map":
      return translateMap(value, shape2);
    case "list":
      return translateList(value, shape2);
    default:
      return translateScalar(value, shape2);
  }
}
function translateStructure(structure, shape2) {
  if (structure == null)
    return void 0;
  if (shape2.isDocument)
    return structure;
  var struct = {};
  var shapeMembers = shape2.members;
  util$j.each(shapeMembers, function(name, memberShape) {
    var locationName = memberShape.isLocationName ? memberShape.name : name;
    if (Object.prototype.hasOwnProperty.call(structure, locationName)) {
      var value = structure[locationName];
      var result = translate$1(value, memberShape);
      if (result !== void 0)
        struct[name] = result;
    }
  });
  return struct;
}
function translateList(list, shape2) {
  if (list == null)
    return void 0;
  var out = [];
  util$j.arrayEach(list, function(value) {
    var result = translate$1(value, shape2.member);
    if (result === void 0)
      out.push(null);
    else
      out.push(result);
  });
  return out;
}
function translateMap(map, shape2) {
  if (map == null)
    return void 0;
  var out = {};
  util$j.each(map, function(key, value) {
    var result = translate$1(value, shape2.value);
    if (result === void 0)
      out[key] = null;
    else
      out[key] = result;
  });
  return out;
}
function translateScalar(value, shape2) {
  return shape2.toType(value);
}
var parser = JsonParser$2;
var util$i = util_1;
var AWS$A = core;
function populateHostPrefix$3(request) {
  var enabled = request.service.config.hostPrefixEnabled;
  if (!enabled)
    return request;
  var operationModel = request.service.api.operations[request.operation];
  if (hasEndpointDiscover(request))
    return request;
  if (operationModel.endpoint && operationModel.endpoint.hostPrefix) {
    var hostPrefixNotation = operationModel.endpoint.hostPrefix;
    var hostPrefix = expandHostPrefix(hostPrefixNotation, request.params, operationModel.input);
    prependEndpointPrefix(request.httpRequest.endpoint, hostPrefix);
    validateHostname(request.httpRequest.endpoint.hostname);
  }
  return request;
}
function hasEndpointDiscover(request) {
  var api2 = request.service.api;
  var operationModel = api2.operations[request.operation];
  var isEndpointOperation = api2.endpointOperation && api2.endpointOperation === util$i.string.lowerFirst(operationModel.name);
  return operationModel.endpointDiscoveryRequired !== "NULL" || isEndpointOperation === true;
}
function expandHostPrefix(hostPrefixNotation, params, shape2) {
  util$i.each(shape2.members, function(name, member) {
    if (member.hostLabel === true) {
      if (typeof params[name] !== "string" || params[name] === "") {
        throw util$i.error(new Error(), {
          message: "Parameter " + name + " should be a non-empty string.",
          code: "InvalidParameter"
        });
      }
      var regex = new RegExp("\\{" + name + "\\}", "g");
      hostPrefixNotation = hostPrefixNotation.replace(regex, params[name]);
    }
  });
  return hostPrefixNotation;
}
function prependEndpointPrefix(endpoint, prefix) {
  if (endpoint.host) {
    endpoint.host = prefix + endpoint.host;
  }
  if (endpoint.hostname) {
    endpoint.hostname = prefix + endpoint.hostname;
  }
}
function validateHostname(hostname) {
  var labels = hostname.split(".");
  var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$/;
  util$i.arrayEach(labels, function(label) {
    if (!label.length || label.length < 1 || label.length > 63) {
      throw util$i.error(new Error(), {
        code: "ValidationError",
        message: "Hostname label length should be between 1 to 63 characters, inclusive."
      });
    }
    if (!hostPattern.test(label)) {
      throw AWS$A.util.error(new Error(), { code: "ValidationError", message: label + " is not hostname compatible." });
    }
  });
}
var helpers = {
  populateHostPrefix: populateHostPrefix$3
};
var util$h = util_1;
var JsonBuilder$1 = builder$1;
var JsonParser$1 = parser;
var populateHostPrefix$2 = helpers.populateHostPrefix;
function buildRequest$4(req) {
  var httpRequest = req.httpRequest;
  var api2 = req.service.api;
  var target = api2.targetPrefix + "." + api2.operations[req.operation].name;
  var version2 = api2.jsonVersion || "1.0";
  var input = api2.operations[req.operation].input;
  var builder2 = new JsonBuilder$1();
  if (version2 === 1)
    version2 = "1.0";
  httpRequest.body = builder2.build(req.params || {}, input);
  httpRequest.headers["Content-Type"] = "application/x-amz-json-" + version2;
  httpRequest.headers["X-Amz-Target"] = target;
  populateHostPrefix$2(req);
}
function extractError$4(resp) {
  var error2 = {};
  var httpResponse = resp.httpResponse;
  error2.code = httpResponse.headers["x-amzn-errortype"] || "UnknownError";
  if (typeof error2.code === "string") {
    error2.code = error2.code.split(":")[0];
  }
  if (httpResponse.body.length > 0) {
    try {
      var e2 = JSON.parse(httpResponse.body.toString());
      var code2 = e2.__type || e2.code || e2.Code;
      if (code2) {
        error2.code = code2.split("#").pop();
      }
      if (error2.code === "RequestEntityTooLarge") {
        error2.message = "Request body must be less than 1 MB";
      } else {
        error2.message = e2.message || e2.Message || null;
      }
    } catch (e3) {
      error2.statusCode = httpResponse.statusCode;
      error2.message = httpResponse.statusMessage;
    }
  } else {
    error2.statusCode = httpResponse.statusCode;
    error2.message = httpResponse.statusCode.toString();
  }
  resp.error = util$h.error(new Error(), error2);
}
function extractData$4(resp) {
  var body = resp.httpResponse.body.toString() || "{}";
  if (resp.request.service.config.convertResponseTypes === false) {
    resp.data = JSON.parse(body);
  } else {
    var operation2 = resp.request.service.api.operations[resp.request.operation];
    var shape2 = operation2.output || {};
    var parser2 = new JsonParser$1();
    resp.data = parser2.parse(body, shape2);
  }
}
var json = {
  buildRequest: buildRequest$4,
  extractError: extractError$4,
  extractData: extractData$4
};
var util$g = util_1;
function QueryParamSerializer$1() {
}
QueryParamSerializer$1.prototype.serialize = function(params, shape2, fn2) {
  serializeStructure$1("", params, shape2, fn2);
};
function ucfirst(shape2) {
  if (shape2.isQueryName || shape2.api.protocol !== "ec2") {
    return shape2.name;
  } else {
    return shape2.name[0].toUpperCase() + shape2.name.substr(1);
  }
}
function serializeStructure$1(prefix, struct, rules2, fn2) {
  util$g.each(rules2.members, function(name, member) {
    var value = struct[name];
    if (value === null || value === void 0)
      return;
    var memberName = ucfirst(member);
    memberName = prefix ? prefix + "." + memberName : memberName;
    serializeMember(memberName, value, member, fn2);
  });
}
function serializeMap$1(name, map, rules2, fn2) {
  var i = 1;
  util$g.each(map, function(key, value) {
    var prefix = rules2.flattened ? "." : ".entry.";
    var position = prefix + i++ + ".";
    var keyName = position + (rules2.key.name || "key");
    var valueName = position + (rules2.value.name || "value");
    serializeMember(name + keyName, key, rules2.key, fn2);
    serializeMember(name + valueName, value, rules2.value, fn2);
  });
}
function serializeList$1(name, list, rules2, fn2) {
  var memberRules = rules2.member || {};
  if (list.length === 0) {
    fn2.call(this, name, null);
    return;
  }
  util$g.arrayEach(list, function(v2, n2) {
    var suffix = "." + (n2 + 1);
    if (rules2.api.protocol === "ec2") {
      suffix = suffix + "";
    } else if (rules2.flattened) {
      if (memberRules.name) {
        var parts = name.split(".");
        parts.pop();
        parts.push(ucfirst(memberRules));
        name = parts.join(".");
      }
    } else {
      suffix = "." + (memberRules.name ? memberRules.name : "member") + suffix;
    }
    serializeMember(name + suffix, v2, memberRules, fn2);
  });
}
function serializeMember(name, value, rules2, fn2) {
  if (value === null || value === void 0)
    return;
  if (rules2.type === "structure") {
    serializeStructure$1(name, value, rules2, fn2);
  } else if (rules2.type === "list") {
    serializeList$1(name, value, rules2, fn2);
  } else if (rules2.type === "map") {
    serializeMap$1(name, value, rules2, fn2);
  } else {
    fn2(name, rules2.toWireFormat(value).toString());
  }
}
var query_param_serializer = QueryParamSerializer$1;
var memoizedProperty$3 = util_1.memoizedProperty;
function memoize(name, value, factory, nameTr) {
  memoizedProperty$3(this, nameTr(name), function() {
    return factory(name, value);
  });
}
function Collection$2(iterable, options, factory, nameTr, callback) {
  nameTr = nameTr || String;
  var self2 = this;
  for (var id in iterable) {
    if (Object.prototype.hasOwnProperty.call(iterable, id)) {
      memoize.call(self2, id, iterable[id], factory, nameTr);
      if (callback)
        callback(id, iterable[id]);
    }
  }
}
var collection = Collection$2;
var Collection$1 = collection;
var util$f = util_1;
function property$4(obj, name, value) {
  if (value !== null && value !== void 0) {
    util$f.property.apply(this, arguments);
  }
}
function memoizedProperty$2(obj, name) {
  if (!obj.constructor.prototype[name]) {
    util$f.memoizedProperty.apply(this, arguments);
  }
}
function Shape$4(shape2, options, memberName) {
  options = options || {};
  property$4(this, "shape", shape2.shape);
  property$4(this, "api", options.api, false);
  property$4(this, "type", shape2.type);
  property$4(this, "enum", shape2.enum);
  property$4(this, "min", shape2.min);
  property$4(this, "max", shape2.max);
  property$4(this, "pattern", shape2.pattern);
  property$4(this, "location", shape2.location || this.location || "body");
  property$4(this, "name", this.name || shape2.xmlName || shape2.queryName || shape2.locationName || memberName);
  property$4(this, "isStreaming", shape2.streaming || this.isStreaming || false);
  property$4(this, "requiresLength", shape2.requiresLength, false);
  property$4(this, "isComposite", shape2.isComposite || false);
  property$4(this, "isShape", true, false);
  property$4(this, "isQueryName", Boolean(shape2.queryName), false);
  property$4(this, "isLocationName", Boolean(shape2.locationName), false);
  property$4(this, "isIdempotent", shape2.idempotencyToken === true);
  property$4(this, "isJsonValue", shape2.jsonvalue === true);
  property$4(this, "isSensitive", shape2.sensitive === true || shape2.prototype && shape2.prototype.sensitive === true);
  property$4(this, "isEventStream", Boolean(shape2.eventstream), false);
  property$4(this, "isEvent", Boolean(shape2.event), false);
  property$4(this, "isEventPayload", Boolean(shape2.eventpayload), false);
  property$4(this, "isEventHeader", Boolean(shape2.eventheader), false);
  property$4(this, "isTimestampFormatSet", Boolean(shape2.timestampFormat) || shape2.prototype && shape2.prototype.isTimestampFormatSet === true, false);
  property$4(this, "endpointDiscoveryId", Boolean(shape2.endpointdiscoveryid), false);
  property$4(this, "hostLabel", Boolean(shape2.hostLabel), false);
  if (options.documentation) {
    property$4(this, "documentation", shape2.documentation);
    property$4(this, "documentationUrl", shape2.documentationUrl);
  }
  if (shape2.xmlAttribute) {
    property$4(this, "isXmlAttribute", shape2.xmlAttribute || false);
  }
  property$4(this, "defaultValue", null);
  this.toWireFormat = function(value) {
    if (value === null || value === void 0)
      return "";
    return value;
  };
  this.toType = function(value) {
    return value;
  };
}
Shape$4.normalizedTypes = {
  character: "string",
  double: "float",
  long: "integer",
  short: "integer",
  biginteger: "integer",
  bigdecimal: "float",
  blob: "binary"
};
Shape$4.types = {
  "structure": StructureShape,
  "list": ListShape,
  "map": MapShape,
  "boolean": BooleanShape,
  "timestamp": TimestampShape,
  "float": FloatShape,
  "integer": IntegerShape,
  "string": StringShape,
  "base64": Base64Shape,
  "binary": BinaryShape
};
Shape$4.resolve = function resolve(shape2, options) {
  if (shape2.shape) {
    var refShape = options.api.shapes[shape2.shape];
    if (!refShape) {
      throw new Error("Cannot find shape reference: " + shape2.shape);
    }
    return refShape;
  } else {
    return null;
  }
};
Shape$4.create = function create(shape2, options, memberName) {
  if (shape2.isShape)
    return shape2;
  var refShape = Shape$4.resolve(shape2, options);
  if (refShape) {
    var filteredKeys = Object.keys(shape2);
    if (!options.documentation) {
      filteredKeys = filteredKeys.filter(function(name) {
        return !name.match(/documentation/);
      });
    }
    var InlineShape = function() {
      refShape.constructor.call(this, shape2, options, memberName);
    };
    InlineShape.prototype = refShape;
    return new InlineShape();
  } else {
    if (!shape2.type) {
      if (shape2.members)
        shape2.type = "structure";
      else if (shape2.member)
        shape2.type = "list";
      else if (shape2.key)
        shape2.type = "map";
      else
        shape2.type = "string";
    }
    var origType = shape2.type;
    if (Shape$4.normalizedTypes[shape2.type]) {
      shape2.type = Shape$4.normalizedTypes[shape2.type];
    }
    if (Shape$4.types[shape2.type]) {
      return new Shape$4.types[shape2.type](shape2, options, memberName);
    } else {
      throw new Error("Unrecognized shape type: " + origType);
    }
  }
};
function CompositeShape(shape2) {
  Shape$4.apply(this, arguments);
  property$4(this, "isComposite", true);
  if (shape2.flattened) {
    property$4(this, "flattened", shape2.flattened || false);
  }
}
function StructureShape(shape2, options) {
  var self2 = this;
  var requiredMap = null, firstInit = !this.isShape;
  CompositeShape.apply(this, arguments);
  if (firstInit) {
    property$4(this, "defaultValue", function() {
      return {};
    });
    property$4(this, "members", {});
    property$4(this, "memberNames", []);
    property$4(this, "required", []);
    property$4(this, "isRequired", function() {
      return false;
    });
    property$4(this, "isDocument", Boolean(shape2.document));
  }
  if (shape2.members) {
    property$4(this, "members", new Collection$1(shape2.members, options, function(name, member) {
      return Shape$4.create(member, options, name);
    }));
    memoizedProperty$2(this, "memberNames", function() {
      return shape2.xmlOrder || Object.keys(shape2.members);
    });
    if (shape2.event) {
      memoizedProperty$2(this, "eventPayloadMemberName", function() {
        var members = self2.members;
        var memberNames = self2.memberNames;
        for (var i = 0, iLen = memberNames.length; i < iLen; i++) {
          if (members[memberNames[i]].isEventPayload) {
            return memberNames[i];
          }
        }
      });
      memoizedProperty$2(this, "eventHeaderMemberNames", function() {
        var members = self2.members;
        var memberNames = self2.memberNames;
        var eventHeaderMemberNames = [];
        for (var i = 0, iLen = memberNames.length; i < iLen; i++) {
          if (members[memberNames[i]].isEventHeader) {
            eventHeaderMemberNames.push(memberNames[i]);
          }
        }
        return eventHeaderMemberNames;
      });
    }
  }
  if (shape2.required) {
    property$4(this, "required", shape2.required);
    property$4(this, "isRequired", function(name) {
      if (!requiredMap) {
        requiredMap = {};
        for (var i = 0; i < shape2.required.length; i++) {
          requiredMap[shape2.required[i]] = true;
        }
      }
      return requiredMap[name];
    }, false, true);
  }
  property$4(this, "resultWrapper", shape2.resultWrapper || null);
  if (shape2.payload) {
    property$4(this, "payload", shape2.payload);
  }
  if (typeof shape2.xmlNamespace === "string") {
    property$4(this, "xmlNamespaceUri", shape2.xmlNamespace);
  } else if (typeof shape2.xmlNamespace === "object") {
    property$4(this, "xmlNamespacePrefix", shape2.xmlNamespace.prefix);
    property$4(this, "xmlNamespaceUri", shape2.xmlNamespace.uri);
  }
}
function ListShape(shape2, options) {
  var self2 = this, firstInit = !this.isShape;
  CompositeShape.apply(this, arguments);
  if (firstInit) {
    property$4(this, "defaultValue", function() {
      return [];
    });
  }
  if (shape2.member) {
    memoizedProperty$2(this, "member", function() {
      return Shape$4.create(shape2.member, options);
    });
  }
  if (this.flattened) {
    var oldName = this.name;
    memoizedProperty$2(this, "name", function() {
      return self2.member.name || oldName;
    });
  }
}
function MapShape(shape2, options) {
  var firstInit = !this.isShape;
  CompositeShape.apply(this, arguments);
  if (firstInit) {
    property$4(this, "defaultValue", function() {
      return {};
    });
    property$4(this, "key", Shape$4.create({ type: "string" }, options));
    property$4(this, "value", Shape$4.create({ type: "string" }, options));
  }
  if (shape2.key) {
    memoizedProperty$2(this, "key", function() {
      return Shape$4.create(shape2.key, options);
    });
  }
  if (shape2.value) {
    memoizedProperty$2(this, "value", function() {
      return Shape$4.create(shape2.value, options);
    });
  }
}
function TimestampShape(shape2) {
  var self2 = this;
  Shape$4.apply(this, arguments);
  if (shape2.timestampFormat) {
    property$4(this, "timestampFormat", shape2.timestampFormat);
  } else if (self2.isTimestampFormatSet && this.timestampFormat) {
    property$4(this, "timestampFormat", this.timestampFormat);
  } else if (this.location === "header") {
    property$4(this, "timestampFormat", "rfc822");
  } else if (this.location === "querystring") {
    property$4(this, "timestampFormat", "iso8601");
  } else if (this.api) {
    switch (this.api.protocol) {
      case "json":
      case "rest-json":
        property$4(this, "timestampFormat", "unixTimestamp");
        break;
      case "rest-xml":
      case "query":
      case "ec2":
        property$4(this, "timestampFormat", "iso8601");
        break;
    }
  }
  this.toType = function(value) {
    if (value === null || value === void 0)
      return null;
    if (typeof value.toUTCString === "function")
      return value;
    return typeof value === "string" || typeof value === "number" ? util$f.date.parseTimestamp(value) : null;
  };
  this.toWireFormat = function(value) {
    return util$f.date.format(value, self2.timestampFormat);
  };
}
function StringShape() {
  Shape$4.apply(this, arguments);
  var nullLessProtocols = ["rest-xml", "query", "ec2"];
  this.toType = function(value) {
    value = this.api && nullLessProtocols.indexOf(this.api.protocol) > -1 ? value || "" : value;
    if (this.isJsonValue) {
      return JSON.parse(value);
    }
    return value && typeof value.toString === "function" ? value.toString() : value;
  };
  this.toWireFormat = function(value) {
    return this.isJsonValue ? JSON.stringify(value) : value;
  };
}
function FloatShape() {
  Shape$4.apply(this, arguments);
  this.toType = function(value) {
    if (value === null || value === void 0)
      return null;
    return parseFloat(value);
  };
  this.toWireFormat = this.toType;
}
function IntegerShape() {
  Shape$4.apply(this, arguments);
  this.toType = function(value) {
    if (value === null || value === void 0)
      return null;
    return parseInt(value, 10);
  };
  this.toWireFormat = this.toType;
}
function BinaryShape() {
  Shape$4.apply(this, arguments);
  this.toType = function(value) {
    var buf = util$f.base64.decode(value);
    if (this.isSensitive && util$f.isNode() && typeof util$f.Buffer.alloc === "function") {
      var secureBuf = util$f.Buffer.alloc(buf.length, buf);
      buf.fill(0);
      buf = secureBuf;
    }
    return buf;
  };
  this.toWireFormat = util$f.base64.encode;
}
function Base64Shape() {
  BinaryShape.apply(this, arguments);
}
function BooleanShape() {
  Shape$4.apply(this, arguments);
  this.toType = function(value) {
    if (typeof value === "boolean")
      return value;
    if (value === null || value === void 0)
      return null;
    return value === "true";
  };
}
Shape$4.shapes = {
  StructureShape,
  ListShape,
  MapShape,
  StringShape,
  BooleanShape,
  Base64Shape
};
var shape = Shape$4;
var AWS$z = core;
var util$e = util_1;
var QueryParamSerializer = query_param_serializer;
var Shape$3 = shape;
var populateHostPrefix$1 = helpers.populateHostPrefix;
function buildRequest$3(req) {
  var operation2 = req.service.api.operations[req.operation];
  var httpRequest = req.httpRequest;
  httpRequest.headers["Content-Type"] = "application/x-www-form-urlencoded; charset=utf-8";
  httpRequest.params = {
    Version: req.service.api.apiVersion,
    Action: operation2.name
  };
  var builder2 = new QueryParamSerializer();
  builder2.serialize(req.params, operation2.input, function(name, value) {
    httpRequest.params[name] = value;
  });
  httpRequest.body = util$e.queryParamsToString(httpRequest.params);
  populateHostPrefix$1(req);
}
function extractError$3(resp) {
  var data, body = resp.httpResponse.body.toString();
  if (body.match("<UnknownOperationException")) {
    data = {
      Code: "UnknownOperation",
      Message: "Unknown operation " + resp.request.operation
    };
  } else {
    try {
      data = new AWS$z.XML.Parser().parse(body);
    } catch (e2) {
      data = {
        Code: resp.httpResponse.statusCode,
        Message: resp.httpResponse.statusMessage
      };
    }
  }
  if (data.requestId && !resp.requestId)
    resp.requestId = data.requestId;
  if (data.Errors)
    data = data.Errors;
  if (data.Error)
    data = data.Error;
  if (data.Code) {
    resp.error = util$e.error(new Error(), {
      code: data.Code,
      message: data.Message
    });
  } else {
    resp.error = util$e.error(new Error(), {
      code: resp.httpResponse.statusCode,
      message: null
    });
  }
}
function extractData$3(resp) {
  var req = resp.request;
  var operation2 = req.service.api.operations[req.operation];
  var shape2 = operation2.output || {};
  var origRules = shape2;
  if (origRules.resultWrapper) {
    var tmp = Shape$3.create({ type: "structure" });
    tmp.members[origRules.resultWrapper] = shape2;
    tmp.memberNames = [origRules.resultWrapper];
    util$e.property(shape2, "name", shape2.resultWrapper);
    shape2 = tmp;
  }
  var parser2 = new AWS$z.XML.Parser();
  if (shape2 && shape2.members && !shape2.members._XAMZRequestId) {
    var requestIdShape = Shape$3.create({ type: "string" }, { api: { protocol: "query" } }, "requestId");
    shape2.members._XAMZRequestId = requestIdShape;
  }
  var data = parser2.parse(resp.httpResponse.body.toString(), shape2);
  resp.requestId = data._XAMZRequestId || data.requestId;
  if (data._XAMZRequestId)
    delete data._XAMZRequestId;
  if (origRules.resultWrapper) {
    if (data[origRules.resultWrapper]) {
      util$e.update(data, data[origRules.resultWrapper]);
      delete data[origRules.resultWrapper];
    }
  }
  resp.data = data;
}
var query = {
  buildRequest: buildRequest$3,
  extractError: extractError$3,
  extractData: extractData$3
};
var util$d = util_1;
var populateHostPrefix = helpers.populateHostPrefix;
function populateMethod(req) {
  req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;
}
function generateURI(endpointPath, operationPath, input, params) {
  var uri = [endpointPath, operationPath].join("/");
  uri = uri.replace(/\/+/g, "/");
  var queryString = {}, queryStringSet = false;
  util$d.each(input.members, function(name, member) {
    var paramValue = params[name];
    if (paramValue === null || paramValue === void 0)
      return;
    if (member.location === "uri") {
      var regex = new RegExp("\\{" + member.name + "(\\+)?\\}");
      uri = uri.replace(regex, function(_2, plus) {
        var fn2 = plus ? util$d.uriEscapePath : util$d.uriEscape;
        return fn2(String(paramValue));
      });
    } else if (member.location === "querystring") {
      queryStringSet = true;
      if (member.type === "list") {
        queryString[member.name] = paramValue.map(function(val) {
          return util$d.uriEscape(member.member.toWireFormat(val).toString());
        });
      } else if (member.type === "map") {
        util$d.each(paramValue, function(key, value) {
          if (Array.isArray(value)) {
            queryString[key] = value.map(function(val) {
              return util$d.uriEscape(String(val));
            });
          } else {
            queryString[key] = util$d.uriEscape(String(value));
          }
        });
      } else {
        queryString[member.name] = util$d.uriEscape(member.toWireFormat(paramValue).toString());
      }
    }
  });
  if (queryStringSet) {
    uri += uri.indexOf("?") >= 0 ? "&" : "?";
    var parts = [];
    util$d.arrayEach(Object.keys(queryString).sort(), function(key) {
      if (!Array.isArray(queryString[key])) {
        queryString[key] = [queryString[key]];
      }
      for (var i = 0; i < queryString[key].length; i++) {
        parts.push(util$d.uriEscape(String(key)) + "=" + queryString[key][i]);
      }
    });
    uri += parts.join("&");
  }
  return uri;
}
function populateURI(req) {
  var operation2 = req.service.api.operations[req.operation];
  var input = operation2.input;
  var uri = generateURI(req.httpRequest.endpoint.path, operation2.httpPath, input, req.params);
  req.httpRequest.path = uri;
}
function populateHeaders(req) {
  var operation2 = req.service.api.operations[req.operation];
  util$d.each(operation2.input.members, function(name, member) {
    var value = req.params[name];
    if (value === null || value === void 0)
      return;
    if (member.location === "headers" && member.type === "map") {
      util$d.each(value, function(key, memberValue) {
        req.httpRequest.headers[member.name + key] = memberValue;
      });
    } else if (member.location === "header") {
      value = member.toWireFormat(value).toString();
      if (member.isJsonValue) {
        value = util$d.base64.encode(value);
      }
      req.httpRequest.headers[member.name] = value;
    }
  });
}
function buildRequest$2(req) {
  populateMethod(req);
  populateURI(req);
  populateHeaders(req);
  populateHostPrefix(req);
}
function extractError$2() {
}
function extractData$2(resp) {
  var req = resp.request;
  var data = {};
  var r2 = resp.httpResponse;
  var operation2 = req.service.api.operations[req.operation];
  var output = operation2.output;
  var headers = {};
  util$d.each(r2.headers, function(k2, v2) {
    headers[k2.toLowerCase()] = v2;
  });
  util$d.each(output.members, function(name, member) {
    var header = (member.name || name).toLowerCase();
    if (member.location === "headers" && member.type === "map") {
      data[name] = {};
      var location2 = member.isLocationName ? member.name : "";
      var pattern = new RegExp("^" + location2 + "(.+)", "i");
      util$d.each(r2.headers, function(k2, v2) {
        var result = k2.match(pattern);
        if (result !== null) {
          data[name][result[1]] = v2;
        }
      });
    } else if (member.location === "header") {
      if (headers[header] !== void 0) {
        var value = member.isJsonValue ? util$d.base64.decode(headers[header]) : headers[header];
        data[name] = member.toType(value);
      }
    } else if (member.location === "statusCode") {
      data[name] = parseInt(r2.statusCode, 10);
    }
  });
  resp.data = data;
}
var rest = {
  buildRequest: buildRequest$2,
  extractError: extractError$2,
  extractData: extractData$2,
  generateURI
};
var util$c = util_1;
var Rest$1 = rest;
var Json = json;
var JsonBuilder = builder$1;
var JsonParser = parser;
function populateBody$1(req) {
  var builder2 = new JsonBuilder();
  var input = req.service.api.operations[req.operation].input;
  if (input.payload) {
    var params = {};
    var payloadShape = input.members[input.payload];
    params = req.params[input.payload];
    if (payloadShape.type === "structure") {
      req.httpRequest.body = builder2.build(params || {}, payloadShape);
      applyContentTypeHeader(req);
    } else if (params !== void 0) {
      req.httpRequest.body = params;
      if (payloadShape.type === "binary" || payloadShape.isStreaming) {
        applyContentTypeHeader(req, true);
      }
    }
  } else {
    req.httpRequest.body = builder2.build(req.params, input);
    applyContentTypeHeader(req);
  }
}
function applyContentTypeHeader(req, isBinary) {
  if (!req.httpRequest.headers["Content-Type"]) {
    var type = isBinary ? "binary/octet-stream" : "application/json";
    req.httpRequest.headers["Content-Type"] = type;
  }
}
function buildRequest$1(req) {
  Rest$1.buildRequest(req);
  if (["GET", "HEAD", "DELETE"].indexOf(req.httpRequest.method) < 0) {
    populateBody$1(req);
  }
}
function extractError$1(resp) {
  Json.extractError(resp);
}
function extractData$1(resp) {
  Rest$1.extractData(resp);
  var req = resp.request;
  var operation2 = req.service.api.operations[req.operation];
  var rules2 = req.service.api.operations[req.operation].output || {};
  var parser2;
  operation2.hasEventOutput;
  if (rules2.payload) {
    var payloadMember = rules2.members[rules2.payload];
    var body = resp.httpResponse.body;
    if (payloadMember.isEventStream) {
      parser2 = new JsonParser();
      resp.data[payload] = util$c.createEventStream(AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body, parser2, payloadMember);
    } else if (payloadMember.type === "structure" || payloadMember.type === "list") {
      var parser2 = new JsonParser();
      resp.data[rules2.payload] = parser2.parse(body, payloadMember);
    } else if (payloadMember.type === "binary" || payloadMember.isStreaming) {
      resp.data[rules2.payload] = body;
    } else {
      resp.data[rules2.payload] = payloadMember.toType(body);
    }
  } else {
    var data = resp.data;
    Json.extractData(resp);
    resp.data = util$c.merge(data, resp.data);
  }
}
var rest_json = {
  buildRequest: buildRequest$1,
  extractError: extractError$1,
  extractData: extractData$1
};
var AWS$y = core;
var util$b = util_1;
var Rest = rest;
function populateBody(req) {
  var input = req.service.api.operations[req.operation].input;
  var builder2 = new AWS$y.XML.Builder();
  var params = req.params;
  var payload2 = input.payload;
  if (payload2) {
    var payloadMember = input.members[payload2];
    params = params[payload2];
    if (params === void 0)
      return;
    if (payloadMember.type === "structure") {
      var rootElement = payloadMember.name;
      req.httpRequest.body = builder2.toXML(params, payloadMember, rootElement, true);
    } else {
      req.httpRequest.body = params;
    }
  } else {
    req.httpRequest.body = builder2.toXML(params, input, input.name || input.shape || util$b.string.upperFirst(req.operation) + "Request");
  }
}
function buildRequest(req) {
  Rest.buildRequest(req);
  if (["GET", "HEAD"].indexOf(req.httpRequest.method) < 0) {
    populateBody(req);
  }
}
function extractError(resp) {
  Rest.extractError(resp);
  var data;
  try {
    data = new AWS$y.XML.Parser().parse(resp.httpResponse.body.toString());
  } catch (e2) {
    data = {
      Code: resp.httpResponse.statusCode,
      Message: resp.httpResponse.statusMessage
    };
  }
  if (data.Errors)
    data = data.Errors;
  if (data.Error)
    data = data.Error;
  if (data.Code) {
    resp.error = util$b.error(new Error(), {
      code: data.Code,
      message: data.Message
    });
  } else {
    resp.error = util$b.error(new Error(), {
      code: resp.httpResponse.statusCode,
      message: null
    });
  }
}
function extractData(resp) {
  Rest.extractData(resp);
  var parser2;
  var req = resp.request;
  var body = resp.httpResponse.body;
  var operation2 = req.service.api.operations[req.operation];
  var output = operation2.output;
  operation2.hasEventOutput;
  var payload2 = output.payload;
  if (payload2) {
    var payloadMember = output.members[payload2];
    if (payloadMember.isEventStream) {
      parser2 = new AWS$y.XML.Parser();
      resp.data[payload2] = util$b.createEventStream(AWS$y.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : resp.httpResponse.body, parser2, payloadMember);
    } else if (payloadMember.type === "structure") {
      parser2 = new AWS$y.XML.Parser();
      resp.data[payload2] = parser2.parse(body.toString(), payloadMember);
    } else if (payloadMember.type === "binary" || payloadMember.isStreaming) {
      resp.data[payload2] = body;
    } else {
      resp.data[payload2] = payloadMember.toType(body);
    }
  } else if (body.length > 0) {
    parser2 = new AWS$y.XML.Parser();
    var data = parser2.parse(body.toString(), output);
    util$b.update(resp.data, data);
  }
}
var rest_xml = {
  buildRequest,
  extractError,
  extractData
};
function escapeAttribute$1(value) {
  return value.replace(/&/g, "&amp;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}
var escapeAttribute_1 = {
  escapeAttribute: escapeAttribute$1
};
var escapeAttribute = escapeAttribute_1.escapeAttribute;
function XmlNode$1(name, children) {
  if (children === void 0) {
    children = [];
  }
  this.name = name;
  this.children = children;
  this.attributes = {};
}
XmlNode$1.prototype.addAttribute = function(name, value) {
  this.attributes[name] = value;
  return this;
};
XmlNode$1.prototype.addChildNode = function(child) {
  this.children.push(child);
  return this;
};
XmlNode$1.prototype.removeAttribute = function(name) {
  delete this.attributes[name];
  return this;
};
XmlNode$1.prototype.toString = function() {
  var hasChildren = Boolean(this.children.length);
  var xmlText2 = "<" + this.name;
  var attributes = this.attributes;
  for (var i = 0, attributeNames = Object.keys(attributes); i < attributeNames.length; i++) {
    var attributeName = attributeNames[i];
    var attribute = attributes[attributeName];
    if (typeof attribute !== "undefined" && attribute !== null) {
      xmlText2 += " " + attributeName + '="' + escapeAttribute("" + attribute) + '"';
    }
  }
  return xmlText2 += !hasChildren ? "/>" : ">" + this.children.map(function(c2) {
    return c2.toString();
  }).join("") + "</" + this.name + ">";
};
var xmlNode = {
  XmlNode: XmlNode$1
};
function escapeElement$1(value) {
  return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
}
var escapeElement_1 = {
  escapeElement: escapeElement$1
};
var escapeElement = escapeElement_1.escapeElement;
function XmlText$1(value) {
  this.value = value;
}
XmlText$1.prototype.toString = function() {
  return escapeElement("" + this.value);
};
var xmlText = {
  XmlText: XmlText$1
};
var util$a = util_1;
var XmlNode = xmlNode.XmlNode;
var XmlText = xmlText.XmlText;
function XmlBuilder() {
}
XmlBuilder.prototype.toXML = function(params, shape2, rootElement, noEmpty) {
  var xml = new XmlNode(rootElement);
  applyNamespaces(xml, shape2, true);
  serialize(xml, params, shape2);
  return xml.children.length > 0 || noEmpty ? xml.toString() : "";
};
function serialize(xml, value, shape2) {
  switch (shape2.type) {
    case "structure":
      return serializeStructure(xml, value, shape2);
    case "map":
      return serializeMap(xml, value, shape2);
    case "list":
      return serializeList(xml, value, shape2);
    default:
      return serializeScalar(xml, value, shape2);
  }
}
function serializeStructure(xml, params, shape2) {
  util$a.arrayEach(shape2.memberNames, function(memberName) {
    var memberShape = shape2.members[memberName];
    if (memberShape.location !== "body")
      return;
    var value = params[memberName];
    var name = memberShape.name;
    if (value !== void 0 && value !== null) {
      if (memberShape.isXmlAttribute) {
        xml.addAttribute(name, value);
      } else if (memberShape.flattened) {
        serialize(xml, value, memberShape);
      } else {
        var element = new XmlNode(name);
        xml.addChildNode(element);
        applyNamespaces(element, memberShape);
        serialize(element, value, memberShape);
      }
    }
  });
}
function serializeMap(xml, map, shape2) {
  var xmlKey = shape2.key.name || "key";
  var xmlValue = shape2.value.name || "value";
  util$a.each(map, function(key, value) {
    var entry = new XmlNode(shape2.flattened ? shape2.name : "entry");
    xml.addChildNode(entry);
    var entryKey = new XmlNode(xmlKey);
    var entryValue = new XmlNode(xmlValue);
    entry.addChildNode(entryKey);
    entry.addChildNode(entryValue);
    serialize(entryKey, key, shape2.key);
    serialize(entryValue, value, shape2.value);
  });
}
function serializeList(xml, list, shape2) {
  if (shape2.flattened) {
    util$a.arrayEach(list, function(value) {
      var name = shape2.member.name || shape2.name;
      var element = new XmlNode(name);
      xml.addChildNode(element);
      serialize(element, value, shape2.member);
    });
  } else {
    util$a.arrayEach(list, function(value) {
      var name = shape2.member.name || "member";
      var element = new XmlNode(name);
      xml.addChildNode(element);
      serialize(element, value, shape2.member);
    });
  }
}
function serializeScalar(xml, value, shape2) {
  xml.addChildNode(new XmlText(shape2.toWireFormat(value)));
}
function applyNamespaces(xml, shape2, isRoot) {
  var uri, prefix = "xmlns";
  if (shape2.xmlNamespaceUri) {
    uri = shape2.xmlNamespaceUri;
    if (shape2.xmlNamespacePrefix)
      prefix += ":" + shape2.xmlNamespacePrefix;
  } else if (isRoot && shape2.api.xmlNamespaceUri) {
    uri = shape2.api.xmlNamespaceUri;
  }
  if (uri)
    xml.addAttribute(prefix, uri);
}
var builder = XmlBuilder;
var Shape$2 = shape;
var util$9 = util_1;
var property$3 = util$9.property;
var memoizedProperty$1 = util$9.memoizedProperty;
function Operation$1(name, operation2, options) {
  var self2 = this;
  options = options || {};
  property$3(this, "name", operation2.name || name);
  property$3(this, "api", options.api, false);
  operation2.http = operation2.http || {};
  property$3(this, "endpoint", operation2.endpoint);
  property$3(this, "httpMethod", operation2.http.method || "POST");
  property$3(this, "httpPath", operation2.http.requestUri || "/");
  property$3(this, "authtype", operation2.authtype || "");
  property$3(this, "endpointDiscoveryRequired", operation2.endpointdiscovery ? operation2.endpointdiscovery.required ? "REQUIRED" : "OPTIONAL" : "NULL");
  var httpChecksumRequired = operation2.httpChecksumRequired || operation2.httpChecksum && operation2.httpChecksum.requestChecksumRequired;
  property$3(this, "httpChecksumRequired", httpChecksumRequired, false);
  memoizedProperty$1(this, "input", function() {
    if (!operation2.input) {
      return new Shape$2.create({ type: "structure" }, options);
    }
    return Shape$2.create(operation2.input, options);
  });
  memoizedProperty$1(this, "output", function() {
    if (!operation2.output) {
      return new Shape$2.create({ type: "structure" }, options);
    }
    return Shape$2.create(operation2.output, options);
  });
  memoizedProperty$1(this, "errors", function() {
    var list = [];
    if (!operation2.errors)
      return null;
    for (var i = 0; i < operation2.errors.length; i++) {
      list.push(Shape$2.create(operation2.errors[i], options));
    }
    return list;
  });
  memoizedProperty$1(this, "paginator", function() {
    return options.api.paginators[name];
  });
  if (options.documentation) {
    property$3(this, "documentation", operation2.documentation);
    property$3(this, "documentationUrl", operation2.documentationUrl);
  }
  memoizedProperty$1(this, "idempotentMembers", function() {
    var idempotentMembers = [];
    var input = self2.input;
    var members = input.members;
    if (!input.members) {
      return idempotentMembers;
    }
    for (var name2 in members) {
      if (!members.hasOwnProperty(name2)) {
        continue;
      }
      if (members[name2].isIdempotent === true) {
        idempotentMembers.push(name2);
      }
    }
    return idempotentMembers;
  });
  memoizedProperty$1(this, "hasEventOutput", function() {
    var output = self2.output;
    return hasEventStream(output);
  });
}
function hasEventStream(topLevelShape) {
  var members = topLevelShape.members;
  var payload2 = topLevelShape.payload;
  if (!topLevelShape.members) {
    return false;
  }
  if (payload2) {
    var payloadMember = members[payload2];
    return payloadMember.isEventStream;
  }
  for (var name in members) {
    if (!members.hasOwnProperty(name)) {
      if (members[name].isEventStream === true) {
        return true;
      }
    }
  }
  return false;
}
var operation = Operation$1;
var property$2 = util_1.property;
function Paginator$1(name, paginator2) {
  property$2(this, "inputToken", paginator2.input_token);
  property$2(this, "limitKey", paginator2.limit_key);
  property$2(this, "moreResults", paginator2.more_results);
  property$2(this, "outputToken", paginator2.output_token);
  property$2(this, "resultKey", paginator2.result_key);
}
var paginator = Paginator$1;
var util$8 = util_1;
var property$1 = util$8.property;
function ResourceWaiter$1(name, waiter, options) {
  options = options || {};
  property$1(this, "name", name);
  property$1(this, "api", options.api, false);
  if (waiter.operation) {
    property$1(this, "operation", util$8.string.lowerFirst(waiter.operation));
  }
  var self2 = this;
  var keys = [
    "type",
    "description",
    "delay",
    "maxAttempts",
    "acceptors"
  ];
  keys.forEach(function(key) {
    var value = waiter[key];
    if (value) {
      property$1(self2, key, value);
    }
  });
}
var resource_waiter = ResourceWaiter$1;
const acm = {
  name: "ACM",
  cors: true
};
const apigateway = {
  name: "APIGateway",
  cors: true
};
const applicationautoscaling = {
  prefix: "application-autoscaling",
  name: "ApplicationAutoScaling",
  cors: true
};
const appstream = {
  name: "AppStream"
};
const autoscaling = {
  name: "AutoScaling",
  cors: true
};
const batch = {
  name: "Batch"
};
const budgets = {
  name: "Budgets"
};
const clouddirectory = {
  name: "CloudDirectory",
  versions: [
    "2016-05-10*"
  ]
};
const cloudformation = {
  name: "CloudFormation",
  cors: true
};
const cloudfront = {
  name: "CloudFront",
  versions: [
    "2013-05-12*",
    "2013-11-11*",
    "2014-05-31*",
    "2014-10-21*",
    "2014-11-06*",
    "2015-04-17*",
    "2015-07-27*",
    "2015-09-17*",
    "2016-01-13*",
    "2016-01-28*",
    "2016-08-01*",
    "2016-08-20*",
    "2016-09-07*",
    "2016-09-29*",
    "2016-11-25*",
    "2017-03-25*",
    "2017-10-30*",
    "2018-06-18*",
    "2018-11-05*",
    "2019-03-26*"
  ],
  cors: true
};
const cloudhsm = {
  name: "CloudHSM",
  cors: true
};
const cloudsearch = {
  name: "CloudSearch"
};
const cloudsearchdomain = {
  name: "CloudSearchDomain"
};
const cloudtrail = {
  name: "CloudTrail",
  cors: true
};
const cloudwatch = {
  prefix: "monitoring",
  name: "CloudWatch",
  cors: true
};
const cloudwatchevents = {
  prefix: "events",
  name: "CloudWatchEvents",
  versions: [
    "2014-02-03*"
  ],
  cors: true
};
const cloudwatchlogs = {
  prefix: "logs",
  name: "CloudWatchLogs",
  cors: true
};
const codebuild = {
  name: "CodeBuild",
  cors: true
};
const codecommit = {
  name: "CodeCommit",
  cors: true
};
const codedeploy = {
  name: "CodeDeploy",
  cors: true
};
const codepipeline = {
  name: "CodePipeline",
  cors: true
};
const cognitoidentity$1 = {
  prefix: "cognito-identity",
  name: "CognitoIdentity",
  cors: true
};
const cognitoidentityserviceprovider = {
  prefix: "cognito-idp",
  name: "CognitoIdentityServiceProvider",
  cors: true
};
const cognitosync = {
  prefix: "cognito-sync",
  name: "CognitoSync",
  cors: true
};
const configservice = {
  prefix: "config",
  name: "ConfigService",
  cors: true
};
const cur = {
  name: "CUR",
  cors: true
};
const datapipeline = {
  name: "DataPipeline"
};
const devicefarm = {
  name: "DeviceFarm",
  cors: true
};
const directconnect = {
  name: "DirectConnect",
  cors: true
};
const directoryservice = {
  prefix: "ds",
  name: "DirectoryService"
};
const discovery = {
  name: "Discovery"
};
const dms = {
  name: "DMS"
};
const dynamodb = {
  name: "DynamoDB",
  cors: true
};
const dynamodbstreams = {
  prefix: "streams.dynamodb",
  name: "DynamoDBStreams",
  cors: true
};
const ec2 = {
  name: "EC2",
  versions: [
    "2013-06-15*",
    "2013-10-15*",
    "2014-02-01*",
    "2014-05-01*",
    "2014-06-15*",
    "2014-09-01*",
    "2014-10-01*",
    "2015-03-01*",
    "2015-04-15*",
    "2015-10-01*",
    "2016-04-01*",
    "2016-09-15*"
  ],
  cors: true
};
const ecr = {
  name: "ECR",
  cors: true
};
const ecs = {
  name: "ECS",
  cors: true
};
const efs = {
  prefix: "elasticfilesystem",
  name: "EFS",
  cors: true
};
const elasticache = {
  name: "ElastiCache",
  versions: [
    "2012-11-15*",
    "2014-03-24*",
    "2014-07-15*",
    "2014-09-30*"
  ],
  cors: true
};
const elasticbeanstalk = {
  name: "ElasticBeanstalk",
  cors: true
};
const elb = {
  prefix: "elasticloadbalancing",
  name: "ELB",
  cors: true
};
const elbv2 = {
  prefix: "elasticloadbalancingv2",
  name: "ELBv2",
  cors: true
};
const emr = {
  prefix: "elasticmapreduce",
  name: "EMR",
  cors: true
};
const es = {
  name: "ES"
};
const elastictranscoder = {
  name: "ElasticTranscoder",
  cors: true
};
const firehose = {
  name: "Firehose",
  cors: true
};
const gamelift = {
  name: "GameLift",
  cors: true
};
const glacier = {
  name: "Glacier"
};
const health = {
  name: "Health"
};
const iam = {
  name: "IAM",
  cors: true
};
const importexport = {
  name: "ImportExport"
};
const inspector = {
  name: "Inspector",
  versions: [
    "2015-08-18*"
  ],
  cors: true
};
const iot = {
  name: "Iot",
  cors: true
};
const iotdata = {
  prefix: "iot-data",
  name: "IotData",
  cors: true
};
const kinesis = {
  name: "Kinesis",
  cors: true
};
const kinesisanalytics = {
  name: "KinesisAnalytics"
};
const kms = {
  name: "KMS",
  cors: true
};
const lambda = {
  name: "Lambda",
  cors: true
};
const lexruntime = {
  prefix: "runtime.lex",
  name: "LexRuntime",
  cors: true
};
const lightsail = {
  name: "Lightsail"
};
const machinelearning = {
  name: "MachineLearning",
  cors: true
};
const marketplacecommerceanalytics = {
  name: "MarketplaceCommerceAnalytics",
  cors: true
};
const marketplacemetering = {
  prefix: "meteringmarketplace",
  name: "MarketplaceMetering"
};
const mturk = {
  prefix: "mturk-requester",
  name: "MTurk",
  cors: true
};
const mobileanalytics = {
  name: "MobileAnalytics",
  cors: true
};
const opsworks = {
  name: "OpsWorks",
  cors: true
};
const opsworkscm = {
  name: "OpsWorksCM"
};
const organizations = {
  name: "Organizations"
};
const pinpoint = {
  name: "Pinpoint"
};
const polly = {
  name: "Polly",
  cors: true
};
const rds = {
  name: "RDS",
  versions: [
    "2014-09-01*"
  ],
  cors: true
};
const redshift = {
  name: "Redshift",
  cors: true
};
const rekognition = {
  name: "Rekognition",
  cors: true
};
const resourcegroupstaggingapi = {
  name: "ResourceGroupsTaggingAPI"
};
const route53 = {
  name: "Route53",
  cors: true
};
const route53domains = {
  name: "Route53Domains",
  cors: true
};
const s3 = {
  name: "S3",
  dualstackAvailable: true,
  cors: true
};
const s3control = {
  name: "S3Control",
  dualstackAvailable: true,
  xmlNoDefaultLists: true
};
const servicecatalog = {
  name: "ServiceCatalog",
  cors: true
};
const ses = {
  prefix: "email",
  name: "SES",
  cors: true
};
const shield = {
  name: "Shield"
};
const simpledb = {
  prefix: "sdb",
  name: "SimpleDB"
};
const sms = {
  name: "SMS"
};
const snowball = {
  name: "Snowball"
};
const sns = {
  name: "SNS",
  cors: true
};
const sqs = {
  name: "SQS",
  cors: true
};
const ssm = {
  name: "SSM",
  cors: true
};
const storagegateway = {
  name: "StorageGateway",
  cors: true
};
const stepfunctions = {
  prefix: "states",
  name: "StepFunctions"
};
const sts$1 = {
  name: "STS",
  cors: true
};
const support = {
  name: "Support"
};
const swf = {
  name: "SWF"
};
const xray = {
  name: "XRay",
  cors: true
};
const waf = {
  name: "WAF",
  cors: true
};
const wafregional = {
  prefix: "waf-regional",
  name: "WAFRegional"
};
const workdocs = {
  name: "WorkDocs",
  cors: true
};
const workspaces = {
  name: "WorkSpaces"
};
const codestar = {
  name: "CodeStar"
};
const lexmodelbuildingservice = {
  prefix: "lex-models",
  name: "LexModelBuildingService",
  cors: true
};
const marketplaceentitlementservice = {
  prefix: "entitlement.marketplace",
  name: "MarketplaceEntitlementService"
};
const athena = {
  name: "Athena",
  cors: true
};
const greengrass = {
  name: "Greengrass"
};
const dax = {
  name: "DAX"
};
const migrationhub = {
  prefix: "AWSMigrationHub",
  name: "MigrationHub"
};
const cloudhsmv2 = {
  name: "CloudHSMV2",
  cors: true
};
const glue = {
  name: "Glue"
};
const mobile = {
  name: "Mobile"
};
const pricing = {
  name: "Pricing",
  cors: true
};
const costexplorer = {
  prefix: "ce",
  name: "CostExplorer",
  cors: true
};
const mediaconvert = {
  name: "MediaConvert"
};
const medialive = {
  name: "MediaLive"
};
const mediapackage = {
  name: "MediaPackage"
};
const mediastore = {
  name: "MediaStore"
};
const mediastoredata = {
  prefix: "mediastore-data",
  name: "MediaStoreData",
  cors: true
};
const appsync = {
  name: "AppSync"
};
const guardduty = {
  name: "GuardDuty"
};
const mq = {
  name: "MQ"
};
const comprehend = {
  name: "Comprehend",
  cors: true
};
const iotjobsdataplane = {
  prefix: "iot-jobs-data",
  name: "IoTJobsDataPlane"
};
const kinesisvideoarchivedmedia = {
  prefix: "kinesis-video-archived-media",
  name: "KinesisVideoArchivedMedia",
  cors: true
};
const kinesisvideomedia = {
  prefix: "kinesis-video-media",
  name: "KinesisVideoMedia",
  cors: true
};
const kinesisvideo = {
  name: "KinesisVideo",
  cors: true
};
const sagemakerruntime = {
  prefix: "runtime.sagemaker",
  name: "SageMakerRuntime"
};
const sagemaker = {
  name: "SageMaker"
};
const translate = {
  name: "Translate",
  cors: true
};
const resourcegroups = {
  prefix: "resource-groups",
  name: "ResourceGroups",
  cors: true
};
const alexaforbusiness = {
  name: "AlexaForBusiness"
};
const cloud9 = {
  name: "Cloud9"
};
const serverlessapplicationrepository = {
  prefix: "serverlessrepo",
  name: "ServerlessApplicationRepository"
};
const servicediscovery = {
  name: "ServiceDiscovery"
};
const workmail = {
  name: "WorkMail"
};
const autoscalingplans = {
  prefix: "autoscaling-plans",
  name: "AutoScalingPlans"
};
const transcribeservice = {
  prefix: "transcribe",
  name: "TranscribeService"
};
const connect = {
  name: "Connect",
  cors: true
};
const acmpca = {
  prefix: "acm-pca",
  name: "ACMPCA"
};
const fms = {
  name: "FMS"
};
const secretsmanager = {
  name: "SecretsManager",
  cors: true
};
const iotanalytics = {
  name: "IoTAnalytics",
  cors: true
};
const iot1clickdevicesservice = {
  prefix: "iot1click-devices",
  name: "IoT1ClickDevicesService"
};
const iot1clickprojects = {
  prefix: "iot1click-projects",
  name: "IoT1ClickProjects"
};
const pi = {
  name: "PI"
};
const neptune = {
  name: "Neptune"
};
const mediatailor = {
  name: "MediaTailor"
};
const eks = {
  name: "EKS"
};
const macie = {
  name: "Macie"
};
const dlm = {
  name: "DLM"
};
const signer = {
  name: "Signer"
};
const chime = {
  name: "Chime"
};
const pinpointemail = {
  prefix: "pinpoint-email",
  name: "PinpointEmail"
};
const ram = {
  name: "RAM"
};
const route53resolver = {
  name: "Route53Resolver"
};
const pinpointsmsvoice = {
  prefix: "sms-voice",
  name: "PinpointSMSVoice"
};
const quicksight = {
  name: "QuickSight"
};
const rdsdataservice = {
  prefix: "rds-data",
  name: "RDSDataService"
};
const amplify = {
  name: "Amplify"
};
const datasync = {
  name: "DataSync"
};
const robomaker = {
  name: "RoboMaker"
};
const transfer = {
  name: "Transfer"
};
const globalaccelerator = {
  name: "GlobalAccelerator"
};
const comprehendmedical = {
  name: "ComprehendMedical",
  cors: true
};
const kinesisanalyticsv2 = {
  name: "KinesisAnalyticsV2"
};
const mediaconnect = {
  name: "MediaConnect"
};
const fsx = {
  name: "FSx"
};
const securityhub = {
  name: "SecurityHub"
};
const appmesh = {
  name: "AppMesh",
  versions: [
    "2018-10-01*"
  ]
};
const licensemanager = {
  prefix: "license-manager",
  name: "LicenseManager"
};
const kafka = {
  name: "Kafka"
};
const apigatewaymanagementapi = {
  name: "ApiGatewayManagementApi"
};
const apigatewayv2 = {
  name: "ApiGatewayV2"
};
const docdb = {
  name: "DocDB"
};
const backup = {
  name: "Backup"
};
const worklink = {
  name: "WorkLink"
};
const textract = {
  name: "Textract"
};
const managedblockchain = {
  name: "ManagedBlockchain"
};
const mediapackagevod = {
  prefix: "mediapackage-vod",
  name: "MediaPackageVod"
};
const groundstation = {
  name: "GroundStation"
};
const iotthingsgraph = {
  name: "IoTThingsGraph"
};
const iotevents = {
  name: "IoTEvents"
};
const ioteventsdata = {
  prefix: "iotevents-data",
  name: "IoTEventsData"
};
const personalize = {
  name: "Personalize",
  cors: true
};
const personalizeevents = {
  prefix: "personalize-events",
  name: "PersonalizeEvents",
  cors: true
};
const personalizeruntime = {
  prefix: "personalize-runtime",
  name: "PersonalizeRuntime",
  cors: true
};
const applicationinsights = {
  prefix: "application-insights",
  name: "ApplicationInsights"
};
const servicequotas = {
  prefix: "service-quotas",
  name: "ServiceQuotas"
};
const ec2instanceconnect = {
  prefix: "ec2-instance-connect",
  name: "EC2InstanceConnect"
};
const eventbridge = {
  name: "EventBridge"
};
const lakeformation = {
  name: "LakeFormation"
};
const forecastservice = {
  prefix: "forecast",
  name: "ForecastService",
  cors: true
};
const forecastqueryservice = {
  prefix: "forecastquery",
  name: "ForecastQueryService",
  cors: true
};
const qldb = {
  name: "QLDB"
};
const qldbsession = {
  prefix: "qldb-session",
  name: "QLDBSession"
};
const workmailmessageflow = {
  name: "WorkMailMessageFlow"
};
const codestarnotifications = {
  prefix: "codestar-notifications",
  name: "CodeStarNotifications"
};
const savingsplans = {
  name: "SavingsPlans"
};
const sso = {
  name: "SSO"
};
const ssooidc = {
  prefix: "sso-oidc",
  name: "SSOOIDC"
};
const marketplacecatalog = {
  prefix: "marketplace-catalog",
  name: "MarketplaceCatalog"
};
const dataexchange = {
  name: "DataExchange"
};
const sesv2 = {
  name: "SESV2"
};
const migrationhubconfig = {
  prefix: "migrationhub-config",
  name: "MigrationHubConfig"
};
const connectparticipant = {
  name: "ConnectParticipant"
};
const appconfig = {
  name: "AppConfig"
};
const iotsecuretunneling = {
  name: "IoTSecureTunneling"
};
const wafv2 = {
  name: "WAFV2"
};
const elasticinference = {
  prefix: "elastic-inference",
  name: "ElasticInference"
};
const imagebuilder = {
  name: "Imagebuilder"
};
const schemas = {
  name: "Schemas"
};
const accessanalyzer = {
  name: "AccessAnalyzer"
};
const codegurureviewer = {
  prefix: "codeguru-reviewer",
  name: "CodeGuruReviewer"
};
const codeguruprofiler = {
  name: "CodeGuruProfiler"
};
const computeoptimizer = {
  prefix: "compute-optimizer",
  name: "ComputeOptimizer"
};
const frauddetector = {
  name: "FraudDetector"
};
const kendra = {
  name: "Kendra"
};
const networkmanager = {
  name: "NetworkManager"
};
const outposts = {
  name: "Outposts"
};
const augmentedairuntime = {
  prefix: "sagemaker-a2i-runtime",
  name: "AugmentedAIRuntime"
};
const ebs = {
  name: "EBS"
};
const kinesisvideosignalingchannels = {
  prefix: "kinesis-video-signaling",
  name: "KinesisVideoSignalingChannels",
  cors: true
};
const detective = {
  name: "Detective"
};
const codestarconnections = {
  prefix: "codestar-connections",
  name: "CodeStarconnections"
};
const synthetics = {
  name: "Synthetics"
};
const iotsitewise = {
  name: "IoTSiteWise"
};
const macie2 = {
  name: "Macie2"
};
const codeartifact = {
  name: "CodeArtifact"
};
const honeycode = {
  name: "Honeycode"
};
const ivs = {
  name: "IVS"
};
const braket = {
  name: "Braket"
};
const identitystore = {
  name: "IdentityStore"
};
const appflow = {
  name: "Appflow"
};
const redshiftdata = {
  prefix: "redshift-data",
  name: "RedshiftData"
};
const ssoadmin = {
  prefix: "sso-admin",
  name: "SSOAdmin"
};
const timestreamquery = {
  prefix: "timestream-query",
  name: "TimestreamQuery"
};
const timestreamwrite = {
  prefix: "timestream-write",
  name: "TimestreamWrite"
};
const s3outposts = {
  name: "S3Outposts"
};
const databrew = {
  name: "DataBrew"
};
const servicecatalogappregistry = {
  prefix: "servicecatalog-appregistry",
  name: "ServiceCatalogAppRegistry"
};
const networkfirewall = {
  prefix: "network-firewall",
  name: "NetworkFirewall"
};
const mwaa = {
  name: "MWAA"
};
const amplifybackend = {
  name: "AmplifyBackend"
};
const appintegrations = {
  name: "AppIntegrations"
};
const connectcontactlens = {
  prefix: "connect-contact-lens",
  name: "ConnectContactLens"
};
const devopsguru = {
  prefix: "devops-guru",
  name: "DevOpsGuru"
};
const ecrpublic = {
  prefix: "ecr-public",
  name: "ECRPUBLIC"
};
const lookoutvision = {
  name: "LookoutVision"
};
const sagemakerfeaturestoreruntime = {
  prefix: "sagemaker-featurestore-runtime",
  name: "SageMakerFeatureStoreRuntime"
};
const customerprofiles = {
  prefix: "customer-profiles",
  name: "CustomerProfiles"
};
const auditmanager = {
  name: "AuditManager"
};
const emrcontainers = {
  prefix: "emr-containers",
  name: "EMRcontainers"
};
const healthlake = {
  name: "HealthLake"
};
const sagemakeredge = {
  prefix: "sagemaker-edge",
  name: "SagemakerEdge"
};
const amp = {
  name: "Amp"
};
const greengrassv2 = {
  name: "GreengrassV2"
};
const iotdeviceadvisor = {
  name: "IotDeviceAdvisor"
};
const iotfleethub = {
  name: "IoTFleetHub"
};
const iotwireless = {
  name: "IoTWireless"
};
const location = {
  name: "Location",
  cors: true
};
const wellarchitected = {
  name: "WellArchitected"
};
const lexmodelsv2 = {
  prefix: "models.lex.v2",
  name: "LexModelsV2"
};
const lexruntimev2 = {
  prefix: "runtime.lex.v2",
  name: "LexRuntimeV2",
  cors: true
};
const fis = {
  name: "Fis"
};
const lookoutmetrics = {
  name: "LookoutMetrics"
};
const mgn = {
  name: "Mgn"
};
const lookoutequipment = {
  name: "LookoutEquipment"
};
const nimble = {
  name: "Nimble"
};
const finspace = {
  name: "Finspace"
};
const finspacedata = {
  prefix: "finspace-data",
  name: "Finspacedata"
};
const ssmcontacts = {
  prefix: "ssm-contacts",
  name: "SSMContacts"
};
const ssmincidents = {
  prefix: "ssm-incidents",
  name: "SSMIncidents"
};
const applicationcostprofiler = {
  name: "ApplicationCostProfiler"
};
const apprunner = {
  name: "AppRunner"
};
const proton = {
  name: "Proton"
};
const route53recoverycluster = {
  prefix: "route53-recovery-cluster",
  name: "Route53RecoveryCluster"
};
const route53recoverycontrolconfig = {
  prefix: "route53-recovery-control-config",
  name: "Route53RecoveryControlConfig"
};
const route53recoveryreadiness = {
  prefix: "route53-recovery-readiness",
  name: "Route53RecoveryReadiness"
};
const chimesdkidentity = {
  prefix: "chime-sdk-identity",
  name: "ChimeSDKIdentity"
};
const chimesdkmessaging = {
  prefix: "chime-sdk-messaging",
  name: "ChimeSDKMessaging"
};
const snowdevicemanagement = {
  prefix: "snow-device-management",
  name: "SnowDeviceManagement"
};
const memorydb = {
  name: "MemoryDB"
};
const opensearch = {
  name: "OpenSearch"
};
const kafkaconnect = {
  name: "KafkaConnect"
};
const voiceid = {
  prefix: "voice-id",
  name: "VoiceID"
};
const wisdom = {
  name: "Wisdom"
};
const account = {
  name: "Account"
};
const cloudcontrol = {
  name: "CloudControl"
};
const grafana = {
  name: "Grafana"
};
const panorama = {
  name: "Panorama"
};
const chimesdkmeetings = {
  prefix: "chime-sdk-meetings",
  name: "ChimeSDKMeetings"
};
const resiliencehub = {
  name: "Resiliencehub"
};
const migrationhubstrategy = {
  name: "MigrationHubStrategy"
};
const appconfigdata = {
  name: "AppConfigData"
};
const drs = {
  name: "Drs"
};
const migrationhubrefactorspaces = {
  prefix: "migration-hub-refactor-spaces",
  name: "MigrationHubRefactorSpaces"
};
const evidently = {
  name: "Evidently"
};
const inspector2 = {
  name: "Inspector2"
};
const rbin = {
  name: "Rbin"
};
const rum = {
  name: "RUM"
};
const backupgateway = {
  prefix: "backup-gateway",
  name: "BackupGateway"
};
const iottwinmaker = {
  name: "IoTTwinMaker"
};
const workspacesweb = {
  prefix: "workspaces-web",
  name: "WorkSpacesWeb"
};
const amplifyuibuilder = {
  name: "AmplifyUIBuilder"
};
const keyspaces = {
  name: "Keyspaces"
};
var require$$2$2 = {
  acm,
  apigateway,
  applicationautoscaling,
  appstream,
  autoscaling,
  batch,
  budgets,
  clouddirectory,
  cloudformation,
  cloudfront,
  cloudhsm,
  cloudsearch,
  cloudsearchdomain,
  cloudtrail,
  cloudwatch,
  cloudwatchevents,
  cloudwatchlogs,
  codebuild,
  codecommit,
  codedeploy,
  codepipeline,
  cognitoidentity: cognitoidentity$1,
  cognitoidentityserviceprovider,
  cognitosync,
  configservice,
  cur,
  datapipeline,
  devicefarm,
  directconnect,
  directoryservice,
  discovery,
  dms,
  dynamodb,
  dynamodbstreams,
  ec2,
  ecr,
  ecs,
  efs,
  elasticache,
  elasticbeanstalk,
  elb,
  elbv2,
  emr,
  es,
  elastictranscoder,
  firehose,
  gamelift,
  glacier,
  health,
  iam,
  importexport,
  inspector,
  iot,
  iotdata,
  kinesis,
  kinesisanalytics,
  kms,
  lambda,
  lexruntime,
  lightsail,
  machinelearning,
  marketplacecommerceanalytics,
  marketplacemetering,
  mturk,
  mobileanalytics,
  opsworks,
  opsworkscm,
  organizations,
  pinpoint,
  polly,
  rds,
  redshift,
  rekognition,
  resourcegroupstaggingapi,
  route53,
  route53domains,
  s3,
  s3control,
  servicecatalog,
  ses,
  shield,
  simpledb,
  sms,
  snowball,
  sns,
  sqs,
  ssm,
  storagegateway,
  stepfunctions,
  sts: sts$1,
  support,
  swf,
  xray,
  waf,
  wafregional,
  workdocs,
  workspaces,
  codestar,
  lexmodelbuildingservice,
  marketplaceentitlementservice,
  athena,
  greengrass,
  dax,
  migrationhub,
  cloudhsmv2,
  glue,
  mobile,
  pricing,
  costexplorer,
  mediaconvert,
  medialive,
  mediapackage,
  mediastore,
  mediastoredata,
  appsync,
  guardduty,
  mq,
  comprehend,
  iotjobsdataplane,
  kinesisvideoarchivedmedia,
  kinesisvideomedia,
  kinesisvideo,
  sagemakerruntime,
  sagemaker,
  translate,
  resourcegroups,
  alexaforbusiness,
  cloud9,
  serverlessapplicationrepository,
  servicediscovery,
  workmail,
  autoscalingplans,
  transcribeservice,
  connect,
  acmpca,
  fms,
  secretsmanager,
  iotanalytics,
  iot1clickdevicesservice,
  iot1clickprojects,
  pi,
  neptune,
  mediatailor,
  eks,
  macie,
  dlm,
  signer,
  chime,
  pinpointemail,
  ram,
  route53resolver,
  pinpointsmsvoice,
  quicksight,
  rdsdataservice,
  amplify,
  datasync,
  robomaker,
  transfer,
  globalaccelerator,
  comprehendmedical,
  kinesisanalyticsv2,
  mediaconnect,
  fsx,
  securityhub,
  appmesh,
  licensemanager,
  kafka,
  apigatewaymanagementapi,
  apigatewayv2,
  docdb,
  backup,
  worklink,
  textract,
  managedblockchain,
  mediapackagevod,
  groundstation,
  iotthingsgraph,
  iotevents,
  ioteventsdata,
  personalize,
  personalizeevents,
  personalizeruntime,
  applicationinsights,
  servicequotas,
  ec2instanceconnect,
  eventbridge,
  lakeformation,
  forecastservice,
  forecastqueryservice,
  qldb,
  qldbsession,
  workmailmessageflow,
  codestarnotifications,
  savingsplans,
  sso,
  ssooidc,
  marketplacecatalog,
  dataexchange,
  sesv2,
  migrationhubconfig,
  connectparticipant,
  appconfig,
  iotsecuretunneling,
  wafv2,
  elasticinference,
  imagebuilder,
  schemas,
  accessanalyzer,
  codegurureviewer,
  codeguruprofiler,
  computeoptimizer,
  frauddetector,
  kendra,
  networkmanager,
  outposts,
  augmentedairuntime,
  ebs,
  kinesisvideosignalingchannels,
  detective,
  codestarconnections,
  synthetics,
  iotsitewise,
  macie2,
  codeartifact,
  honeycode,
  ivs,
  braket,
  identitystore,
  appflow,
  redshiftdata,
  ssoadmin,
  timestreamquery,
  timestreamwrite,
  s3outposts,
  databrew,
  servicecatalogappregistry,
  networkfirewall,
  mwaa,
  amplifybackend,
  appintegrations,
  connectcontactlens,
  devopsguru,
  ecrpublic,
  lookoutvision,
  sagemakerfeaturestoreruntime,
  customerprofiles,
  auditmanager,
  emrcontainers,
  healthlake,
  sagemakeredge,
  amp,
  greengrassv2,
  iotdeviceadvisor,
  iotfleethub,
  iotwireless,
  location,
  wellarchitected,
  lexmodelsv2,
  lexruntimev2,
  fis,
  lookoutmetrics,
  mgn,
  lookoutequipment,
  nimble,
  finspace,
  finspacedata,
  ssmcontacts,
  ssmincidents,
  applicationcostprofiler,
  apprunner,
  proton,
  route53recoverycluster,
  route53recoverycontrolconfig,
  route53recoveryreadiness,
  chimesdkidentity,
  chimesdkmessaging,
  snowdevicemanagement,
  memorydb,
  opensearch,
  kafkaconnect,
  voiceid,
  wisdom,
  account,
  cloudcontrol,
  grafana,
  panorama,
  chimesdkmeetings,
  resiliencehub,
  migrationhubstrategy,
  appconfigdata,
  drs,
  migrationhubrefactorspaces,
  evidently,
  inspector2,
  rbin,
  rum,
  backupgateway,
  iottwinmaker,
  workspacesweb,
  amplifyuibuilder,
  keyspaces
};
var Collection = collection;
var Operation = operation;
var Shape$1 = shape;
var Paginator = paginator;
var ResourceWaiter = resource_waiter;
var metadata$2 = require$$2$2;
var util$7 = util_1;
var property = util$7.property;
var memoizedProperty = util$7.memoizedProperty;
function Api$1(api2, options) {
  var self2 = this;
  api2 = api2 || {};
  options = options || {};
  options.api = this;
  api2.metadata = api2.metadata || {};
  var serviceIdentifier = options.serviceIdentifier;
  delete options.serviceIdentifier;
  property(this, "isApi", true, false);
  property(this, "apiVersion", api2.metadata.apiVersion);
  property(this, "endpointPrefix", api2.metadata.endpointPrefix);
  property(this, "signingName", api2.metadata.signingName);
  property(this, "globalEndpoint", api2.metadata.globalEndpoint);
  property(this, "signatureVersion", api2.metadata.signatureVersion);
  property(this, "jsonVersion", api2.metadata.jsonVersion);
  property(this, "targetPrefix", api2.metadata.targetPrefix);
  property(this, "protocol", api2.metadata.protocol);
  property(this, "timestampFormat", api2.metadata.timestampFormat);
  property(this, "xmlNamespaceUri", api2.metadata.xmlNamespace);
  property(this, "abbreviation", api2.metadata.serviceAbbreviation);
  property(this, "fullName", api2.metadata.serviceFullName);
  property(this, "serviceId", api2.metadata.serviceId);
  if (serviceIdentifier && metadata$2[serviceIdentifier]) {
    property(this, "xmlNoDefaultLists", metadata$2[serviceIdentifier].xmlNoDefaultLists, false);
  }
  memoizedProperty(this, "className", function() {
    var name = api2.metadata.serviceAbbreviation || api2.metadata.serviceFullName;
    if (!name)
      return null;
    name = name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g, "");
    if (name === "ElasticLoadBalancing")
      name = "ELB";
    return name;
  });
  function addEndpointOperation(name, operation2) {
    if (operation2.endpointoperation === true) {
      property(self2, "endpointOperation", util$7.string.lowerFirst(name));
    }
    if (operation2.endpointdiscovery && !self2.hasRequiredEndpointDiscovery) {
      property(self2, "hasRequiredEndpointDiscovery", operation2.endpointdiscovery.required === true);
    }
  }
  property(this, "operations", new Collection(api2.operations, options, function(name, operation2) {
    return new Operation(name, operation2, options);
  }, util$7.string.lowerFirst, addEndpointOperation));
  property(this, "shapes", new Collection(api2.shapes, options, function(name, shape2) {
    return Shape$1.create(shape2, options);
  }));
  property(this, "paginators", new Collection(api2.paginators, options, function(name, paginator2) {
    return new Paginator(name, paginator2, options);
  }));
  property(this, "waiters", new Collection(api2.waiters, options, function(name, waiter) {
    return new ResourceWaiter(name, waiter, options);
  }, util$7.string.lowerFirst));
  if (options.documentation) {
    property(this, "documentation", api2.documentation);
    property(this, "documentationUrl", api2.documentationUrl);
  }
}
var api = Api$1;
function apiLoader$2(svc, version2) {
  if (!apiLoader$2.services.hasOwnProperty(svc)) {
    throw new Error("InvalidService: Failed to load api for " + svc);
  }
  return apiLoader$2.services[svc][version2];
}
apiLoader$2.services = {};
var api_loader = apiLoader$2;
var endpointCache = {};
var LRU = {};
Object.defineProperty(LRU, "__esModule", { value: true });
var LinkedListNode = function() {
  function LinkedListNode2(key, value) {
    this.key = key;
    this.value = value;
  }
  return LinkedListNode2;
}();
var LRUCache = function() {
  function LRUCache2(size) {
    this.nodeMap = {};
    this.size = 0;
    if (typeof size !== "number" || size < 1) {
      throw new Error("Cache size can only be positive number");
    }
    this.sizeLimit = size;
  }
  Object.defineProperty(LRUCache2.prototype, "length", {
    get: function() {
      return this.size;
    },
    enumerable: true,
    configurable: true
  });
  LRUCache2.prototype.prependToList = function(node) {
    if (!this.headerNode) {
      this.tailNode = node;
    } else {
      this.headerNode.prev = node;
      node.next = this.headerNode;
    }
    this.headerNode = node;
    this.size++;
  };
  LRUCache2.prototype.removeFromTail = function() {
    if (!this.tailNode) {
      return void 0;
    }
    var node = this.tailNode;
    var prevNode = node.prev;
    if (prevNode) {
      prevNode.next = void 0;
    }
    node.prev = void 0;
    this.tailNode = prevNode;
    this.size--;
    return node;
  };
  LRUCache2.prototype.detachFromList = function(node) {
    if (this.headerNode === node) {
      this.headerNode = node.next;
    }
    if (this.tailNode === node) {
      this.tailNode = node.prev;
    }
    if (node.prev) {
      node.prev.next = node.next;
    }
    if (node.next) {
      node.next.prev = node.prev;
    }
    node.next = void 0;
    node.prev = void 0;
    this.size--;
  };
  LRUCache2.prototype.get = function(key) {
    if (this.nodeMap[key]) {
      var node = this.nodeMap[key];
      this.detachFromList(node);
      this.prependToList(node);
      return node.value;
    }
  };
  LRUCache2.prototype.remove = function(key) {
    if (this.nodeMap[key]) {
      var node = this.nodeMap[key];
      this.detachFromList(node);
      delete this.nodeMap[key];
    }
  };
  LRUCache2.prototype.put = function(key, value) {
    if (this.nodeMap[key]) {
      this.remove(key);
    } else if (this.size === this.sizeLimit) {
      var tailNode = this.removeFromTail();
      var key_1 = tailNode.key;
      delete this.nodeMap[key_1];
    }
    var newNode = new LinkedListNode(key, value);
    this.nodeMap[key] = newNode;
    this.prependToList(newNode);
  };
  LRUCache2.prototype.empty = function() {
    var keys = Object.keys(this.nodeMap);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var node = this.nodeMap[key];
      this.detachFromList(node);
      delete this.nodeMap[key];
    }
  };
  return LRUCache2;
}();
LRU.LRUCache = LRUCache;
Object.defineProperty(endpointCache, "__esModule", { value: true });
var LRU_1 = LRU;
var CACHE_SIZE = 1e3;
var EndpointCache = function() {
  function EndpointCache2(maxSize) {
    if (maxSize === void 0) {
      maxSize = CACHE_SIZE;
    }
    this.maxSize = maxSize;
    this.cache = new LRU_1.LRUCache(maxSize);
  }
  Object.defineProperty(EndpointCache2.prototype, "size", {
    get: function() {
      return this.cache.length;
    },
    enumerable: true,
    configurable: true
  });
  EndpointCache2.prototype.put = function(key, value) {
    var keyString = typeof key !== "string" ? EndpointCache2.getKeyString(key) : key;
    var endpointRecord = this.populateValue(value);
    this.cache.put(keyString, endpointRecord);
  };
  EndpointCache2.prototype.get = function(key) {
    var keyString = typeof key !== "string" ? EndpointCache2.getKeyString(key) : key;
    var now3 = Date.now();
    var records = this.cache.get(keyString);
    if (records) {
      for (var i = records.length - 1; i >= 0; i--) {
        var record = records[i];
        if (record.Expire < now3) {
          records.splice(i, 1);
        }
      }
      if (records.length === 0) {
        this.cache.remove(keyString);
        return void 0;
      }
    }
    return records;
  };
  EndpointCache2.getKeyString = function(key) {
    var identifiers = [];
    var identifierNames = Object.keys(key).sort();
    for (var i = 0; i < identifierNames.length; i++) {
      var identifierName = identifierNames[i];
      if (key[identifierName] === void 0)
        continue;
      identifiers.push(key[identifierName]);
    }
    return identifiers.join(" ");
  };
  EndpointCache2.prototype.populateValue = function(endpoints) {
    var now3 = Date.now();
    return endpoints.map(function(endpoint) {
      return {
        Address: endpoint.Address || "",
        Expire: now3 + (endpoint.CachePeriodInMinutes || 1) * 60 * 1e3
      };
    });
  };
  EndpointCache2.prototype.empty = function() {
    this.cache.empty();
  };
  EndpointCache2.prototype.remove = function(key) {
    var keyString = typeof key !== "string" ? EndpointCache2.getKeyString(key) : key;
    this.cache.remove(keyString);
  };
  return EndpointCache2;
}();
endpointCache.EndpointCache = EndpointCache;
var AWS$x = core;
AWS$x.SequentialExecutor = AWS$x.util.inherit({
  constructor: function SequentialExecutor() {
    this._events = {};
  },
  listeners: function listeners(eventName) {
    return this._events[eventName] ? this._events[eventName].slice(0) : [];
  },
  on: function on2(eventName, listener, toHead) {
    if (this._events[eventName]) {
      toHead ? this._events[eventName].unshift(listener) : this._events[eventName].push(listener);
    } else {
      this._events[eventName] = [listener];
    }
    return this;
  },
  onAsync: function onAsync(eventName, listener, toHead) {
    listener._isAsync = true;
    return this.on(eventName, listener, toHead);
  },
  removeListener: function removeListener(eventName, listener) {
    var listeners2 = this._events[eventName];
    if (listeners2) {
      var length = listeners2.length;
      var position = -1;
      for (var i = 0; i < length; ++i) {
        if (listeners2[i] === listener) {
          position = i;
        }
      }
      if (position > -1) {
        listeners2.splice(position, 1);
      }
    }
    return this;
  },
  removeAllListeners: function removeAllListeners(eventName) {
    if (eventName) {
      delete this._events[eventName];
    } else {
      this._events = {};
    }
    return this;
  },
  emit: function emit(eventName, eventArgs, doneCallback) {
    if (!doneCallback)
      doneCallback = function() {
      };
    var listeners2 = this.listeners(eventName);
    var count = listeners2.length;
    this.callListeners(listeners2, eventArgs, doneCallback);
    return count > 0;
  },
  callListeners: function callListeners(listeners2, args, doneCallback, prevError) {
    var self2 = this;
    var error2 = prevError || null;
    function callNextListener(err) {
      if (err) {
        error2 = AWS$x.util.error(error2 || new Error(), err);
        if (self2._haltHandlersOnError) {
          return doneCallback.call(self2, error2);
        }
      }
      self2.callListeners(listeners2, args, doneCallback, error2);
    }
    while (listeners2.length > 0) {
      var listener = listeners2.shift();
      if (listener._isAsync) {
        listener.apply(self2, args.concat([callNextListener]));
        return;
      } else {
        try {
          listener.apply(self2, args);
        } catch (err) {
          error2 = AWS$x.util.error(error2 || new Error(), err);
        }
        if (error2 && self2._haltHandlersOnError) {
          doneCallback.call(self2, error2);
          return;
        }
      }
    }
    doneCallback.call(self2, error2);
  },
  addListeners: function addListeners(listeners2) {
    var self2 = this;
    if (listeners2._events)
      listeners2 = listeners2._events;
    AWS$x.util.each(listeners2, function(event, callbacks) {
      if (typeof callbacks === "function")
        callbacks = [callbacks];
      AWS$x.util.arrayEach(callbacks, function(callback) {
        self2.on(event, callback);
      });
    });
    return self2;
  },
  addNamedListener: function addNamedListener(name, eventName, callback, toHead) {
    this[name] = callback;
    this.addListener(eventName, callback, toHead);
    return this;
  },
  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback, toHead) {
    callback._isAsync = true;
    return this.addNamedListener(name, eventName, callback, toHead);
  },
  addNamedListeners: function addNamedListeners(callback) {
    var self2 = this;
    callback(function() {
      self2.addNamedListener.apply(self2, arguments);
    }, function() {
      self2.addNamedAsyncListener.apply(self2, arguments);
    });
    return this;
  }
});
AWS$x.SequentialExecutor.prototype.addListener = AWS$x.SequentialExecutor.prototype.on;
var sequential_executor = AWS$x.SequentialExecutor;
const rules = {
  "*/*": {
    endpoint: "{service}.{region}.amazonaws.com"
  },
  "cn-*/*": {
    endpoint: "{service}.{region}.amazonaws.com.cn"
  },
  "us-iso-*/*": "usIso",
  "us-isob-*/*": "usIsob",
  "*/budgets": "globalSSL",
  "*/cloudfront": "globalSSL",
  "*/sts": "globalSSL",
  "*/importexport": {
    endpoint: "{service}.amazonaws.com",
    signatureVersion: "v2",
    globalEndpoint: true
  },
  "*/route53": "globalSSL",
  "cn-*/route53": {
    endpoint: "{service}.amazonaws.com.cn",
    globalEndpoint: true,
    signingRegion: "cn-northwest-1"
  },
  "us-gov-*/route53": "globalGovCloud",
  "*/waf": "globalSSL",
  "*/iam": "globalSSL",
  "cn-*/iam": {
    endpoint: "{service}.cn-north-1.amazonaws.com.cn",
    globalEndpoint: true,
    signingRegion: "cn-north-1"
  },
  "us-gov-*/iam": "globalGovCloud",
  "us-gov-*/sts": {
    endpoint: "{service}.{region}.amazonaws.com"
  },
  "us-gov-west-1/s3": "s3signature",
  "us-west-1/s3": "s3signature",
  "us-west-2/s3": "s3signature",
  "eu-west-1/s3": "s3signature",
  "ap-southeast-1/s3": "s3signature",
  "ap-southeast-2/s3": "s3signature",
  "ap-northeast-1/s3": "s3signature",
  "sa-east-1/s3": "s3signature",
  "us-east-1/s3": {
    endpoint: "{service}.amazonaws.com",
    signatureVersion: "s3"
  },
  "us-east-1/sdb": {
    endpoint: "{service}.amazonaws.com",
    signatureVersion: "v2"
  },
  "*/sdb": {
    endpoint: "{service}.{region}.amazonaws.com",
    signatureVersion: "v2"
  }
};
const fipsRules = {
  "*/*": "fipsStandard",
  "us-gov-*/*": "fipsStandard",
  "us-iso-*/*": {
    endpoint: "{service}-fips.{region}.c2s.ic.gov"
  },
  "us-iso-*/dms": "usIso",
  "us-isob-*/*": {
    endpoint: "{service}-fips.{region}.sc2s.sgov.gov"
  },
  "us-isob-*/dms": "usIsob",
  "cn-*/*": {
    endpoint: "{service}-fips.{region}.amazonaws.com.cn"
  },
  "*/api.ecr": "fips.api.ecr",
  "*/api.sagemaker": "fips.api.sagemaker",
  "*/batch": "fipsDotPrefix",
  "*/eks": "fipsDotPrefix",
  "*/models.lex": "fips.models.lex",
  "*/runtime.lex": "fips.runtime.lex",
  "*/runtime.sagemaker": {
    endpoint: "runtime-fips.sagemaker.{region}.amazonaws.com"
  },
  "*/iam": "fipsWithoutRegion",
  "*/route53": "fipsWithoutRegion",
  "*/transcribe": "fipsDotPrefix",
  "*/waf": "fipsWithoutRegion",
  "us-gov-*/transcribe": "fipsDotPrefix",
  "us-gov-*/api.ecr": "fips.api.ecr",
  "us-gov-*/api.sagemaker": "fips.api.sagemaker",
  "us-gov-*/models.lex": "fips.models.lex",
  "us-gov-*/runtime.lex": "fips.runtime.lex",
  "us-gov-*/acm-pca": "fipsWithServiceOnly",
  "us-gov-*/batch": "fipsWithServiceOnly",
  "us-gov-*/config": "fipsWithServiceOnly",
  "us-gov-*/eks": "fipsWithServiceOnly",
  "us-gov-*/elasticmapreduce": "fipsWithServiceOnly",
  "us-gov-*/identitystore": "fipsWithServiceOnly",
  "us-gov-*/dynamodb": "fipsWithServiceOnly",
  "us-gov-*/elasticloadbalancing": "fipsWithServiceOnly",
  "us-gov-*/guardduty": "fipsWithServiceOnly",
  "us-gov-*/monitoring": "fipsWithServiceOnly",
  "us-gov-*/resource-groups": "fipsWithServiceOnly",
  "us-gov-*/runtime.sagemaker": "fipsWithServiceOnly",
  "us-gov-*/servicecatalog-appregistry": "fipsWithServiceOnly",
  "us-gov-*/servicequotas": "fipsWithServiceOnly",
  "us-gov-*/ssm": "fipsWithServiceOnly",
  "us-gov-*/sts": "fipsWithServiceOnly",
  "us-gov-*/support": "fipsWithServiceOnly",
  "us-gov-west-1/states": "fipsWithServiceOnly",
  "us-iso-east-1/elasticfilesystem": {
    endpoint: "elasticfilesystem-fips.{region}.c2s.ic.gov"
  },
  "us-gov-west-1/organizations": "fipsWithServiceOnly",
  "us-gov-west-1/route53": {
    endpoint: "route53.us-gov.amazonaws.com"
  }
};
const dualstackRules = {
  "*/*": {
    endpoint: "{service}.{region}.api.aws"
  },
  "cn-*/*": {
    endpoint: "{service}.{region}.api.amazonwebservices.com.cn"
  },
  "*/s3": "dualstackLegacy",
  "cn-*/s3": "dualstackLegacyCn",
  "*/s3-control": "dualstackLegacy",
  "cn-*/s3-control": "dualstackLegacyCn",
  "ap-south-1/ec2": "dualstackLegacyEc2",
  "eu-west-1/ec2": "dualstackLegacyEc2",
  "sa-east-1/ec2": "dualstackLegacyEc2",
  "us-east-1/ec2": "dualstackLegacyEc2",
  "us-east-2/ec2": "dualstackLegacyEc2",
  "us-west-2/ec2": "dualstackLegacyEc2"
};
const dualstackFipsRules = {
  "*/*": {
    endpoint: "{service}-fips.{region}.api.aws"
  },
  "cn-*/*": {
    endpoint: "{service}-fips.{region}.api.amazonwebservices.com.cn"
  },
  "*/s3": "dualstackFipsLegacy",
  "cn-*/s3": "dualstackFipsLegacyCn",
  "*/s3-control": "dualstackFipsLegacy",
  "cn-*/s3-control": "dualstackFipsLegacyCn"
};
const patterns = {
  globalSSL: {
    endpoint: "https://{service}.amazonaws.com",
    globalEndpoint: true,
    signingRegion: "us-east-1"
  },
  globalGovCloud: {
    endpoint: "{service}.us-gov.amazonaws.com",
    globalEndpoint: true,
    signingRegion: "us-gov-west-1"
  },
  s3signature: {
    endpoint: "{service}.{region}.amazonaws.com",
    signatureVersion: "s3"
  },
  usIso: {
    endpoint: "{service}.{region}.c2s.ic.gov"
  },
  usIsob: {
    endpoint: "{service}.{region}.sc2s.sgov.gov"
  },
  fipsStandard: {
    endpoint: "{service}-fips.{region}.amazonaws.com"
  },
  fipsDotPrefix: {
    endpoint: "fips.{service}.{region}.amazonaws.com"
  },
  fipsWithoutRegion: {
    endpoint: "{service}-fips.amazonaws.com"
  },
  "fips.api.ecr": {
    endpoint: "ecr-fips.{region}.amazonaws.com"
  },
  "fips.api.sagemaker": {
    endpoint: "api-fips.sagemaker.{region}.amazonaws.com"
  },
  "fips.models.lex": {
    endpoint: "models-fips.lex.{region}.amazonaws.com"
  },
  "fips.runtime.lex": {
    endpoint: "runtime-fips.lex.{region}.amazonaws.com"
  },
  fipsWithServiceOnly: {
    endpoint: "{service}.{region}.amazonaws.com"
  },
  dualstackLegacy: {
    endpoint: "{service}.dualstack.{region}.amazonaws.com"
  },
  dualstackLegacyCn: {
    endpoint: "{service}.dualstack.{region}.amazonaws.com.cn"
  },
  dualstackFipsLegacy: {
    endpoint: "{service}-fips.dualstack.{region}.amazonaws.com"
  },
  dualstackFipsLegacyCn: {
    endpoint: "{service}-fips.dualstack.{region}.amazonaws.com.cn"
  },
  dualstackLegacyEc2: {
    endpoint: "api.ec2.{region}.aws"
  }
};
var require$$1$3 = {
  rules,
  fipsRules,
  dualstackRules,
  dualstackFipsRules,
  patterns
};
var util$6 = util_1;
var regionConfig$1 = require$$1$3;
function generateRegionPrefix(region) {
  if (!region)
    return null;
  var parts = region.split("-");
  if (parts.length < 3)
    return null;
  return parts.slice(0, parts.length - 2).join("-") + "-*";
}
function derivedKeys(service) {
  var region = service.config.region;
  var regionPrefix = generateRegionPrefix(region);
  var endpointPrefix = service.api.endpointPrefix;
  return [
    [region, endpointPrefix],
    [regionPrefix, endpointPrefix],
    [region, "*"],
    [regionPrefix, "*"],
    ["*", endpointPrefix],
    ["*", "*"]
  ].map(function(item) {
    return item[0] && item[1] ? item.join("/") : null;
  });
}
function applyConfig(service, config2) {
  util$6.each(config2, function(key, value) {
    if (key === "globalEndpoint")
      return;
    if (service.config[key] === void 0 || service.config[key] === null) {
      service.config[key] = value;
    }
  });
}
function configureEndpoint(service) {
  var keys = derivedKeys(service);
  var useFipsEndpoint = service.config.useFipsEndpoint;
  var useDualstackEndpoint = service.config.useDualstackEndpoint;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!key)
      continue;
    var rules2 = useFipsEndpoint ? useDualstackEndpoint ? regionConfig$1.dualstackFipsRules : regionConfig$1.fipsRules : useDualstackEndpoint ? regionConfig$1.dualstackRules : regionConfig$1.rules;
    if (Object.prototype.hasOwnProperty.call(rules2, key)) {
      var config2 = rules2[key];
      if (typeof config2 === "string") {
        config2 = regionConfig$1.patterns[config2];
      }
      service.isGlobalEndpoint = !!config2.globalEndpoint;
      if (config2.signingRegion) {
        service.signingRegion = config2.signingRegion;
      }
      if (!config2.signatureVersion)
        config2.signatureVersion = "v4";
      applyConfig(service, config2);
      return;
    }
  }
}
function getEndpointSuffix(region) {
  var regionRegexes = {
    "^(us|eu|ap|sa|ca|me)\\-\\w+\\-\\d+$": "amazonaws.com",
    "^cn\\-\\w+\\-\\d+$": "amazonaws.com.cn",
    "^us\\-gov\\-\\w+\\-\\d+$": "amazonaws.com",
    "^us\\-iso\\-\\w+\\-\\d+$": "c2s.ic.gov",
    "^us\\-isob\\-\\w+\\-\\d+$": "sc2s.sgov.gov"
  };
  var defaultSuffix = "amazonaws.com";
  var regexes = Object.keys(regionRegexes);
  for (var i = 0; i < regexes.length; i++) {
    var regionPattern = RegExp(regexes[i]);
    var dnsSuffix = regionRegexes[regexes[i]];
    if (regionPattern.test(region))
      return dnsSuffix;
  }
  return defaultSuffix;
}
var region_config = {
  configureEndpoint,
  getEndpointSuffix
};
function isFipsRegion(region) {
  return typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
}
function isGlobalRegion(region) {
  return typeof region === "string" && ["aws-global", "aws-us-gov-global"].includes(region);
}
function getRealRegion(region) {
  return ["fips-aws-global", "aws-fips", "aws-global"].includes(region) ? "us-east-1" : ["fips-aws-us-gov-global", "aws-us-gov-global"].includes(region) ? "us-gov-west-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "");
}
var utils = {
  isFipsRegion,
  isGlobalRegion,
  getRealRegion
};
var AWS$w = core;
var Api = api;
var regionConfig = region_config;
var inherit$b = AWS$w.util.inherit;
var clientCount = 0;
var region_utils = utils;
AWS$w.Service = inherit$b({
  constructor: function Service(config2) {
    if (!this.loadServiceClass) {
      throw AWS$w.util.error(new Error(), "Service must be constructed with `new' operator");
    }
    if (config2) {
      if (config2.region) {
        var region = config2.region;
        if (region_utils.isFipsRegion(region)) {
          config2.region = region_utils.getRealRegion(region);
          config2.useFipsEndpoint = true;
        }
        if (region_utils.isGlobalRegion(region)) {
          config2.region = region_utils.getRealRegion(region);
        }
      }
      if (typeof config2.useDualstack === "boolean" && typeof config2.useDualstackEndpoint !== "boolean") {
        config2.useDualstackEndpoint = config2.useDualstack;
      }
    }
    var ServiceClass = this.loadServiceClass(config2 || {});
    if (ServiceClass) {
      var originalConfig = AWS$w.util.copy(config2);
      var svc = new ServiceClass(config2);
      Object.defineProperty(svc, "_originalConfig", {
        get: function() {
          return originalConfig;
        },
        enumerable: false,
        configurable: true
      });
      svc._clientId = ++clientCount;
      return svc;
    }
    this.initialize(config2);
  },
  initialize: function initialize(config2) {
    var svcConfig = AWS$w.config[this.serviceIdentifier];
    this.config = new AWS$w.Config(AWS$w.config);
    if (svcConfig)
      this.config.update(svcConfig, true);
    if (config2)
      this.config.update(config2, true);
    this.validateService();
    if (!this.config.endpoint)
      regionConfig.configureEndpoint(this);
    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);
    this.setEndpoint(this.config.endpoint);
    AWS$w.SequentialExecutor.call(this);
    AWS$w.Service.addDefaultMonitoringListeners(this);
    if ((this.config.clientSideMonitoring || AWS$w.Service._clientSideMonitoring) && this.publisher) {
      var publisher = this.publisher;
      this.addNamedListener("PUBLISH_API_CALL", "apiCall", function PUBLISH_API_CALL(event) {
        process.nextTick(function() {
          publisher.eventHandler(event);
        });
      });
      this.addNamedListener("PUBLISH_API_ATTEMPT", "apiCallAttempt", function PUBLISH_API_ATTEMPT(event) {
        process.nextTick(function() {
          publisher.eventHandler(event);
        });
      });
    }
  },
  validateService: function validateService() {
  },
  loadServiceClass: function loadServiceClass(serviceConfig) {
    var config2 = serviceConfig;
    if (!AWS$w.util.isEmpty(this.api)) {
      return null;
    } else if (config2.apiConfig) {
      return AWS$w.Service.defineServiceApi(this.constructor, config2.apiConfig);
    } else if (!this.constructor.services) {
      return null;
    } else {
      config2 = new AWS$w.Config(AWS$w.config);
      config2.update(serviceConfig, true);
      var version2 = config2.apiVersions[this.constructor.serviceIdentifier];
      version2 = version2 || config2.apiVersion;
      return this.getLatestServiceClass(version2);
    }
  },
  getLatestServiceClass: function getLatestServiceClass(version2) {
    version2 = this.getLatestServiceVersion(version2);
    if (this.constructor.services[version2] === null) {
      AWS$w.Service.defineServiceApi(this.constructor, version2);
    }
    return this.constructor.services[version2];
  },
  getLatestServiceVersion: function getLatestServiceVersion(version2) {
    if (!this.constructor.services || this.constructor.services.length === 0) {
      throw new Error("No services defined on " + this.constructor.serviceIdentifier);
    }
    if (!version2) {
      version2 = "latest";
    } else if (AWS$w.util.isType(version2, Date)) {
      version2 = AWS$w.util.date.iso8601(version2).split("T")[0];
    }
    if (Object.hasOwnProperty(this.constructor.services, version2)) {
      return version2;
    }
    var keys = Object.keys(this.constructor.services).sort();
    var selectedVersion = null;
    for (var i = keys.length - 1; i >= 0; i--) {
      if (keys[i][keys[i].length - 1] !== "*") {
        selectedVersion = keys[i];
      }
      if (keys[i].substr(0, 10) <= version2) {
        return selectedVersion;
      }
    }
    throw new Error("Could not find " + this.constructor.serviceIdentifier + " API to satisfy version constraint `" + version2 + "'");
  },
  api: {},
  defaultRetryCount: 3,
  customizeRequests: function customizeRequests(callback) {
    if (!callback) {
      this.customRequestHandler = null;
    } else if (typeof callback === "function") {
      this.customRequestHandler = callback;
    } else {
      throw new Error("Invalid callback type '" + typeof callback + "' provided in customizeRequests");
    }
  },
  makeRequest: function makeRequest(operation2, params, callback) {
    if (typeof params === "function") {
      callback = params;
      params = null;
    }
    params = params || {};
    if (this.config.params) {
      var rules2 = this.api.operations[operation2];
      if (rules2) {
        params = AWS$w.util.copy(params);
        AWS$w.util.each(this.config.params, function(key, value) {
          if (rules2.input.members[key]) {
            if (params[key] === void 0 || params[key] === null) {
              params[key] = value;
            }
          }
        });
      }
    }
    var request = new AWS$w.Request(this, operation2, params);
    this.addAllRequestListeners(request);
    this.attachMonitoringEmitter(request);
    if (callback)
      request.send(callback);
    return request;
  },
  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation2, params, callback) {
    if (typeof params === "function") {
      callback = params;
      params = {};
    }
    var request = this.makeRequest(operation2, params).toUnauthenticated();
    return callback ? request.send(callback) : request;
  },
  waitFor: function waitFor(state, params, callback) {
    var waiter = new AWS$w.ResourceWaiter(this, state);
    return waiter.wait(params, callback);
  },
  addAllRequestListeners: function addAllRequestListeners(request) {
    var list = [
      AWS$w.events,
      AWS$w.EventListeners.Core,
      this.serviceInterface(),
      AWS$w.EventListeners.CorePost
    ];
    for (var i = 0; i < list.length; i++) {
      if (list[i])
        request.addListeners(list[i]);
    }
    if (!this.config.paramValidation) {
      request.removeListener("validate", AWS$w.EventListeners.Core.VALIDATE_PARAMETERS);
    }
    if (this.config.logger) {
      request.addListeners(AWS$w.EventListeners.Logger);
    }
    this.setupRequestListeners(request);
    if (typeof this.constructor.prototype.customRequestHandler === "function") {
      this.constructor.prototype.customRequestHandler(request);
    }
    if (Object.prototype.hasOwnProperty.call(this, "customRequestHandler") && typeof this.customRequestHandler === "function") {
      this.customRequestHandler(request);
    }
  },
  apiCallEvent: function apiCallEvent(request) {
    var api2 = request.service.api.operations[request.operation];
    var monitoringEvent = {
      Type: "ApiCall",
      Api: api2 ? api2.name : request.operation,
      Version: 1,
      Service: request.service.api.serviceId || request.service.api.endpointPrefix,
      Region: request.httpRequest.region,
      MaxRetriesExceeded: 0,
      UserAgent: request.httpRequest.getUserAgent()
    };
    var response = request.response;
    if (response.httpResponse.statusCode) {
      monitoringEvent.FinalHttpStatusCode = response.httpResponse.statusCode;
    }
    if (response.error) {
      var error2 = response.error;
      var statusCode = response.httpResponse.statusCode;
      if (statusCode > 299) {
        if (error2.code)
          monitoringEvent.FinalAwsException = error2.code;
        if (error2.message)
          monitoringEvent.FinalAwsExceptionMessage = error2.message;
      } else {
        if (error2.code || error2.name)
          monitoringEvent.FinalSdkException = error2.code || error2.name;
        if (error2.message)
          monitoringEvent.FinalSdkExceptionMessage = error2.message;
      }
    }
    return monitoringEvent;
  },
  apiAttemptEvent: function apiAttemptEvent(request) {
    var api2 = request.service.api.operations[request.operation];
    var monitoringEvent = {
      Type: "ApiCallAttempt",
      Api: api2 ? api2.name : request.operation,
      Version: 1,
      Service: request.service.api.serviceId || request.service.api.endpointPrefix,
      Fqdn: request.httpRequest.endpoint.hostname,
      UserAgent: request.httpRequest.getUserAgent()
    };
    var response = request.response;
    if (response.httpResponse.statusCode) {
      monitoringEvent.HttpStatusCode = response.httpResponse.statusCode;
    }
    if (!request._unAuthenticated && request.service.config.credentials && request.service.config.credentials.accessKeyId) {
      monitoringEvent.AccessKey = request.service.config.credentials.accessKeyId;
    }
    if (!response.httpResponse.headers)
      return monitoringEvent;
    if (request.httpRequest.headers["x-amz-security-token"]) {
      monitoringEvent.SessionToken = request.httpRequest.headers["x-amz-security-token"];
    }
    if (response.httpResponse.headers["x-amzn-requestid"]) {
      monitoringEvent.XAmznRequestId = response.httpResponse.headers["x-amzn-requestid"];
    }
    if (response.httpResponse.headers["x-amz-request-id"]) {
      monitoringEvent.XAmzRequestId = response.httpResponse.headers["x-amz-request-id"];
    }
    if (response.httpResponse.headers["x-amz-id-2"]) {
      monitoringEvent.XAmzId2 = response.httpResponse.headers["x-amz-id-2"];
    }
    return monitoringEvent;
  },
  attemptFailEvent: function attemptFailEvent(request) {
    var monitoringEvent = this.apiAttemptEvent(request);
    var response = request.response;
    var error2 = response.error;
    if (response.httpResponse.statusCode > 299) {
      if (error2.code)
        monitoringEvent.AwsException = error2.code;
      if (error2.message)
        monitoringEvent.AwsExceptionMessage = error2.message;
    } else {
      if (error2.code || error2.name)
        monitoringEvent.SdkException = error2.code || error2.name;
      if (error2.message)
        monitoringEvent.SdkExceptionMessage = error2.message;
    }
    return monitoringEvent;
  },
  attachMonitoringEmitter: function attachMonitoringEmitter(request) {
    var attemptTimestamp;
    var attemptStartRealTime;
    var attemptLatency;
    var callStartRealTime;
    var attemptCount = 0;
    var region;
    var callTimestamp;
    var self2 = this;
    var addToHead = true;
    request.on("validate", function() {
      callStartRealTime = AWS$w.util.realClock.now();
      callTimestamp = Date.now();
    }, addToHead);
    request.on("sign", function() {
      attemptStartRealTime = AWS$w.util.realClock.now();
      attemptTimestamp = Date.now();
      region = request.httpRequest.region;
      attemptCount++;
    }, addToHead);
    request.on("validateResponse", function() {
      attemptLatency = Math.round(AWS$w.util.realClock.now() - attemptStartRealTime);
    });
    request.addNamedListener("API_CALL_ATTEMPT", "success", function API_CALL_ATTEMPT() {
      var apiAttemptEvent2 = self2.apiAttemptEvent(request);
      apiAttemptEvent2.Timestamp = attemptTimestamp;
      apiAttemptEvent2.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;
      apiAttemptEvent2.Region = region;
      self2.emit("apiCallAttempt", [apiAttemptEvent2]);
    });
    request.addNamedListener("API_CALL_ATTEMPT_RETRY", "retry", function API_CALL_ATTEMPT_RETRY() {
      var apiAttemptEvent2 = self2.attemptFailEvent(request);
      apiAttemptEvent2.Timestamp = attemptTimestamp;
      attemptLatency = attemptLatency || Math.round(AWS$w.util.realClock.now() - attemptStartRealTime);
      apiAttemptEvent2.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;
      apiAttemptEvent2.Region = region;
      self2.emit("apiCallAttempt", [apiAttemptEvent2]);
    });
    request.addNamedListener("API_CALL", "complete", function API_CALL() {
      var apiCallEvent2 = self2.apiCallEvent(request);
      apiCallEvent2.AttemptCount = attemptCount;
      if (apiCallEvent2.AttemptCount <= 0)
        return;
      apiCallEvent2.Timestamp = callTimestamp;
      var latency = Math.round(AWS$w.util.realClock.now() - callStartRealTime);
      apiCallEvent2.Latency = latency >= 0 ? latency : 0;
      var response = request.response;
      if (response.error && response.error.retryable && typeof response.retryCount === "number" && typeof response.maxRetries === "number" && response.retryCount >= response.maxRetries) {
        apiCallEvent2.MaxRetriesExceeded = 1;
      }
      self2.emit("apiCall", [apiCallEvent2]);
    });
  },
  setupRequestListeners: function setupRequestListeners(request) {
  },
  getSigningName: function getSigningName() {
    return this.api.signingName || this.api.endpointPrefix;
  },
  getSignerClass: function getSignerClass(request) {
    var version2;
    var operation2 = null;
    var authtype = "";
    if (request) {
      var operations2 = request.service.api.operations || {};
      operation2 = operations2[request.operation] || null;
      authtype = operation2 ? operation2.authtype : "";
    }
    if (this.config.signatureVersion) {
      version2 = this.config.signatureVersion;
    } else if (authtype === "v4" || authtype === "v4-unsigned-body") {
      version2 = "v4";
    } else {
      version2 = this.api.signatureVersion;
    }
    return AWS$w.Signers.RequestSigner.getVersion(version2);
  },
  serviceInterface: function serviceInterface() {
    switch (this.api.protocol) {
      case "ec2":
        return AWS$w.EventListeners.Query;
      case "query":
        return AWS$w.EventListeners.Query;
      case "json":
        return AWS$w.EventListeners.Json;
      case "rest-json":
        return AWS$w.EventListeners.RestJson;
      case "rest-xml":
        return AWS$w.EventListeners.RestXml;
    }
    if (this.api.protocol) {
      throw new Error("Invalid service `protocol' " + this.api.protocol + " in API config");
    }
  },
  successfulResponse: function successfulResponse(resp) {
    return resp.httpResponse.statusCode < 300;
  },
  numRetries: function numRetries() {
    if (this.config.maxRetries !== void 0) {
      return this.config.maxRetries;
    } else {
      return this.defaultRetryCount;
    }
  },
  retryDelays: function retryDelays(retryCount, err) {
    return AWS$w.util.calculateRetryDelay(retryCount, this.config.retryDelayOptions, err);
  },
  retryableError: function retryableError(error2) {
    if (this.timeoutError(error2))
      return true;
    if (this.networkingError(error2))
      return true;
    if (this.expiredCredentialsError(error2))
      return true;
    if (this.throttledError(error2))
      return true;
    if (error2.statusCode >= 500)
      return true;
    return false;
  },
  networkingError: function networkingError(error2) {
    return error2.code === "NetworkingError";
  },
  timeoutError: function timeoutError(error2) {
    return error2.code === "TimeoutError";
  },
  expiredCredentialsError: function expiredCredentialsError(error2) {
    return error2.code === "ExpiredTokenException";
  },
  clockSkewError: function clockSkewError(error2) {
    switch (error2.code) {
      case "RequestTimeTooSkewed":
      case "RequestExpired":
      case "InvalidSignatureException":
      case "SignatureDoesNotMatch":
      case "AuthFailure":
      case "RequestInTheFuture":
        return true;
      default:
        return false;
    }
  },
  getSkewCorrectedDate: function getSkewCorrectedDate() {
    return new Date(Date.now() + this.config.systemClockOffset);
  },
  applyClockOffset: function applyClockOffset(newServerTime) {
    if (newServerTime) {
      this.config.systemClockOffset = newServerTime - Date.now();
    }
  },
  isClockSkewed: function isClockSkewed(newServerTime) {
    if (newServerTime) {
      return Math.abs(this.getSkewCorrectedDate().getTime() - newServerTime) >= 3e5;
    }
  },
  throttledError: function throttledError(error2) {
    if (error2.statusCode === 429)
      return true;
    switch (error2.code) {
      case "ProvisionedThroughputExceededException":
      case "Throttling":
      case "ThrottlingException":
      case "RequestLimitExceeded":
      case "RequestThrottled":
      case "RequestThrottledException":
      case "TooManyRequestsException":
      case "TransactionInProgressException":
      case "EC2ThrottledException":
        return true;
      default:
        return false;
    }
  },
  endpointFromTemplate: function endpointFromTemplate(endpoint) {
    if (typeof endpoint !== "string")
      return endpoint;
    var e2 = endpoint;
    e2 = e2.replace(/\{service\}/g, this.api.endpointPrefix);
    e2 = e2.replace(/\{region\}/g, this.config.region);
    e2 = e2.replace(/\{scheme\}/g, this.config.sslEnabled ? "https" : "http");
    return e2;
  },
  setEndpoint: function setEndpoint(endpoint) {
    this.endpoint = new AWS$w.Endpoint(endpoint, this.config);
  },
  paginationConfig: function paginationConfig(operation2, throwException) {
    var paginator2 = this.api.operations[operation2].paginator;
    if (!paginator2) {
      if (throwException) {
        var e2 = new Error();
        throw AWS$w.util.error(e2, "No pagination configuration for " + operation2);
      }
      return null;
    }
    return paginator2;
  }
});
AWS$w.util.update(AWS$w.Service, {
  defineMethods: function defineMethods(svc) {
    AWS$w.util.each(svc.prototype.api.operations, function iterator(method) {
      if (svc.prototype[method])
        return;
      var operation2 = svc.prototype.api.operations[method];
      if (operation2.authtype === "none") {
        svc.prototype[method] = function(params, callback) {
          return this.makeUnauthenticatedRequest(method, params, callback);
        };
      } else {
        svc.prototype[method] = function(params, callback) {
          return this.makeRequest(method, params, callback);
        };
      }
    });
  },
  defineService: function defineService(serviceIdentifier, versions, features) {
    AWS$w.Service._serviceMap[serviceIdentifier] = true;
    if (!Array.isArray(versions)) {
      features = versions;
      versions = [];
    }
    var svc = inherit$b(AWS$w.Service, features || {});
    if (typeof serviceIdentifier === "string") {
      AWS$w.Service.addVersions(svc, versions);
      var identifier = svc.serviceIdentifier || serviceIdentifier;
      svc.serviceIdentifier = identifier;
    } else {
      svc.prototype.api = serviceIdentifier;
      AWS$w.Service.defineMethods(svc);
    }
    AWS$w.SequentialExecutor.call(this.prototype);
    if (!this.prototype.publisher && AWS$w.util.clientSideMonitoring) {
      var Publisher = AWS$w.util.clientSideMonitoring.Publisher;
      var configProvider = AWS$w.util.clientSideMonitoring.configProvider;
      var publisherConfig = configProvider();
      this.prototype.publisher = new Publisher(publisherConfig);
      if (publisherConfig.enabled) {
        AWS$w.Service._clientSideMonitoring = true;
      }
    }
    AWS$w.SequentialExecutor.call(svc.prototype);
    AWS$w.Service.addDefaultMonitoringListeners(svc.prototype);
    return svc;
  },
  addVersions: function addVersions(svc, versions) {
    if (!Array.isArray(versions))
      versions = [versions];
    svc.services = svc.services || {};
    for (var i = 0; i < versions.length; i++) {
      if (svc.services[versions[i]] === void 0) {
        svc.services[versions[i]] = null;
      }
    }
    svc.apiVersions = Object.keys(svc.services).sort();
  },
  defineServiceApi: function defineServiceApi(superclass, version2, apiConfig) {
    var svc = inherit$b(superclass, {
      serviceIdentifier: superclass.serviceIdentifier
    });
    function setApi(api2) {
      if (api2.isApi) {
        svc.prototype.api = api2;
      } else {
        svc.prototype.api = new Api(api2, {
          serviceIdentifier: superclass.serviceIdentifier
        });
      }
    }
    if (typeof version2 === "string") {
      if (apiConfig) {
        setApi(apiConfig);
      } else {
        try {
          setApi(AWS$w.apiLoader(superclass.serviceIdentifier, version2));
        } catch (err) {
          throw AWS$w.util.error(err, {
            message: "Could not find API configuration " + superclass.serviceIdentifier + "-" + version2
          });
        }
      }
      if (!Object.prototype.hasOwnProperty.call(superclass.services, version2)) {
        superclass.apiVersions = superclass.apiVersions.concat(version2).sort();
      }
      superclass.services[version2] = svc;
    } else {
      setApi(version2);
    }
    AWS$w.Service.defineMethods(svc);
    return svc;
  },
  hasService: function(identifier) {
    return Object.prototype.hasOwnProperty.call(AWS$w.Service._serviceMap, identifier);
  },
  addDefaultMonitoringListeners: function addDefaultMonitoringListeners(attachOn) {
    attachOn.addNamedListener("MONITOR_EVENTS_BUBBLE", "apiCallAttempt", function EVENTS_BUBBLE(event) {
      var baseClass = Object.getPrototypeOf(attachOn);
      if (baseClass._events)
        baseClass.emit("apiCallAttempt", [event]);
    });
    attachOn.addNamedListener("CALL_EVENTS_BUBBLE", "apiCall", function CALL_EVENTS_BUBBLE(event) {
      var baseClass = Object.getPrototypeOf(attachOn);
      if (baseClass._events)
        baseClass.emit("apiCall", [event]);
    });
  },
  _serviceMap: {}
});
AWS$w.util.mixin(AWS$w.Service, AWS$w.SequentialExecutor);
AWS$w.Service;
var AWS$v = core;
AWS$v.Credentials = AWS$v.util.inherit({
  constructor: function Credentials() {
    AWS$v.util.hideProperties(this, ["secretAccessKey"]);
    this.expired = false;
    this.expireTime = null;
    this.refreshCallbacks = [];
    if (arguments.length === 1 && typeof arguments[0] === "object") {
      var creds = arguments[0].credentials || arguments[0];
      this.accessKeyId = creds.accessKeyId;
      this.secretAccessKey = creds.secretAccessKey;
      this.sessionToken = creds.sessionToken;
    } else {
      this.accessKeyId = arguments[0];
      this.secretAccessKey = arguments[1];
      this.sessionToken = arguments[2];
    }
  },
  expiryWindow: 15,
  needsRefresh: function needsRefresh() {
    var currentTime = AWS$v.util.date.getDate().getTime();
    var adjustedTime = new Date(currentTime + this.expiryWindow * 1e3);
    if (this.expireTime && adjustedTime > this.expireTime) {
      return true;
    } else {
      return this.expired || !this.accessKeyId || !this.secretAccessKey;
    }
  },
  get: function get2(callback) {
    var self2 = this;
    if (this.needsRefresh()) {
      this.refresh(function(err) {
        if (!err)
          self2.expired = false;
        if (callback)
          callback(err);
      });
    } else if (callback) {
      callback();
    }
  },
  refresh: function refresh(callback) {
    this.expired = false;
    callback();
  },
  coalesceRefresh: function coalesceRefresh(callback, sync) {
    var self2 = this;
    if (self2.refreshCallbacks.push(callback) === 1) {
      self2.load(function onLoad(err) {
        AWS$v.util.arrayEach(self2.refreshCallbacks, function(callback2) {
          if (sync) {
            callback2(err);
          } else {
            AWS$v.util.defer(function() {
              callback2(err);
            });
          }
        });
        self2.refreshCallbacks.length = 0;
      });
    }
  },
  load: function load(callback) {
    callback();
  }
});
AWS$v.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.getPromise = AWS$v.util.promisifyMethod("get", PromiseDependency);
  this.prototype.refreshPromise = AWS$v.util.promisifyMethod("refresh", PromiseDependency);
};
AWS$v.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.getPromise;
  delete this.prototype.refreshPromise;
};
AWS$v.util.addPromises(AWS$v.Credentials);
var AWS$u = core;
AWS$u.CredentialProviderChain = AWS$u.util.inherit(AWS$u.Credentials, {
  constructor: function CredentialProviderChain(providers) {
    if (providers) {
      this.providers = providers;
    } else {
      this.providers = AWS$u.CredentialProviderChain.defaultProviders.slice(0);
    }
    this.resolveCallbacks = [];
  },
  resolve: function resolve2(callback) {
    var self2 = this;
    if (self2.providers.length === 0) {
      callback(new Error("No providers"));
      return self2;
    }
    if (self2.resolveCallbacks.push(callback) === 1) {
      let resolveNext = function(err, creds) {
        if (!err && creds || index === providers.length) {
          AWS$u.util.arrayEach(self2.resolveCallbacks, function(callback2) {
            callback2(err, creds);
          });
          self2.resolveCallbacks.length = 0;
          return;
        }
        var provider = providers[index++];
        if (typeof provider === "function") {
          creds = provider.call();
        } else {
          creds = provider;
        }
        if (creds.get) {
          creds.get(function(getErr) {
            resolveNext(getErr, getErr ? null : creds);
          });
        } else {
          resolveNext(null, creds);
        }
      };
      var index = 0;
      var providers = self2.providers.slice(0);
      resolveNext();
    }
    return self2;
  }
});
AWS$u.CredentialProviderChain.defaultProviders = [];
AWS$u.CredentialProviderChain.addPromisesToClass = function addPromisesToClass2(PromiseDependency) {
  this.prototype.resolvePromise = AWS$u.util.promisifyMethod("resolve", PromiseDependency);
};
AWS$u.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass2() {
  delete this.prototype.resolvePromise;
};
AWS$u.util.addPromises(AWS$u.CredentialProviderChain);
var AWS$t = core;
var PromisesDependency;
AWS$t.Config = AWS$t.util.inherit({
  constructor: function Config(options) {
    if (options === void 0)
      options = {};
    options = this.extractCredentials(options);
    AWS$t.util.each.call(this, this.keys, function(key, value) {
      this.set(key, options[key], value);
    });
  },
  getCredentials: function getCredentials(callback) {
    var self2 = this;
    function finish(err) {
      callback(err, err ? null : self2.credentials);
    }
    function credError(msg, err) {
      return new AWS$t.util.error(err || new Error(), {
        code: "CredentialsError",
        message: msg,
        name: "CredentialsError"
      });
    }
    function getAsyncCredentials() {
      self2.credentials.get(function(err) {
        if (err) {
          var msg = "Could not load credentials from " + self2.credentials.constructor.name;
          err = credError(msg, err);
        }
        finish(err);
      });
    }
    function getStaticCredentials() {
      var err = null;
      if (!self2.credentials.accessKeyId || !self2.credentials.secretAccessKey) {
        err = credError("Missing credentials");
      }
      finish(err);
    }
    if (self2.credentials) {
      if (typeof self2.credentials.get === "function") {
        getAsyncCredentials();
      } else {
        getStaticCredentials();
      }
    } else if (self2.credentialProvider) {
      self2.credentialProvider.resolve(function(err, creds) {
        if (err) {
          err = credError("Could not load credentials from any providers", err);
        }
        self2.credentials = creds;
        finish(err);
      });
    } else {
      finish(credError("No credentials to load"));
    }
  },
  update: function update(options, allowUnknownKeys) {
    allowUnknownKeys = allowUnknownKeys || false;
    options = this.extractCredentials(options);
    AWS$t.util.each.call(this, options, function(key, value) {
      if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) || AWS$t.Service.hasService(key)) {
        this.set(key, value);
      }
    });
  },
  loadFromPath: function loadFromPath(path) {
    this.clear();
    var options = JSON.parse(AWS$t.util.readFileSync(path));
    var fileSystemCreds = new AWS$t.FileSystemCredentials(path);
    var chain = new AWS$t.CredentialProviderChain();
    chain.providers.unshift(fileSystemCreds);
    chain.resolve(function(err, creds) {
      if (err)
        throw err;
      else
        options.credentials = creds;
    });
    this.constructor(options);
    return this;
  },
  clear: function clear() {
    AWS$t.util.each.call(this, this.keys, function(key) {
      delete this[key];
    });
    this.set("credentials", void 0);
    this.set("credentialProvider", void 0);
  },
  set: function set(property3, value, defaultValue) {
    if (value === void 0) {
      if (defaultValue === void 0) {
        defaultValue = this.keys[property3];
      }
      if (typeof defaultValue === "function") {
        this[property3] = defaultValue.call(this);
      } else {
        this[property3] = defaultValue;
      }
    } else if (property3 === "httpOptions" && this[property3]) {
      this[property3] = AWS$t.util.merge(this[property3], value);
    } else {
      this[property3] = value;
    }
  },
  keys: {
    credentials: null,
    credentialProvider: null,
    region: null,
    logger: null,
    apiVersions: {},
    apiVersion: null,
    endpoint: void 0,
    httpOptions: {
      timeout: 12e4
    },
    maxRetries: void 0,
    maxRedirects: 10,
    paramValidation: true,
    sslEnabled: true,
    s3ForcePathStyle: false,
    s3BucketEndpoint: false,
    s3DisableBodySigning: true,
    s3UsEast1RegionalEndpoint: "legacy",
    s3UseArnRegion: void 0,
    computeChecksums: true,
    convertResponseTypes: true,
    correctClockSkew: false,
    customUserAgent: null,
    dynamoDbCrc32: true,
    systemClockOffset: 0,
    signatureVersion: null,
    signatureCache: true,
    retryDelayOptions: {},
    useAccelerateEndpoint: false,
    clientSideMonitoring: false,
    endpointDiscoveryEnabled: void 0,
    endpointCacheSize: 1e3,
    hostPrefixEnabled: true,
    stsRegionalEndpoints: "legacy",
    useFipsEndpoint: false,
    useDualstackEndpoint: false
  },
  extractCredentials: function extractCredentials(options) {
    if (options.accessKeyId && options.secretAccessKey) {
      options = AWS$t.util.copy(options);
      options.credentials = new AWS$t.Credentials(options);
    }
    return options;
  },
  setPromisesDependency: function setPromisesDependency(dep) {
    PromisesDependency = dep;
    if (dep === null && typeof Promise === "function") {
      PromisesDependency = Promise;
    }
    var constructors = [AWS$t.Request, AWS$t.Credentials, AWS$t.CredentialProviderChain];
    if (AWS$t.S3) {
      constructors.push(AWS$t.S3);
      if (AWS$t.S3.ManagedUpload) {
        constructors.push(AWS$t.S3.ManagedUpload);
      }
    }
    AWS$t.util.addPromises(constructors, PromisesDependency);
  },
  getPromisesDependency: function getPromisesDependency() {
    return PromisesDependency;
  }
});
AWS$t.config = new AWS$t.Config();
var AWS$s = core;
var inherit$a = AWS$s.util.inherit;
AWS$s.Endpoint = inherit$a({
  constructor: function Endpoint(endpoint, config2) {
    AWS$s.util.hideProperties(this, ["slashes", "auth", "hash", "search", "query"]);
    if (typeof endpoint === "undefined" || endpoint === null) {
      throw new Error("Invalid endpoint: " + endpoint);
    } else if (typeof endpoint !== "string") {
      return AWS$s.util.copy(endpoint);
    }
    if (!endpoint.match(/^http/)) {
      var useSSL = config2 && config2.sslEnabled !== void 0 ? config2.sslEnabled : AWS$s.config.sslEnabled;
      endpoint = (useSSL ? "https" : "http") + "://" + endpoint;
    }
    AWS$s.util.update(this, AWS$s.util.urlParse(endpoint));
    if (this.port) {
      this.port = parseInt(this.port, 10);
    } else {
      this.port = this.protocol === "https:" ? 443 : 80;
    }
  }
});
AWS$s.HttpRequest = inherit$a({
  constructor: function HttpRequest(endpoint, region) {
    endpoint = new AWS$s.Endpoint(endpoint);
    this.method = "POST";
    this.path = endpoint.path || "/";
    this.headers = {};
    this.body = "";
    this.endpoint = endpoint;
    this.region = region;
    this._userAgent = "";
    this.setUserAgent();
  },
  setUserAgent: function setUserAgent() {
    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS$s.util.userAgent();
  },
  getUserAgentHeaderName: function getUserAgentHeaderName() {
    var prefix = AWS$s.util.isBrowser() ? "X-Amz-" : "";
    return prefix + "User-Agent";
  },
  appendToUserAgent: function appendToUserAgent(agentPartial) {
    if (typeof agentPartial === "string" && agentPartial) {
      this._userAgent += " " + agentPartial;
    }
    this.headers[this.getUserAgentHeaderName()] = this._userAgent;
  },
  getUserAgent: function getUserAgent3() {
    return this._userAgent;
  },
  pathname: function pathname() {
    return this.path.split("?", 1)[0];
  },
  search: function search() {
    var query2 = this.path.split("?", 2)[1];
    if (query2) {
      query2 = AWS$s.util.queryStringParse(query2);
      return AWS$s.util.queryParamsToString(query2);
    }
    return "";
  },
  updateEndpoint: function updateEndpoint(endpointStr) {
    var newEndpoint = new AWS$s.Endpoint(endpointStr);
    this.endpoint = newEndpoint;
    this.path = newEndpoint.path || "/";
    if (this.headers["Host"]) {
      this.headers["Host"] = newEndpoint.host;
    }
  }
});
AWS$s.HttpResponse = inherit$a({
  constructor: function HttpResponse() {
    this.statusCode = void 0;
    this.headers = {};
    this.body = void 0;
    this.streaming = false;
    this.stream = null;
  },
  createUnbufferedStream: function createUnbufferedStream() {
    this.streaming = true;
    return this.stream;
  }
});
AWS$s.HttpClient = inherit$a({});
AWS$s.HttpClient.getInstance = function getInstance() {
  if (this.singleton === void 0) {
    this.singleton = new this();
  }
  return this.singleton;
};
var AWS$r = core;
var util$5 = util_1;
var endpointDiscoveryEnabledEnvs = ["AWS_ENABLE_ENDPOINT_DISCOVERY", "AWS_ENDPOINT_DISCOVERY_ENABLED"];
function getCacheKey(request) {
  var service = request.service;
  var api2 = service.api || {};
  api2.operations;
  var identifiers = {};
  if (service.config.region) {
    identifiers.region = service.config.region;
  }
  if (api2.serviceId) {
    identifiers.serviceId = api2.serviceId;
  }
  if (service.config.credentials.accessKeyId) {
    identifiers.accessKeyId = service.config.credentials.accessKeyId;
  }
  return identifiers;
}
function marshallCustomIdentifiersHelper(result, params, shape2) {
  if (!shape2 || params === void 0 || params === null)
    return;
  if (shape2.type === "structure" && shape2.required && shape2.required.length > 0) {
    util$5.arrayEach(shape2.required, function(name) {
      var memberShape = shape2.members[name];
      if (memberShape.endpointDiscoveryId === true) {
        var locationName = memberShape.isLocationName ? memberShape.name : name;
        result[locationName] = String(params[name]);
      } else {
        marshallCustomIdentifiersHelper(result, params[name], memberShape);
      }
    });
  }
}
function marshallCustomIdentifiers(request, shape2) {
  var identifiers = {};
  marshallCustomIdentifiersHelper(identifiers, request.params, shape2);
  return identifiers;
}
function optionalDiscoverEndpoint(request) {
  var service = request.service;
  var api2 = service.api;
  var operationModel = api2.operations ? api2.operations[request.operation] : void 0;
  var inputShape = operationModel ? operationModel.input : void 0;
  var identifiers = marshallCustomIdentifiers(request, inputShape);
  var cacheKey = getCacheKey(request);
  if (Object.keys(identifiers).length > 0) {
    cacheKey = util$5.update(cacheKey, identifiers);
    if (operationModel)
      cacheKey.operation = operationModel.name;
  }
  var endpoints = AWS$r.endpointCache.get(cacheKey);
  if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
    return;
  } else if (endpoints && endpoints.length > 0) {
    request.httpRequest.updateEndpoint(endpoints[0].Address);
  } else {
    var endpointRequest = service.makeRequest(api2.endpointOperation, {
      Operation: operationModel.name,
      Identifiers: identifiers
    });
    addApiVersionHeader(endpointRequest);
    endpointRequest.removeListener("validate", AWS$r.EventListeners.Core.VALIDATE_PARAMETERS);
    endpointRequest.removeListener("retry", AWS$r.EventListeners.Core.RETRY_CHECK);
    AWS$r.endpointCache.put(cacheKey, [{
      Address: "",
      CachePeriodInMinutes: 1
    }]);
    endpointRequest.send(function(err, data) {
      if (data && data.Endpoints) {
        AWS$r.endpointCache.put(cacheKey, data.Endpoints);
      } else if (err) {
        AWS$r.endpointCache.put(cacheKey, [{
          Address: "",
          CachePeriodInMinutes: 1
        }]);
      }
    });
  }
}
var requestQueue = {};
function requiredDiscoverEndpoint(request, done) {
  var service = request.service;
  var api2 = service.api;
  var operationModel = api2.operations ? api2.operations[request.operation] : void 0;
  var inputShape = operationModel ? operationModel.input : void 0;
  var identifiers = marshallCustomIdentifiers(request, inputShape);
  var cacheKey = getCacheKey(request);
  if (Object.keys(identifiers).length > 0) {
    cacheKey = util$5.update(cacheKey, identifiers);
    if (operationModel)
      cacheKey.operation = operationModel.name;
  }
  var cacheKeyStr = AWS$r.EndpointCache.getKeyString(cacheKey);
  var endpoints = AWS$r.endpointCache.get(cacheKeyStr);
  if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
    if (!requestQueue[cacheKeyStr])
      requestQueue[cacheKeyStr] = [];
    requestQueue[cacheKeyStr].push({ request, callback: done });
    return;
  } else if (endpoints && endpoints.length > 0) {
    request.httpRequest.updateEndpoint(endpoints[0].Address);
    done();
  } else {
    var endpointRequest = service.makeRequest(api2.endpointOperation, {
      Operation: operationModel.name,
      Identifiers: identifiers
    });
    endpointRequest.removeListener("validate", AWS$r.EventListeners.Core.VALIDATE_PARAMETERS);
    addApiVersionHeader(endpointRequest);
    AWS$r.endpointCache.put(cacheKeyStr, [{
      Address: "",
      CachePeriodInMinutes: 60
    }]);
    endpointRequest.send(function(err, data) {
      if (err) {
        request.response.error = util$5.error(err, { retryable: false });
        AWS$r.endpointCache.remove(cacheKey);
        if (requestQueue[cacheKeyStr]) {
          var pendingRequests = requestQueue[cacheKeyStr];
          util$5.arrayEach(pendingRequests, function(requestContext) {
            requestContext.request.response.error = util$5.error(err, { retryable: false });
            requestContext.callback();
          });
          delete requestQueue[cacheKeyStr];
        }
      } else if (data) {
        AWS$r.endpointCache.put(cacheKeyStr, data.Endpoints);
        request.httpRequest.updateEndpoint(data.Endpoints[0].Address);
        if (requestQueue[cacheKeyStr]) {
          var pendingRequests = requestQueue[cacheKeyStr];
          util$5.arrayEach(pendingRequests, function(requestContext) {
            requestContext.request.httpRequest.updateEndpoint(data.Endpoints[0].Address);
            requestContext.callback();
          });
          delete requestQueue[cacheKeyStr];
        }
      }
      done();
    });
  }
}
function addApiVersionHeader(endpointRequest) {
  var api2 = endpointRequest.service.api;
  var apiVersion = api2.apiVersion;
  if (apiVersion && !endpointRequest.httpRequest.headers["x-amz-api-version"]) {
    endpointRequest.httpRequest.headers["x-amz-api-version"] = apiVersion;
  }
}
function invalidateCachedEndpoints(response) {
  var error2 = response.error;
  var httpResponse = response.httpResponse;
  if (error2 && (error2.code === "InvalidEndpointException" || httpResponse.statusCode === 421)) {
    var request = response.request;
    var operations2 = request.service.api.operations || {};
    var inputShape = operations2[request.operation] ? operations2[request.operation].input : void 0;
    var identifiers = marshallCustomIdentifiers(request, inputShape);
    var cacheKey = getCacheKey(request);
    if (Object.keys(identifiers).length > 0) {
      cacheKey = util$5.update(cacheKey, identifiers);
      if (operations2[request.operation])
        cacheKey.operation = operations2[request.operation].name;
    }
    AWS$r.endpointCache.remove(cacheKey);
  }
}
function hasCustomEndpoint(client) {
  if (client._originalConfig && client._originalConfig.endpoint && client._originalConfig.endpointDiscoveryEnabled === true) {
    throw util$5.error(new Error(), {
      code: "ConfigurationException",
      message: "Custom endpoint is supplied; endpointDiscoveryEnabled must not be true."
    });
  }
  var svcConfig = AWS$r.config[client.serviceIdentifier] || {};
  return Boolean(AWS$r.config.endpoint || svcConfig.endpoint || client._originalConfig && client._originalConfig.endpoint);
}
function isFalsy(value) {
  return ["false", "0"].indexOf(value) >= 0;
}
function resolveEndpointDiscoveryConfig(request) {
  var service = request.service || {};
  if (service.config.endpointDiscoveryEnabled !== void 0) {
    return service.config.endpointDiscoveryEnabled;
  }
  if (util$5.isBrowser())
    return void 0;
  for (var i = 0; i < endpointDiscoveryEnabledEnvs.length; i++) {
    var env = endpointDiscoveryEnabledEnvs[i];
    if (Object.prototype.hasOwnProperty.call(process.env, env)) {
      if (process.env[env] === "" || process.env[env] === void 0) {
        throw util$5.error(new Error(), {
          code: "ConfigurationException",
          message: "environmental variable " + env + " cannot be set to nothing"
        });
      }
      return !isFalsy(process.env[env]);
    }
  }
  var configFile = {};
  try {
    configFile = AWS$r.util.iniLoader ? AWS$r.util.iniLoader.loadFrom({
      isConfig: true,
      filename: process.env[AWS$r.util.sharedConfigFileEnv]
    }) : {};
  } catch (e2) {
  }
  var sharedFileConfig = configFile[{}.AWS_PROFILE || AWS$r.util.defaultProfile] || {};
  if (Object.prototype.hasOwnProperty.call(sharedFileConfig, "endpoint_discovery_enabled")) {
    if (sharedFileConfig.endpoint_discovery_enabled === void 0) {
      throw util$5.error(new Error(), {
        code: "ConfigurationException",
        message: "config file entry 'endpoint_discovery_enabled' cannot be set to nothing"
      });
    }
    return !isFalsy(sharedFileConfig.endpoint_discovery_enabled);
  }
  return void 0;
}
function discoverEndpoint(request, done) {
  var service = request.service || {};
  if (hasCustomEndpoint(service) || request.isPresigned())
    return done();
  var operations2 = service.api.operations || {};
  var operationModel = operations2[request.operation];
  var isEndpointDiscoveryRequired = operationModel ? operationModel.endpointDiscoveryRequired : "NULL";
  var isEnabled = resolveEndpointDiscoveryConfig(request);
  var hasRequiredEndpointDiscovery = service.api.hasRequiredEndpointDiscovery;
  if (isEnabled || hasRequiredEndpointDiscovery) {
    request.httpRequest.appendToUserAgent("endpoint-discovery");
  }
  switch (isEndpointDiscoveryRequired) {
    case "OPTIONAL":
      if (isEnabled || hasRequiredEndpointDiscovery) {
        optionalDiscoverEndpoint(request);
        request.addNamedListener("INVALIDATE_CACHED_ENDPOINTS", "extractError", invalidateCachedEndpoints);
      }
      done();
      break;
    case "REQUIRED":
      if (isEnabled === false) {
        request.response.error = util$5.error(new Error(), {
          code: "ConfigurationException",
          message: "Endpoint Discovery is disabled but " + service.api.className + "." + request.operation + "() requires it. Please check your configurations."
        });
        done();
        break;
      }
      request.addNamedListener("INVALIDATE_CACHED_ENDPOINTS", "extractError", invalidateCachedEndpoints);
      requiredDiscoverEndpoint(request, done);
      break;
    case "NULL":
    default:
      done();
      break;
  }
}
var discover_endpoint = {
  discoverEndpoint,
  requiredDiscoverEndpoint,
  optionalDiscoverEndpoint,
  marshallCustomIdentifiers,
  getCacheKey,
  invalidateCachedEndpoint: invalidateCachedEndpoints
};
var __viteBrowserExternal = {};
var __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
var require$$1$2 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var AWS$q = core;
var SequentialExecutor2 = sequential_executor;
var DISCOVER_ENDPOINT = discover_endpoint.discoverEndpoint;
AWS$q.EventListeners = {
  Core: {}
};
function getOperationAuthtype(req) {
  if (!req.service.api.operations) {
    return "";
  }
  var operation2 = req.service.api.operations[req.operation];
  return operation2 ? operation2.authtype : "";
}
AWS$q.EventListeners = {
  Core: new SequentialExecutor2().addNamedListeners(function(add, addAsync) {
    addAsync("VALIDATE_CREDENTIALS", "validate", function VALIDATE_CREDENTIALS(req, done) {
      if (!req.service.api.signatureVersion && !req.service.config.signatureVersion)
        return done();
      req.service.config.getCredentials(function(err) {
        if (err) {
          req.response.error = AWS$q.util.error(err, { code: "CredentialsError", message: "Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1" });
        }
        done();
      });
    });
    add("VALIDATE_REGION", "validate", function VALIDATE_REGION(req) {
      if (!req.service.isGlobalEndpoint) {
        var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
        if (!req.service.config.region) {
          req.response.error = AWS$q.util.error(new Error(), { code: "ConfigError", message: "Missing region in config" });
        } else if (!dnsHostRegex.test(req.service.config.region)) {
          req.response.error = AWS$q.util.error(new Error(), { code: "ConfigError", message: "Invalid region in config" });
        }
      }
    });
    add("BUILD_IDEMPOTENCY_TOKENS", "validate", function BUILD_IDEMPOTENCY_TOKENS(req) {
      if (!req.service.api.operations) {
        return;
      }
      var operation2 = req.service.api.operations[req.operation];
      if (!operation2) {
        return;
      }
      var idempotentMembers = operation2.idempotentMembers;
      if (!idempotentMembers.length) {
        return;
      }
      var params = AWS$q.util.copy(req.params);
      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {
        if (!params[idempotentMembers[i]]) {
          params[idempotentMembers[i]] = AWS$q.util.uuid.v4();
        }
      }
      req.params = params;
    });
    add("VALIDATE_PARAMETERS", "validate", function VALIDATE_PARAMETERS(req) {
      if (!req.service.api.operations) {
        return;
      }
      var rules2 = req.service.api.operations[req.operation].input;
      var validation = req.service.config.paramValidation;
      new AWS$q.ParamValidator(validation).validate(rules2, req.params);
    });
    add("COMPUTE_CHECKSUM", "afterBuild", function COMPUTE_CHECKSUM(req) {
      if (!req.service.api.operations) {
        return;
      }
      var operation2 = req.service.api.operations[req.operation];
      if (!operation2) {
        return;
      }
      var body = req.httpRequest.body;
      var isNonStreamingPayload = body && (AWS$q.util.Buffer.isBuffer(body) || typeof body === "string");
      var headers = req.httpRequest.headers;
      if (operation2.httpChecksumRequired && req.service.config.computeChecksums && isNonStreamingPayload && !headers["Content-MD5"]) {
        var md52 = AWS$q.util.crypto.md5(body, "base64");
        headers["Content-MD5"] = md52;
      }
    });
    addAsync("COMPUTE_SHA256", "afterBuild", function COMPUTE_SHA256(req, done) {
      req.haltHandlersOnError();
      if (!req.service.api.operations) {
        return;
      }
      var operation2 = req.service.api.operations[req.operation];
      var authtype = operation2 ? operation2.authtype : "";
      if (!req.service.api.signatureVersion && !authtype && !req.service.config.signatureVersion)
        return done();
      if (req.service.getSignerClass(req) === AWS$q.Signers.V4) {
        var body = req.httpRequest.body || "";
        if (authtype.indexOf("unsigned-body") >= 0) {
          req.httpRequest.headers["X-Amz-Content-Sha256"] = "UNSIGNED-PAYLOAD";
          return done();
        }
        AWS$q.util.computeSha256(body, function(err, sha) {
          if (err) {
            done(err);
          } else {
            req.httpRequest.headers["X-Amz-Content-Sha256"] = sha;
            done();
          }
        });
      } else {
        done();
      }
    });
    add("SET_CONTENT_LENGTH", "afterBuild", function SET_CONTENT_LENGTH(req) {
      var authtype = getOperationAuthtype(req);
      var payloadMember = AWS$q.util.getRequestPayloadShape(req);
      if (req.httpRequest.headers["Content-Length"] === void 0) {
        try {
          var length = AWS$q.util.string.byteLength(req.httpRequest.body);
          req.httpRequest.headers["Content-Length"] = length;
        } catch (err) {
          if (payloadMember && payloadMember.isStreaming) {
            if (payloadMember.requiresLength) {
              throw err;
            } else if (authtype.indexOf("unsigned-body") >= 0) {
              req.httpRequest.headers["Transfer-Encoding"] = "chunked";
              return;
            } else {
              throw err;
            }
          }
          throw err;
        }
      }
    });
    add("SET_HTTP_HOST", "afterBuild", function SET_HTTP_HOST(req) {
      req.httpRequest.headers["Host"] = req.httpRequest.endpoint.host;
    });
    add("RESTART", "restart", function RESTART() {
      var err = this.response.error;
      if (!err || !err.retryable)
        return;
      this.httpRequest = new AWS$q.HttpRequest(this.service.endpoint, this.service.region);
      if (this.response.retryCount < this.service.config.maxRetries) {
        this.response.retryCount++;
      } else {
        this.response.error = null;
      }
    });
    var addToHead = true;
    addAsync("DISCOVER_ENDPOINT", "sign", DISCOVER_ENDPOINT, addToHead);
    addAsync("SIGN", "sign", function SIGN(req, done) {
      var service = req.service;
      var operations2 = req.service.api.operations || {};
      var operation2 = operations2[req.operation];
      var authtype = operation2 ? operation2.authtype : "";
      if (!service.api.signatureVersion && !authtype && !service.config.signatureVersion)
        return done();
      service.config.getCredentials(function(err, credentials) {
        if (err) {
          req.response.error = err;
          return done();
        }
        try {
          var date = service.getSkewCorrectedDate();
          var SignerClass = service.getSignerClass(req);
          var signer2 = new SignerClass(req.httpRequest, service.getSigningName(req), {
            signatureCache: service.config.signatureCache,
            operation: operation2,
            signatureVersion: service.api.signatureVersion
          });
          signer2.setServiceClientId(service._clientId);
          delete req.httpRequest.headers["Authorization"];
          delete req.httpRequest.headers["Date"];
          delete req.httpRequest.headers["X-Amz-Date"];
          signer2.addAuthorization(credentials, date);
          req.signedAt = date;
        } catch (e2) {
          req.response.error = e2;
        }
        done();
      });
    });
    add("VALIDATE_RESPONSE", "validateResponse", function VALIDATE_RESPONSE(resp) {
      if (this.service.successfulResponse(resp, this)) {
        resp.data = {};
        resp.error = null;
      } else {
        resp.data = null;
        resp.error = AWS$q.util.error(new Error(), { code: "UnknownError", message: "An unknown error occurred." });
      }
    });
    addAsync("SEND", "send", function SEND(resp, done) {
      resp.httpResponse._abortCallback = done;
      resp.error = null;
      resp.data = null;
      function callback(httpResp) {
        resp.httpResponse.stream = httpResp;
        var stream = resp.request.httpRequest.stream;
        var service = resp.request.service;
        var api2 = service.api;
        var operationName = resp.request.operation;
        var operation2 = api2.operations[operationName] || {};
        httpResp.on("headers", function onHeaders(statusCode, headers, statusMessage) {
          resp.request.emit("httpHeaders", [statusCode, headers, resp, statusMessage]);
          if (!resp.httpResponse.streaming) {
            if (AWS$q.HttpClient.streamsApiVersion === 2) {
              if (operation2.hasEventOutput && service.successfulResponse(resp)) {
                resp.request.emit("httpDone");
                done();
                return;
              }
              httpResp.on("readable", function onReadable() {
                var data = httpResp.read();
                if (data !== null) {
                  resp.request.emit("httpData", [data, resp]);
                }
              });
            } else {
              httpResp.on("data", function onData(data) {
                resp.request.emit("httpData", [data, resp]);
              });
            }
          }
        });
        httpResp.on("end", function onEnd() {
          if (!stream || !stream.didCallback) {
            if (AWS$q.HttpClient.streamsApiVersion === 2 && (operation2.hasEventOutput && service.successfulResponse(resp))) {
              return;
            }
            resp.request.emit("httpDone");
            done();
          }
        });
      }
      function progress(httpResp) {
        httpResp.on("sendProgress", function onSendProgress(value) {
          resp.request.emit("httpUploadProgress", [value, resp]);
        });
        httpResp.on("receiveProgress", function onReceiveProgress(value) {
          resp.request.emit("httpDownloadProgress", [value, resp]);
        });
      }
      function error2(err) {
        if (err.code !== "RequestAbortedError") {
          var errCode = err.code === "TimeoutError" ? err.code : "NetworkingError";
          err = AWS$q.util.error(err, {
            code: errCode,
            region: resp.request.httpRequest.region,
            hostname: resp.request.httpRequest.endpoint.hostname,
            retryable: true
          });
        }
        resp.error = err;
        resp.request.emit("httpError", [resp.error, resp], function() {
          done();
        });
      }
      function executeSend() {
        var http = AWS$q.HttpClient.getInstance();
        var httpOptions = resp.request.service.config.httpOptions || {};
        try {
          var stream = http.handleRequest(resp.request.httpRequest, httpOptions, callback, error2);
          progress(stream);
        } catch (err) {
          error2(err);
        }
      }
      var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1e3;
      if (timeDiff >= 60 * 10) {
        this.emit("sign", [this], function(err) {
          if (err)
            done(err);
          else
            executeSend();
        });
      } else {
        executeSend();
      }
    });
    add("HTTP_HEADERS", "httpHeaders", function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {
      resp.httpResponse.statusCode = statusCode;
      resp.httpResponse.statusMessage = statusMessage;
      resp.httpResponse.headers = headers;
      resp.httpResponse.body = AWS$q.util.buffer.toBuffer("");
      resp.httpResponse.buffers = [];
      resp.httpResponse.numBytes = 0;
      var dateHeader = headers.date || headers.Date;
      var service = resp.request.service;
      if (dateHeader) {
        var serverTime = Date.parse(dateHeader);
        if (service.config.correctClockSkew && service.isClockSkewed(serverTime)) {
          service.applyClockOffset(serverTime);
        }
      }
    });
    add("HTTP_DATA", "httpData", function HTTP_DATA(chunk, resp) {
      if (chunk) {
        if (AWS$q.util.isNode()) {
          resp.httpResponse.numBytes += chunk.length;
          var total = resp.httpResponse.headers["content-length"];
          var progress = { loaded: resp.httpResponse.numBytes, total };
          resp.request.emit("httpDownloadProgress", [progress, resp]);
        }
        resp.httpResponse.buffers.push(AWS$q.util.buffer.toBuffer(chunk));
      }
    });
    add("HTTP_DONE", "httpDone", function HTTP_DONE(resp) {
      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
        var body = AWS$q.util.buffer.concat(resp.httpResponse.buffers);
        resp.httpResponse.body = body;
      }
      delete resp.httpResponse.numBytes;
      delete resp.httpResponse.buffers;
    });
    add("FINALIZE_ERROR", "retry", function FINALIZE_ERROR(resp) {
      if (resp.httpResponse.statusCode) {
        resp.error.statusCode = resp.httpResponse.statusCode;
        if (resp.error.retryable === void 0) {
          resp.error.retryable = this.service.retryableError(resp.error, this);
        }
      }
    });
    add("INVALIDATE_CREDENTIALS", "retry", function INVALIDATE_CREDENTIALS(resp) {
      if (!resp.error)
        return;
      switch (resp.error.code) {
        case "RequestExpired":
        case "ExpiredTokenException":
        case "ExpiredToken":
          resp.error.retryable = true;
          resp.request.service.config.credentials.expired = true;
      }
    });
    add("EXPIRED_SIGNATURE", "retry", function EXPIRED_SIGNATURE(resp) {
      var err = resp.error;
      if (!err)
        return;
      if (typeof err.code === "string" && typeof err.message === "string") {
        if (err.code.match(/Signature/) && err.message.match(/expired/)) {
          resp.error.retryable = true;
        }
      }
    });
    add("CLOCK_SKEWED", "retry", function CLOCK_SKEWED(resp) {
      if (!resp.error)
        return;
      if (this.service.clockSkewError(resp.error) && this.service.config.correctClockSkew) {
        resp.error.retryable = true;
      }
    });
    add("REDIRECT", "retry", function REDIRECT(resp) {
      if (resp.error && resp.error.statusCode >= 300 && resp.error.statusCode < 400 && resp.httpResponse.headers["location"]) {
        this.httpRequest.endpoint = new AWS$q.Endpoint(resp.httpResponse.headers["location"]);
        this.httpRequest.headers["Host"] = this.httpRequest.endpoint.host;
        resp.error.redirect = true;
        resp.error.retryable = true;
      }
    });
    add("RETRY_CHECK", "retry", function RETRY_CHECK(resp) {
      if (resp.error) {
        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
          resp.error.retryDelay = 0;
        } else if (resp.retryCount < resp.maxRetries) {
          resp.error.retryDelay = this.service.retryDelays(resp.retryCount, resp.error) || 0;
        }
      }
    });
    addAsync("RESET_RETRY_STATE", "afterRetry", function RESET_RETRY_STATE(resp, done) {
      var delay, willRetry = false;
      if (resp.error) {
        delay = resp.error.retryDelay || 0;
        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
          resp.retryCount++;
          willRetry = true;
        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
          resp.redirectCount++;
          willRetry = true;
        }
      }
      if (willRetry && delay >= 0) {
        resp.error = null;
        setTimeout(done, delay);
      } else {
        done();
      }
    });
  }),
  CorePost: new SequentialExecutor2().addNamedListeners(function(add) {
    add("EXTRACT_REQUEST_ID", "extractData", AWS$q.util.extractRequestId);
    add("EXTRACT_REQUEST_ID", "extractError", AWS$q.util.extractRequestId);
    add("ENOTFOUND_ERROR", "httpError", function ENOTFOUND_ERROR(err) {
      function isDNSError(err2) {
        return err2.errno === "ENOTFOUND" || typeof err2.errno === "number" && typeof AWS$q.util.getSystemErrorName === "function" && ["EAI_NONAME", "EAI_NODATA"].indexOf(AWS$q.util.getSystemErrorName(err2.errno) >= 0);
      }
      if (err.code === "NetworkingError" && isDNSError(err)) {
        var message = "Inaccessible host: `" + err.hostname + "' at port `" + err.port + "'. This service may not be available in the `" + err.region + "' region.";
        this.response.error = AWS$q.util.error(new Error(message), {
          code: "UnknownEndpoint",
          region: err.region,
          hostname: err.hostname,
          retryable: true,
          originalError: err
        });
      }
    });
  }),
  Logger: new SequentialExecutor2().addNamedListeners(function(add) {
    add("LOG_REQUEST", "complete", function LOG_REQUEST(resp) {
      var req = resp.request;
      var logger2 = req.service.config.logger;
      if (!logger2)
        return;
      function filterSensitiveLog(inputShape, shape2) {
        if (!shape2) {
          return shape2;
        }
        if (inputShape.isSensitive) {
          return "***SensitiveInformation***";
        }
        switch (inputShape.type) {
          case "structure":
            var struct = {};
            AWS$q.util.each(shape2, function(subShapeName, subShape) {
              if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {
                struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);
              } else {
                struct[subShapeName] = subShape;
              }
            });
            return struct;
          case "list":
            var list = [];
            AWS$q.util.arrayEach(shape2, function(subShape, index) {
              list.push(filterSensitiveLog(inputShape.member, subShape));
            });
            return list;
          case "map":
            var map = {};
            AWS$q.util.each(shape2, function(key, value) {
              map[key] = filterSensitiveLog(inputShape.value, value);
            });
            return map;
          default:
            return shape2;
        }
      }
      function buildMessage() {
        var time = resp.request.service.getSkewCorrectedDate().getTime();
        var delta = (time - req.startTime.getTime()) / 1e3;
        var ansi = logger2.isTTY ? true : false;
        var status2 = resp.httpResponse.statusCode;
        var censoredParams = req.params;
        if (req.service.api.operations && req.service.api.operations[req.operation] && req.service.api.operations[req.operation].input) {
          var inputShape = req.service.api.operations[req.operation].input;
          censoredParams = filterSensitiveLog(inputShape, req.params);
        }
        var params = require$$1$2.inspect(censoredParams, true, null);
        var message = "";
        if (ansi)
          message += "\x1B[33m";
        message += "[AWS " + req.service.serviceIdentifier + " " + status2;
        message += " " + delta.toString() + "s " + resp.retryCount + " retries]";
        if (ansi)
          message += "\x1B[0;1m";
        message += " " + AWS$q.util.string.lowerFirst(req.operation);
        message += "(" + params + ")";
        if (ansi)
          message += "\x1B[0m";
        return message;
      }
      var line = buildMessage();
      if (typeof logger2.log === "function") {
        logger2.log(line);
      } else if (typeof logger2.write === "function") {
        logger2.write(line + "\n");
      }
    });
  }),
  Json: new SequentialExecutor2().addNamedListeners(function(add) {
    var svc = json;
    add("BUILD", "build", svc.buildRequest);
    add("EXTRACT_DATA", "extractData", svc.extractData);
    add("EXTRACT_ERROR", "extractError", svc.extractError);
  }),
  Rest: new SequentialExecutor2().addNamedListeners(function(add) {
    var svc = rest;
    add("BUILD", "build", svc.buildRequest);
    add("EXTRACT_DATA", "extractData", svc.extractData);
    add("EXTRACT_ERROR", "extractError", svc.extractError);
  }),
  RestJson: new SequentialExecutor2().addNamedListeners(function(add) {
    var svc = rest_json;
    add("BUILD", "build", svc.buildRequest);
    add("EXTRACT_DATA", "extractData", svc.extractData);
    add("EXTRACT_ERROR", "extractError", svc.extractError);
  }),
  RestXml: new SequentialExecutor2().addNamedListeners(function(add) {
    var svc = rest_xml;
    add("BUILD", "build", svc.buildRequest);
    add("EXTRACT_DATA", "extractData", svc.extractData);
    add("EXTRACT_ERROR", "extractError", svc.extractError);
  }),
  Query: new SequentialExecutor2().addNamedListeners(function(add) {
    var svc = query;
    add("BUILD", "build", svc.buildRequest);
    add("EXTRACT_DATA", "extractData", svc.extractData);
    add("EXTRACT_ERROR", "extractError", svc.extractError);
  })
};
function AcceptorStateMachine$1(states, state) {
  this.currentState = state || null;
  this.states = states || {};
}
AcceptorStateMachine$1.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {
  if (typeof finalState === "function") {
    inputError = bindObject;
    bindObject = done;
    done = finalState;
    finalState = null;
  }
  var self2 = this;
  var state = self2.states[self2.currentState];
  state.fn.call(bindObject || self2, inputError, function(err) {
    if (err) {
      if (state.fail)
        self2.currentState = state.fail;
      else
        return done ? done.call(bindObject, err) : null;
    } else {
      if (state.accept)
        self2.currentState = state.accept;
      else
        return done ? done.call(bindObject) : null;
    }
    if (self2.currentState === finalState) {
      return done ? done.call(bindObject, err) : null;
    }
    self2.runTo(finalState, done, bindObject, err);
  });
};
AcceptorStateMachine$1.prototype.addState = function addState(name, acceptState, failState, fn2) {
  if (typeof acceptState === "function") {
    fn2 = acceptState;
    acceptState = null;
    failState = null;
  } else if (typeof failState === "function") {
    fn2 = failState;
    failState = null;
  }
  if (!this.currentState)
    this.currentState = name;
  this.states[name] = { accept: acceptState, fail: failState, fn: fn2 };
  return this;
};
var state_machine = AcceptorStateMachine$1;
var jmespath$3 = {};
(function(exports) {
  (function(exports2) {
    function isArray(obj) {
      if (obj !== null) {
        return Object.prototype.toString.call(obj) === "[object Array]";
      } else {
        return false;
      }
    }
    function isObject2(obj) {
      if (obj !== null) {
        return Object.prototype.toString.call(obj) === "[object Object]";
      } else {
        return false;
      }
    }
    function strictDeepEqual(first, second) {
      if (first === second) {
        return true;
      }
      var firstType = Object.prototype.toString.call(first);
      if (firstType !== Object.prototype.toString.call(second)) {
        return false;
      }
      if (isArray(first) === true) {
        if (first.length !== second.length) {
          return false;
        }
        for (var i = 0; i < first.length; i++) {
          if (strictDeepEqual(first[i], second[i]) === false) {
            return false;
          }
        }
        return true;
      }
      if (isObject2(first) === true) {
        var keysSeen = {};
        for (var key in first) {
          if (hasOwnProperty.call(first, key)) {
            if (strictDeepEqual(first[key], second[key]) === false) {
              return false;
            }
            keysSeen[key] = true;
          }
        }
        for (var key2 in second) {
          if (hasOwnProperty.call(second, key2)) {
            if (keysSeen[key2] !== true) {
              return false;
            }
          }
        }
        return true;
      }
      return false;
    }
    function isFalse(obj) {
      if (obj === "" || obj === false || obj === null) {
        return true;
      } else if (isArray(obj) && obj.length === 0) {
        return true;
      } else if (isObject2(obj)) {
        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    }
    function objValues(obj) {
      var keys = Object.keys(obj);
      var values = [];
      for (var i = 0; i < keys.length; i++) {
        values.push(obj[keys[i]]);
      }
      return values;
    }
    var trimLeft;
    if (typeof String.prototype.trimLeft === "function") {
      trimLeft = function(str) {
        return str.trimLeft();
      };
    } else {
      trimLeft = function(str) {
        return str.match(/^\s*(.*)/)[1];
      };
    }
    var TYPE_NUMBER = 0;
    var TYPE_ANY = 1;
    var TYPE_STRING = 2;
    var TYPE_ARRAY = 3;
    var TYPE_OBJECT = 4;
    var TYPE_BOOLEAN = 5;
    var TYPE_EXPREF = 6;
    var TYPE_NULL = 7;
    var TYPE_ARRAY_NUMBER = 8;
    var TYPE_ARRAY_STRING = 9;
    var TYPE_NAME_TABLE = {
      0: "number",
      1: "any",
      2: "string",
      3: "array",
      4: "object",
      5: "boolean",
      6: "expression",
      7: "null",
      8: "Array<number>",
      9: "Array<string>"
    };
    var TOK_EOF = "EOF";
    var TOK_UNQUOTEDIDENTIFIER = "UnquotedIdentifier";
    var TOK_QUOTEDIDENTIFIER = "QuotedIdentifier";
    var TOK_RBRACKET = "Rbracket";
    var TOK_RPAREN = "Rparen";
    var TOK_COMMA = "Comma";
    var TOK_COLON = "Colon";
    var TOK_RBRACE = "Rbrace";
    var TOK_NUMBER = "Number";
    var TOK_CURRENT = "Current";
    var TOK_EXPREF = "Expref";
    var TOK_PIPE = "Pipe";
    var TOK_OR = "Or";
    var TOK_AND = "And";
    var TOK_EQ = "EQ";
    var TOK_GT = "GT";
    var TOK_LT = "LT";
    var TOK_GTE = "GTE";
    var TOK_LTE = "LTE";
    var TOK_NE = "NE";
    var TOK_FLATTEN = "Flatten";
    var TOK_STAR = "Star";
    var TOK_FILTER = "Filter";
    var TOK_DOT = "Dot";
    var TOK_NOT = "Not";
    var TOK_LBRACE = "Lbrace";
    var TOK_LBRACKET = "Lbracket";
    var TOK_LPAREN = "Lparen";
    var TOK_LITERAL = "Literal";
    var basicTokens = {
      ".": TOK_DOT,
      "*": TOK_STAR,
      ",": TOK_COMMA,
      ":": TOK_COLON,
      "{": TOK_LBRACE,
      "}": TOK_RBRACE,
      "]": TOK_RBRACKET,
      "(": TOK_LPAREN,
      ")": TOK_RPAREN,
      "@": TOK_CURRENT
    };
    var operatorStartToken = {
      "<": true,
      ">": true,
      "=": true,
      "!": true
    };
    var skipChars = {
      " ": true,
      "	": true,
      "\n": true
    };
    function isAlpha(ch) {
      return ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch === "_";
    }
    function isNum(ch) {
      return ch >= "0" && ch <= "9" || ch === "-";
    }
    function isAlphaNum(ch) {
      return ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch >= "0" && ch <= "9" || ch === "_";
    }
    function Lexer() {
    }
    Lexer.prototype = {
      tokenize: function(stream) {
        var tokens = [];
        this._current = 0;
        var start;
        var identifier;
        var token;
        while (this._current < stream.length) {
          if (isAlpha(stream[this._current])) {
            start = this._current;
            identifier = this._consumeUnquotedIdentifier(stream);
            tokens.push({
              type: TOK_UNQUOTEDIDENTIFIER,
              value: identifier,
              start
            });
          } else if (basicTokens[stream[this._current]] !== void 0) {
            tokens.push({
              type: basicTokens[stream[this._current]],
              value: stream[this._current],
              start: this._current
            });
            this._current++;
          } else if (isNum(stream[this._current])) {
            token = this._consumeNumber(stream);
            tokens.push(token);
          } else if (stream[this._current] === "[") {
            token = this._consumeLBracket(stream);
            tokens.push(token);
          } else if (stream[this._current] === '"') {
            start = this._current;
            identifier = this._consumeQuotedIdentifier(stream);
            tokens.push({
              type: TOK_QUOTEDIDENTIFIER,
              value: identifier,
              start
            });
          } else if (stream[this._current] === "'") {
            start = this._current;
            identifier = this._consumeRawStringLiteral(stream);
            tokens.push({
              type: TOK_LITERAL,
              value: identifier,
              start
            });
          } else if (stream[this._current] === "`") {
            start = this._current;
            var literal = this._consumeLiteral(stream);
            tokens.push({
              type: TOK_LITERAL,
              value: literal,
              start
            });
          } else if (operatorStartToken[stream[this._current]] !== void 0) {
            tokens.push(this._consumeOperator(stream));
          } else if (skipChars[stream[this._current]] !== void 0) {
            this._current++;
          } else if (stream[this._current] === "&") {
            start = this._current;
            this._current++;
            if (stream[this._current] === "&") {
              this._current++;
              tokens.push({ type: TOK_AND, value: "&&", start });
            } else {
              tokens.push({ type: TOK_EXPREF, value: "&", start });
            }
          } else if (stream[this._current] === "|") {
            start = this._current;
            this._current++;
            if (stream[this._current] === "|") {
              this._current++;
              tokens.push({ type: TOK_OR, value: "||", start });
            } else {
              tokens.push({ type: TOK_PIPE, value: "|", start });
            }
          } else {
            var error2 = new Error("Unknown character:" + stream[this._current]);
            error2.name = "LexerError";
            throw error2;
          }
        }
        return tokens;
      },
      _consumeUnquotedIdentifier: function(stream) {
        var start = this._current;
        this._current++;
        while (this._current < stream.length && isAlphaNum(stream[this._current])) {
          this._current++;
        }
        return stream.slice(start, this._current);
      },
      _consumeQuotedIdentifier: function(stream) {
        var start = this._current;
        this._current++;
        var maxLength = stream.length;
        while (stream[this._current] !== '"' && this._current < maxLength) {
          var current = this._current;
          if (stream[current] === "\\" && (stream[current + 1] === "\\" || stream[current + 1] === '"')) {
            current += 2;
          } else {
            current++;
          }
          this._current = current;
        }
        this._current++;
        return JSON.parse(stream.slice(start, this._current));
      },
      _consumeRawStringLiteral: function(stream) {
        var start = this._current;
        this._current++;
        var maxLength = stream.length;
        while (stream[this._current] !== "'" && this._current < maxLength) {
          var current = this._current;
          if (stream[current] === "\\" && (stream[current + 1] === "\\" || stream[current + 1] === "'")) {
            current += 2;
          } else {
            current++;
          }
          this._current = current;
        }
        this._current++;
        var literal = stream.slice(start + 1, this._current - 1);
        return literal.replace("\\'", "'");
      },
      _consumeNumber: function(stream) {
        var start = this._current;
        this._current++;
        var maxLength = stream.length;
        while (isNum(stream[this._current]) && this._current < maxLength) {
          this._current++;
        }
        var value = parseInt(stream.slice(start, this._current));
        return { type: TOK_NUMBER, value, start };
      },
      _consumeLBracket: function(stream) {
        var start = this._current;
        this._current++;
        if (stream[this._current] === "?") {
          this._current++;
          return { type: TOK_FILTER, value: "[?", start };
        } else if (stream[this._current] === "]") {
          this._current++;
          return { type: TOK_FLATTEN, value: "[]", start };
        } else {
          return { type: TOK_LBRACKET, value: "[", start };
        }
      },
      _consumeOperator: function(stream) {
        var start = this._current;
        var startingChar = stream[start];
        this._current++;
        if (startingChar === "!") {
          if (stream[this._current] === "=") {
            this._current++;
            return { type: TOK_NE, value: "!=", start };
          } else {
            return { type: TOK_NOT, value: "!", start };
          }
        } else if (startingChar === "<") {
          if (stream[this._current] === "=") {
            this._current++;
            return { type: TOK_LTE, value: "<=", start };
          } else {
            return { type: TOK_LT, value: "<", start };
          }
        } else if (startingChar === ">") {
          if (stream[this._current] === "=") {
            this._current++;
            return { type: TOK_GTE, value: ">=", start };
          } else {
            return { type: TOK_GT, value: ">", start };
          }
        } else if (startingChar === "=") {
          if (stream[this._current] === "=") {
            this._current++;
            return { type: TOK_EQ, value: "==", start };
          }
        }
      },
      _consumeLiteral: function(stream) {
        this._current++;
        var start = this._current;
        var maxLength = stream.length;
        var literal;
        while (stream[this._current] !== "`" && this._current < maxLength) {
          var current = this._current;
          if (stream[current] === "\\" && (stream[current + 1] === "\\" || stream[current + 1] === "`")) {
            current += 2;
          } else {
            current++;
          }
          this._current = current;
        }
        var literalString = trimLeft(stream.slice(start, this._current));
        literalString = literalString.replace("\\`", "`");
        if (this._looksLikeJSON(literalString)) {
          literal = JSON.parse(literalString);
        } else {
          literal = JSON.parse('"' + literalString + '"');
        }
        this._current++;
        return literal;
      },
      _looksLikeJSON: function(literalString) {
        var startingChars = '[{"';
        var jsonLiterals = ["true", "false", "null"];
        var numberLooking = "-0123456789";
        if (literalString === "") {
          return false;
        } else if (startingChars.indexOf(literalString[0]) >= 0) {
          return true;
        } else if (jsonLiterals.indexOf(literalString) >= 0) {
          return true;
        } else if (numberLooking.indexOf(literalString[0]) >= 0) {
          try {
            JSON.parse(literalString);
            return true;
          } catch (ex) {
            return false;
          }
        } else {
          return false;
        }
      }
    };
    var bindingPower = {};
    bindingPower[TOK_EOF] = 0;
    bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;
    bindingPower[TOK_QUOTEDIDENTIFIER] = 0;
    bindingPower[TOK_RBRACKET] = 0;
    bindingPower[TOK_RPAREN] = 0;
    bindingPower[TOK_COMMA] = 0;
    bindingPower[TOK_RBRACE] = 0;
    bindingPower[TOK_NUMBER] = 0;
    bindingPower[TOK_CURRENT] = 0;
    bindingPower[TOK_EXPREF] = 0;
    bindingPower[TOK_PIPE] = 1;
    bindingPower[TOK_OR] = 2;
    bindingPower[TOK_AND] = 3;
    bindingPower[TOK_EQ] = 5;
    bindingPower[TOK_GT] = 5;
    bindingPower[TOK_LT] = 5;
    bindingPower[TOK_GTE] = 5;
    bindingPower[TOK_LTE] = 5;
    bindingPower[TOK_NE] = 5;
    bindingPower[TOK_FLATTEN] = 9;
    bindingPower[TOK_STAR] = 20;
    bindingPower[TOK_FILTER] = 21;
    bindingPower[TOK_DOT] = 40;
    bindingPower[TOK_NOT] = 45;
    bindingPower[TOK_LBRACE] = 50;
    bindingPower[TOK_LBRACKET] = 55;
    bindingPower[TOK_LPAREN] = 60;
    function Parser() {
    }
    Parser.prototype = {
      parse: function(expression) {
        this._loadTokens(expression);
        this.index = 0;
        var ast = this.expression(0);
        if (this._lookahead(0) !== TOK_EOF) {
          var t2 = this._lookaheadToken(0);
          var error2 = new Error("Unexpected token type: " + t2.type + ", value: " + t2.value);
          error2.name = "ParserError";
          throw error2;
        }
        return ast;
      },
      _loadTokens: function(expression) {
        var lexer = new Lexer();
        var tokens = lexer.tokenize(expression);
        tokens.push({ type: TOK_EOF, value: "", start: expression.length });
        this.tokens = tokens;
      },
      expression: function(rbp) {
        var leftToken = this._lookaheadToken(0);
        this._advance();
        var left = this.nud(leftToken);
        var currentToken = this._lookahead(0);
        while (rbp < bindingPower[currentToken]) {
          this._advance();
          left = this.led(currentToken, left);
          currentToken = this._lookahead(0);
        }
        return left;
      },
      _lookahead: function(number) {
        return this.tokens[this.index + number].type;
      },
      _lookaheadToken: function(number) {
        return this.tokens[this.index + number];
      },
      _advance: function() {
        this.index++;
      },
      nud: function(token) {
        var left;
        var right;
        var expression;
        switch (token.type) {
          case TOK_LITERAL:
            return { type: "Literal", value: token.value };
          case TOK_UNQUOTEDIDENTIFIER:
            return { type: "Field", name: token.value };
          case TOK_QUOTEDIDENTIFIER:
            var node = { type: "Field", name: token.value };
            if (this._lookahead(0) === TOK_LPAREN) {
              throw new Error("Quoted identifier not allowed for function names.");
            }
            return node;
          case TOK_NOT:
            right = this.expression(bindingPower.Not);
            return { type: "NotExpression", children: [right] };
          case TOK_STAR:
            left = { type: "Identity" };
            right = null;
            if (this._lookahead(0) === TOK_RBRACKET) {
              right = { type: "Identity" };
            } else {
              right = this._parseProjectionRHS(bindingPower.Star);
            }
            return { type: "ValueProjection", children: [left, right] };
          case TOK_FILTER:
            return this.led(token.type, { type: "Identity" });
          case TOK_LBRACE:
            return this._parseMultiselectHash();
          case TOK_FLATTEN:
            left = { type: TOK_FLATTEN, children: [{ type: "Identity" }] };
            right = this._parseProjectionRHS(bindingPower.Flatten);
            return { type: "Projection", children: [left, right] };
          case TOK_LBRACKET:
            if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {
              right = this._parseIndexExpression();
              return this._projectIfSlice({ type: "Identity" }, right);
            } else if (this._lookahead(0) === TOK_STAR && this._lookahead(1) === TOK_RBRACKET) {
              this._advance();
              this._advance();
              right = this._parseProjectionRHS(bindingPower.Star);
              return {
                type: "Projection",
                children: [{ type: "Identity" }, right]
              };
            }
            return this._parseMultiselectList();
          case TOK_CURRENT:
            return { type: TOK_CURRENT };
          case TOK_EXPREF:
            expression = this.expression(bindingPower.Expref);
            return { type: "ExpressionReference", children: [expression] };
          case TOK_LPAREN:
            var args = [];
            while (this._lookahead(0) !== TOK_RPAREN) {
              if (this._lookahead(0) === TOK_CURRENT) {
                expression = { type: TOK_CURRENT };
                this._advance();
              } else {
                expression = this.expression(0);
              }
              args.push(expression);
            }
            this._match(TOK_RPAREN);
            return args[0];
          default:
            this._errorToken(token);
        }
      },
      led: function(tokenName, left) {
        var right;
        switch (tokenName) {
          case TOK_DOT:
            var rbp = bindingPower.Dot;
            if (this._lookahead(0) !== TOK_STAR) {
              right = this._parseDotRHS(rbp);
              return { type: "Subexpression", children: [left, right] };
            }
            this._advance();
            right = this._parseProjectionRHS(rbp);
            return { type: "ValueProjection", children: [left, right] };
          case TOK_PIPE:
            right = this.expression(bindingPower.Pipe);
            return { type: TOK_PIPE, children: [left, right] };
          case TOK_OR:
            right = this.expression(bindingPower.Or);
            return { type: "OrExpression", children: [left, right] };
          case TOK_AND:
            right = this.expression(bindingPower.And);
            return { type: "AndExpression", children: [left, right] };
          case TOK_LPAREN:
            var name = left.name;
            var args = [];
            var expression, node;
            while (this._lookahead(0) !== TOK_RPAREN) {
              if (this._lookahead(0) === TOK_CURRENT) {
                expression = { type: TOK_CURRENT };
                this._advance();
              } else {
                expression = this.expression(0);
              }
              if (this._lookahead(0) === TOK_COMMA) {
                this._match(TOK_COMMA);
              }
              args.push(expression);
            }
            this._match(TOK_RPAREN);
            node = { type: "Function", name, children: args };
            return node;
          case TOK_FILTER:
            var condition = this.expression(0);
            this._match(TOK_RBRACKET);
            if (this._lookahead(0) === TOK_FLATTEN) {
              right = { type: "Identity" };
            } else {
              right = this._parseProjectionRHS(bindingPower.Filter);
            }
            return { type: "FilterProjection", children: [left, right, condition] };
          case TOK_FLATTEN:
            var leftNode = { type: TOK_FLATTEN, children: [left] };
            var rightNode = this._parseProjectionRHS(bindingPower.Flatten);
            return { type: "Projection", children: [leftNode, rightNode] };
          case TOK_EQ:
          case TOK_NE:
          case TOK_GT:
          case TOK_GTE:
          case TOK_LT:
          case TOK_LTE:
            return this._parseComparator(left, tokenName);
          case TOK_LBRACKET:
            var token = this._lookaheadToken(0);
            if (token.type === TOK_NUMBER || token.type === TOK_COLON) {
              right = this._parseIndexExpression();
              return this._projectIfSlice(left, right);
            }
            this._match(TOK_STAR);
            this._match(TOK_RBRACKET);
            right = this._parseProjectionRHS(bindingPower.Star);
            return { type: "Projection", children: [left, right] };
          default:
            this._errorToken(this._lookaheadToken(0));
        }
      },
      _match: function(tokenType) {
        if (this._lookahead(0) === tokenType) {
          this._advance();
        } else {
          var t2 = this._lookaheadToken(0);
          var error2 = new Error("Expected " + tokenType + ", got: " + t2.type);
          error2.name = "ParserError";
          throw error2;
        }
      },
      _errorToken: function(token) {
        var error2 = new Error("Invalid token (" + token.type + '): "' + token.value + '"');
        error2.name = "ParserError";
        throw error2;
      },
      _parseIndexExpression: function() {
        if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {
          return this._parseSliceExpression();
        } else {
          var node = {
            type: "Index",
            value: this._lookaheadToken(0).value
          };
          this._advance();
          this._match(TOK_RBRACKET);
          return node;
        }
      },
      _projectIfSlice: function(left, right) {
        var indexExpr = { type: "IndexExpression", children: [left, right] };
        if (right.type === "Slice") {
          return {
            type: "Projection",
            children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)]
          };
        } else {
          return indexExpr;
        }
      },
      _parseSliceExpression: function() {
        var parts = [null, null, null];
        var index = 0;
        var currentToken = this._lookahead(0);
        while (currentToken !== TOK_RBRACKET && index < 3) {
          if (currentToken === TOK_COLON) {
            index++;
            this._advance();
          } else if (currentToken === TOK_NUMBER) {
            parts[index] = this._lookaheadToken(0).value;
            this._advance();
          } else {
            var t2 = this._lookahead(0);
            var error2 = new Error("Syntax error, unexpected token: " + t2.value + "(" + t2.type + ")");
            error2.name = "Parsererror";
            throw error2;
          }
          currentToken = this._lookahead(0);
        }
        this._match(TOK_RBRACKET);
        return {
          type: "Slice",
          children: parts
        };
      },
      _parseComparator: function(left, comparator) {
        var right = this.expression(bindingPower[comparator]);
        return { type: "Comparator", name: comparator, children: [left, right] };
      },
      _parseDotRHS: function(rbp) {
        var lookahead = this._lookahead(0);
        var exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];
        if (exprTokens.indexOf(lookahead) >= 0) {
          return this.expression(rbp);
        } else if (lookahead === TOK_LBRACKET) {
          this._match(TOK_LBRACKET);
          return this._parseMultiselectList();
        } else if (lookahead === TOK_LBRACE) {
          this._match(TOK_LBRACE);
          return this._parseMultiselectHash();
        }
      },
      _parseProjectionRHS: function(rbp) {
        var right;
        if (bindingPower[this._lookahead(0)] < 10) {
          right = { type: "Identity" };
        } else if (this._lookahead(0) === TOK_LBRACKET) {
          right = this.expression(rbp);
        } else if (this._lookahead(0) === TOK_FILTER) {
          right = this.expression(rbp);
        } else if (this._lookahead(0) === TOK_DOT) {
          this._match(TOK_DOT);
          right = this._parseDotRHS(rbp);
        } else {
          var t2 = this._lookaheadToken(0);
          var error2 = new Error("Sytanx error, unexpected token: " + t2.value + "(" + t2.type + ")");
          error2.name = "ParserError";
          throw error2;
        }
        return right;
      },
      _parseMultiselectList: function() {
        var expressions = [];
        while (this._lookahead(0) !== TOK_RBRACKET) {
          var expression = this.expression(0);
          expressions.push(expression);
          if (this._lookahead(0) === TOK_COMMA) {
            this._match(TOK_COMMA);
            if (this._lookahead(0) === TOK_RBRACKET) {
              throw new Error("Unexpected token Rbracket");
            }
          }
        }
        this._match(TOK_RBRACKET);
        return { type: "MultiSelectList", children: expressions };
      },
      _parseMultiselectHash: function() {
        var pairs = [];
        var identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];
        var keyToken, keyName, value, node;
        for (; ; ) {
          keyToken = this._lookaheadToken(0);
          if (identifierTypes.indexOf(keyToken.type) < 0) {
            throw new Error("Expecting an identifier token, got: " + keyToken.type);
          }
          keyName = keyToken.value;
          this._advance();
          this._match(TOK_COLON);
          value = this.expression(0);
          node = { type: "KeyValuePair", name: keyName, value };
          pairs.push(node);
          if (this._lookahead(0) === TOK_COMMA) {
            this._match(TOK_COMMA);
          } else if (this._lookahead(0) === TOK_RBRACE) {
            this._match(TOK_RBRACE);
            break;
          }
        }
        return { type: "MultiSelectHash", children: pairs };
      }
    };
    function TreeInterpreter(runtime) {
      this.runtime = runtime;
    }
    TreeInterpreter.prototype = {
      search: function(node, value) {
        return this.visit(node, value);
      },
      visit: function(node, value) {
        var matched, current, result, first, second, field, left, right, collected, i;
        switch (node.type) {
          case "Field":
            if (value !== null && isObject2(value)) {
              field = value[node.name];
              if (field === void 0) {
                return null;
              } else {
                return field;
              }
            }
            return null;
          case "Subexpression":
            result = this.visit(node.children[0], value);
            for (i = 1; i < node.children.length; i++) {
              result = this.visit(node.children[1], result);
              if (result === null) {
                return null;
              }
            }
            return result;
          case "IndexExpression":
            left = this.visit(node.children[0], value);
            right = this.visit(node.children[1], left);
            return right;
          case "Index":
            if (!isArray(value)) {
              return null;
            }
            var index = node.value;
            if (index < 0) {
              index = value.length + index;
            }
            result = value[index];
            if (result === void 0) {
              result = null;
            }
            return result;
          case "Slice":
            if (!isArray(value)) {
              return null;
            }
            var sliceParams = node.children.slice(0);
            var computed = this.computeSliceParams(value.length, sliceParams);
            var start = computed[0];
            var stop = computed[1];
            var step = computed[2];
            result = [];
            if (step > 0) {
              for (i = start; i < stop; i += step) {
                result.push(value[i]);
              }
            } else {
              for (i = start; i > stop; i += step) {
                result.push(value[i]);
              }
            }
            return result;
          case "Projection":
            var base = this.visit(node.children[0], value);
            if (!isArray(base)) {
              return null;
            }
            collected = [];
            for (i = 0; i < base.length; i++) {
              current = this.visit(node.children[1], base[i]);
              if (current !== null) {
                collected.push(current);
              }
            }
            return collected;
          case "ValueProjection":
            base = this.visit(node.children[0], value);
            if (!isObject2(base)) {
              return null;
            }
            collected = [];
            var values = objValues(base);
            for (i = 0; i < values.length; i++) {
              current = this.visit(node.children[1], values[i]);
              if (current !== null) {
                collected.push(current);
              }
            }
            return collected;
          case "FilterProjection":
            base = this.visit(node.children[0], value);
            if (!isArray(base)) {
              return null;
            }
            var filtered = [];
            var finalResults = [];
            for (i = 0; i < base.length; i++) {
              matched = this.visit(node.children[2], base[i]);
              if (!isFalse(matched)) {
                filtered.push(base[i]);
              }
            }
            for (var j2 = 0; j2 < filtered.length; j2++) {
              current = this.visit(node.children[1], filtered[j2]);
              if (current !== null) {
                finalResults.push(current);
              }
            }
            return finalResults;
          case "Comparator":
            first = this.visit(node.children[0], value);
            second = this.visit(node.children[1], value);
            switch (node.name) {
              case TOK_EQ:
                result = strictDeepEqual(first, second);
                break;
              case TOK_NE:
                result = !strictDeepEqual(first, second);
                break;
              case TOK_GT:
                result = first > second;
                break;
              case TOK_GTE:
                result = first >= second;
                break;
              case TOK_LT:
                result = first < second;
                break;
              case TOK_LTE:
                result = first <= second;
                break;
              default:
                throw new Error("Unknown comparator: " + node.name);
            }
            return result;
          case TOK_FLATTEN:
            var original = this.visit(node.children[0], value);
            if (!isArray(original)) {
              return null;
            }
            var merged = [];
            for (i = 0; i < original.length; i++) {
              current = original[i];
              if (isArray(current)) {
                merged.push.apply(merged, current);
              } else {
                merged.push(current);
              }
            }
            return merged;
          case "Identity":
            return value;
          case "MultiSelectList":
            if (value === null) {
              return null;
            }
            collected = [];
            for (i = 0; i < node.children.length; i++) {
              collected.push(this.visit(node.children[i], value));
            }
            return collected;
          case "MultiSelectHash":
            if (value === null) {
              return null;
            }
            collected = {};
            var child;
            for (i = 0; i < node.children.length; i++) {
              child = node.children[i];
              collected[child.name] = this.visit(child.value, value);
            }
            return collected;
          case "OrExpression":
            matched = this.visit(node.children[0], value);
            if (isFalse(matched)) {
              matched = this.visit(node.children[1], value);
            }
            return matched;
          case "AndExpression":
            first = this.visit(node.children[0], value);
            if (isFalse(first) === true) {
              return first;
            }
            return this.visit(node.children[1], value);
          case "NotExpression":
            first = this.visit(node.children[0], value);
            return isFalse(first);
          case "Literal":
            return node.value;
          case TOK_PIPE:
            left = this.visit(node.children[0], value);
            return this.visit(node.children[1], left);
          case TOK_CURRENT:
            return value;
          case "Function":
            var resolvedArgs = [];
            for (i = 0; i < node.children.length; i++) {
              resolvedArgs.push(this.visit(node.children[i], value));
            }
            return this.runtime.callFunction(node.name, resolvedArgs);
          case "ExpressionReference":
            var refNode = node.children[0];
            refNode.jmespathType = TOK_EXPREF;
            return refNode;
          default:
            throw new Error("Unknown node type: " + node.type);
        }
      },
      computeSliceParams: function(arrayLength, sliceParams) {
        var start = sliceParams[0];
        var stop = sliceParams[1];
        var step = sliceParams[2];
        var computed = [null, null, null];
        if (step === null) {
          step = 1;
        } else if (step === 0) {
          var error2 = new Error("Invalid slice, step cannot be 0");
          error2.name = "RuntimeError";
          throw error2;
        }
        var stepValueNegative = step < 0 ? true : false;
        if (start === null) {
          start = stepValueNegative ? arrayLength - 1 : 0;
        } else {
          start = this.capSliceRange(arrayLength, start, step);
        }
        if (stop === null) {
          stop = stepValueNegative ? -1 : arrayLength;
        } else {
          stop = this.capSliceRange(arrayLength, stop, step);
        }
        computed[0] = start;
        computed[1] = stop;
        computed[2] = step;
        return computed;
      },
      capSliceRange: function(arrayLength, actualValue, step) {
        if (actualValue < 0) {
          actualValue += arrayLength;
          if (actualValue < 0) {
            actualValue = step < 0 ? -1 : 0;
          }
        } else if (actualValue >= arrayLength) {
          actualValue = step < 0 ? arrayLength - 1 : arrayLength;
        }
        return actualValue;
      }
    };
    function Runtime(interpreter) {
      this._interpreter = interpreter;
      this.functionTable = {
        abs: { _func: this._functionAbs, _signature: [{ types: [TYPE_NUMBER] }] },
        avg: { _func: this._functionAvg, _signature: [{ types: [TYPE_ARRAY_NUMBER] }] },
        ceil: { _func: this._functionCeil, _signature: [{ types: [TYPE_NUMBER] }] },
        contains: {
          _func: this._functionContains,
          _signature: [
            { types: [TYPE_STRING, TYPE_ARRAY] },
            { types: [TYPE_ANY] }
          ]
        },
        "ends_with": {
          _func: this._functionEndsWith,
          _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }]
        },
        floor: { _func: this._functionFloor, _signature: [{ types: [TYPE_NUMBER] }] },
        length: {
          _func: this._functionLength,
          _signature: [{ types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT] }]
        },
        map: {
          _func: this._functionMap,
          _signature: [{ types: [TYPE_EXPREF] }, { types: [TYPE_ARRAY] }]
        },
        max: {
          _func: this._functionMax,
          _signature: [{ types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING] }]
        },
        "merge": {
          _func: this._functionMerge,
          _signature: [{ types: [TYPE_OBJECT], variadic: true }]
        },
        "max_by": {
          _func: this._functionMaxBy,
          _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }]
        },
        sum: { _func: this._functionSum, _signature: [{ types: [TYPE_ARRAY_NUMBER] }] },
        "starts_with": {
          _func: this._functionStartsWith,
          _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }]
        },
        min: {
          _func: this._functionMin,
          _signature: [{ types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING] }]
        },
        "min_by": {
          _func: this._functionMinBy,
          _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }]
        },
        type: { _func: this._functionType, _signature: [{ types: [TYPE_ANY] }] },
        keys: { _func: this._functionKeys, _signature: [{ types: [TYPE_OBJECT] }] },
        values: { _func: this._functionValues, _signature: [{ types: [TYPE_OBJECT] }] },
        sort: { _func: this._functionSort, _signature: [{ types: [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER] }] },
        "sort_by": {
          _func: this._functionSortBy,
          _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }]
        },
        join: {
          _func: this._functionJoin,
          _signature: [
            { types: [TYPE_STRING] },
            { types: [TYPE_ARRAY_STRING] }
          ]
        },
        reverse: {
          _func: this._functionReverse,
          _signature: [{ types: [TYPE_STRING, TYPE_ARRAY] }]
        },
        "to_array": { _func: this._functionToArray, _signature: [{ types: [TYPE_ANY] }] },
        "to_string": { _func: this._functionToString, _signature: [{ types: [TYPE_ANY] }] },
        "to_number": { _func: this._functionToNumber, _signature: [{ types: [TYPE_ANY] }] },
        "not_null": {
          _func: this._functionNotNull,
          _signature: [{ types: [TYPE_ANY], variadic: true }]
        }
      };
    }
    Runtime.prototype = {
      callFunction: function(name, resolvedArgs) {
        var functionEntry = this.functionTable[name];
        if (functionEntry === void 0) {
          throw new Error("Unknown function: " + name + "()");
        }
        this._validateArgs(name, resolvedArgs, functionEntry._signature);
        return functionEntry._func.call(this, resolvedArgs);
      },
      _validateArgs: function(name, args, signature4) {
        var pluralized;
        if (signature4[signature4.length - 1].variadic) {
          if (args.length < signature4.length) {
            pluralized = signature4.length === 1 ? " argument" : " arguments";
            throw new Error("ArgumentError: " + name + "() takes at least" + signature4.length + pluralized + " but received " + args.length);
          }
        } else if (args.length !== signature4.length) {
          pluralized = signature4.length === 1 ? " argument" : " arguments";
          throw new Error("ArgumentError: " + name + "() takes " + signature4.length + pluralized + " but received " + args.length);
        }
        var currentSpec;
        var actualType;
        var typeMatched;
        for (var i = 0; i < signature4.length; i++) {
          typeMatched = false;
          currentSpec = signature4[i].types;
          actualType = this._getTypeName(args[i]);
          for (var j2 = 0; j2 < currentSpec.length; j2++) {
            if (this._typeMatches(actualType, currentSpec[j2], args[i])) {
              typeMatched = true;
              break;
            }
          }
          if (!typeMatched) {
            var expected = currentSpec.map(function(typeIdentifier) {
              return TYPE_NAME_TABLE[typeIdentifier];
            }).join(",");
            throw new Error("TypeError: " + name + "() expected argument " + (i + 1) + " to be type " + expected + " but received type " + TYPE_NAME_TABLE[actualType] + " instead.");
          }
        }
      },
      _typeMatches: function(actual, expected, argValue) {
        if (expected === TYPE_ANY) {
          return true;
        }
        if (expected === TYPE_ARRAY_STRING || expected === TYPE_ARRAY_NUMBER || expected === TYPE_ARRAY) {
          if (expected === TYPE_ARRAY) {
            return actual === TYPE_ARRAY;
          } else if (actual === TYPE_ARRAY) {
            var subtype;
            if (expected === TYPE_ARRAY_NUMBER) {
              subtype = TYPE_NUMBER;
            } else if (expected === TYPE_ARRAY_STRING) {
              subtype = TYPE_STRING;
            }
            for (var i = 0; i < argValue.length; i++) {
              if (!this._typeMatches(this._getTypeName(argValue[i]), subtype, argValue[i])) {
                return false;
              }
            }
            return true;
          }
        } else {
          return actual === expected;
        }
      },
      _getTypeName: function(obj) {
        switch (Object.prototype.toString.call(obj)) {
          case "[object String]":
            return TYPE_STRING;
          case "[object Number]":
            return TYPE_NUMBER;
          case "[object Array]":
            return TYPE_ARRAY;
          case "[object Boolean]":
            return TYPE_BOOLEAN;
          case "[object Null]":
            return TYPE_NULL;
          case "[object Object]":
            if (obj.jmespathType === TOK_EXPREF) {
              return TYPE_EXPREF;
            } else {
              return TYPE_OBJECT;
            }
        }
      },
      _functionStartsWith: function(resolvedArgs) {
        return resolvedArgs[0].lastIndexOf(resolvedArgs[1]) === 0;
      },
      _functionEndsWith: function(resolvedArgs) {
        var searchStr = resolvedArgs[0];
        var suffix = resolvedArgs[1];
        return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;
      },
      _functionReverse: function(resolvedArgs) {
        var typeName2 = this._getTypeName(resolvedArgs[0]);
        if (typeName2 === TYPE_STRING) {
          var originalStr = resolvedArgs[0];
          var reversedStr = "";
          for (var i = originalStr.length - 1; i >= 0; i--) {
            reversedStr += originalStr[i];
          }
          return reversedStr;
        } else {
          var reversedArray = resolvedArgs[0].slice(0);
          reversedArray.reverse();
          return reversedArray;
        }
      },
      _functionAbs: function(resolvedArgs) {
        return Math.abs(resolvedArgs[0]);
      },
      _functionCeil: function(resolvedArgs) {
        return Math.ceil(resolvedArgs[0]);
      },
      _functionAvg: function(resolvedArgs) {
        var sum = 0;
        var inputArray = resolvedArgs[0];
        for (var i = 0; i < inputArray.length; i++) {
          sum += inputArray[i];
        }
        return sum / inputArray.length;
      },
      _functionContains: function(resolvedArgs) {
        return resolvedArgs[0].indexOf(resolvedArgs[1]) >= 0;
      },
      _functionFloor: function(resolvedArgs) {
        return Math.floor(resolvedArgs[0]);
      },
      _functionLength: function(resolvedArgs) {
        if (!isObject2(resolvedArgs[0])) {
          return resolvedArgs[0].length;
        } else {
          return Object.keys(resolvedArgs[0]).length;
        }
      },
      _functionMap: function(resolvedArgs) {
        var mapped = [];
        var interpreter = this._interpreter;
        var exprefNode = resolvedArgs[0];
        var elements = resolvedArgs[1];
        for (var i = 0; i < elements.length; i++) {
          mapped.push(interpreter.visit(exprefNode, elements[i]));
        }
        return mapped;
      },
      _functionMerge: function(resolvedArgs) {
        var merged = {};
        for (var i = 0; i < resolvedArgs.length; i++) {
          var current = resolvedArgs[i];
          for (var key in current) {
            merged[key] = current[key];
          }
        }
        return merged;
      },
      _functionMax: function(resolvedArgs) {
        if (resolvedArgs[0].length > 0) {
          var typeName2 = this._getTypeName(resolvedArgs[0][0]);
          if (typeName2 === TYPE_NUMBER) {
            return Math.max.apply(Math, resolvedArgs[0]);
          } else {
            var elements = resolvedArgs[0];
            var maxElement = elements[0];
            for (var i = 1; i < elements.length; i++) {
              if (maxElement.localeCompare(elements[i]) < 0) {
                maxElement = elements[i];
              }
            }
            return maxElement;
          }
        } else {
          return null;
        }
      },
      _functionMin: function(resolvedArgs) {
        if (resolvedArgs[0].length > 0) {
          var typeName2 = this._getTypeName(resolvedArgs[0][0]);
          if (typeName2 === TYPE_NUMBER) {
            return Math.min.apply(Math, resolvedArgs[0]);
          } else {
            var elements = resolvedArgs[0];
            var minElement = elements[0];
            for (var i = 1; i < elements.length; i++) {
              if (elements[i].localeCompare(minElement) < 0) {
                minElement = elements[i];
              }
            }
            return minElement;
          }
        } else {
          return null;
        }
      },
      _functionSum: function(resolvedArgs) {
        var sum = 0;
        var listToSum = resolvedArgs[0];
        for (var i = 0; i < listToSum.length; i++) {
          sum += listToSum[i];
        }
        return sum;
      },
      _functionType: function(resolvedArgs) {
        switch (this._getTypeName(resolvedArgs[0])) {
          case TYPE_NUMBER:
            return "number";
          case TYPE_STRING:
            return "string";
          case TYPE_ARRAY:
            return "array";
          case TYPE_OBJECT:
            return "object";
          case TYPE_BOOLEAN:
            return "boolean";
          case TYPE_EXPREF:
            return "expref";
          case TYPE_NULL:
            return "null";
        }
      },
      _functionKeys: function(resolvedArgs) {
        return Object.keys(resolvedArgs[0]);
      },
      _functionValues: function(resolvedArgs) {
        var obj = resolvedArgs[0];
        var keys = Object.keys(obj);
        var values = [];
        for (var i = 0; i < keys.length; i++) {
          values.push(obj[keys[i]]);
        }
        return values;
      },
      _functionJoin: function(resolvedArgs) {
        var joinChar = resolvedArgs[0];
        var listJoin = resolvedArgs[1];
        return listJoin.join(joinChar);
      },
      _functionToArray: function(resolvedArgs) {
        if (this._getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {
          return resolvedArgs[0];
        } else {
          return [resolvedArgs[0]];
        }
      },
      _functionToString: function(resolvedArgs) {
        if (this._getTypeName(resolvedArgs[0]) === TYPE_STRING) {
          return resolvedArgs[0];
        } else {
          return JSON.stringify(resolvedArgs[0]);
        }
      },
      _functionToNumber: function(resolvedArgs) {
        var typeName2 = this._getTypeName(resolvedArgs[0]);
        var convertedValue;
        if (typeName2 === TYPE_NUMBER) {
          return resolvedArgs[0];
        } else if (typeName2 === TYPE_STRING) {
          convertedValue = +resolvedArgs[0];
          if (!isNaN(convertedValue)) {
            return convertedValue;
          }
        }
        return null;
      },
      _functionNotNull: function(resolvedArgs) {
        for (var i = 0; i < resolvedArgs.length; i++) {
          if (this._getTypeName(resolvedArgs[i]) !== TYPE_NULL) {
            return resolvedArgs[i];
          }
        }
        return null;
      },
      _functionSort: function(resolvedArgs) {
        var sortedArray = resolvedArgs[0].slice(0);
        sortedArray.sort();
        return sortedArray;
      },
      _functionSortBy: function(resolvedArgs) {
        var sortedArray = resolvedArgs[0].slice(0);
        if (sortedArray.length === 0) {
          return sortedArray;
        }
        var interpreter = this._interpreter;
        var exprefNode = resolvedArgs[1];
        var requiredType = this._getTypeName(interpreter.visit(exprefNode, sortedArray[0]));
        if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {
          throw new Error("TypeError");
        }
        var that = this;
        var decorated = [];
        for (var i = 0; i < sortedArray.length; i++) {
          decorated.push([i, sortedArray[i]]);
        }
        decorated.sort(function(a2, b2) {
          var exprA = interpreter.visit(exprefNode, a2[1]);
          var exprB = interpreter.visit(exprefNode, b2[1]);
          if (that._getTypeName(exprA) !== requiredType) {
            throw new Error("TypeError: expected " + requiredType + ", received " + that._getTypeName(exprA));
          } else if (that._getTypeName(exprB) !== requiredType) {
            throw new Error("TypeError: expected " + requiredType + ", received " + that._getTypeName(exprB));
          }
          if (exprA > exprB) {
            return 1;
          } else if (exprA < exprB) {
            return -1;
          } else {
            return a2[0] - b2[0];
          }
        });
        for (var j2 = 0; j2 < decorated.length; j2++) {
          sortedArray[j2] = decorated[j2][1];
        }
        return sortedArray;
      },
      _functionMaxBy: function(resolvedArgs) {
        var exprefNode = resolvedArgs[1];
        var resolvedArray = resolvedArgs[0];
        var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
        var maxNumber = -Infinity;
        var maxRecord;
        var current;
        for (var i = 0; i < resolvedArray.length; i++) {
          current = keyFunction(resolvedArray[i]);
          if (current > maxNumber) {
            maxNumber = current;
            maxRecord = resolvedArray[i];
          }
        }
        return maxRecord;
      },
      _functionMinBy: function(resolvedArgs) {
        var exprefNode = resolvedArgs[1];
        var resolvedArray = resolvedArgs[0];
        var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
        var minNumber = Infinity;
        var minRecord;
        var current;
        for (var i = 0; i < resolvedArray.length; i++) {
          current = keyFunction(resolvedArray[i]);
          if (current < minNumber) {
            minNumber = current;
            minRecord = resolvedArray[i];
          }
        }
        return minRecord;
      },
      createKeyFunction: function(exprefNode, allowedTypes) {
        var that = this;
        var interpreter = this._interpreter;
        var keyFunc = function(x2) {
          var current = interpreter.visit(exprefNode, x2);
          if (allowedTypes.indexOf(that._getTypeName(current)) < 0) {
            var msg = "TypeError: expected one of " + allowedTypes + ", received " + that._getTypeName(current);
            throw new Error(msg);
          }
          return current;
        };
        return keyFunc;
      }
    };
    function compile(stream) {
      var parser2 = new Parser();
      var ast = parser2.parse(stream);
      return ast;
    }
    function tokenize(stream) {
      var lexer = new Lexer();
      return lexer.tokenize(stream);
    }
    function search2(data, expression) {
      var parser2 = new Parser();
      var runtime = new Runtime();
      var interpreter = new TreeInterpreter(runtime);
      runtime._interpreter = interpreter;
      var node = parser2.parse(expression);
      return interpreter.search(node, data);
    }
    exports2.tokenize = tokenize;
    exports2.compile = compile;
    exports2.search = search2;
    exports2.strictDeepEqual = strictDeepEqual;
  })(exports);
})(jmespath$3);
var AWS$p = core;
var AcceptorStateMachine = state_machine;
var inherit$9 = AWS$p.util.inherit;
var domain = AWS$p.util.domain;
var jmespath$2 = jmespath$3;
var hardErrorStates = { success: 1, error: 1, complete: 1 };
function isTerminalState(machine) {
  return Object.prototype.hasOwnProperty.call(hardErrorStates, machine._asm.currentState);
}
var fsm = new AcceptorStateMachine();
fsm.setupStates = function() {
  var transition = function(_2, done) {
    var self2 = this;
    self2._haltHandlersOnError = false;
    self2.emit(self2._asm.currentState, function(err) {
      if (err) {
        if (isTerminalState(self2)) {
          if (domain && self2.domain instanceof domain.Domain) {
            err.domainEmitter = self2;
            err.domain = self2.domain;
            err.domainThrown = false;
            self2.domain.emit("error", err);
          } else {
            throw err;
          }
        } else {
          self2.response.error = err;
          done(err);
        }
      } else {
        done(self2.response.error);
      }
    });
  };
  this.addState("validate", "build", "error", transition);
  this.addState("build", "afterBuild", "restart", transition);
  this.addState("afterBuild", "sign", "restart", transition);
  this.addState("sign", "send", "retry", transition);
  this.addState("retry", "afterRetry", "afterRetry", transition);
  this.addState("afterRetry", "sign", "error", transition);
  this.addState("send", "validateResponse", "retry", transition);
  this.addState("validateResponse", "extractData", "extractError", transition);
  this.addState("extractError", "extractData", "retry", transition);
  this.addState("extractData", "success", "retry", transition);
  this.addState("restart", "build", "error", transition);
  this.addState("success", "complete", "complete", transition);
  this.addState("error", "complete", "complete", transition);
  this.addState("complete", null, null, transition);
};
fsm.setupStates();
AWS$p.Request = inherit$9({
  constructor: function Request(service, operation2, params) {
    var endpoint = service.endpoint;
    var region = service.config.region;
    var customUserAgent = service.config.customUserAgent;
    if (service.signingRegion) {
      region = service.signingRegion;
    } else if (service.isGlobalEndpoint) {
      region = "us-east-1";
    }
    this.domain = domain && domain.active;
    this.service = service;
    this.operation = operation2;
    this.params = params || {};
    this.httpRequest = new AWS$p.HttpRequest(endpoint, region);
    this.httpRequest.appendToUserAgent(customUserAgent);
    this.startTime = service.getSkewCorrectedDate();
    this.response = new AWS$p.Response(this);
    this._asm = new AcceptorStateMachine(fsm.states, "validate");
    this._haltHandlersOnError = false;
    AWS$p.SequentialExecutor.call(this);
    this.emit = this.emitEvent;
  },
  send: function send(callback) {
    if (callback) {
      this.httpRequest.appendToUserAgent("callback");
      this.on("complete", function(resp) {
        callback.call(resp, resp.error, resp.data);
      });
    }
    this.runTo();
    return this.response;
  },
  build: function build(callback) {
    return this.runTo("send", callback);
  },
  runTo: function runTo2(state, done) {
    this._asm.runTo(state, done, this);
    return this;
  },
  abort: function abort() {
    this.removeAllListeners("validateResponse");
    this.removeAllListeners("extractError");
    this.on("validateResponse", function addAbortedError(resp) {
      resp.error = AWS$p.util.error(new Error("Request aborted by user"), {
        code: "RequestAbortedError",
        retryable: false
      });
    });
    if (this.httpRequest.stream && !this.httpRequest.stream.didCallback) {
      this.httpRequest.stream.abort();
      if (this.httpRequest._abortCallback) {
        this.httpRequest._abortCallback();
      } else {
        this.removeAllListeners("send");
      }
    }
    return this;
  },
  eachPage: function eachPage(callback) {
    callback = AWS$p.util.fn.makeAsync(callback, 3);
    function wrappedCallback(response) {
      callback.call(response, response.error, response.data, function(result) {
        if (result === false)
          return;
        if (response.hasNextPage()) {
          response.nextPage().on("complete", wrappedCallback).send();
        } else {
          callback.call(response, null, null, AWS$p.util.fn.noop);
        }
      });
    }
    this.on("complete", wrappedCallback).send();
  },
  eachItem: function eachItem(callback) {
    var self2 = this;
    function wrappedCallback(err, data) {
      if (err)
        return callback(err, null);
      if (data === null)
        return callback(null, null);
      var config2 = self2.service.paginationConfig(self2.operation);
      var resultKey = config2.resultKey;
      if (Array.isArray(resultKey))
        resultKey = resultKey[0];
      var items = jmespath$2.search(data, resultKey);
      var continueIteration = true;
      AWS$p.util.arrayEach(items, function(item) {
        continueIteration = callback(null, item);
        if (continueIteration === false) {
          return AWS$p.util.abort;
        }
      });
      return continueIteration;
    }
    this.eachPage(wrappedCallback);
  },
  isPageable: function isPageable() {
    return this.service.paginationConfig(this.operation) ? true : false;
  },
  createReadStream: function createReadStream() {
    var streams = AWS$p.util.stream;
    var req = this;
    var stream = null;
    if (AWS$p.HttpClient.streamsApiVersion === 2) {
      stream = new streams.PassThrough();
      process.nextTick(function() {
        req.send();
      });
    } else {
      stream = new streams.Stream();
      stream.readable = true;
      stream.sent = false;
      stream.on("newListener", function(event) {
        if (!stream.sent && event === "data") {
          stream.sent = true;
          process.nextTick(function() {
            req.send();
          });
        }
      });
    }
    this.on("error", function(err) {
      stream.emit("error", err);
    });
    this.on("httpHeaders", function streamHeaders(statusCode, headers, resp) {
      if (statusCode < 300) {
        req.removeListener("httpData", AWS$p.EventListeners.Core.HTTP_DATA);
        req.removeListener("httpError", AWS$p.EventListeners.Core.HTTP_ERROR);
        req.on("httpError", function streamHttpError(error2) {
          resp.error = error2;
          resp.error.retryable = false;
        });
        var shouldCheckContentLength = false;
        var expectedLen;
        if (req.httpRequest.method !== "HEAD") {
          expectedLen = parseInt(headers["content-length"], 10);
        }
        if (expectedLen !== void 0 && !isNaN(expectedLen) && expectedLen >= 0) {
          shouldCheckContentLength = true;
          var receivedLen = 0;
        }
        var checkContentLengthAndEmit = function checkContentLengthAndEmit2() {
          if (shouldCheckContentLength && receivedLen !== expectedLen) {
            stream.emit("error", AWS$p.util.error(new Error("Stream content length mismatch. Received " + receivedLen + " of " + expectedLen + " bytes."), { code: "StreamContentLengthMismatch" }));
          } else if (AWS$p.HttpClient.streamsApiVersion === 2) {
            stream.end();
          } else {
            stream.emit("end");
          }
        };
        var httpStream = resp.httpResponse.createUnbufferedStream();
        if (AWS$p.HttpClient.streamsApiVersion === 2) {
          if (shouldCheckContentLength) {
            var lengthAccumulator = new streams.PassThrough();
            lengthAccumulator._write = function(chunk) {
              if (chunk && chunk.length) {
                receivedLen += chunk.length;
              }
              return streams.PassThrough.prototype._write.apply(this, arguments);
            };
            lengthAccumulator.on("end", checkContentLengthAndEmit);
            stream.on("error", function(err) {
              shouldCheckContentLength = false;
              httpStream.unpipe(lengthAccumulator);
              lengthAccumulator.emit("end");
              lengthAccumulator.end();
            });
            httpStream.pipe(lengthAccumulator).pipe(stream, { end: false });
          } else {
            httpStream.pipe(stream);
          }
        } else {
          if (shouldCheckContentLength) {
            httpStream.on("data", function(arg) {
              if (arg && arg.length) {
                receivedLen += arg.length;
              }
            });
          }
          httpStream.on("data", function(arg) {
            stream.emit("data", arg);
          });
          httpStream.on("end", checkContentLengthAndEmit);
        }
        httpStream.on("error", function(err) {
          shouldCheckContentLength = false;
          stream.emit("error", err);
        });
      }
    });
    return stream;
  },
  emitEvent: function emit2(eventName, args, done) {
    if (typeof args === "function") {
      done = args;
      args = null;
    }
    if (!done)
      done = function() {
      };
    if (!args)
      args = this.eventParameters(eventName, this.response);
    var origEmit = AWS$p.SequentialExecutor.prototype.emit;
    origEmit.call(this, eventName, args, function(err) {
      if (err)
        this.response.error = err;
      done.call(this, err);
    });
  },
  eventParameters: function eventParameters(eventName) {
    switch (eventName) {
      case "restart":
      case "validate":
      case "sign":
      case "build":
      case "afterValidate":
      case "afterBuild":
        return [this];
      case "error":
        return [this.response.error, this.response];
      default:
        return [this.response];
    }
  },
  presign: function presign(expires, callback) {
    if (!callback && typeof expires === "function") {
      callback = expires;
      expires = null;
    }
    return new AWS$p.Signers.Presign().sign(this.toGet(), expires, callback);
  },
  isPresigned: function isPresigned() {
    return Object.prototype.hasOwnProperty.call(this.httpRequest.headers, "presigned-expires");
  },
  toUnauthenticated: function toUnauthenticated() {
    this._unAuthenticated = true;
    this.removeListener("validate", AWS$p.EventListeners.Core.VALIDATE_CREDENTIALS);
    this.removeListener("sign", AWS$p.EventListeners.Core.SIGN);
    return this;
  },
  toGet: function toGet() {
    if (this.service.api.protocol === "query" || this.service.api.protocol === "ec2") {
      this.removeListener("build", this.buildAsGet);
      this.addListener("build", this.buildAsGet);
    }
    return this;
  },
  buildAsGet: function buildAsGet(request) {
    request.httpRequest.method = "GET";
    request.httpRequest.path = request.service.endpoint.path + "?" + request.httpRequest.body;
    request.httpRequest.body = "";
    delete request.httpRequest.headers["Content-Length"];
    delete request.httpRequest.headers["Content-Type"];
  },
  haltHandlersOnError: function haltHandlersOnError() {
    this._haltHandlersOnError = true;
  }
});
AWS$p.Request.addPromisesToClass = function addPromisesToClass3(PromiseDependency) {
  this.prototype.promise = function promise() {
    var self2 = this;
    this.httpRequest.appendToUserAgent("promise");
    return new PromiseDependency(function(resolve3, reject) {
      self2.on("complete", function(resp) {
        if (resp.error) {
          reject(resp.error);
        } else {
          resolve3(Object.defineProperty(resp.data || {}, "$response", { value: resp }));
        }
      });
      self2.runTo();
    });
  };
};
AWS$p.Request.deletePromisesFromClass = function deletePromisesFromClass3() {
  delete this.prototype.promise;
};
AWS$p.util.addPromises(AWS$p.Request);
AWS$p.util.mixin(AWS$p.Request, AWS$p.SequentialExecutor);
var AWS$o = core;
var inherit$8 = AWS$o.util.inherit;
var jmespath$1 = jmespath$3;
AWS$o.Response = inherit$8({
  constructor: function Response(request) {
    this.request = request;
    this.data = null;
    this.error = null;
    this.retryCount = 0;
    this.redirectCount = 0;
    this.httpResponse = new AWS$o.HttpResponse();
    if (request) {
      this.maxRetries = request.service.numRetries();
      this.maxRedirects = request.service.config.maxRedirects;
    }
  },
  nextPage: function nextPage(callback) {
    var config2;
    var service = this.request.service;
    var operation2 = this.request.operation;
    try {
      config2 = service.paginationConfig(operation2, true);
    } catch (e2) {
      this.error = e2;
    }
    if (!this.hasNextPage()) {
      if (callback)
        callback(this.error, null);
      else if (this.error)
        throw this.error;
      return null;
    }
    var params = AWS$o.util.copy(this.request.params);
    if (!this.nextPageTokens) {
      return callback ? callback(null, null) : null;
    } else {
      var inputTokens = config2.inputToken;
      if (typeof inputTokens === "string")
        inputTokens = [inputTokens];
      for (var i = 0; i < inputTokens.length; i++) {
        params[inputTokens[i]] = this.nextPageTokens[i];
      }
      return service.makeRequest(this.request.operation, params, callback);
    }
  },
  hasNextPage: function hasNextPage() {
    this.cacheNextPageTokens();
    if (this.nextPageTokens)
      return true;
    if (this.nextPageTokens === void 0)
      return void 0;
    else
      return false;
  },
  cacheNextPageTokens: function cacheNextPageTokens() {
    if (Object.prototype.hasOwnProperty.call(this, "nextPageTokens"))
      return this.nextPageTokens;
    this.nextPageTokens = void 0;
    var config2 = this.request.service.paginationConfig(this.request.operation);
    if (!config2)
      return this.nextPageTokens;
    this.nextPageTokens = null;
    if (config2.moreResults) {
      if (!jmespath$1.search(this.data, config2.moreResults)) {
        return this.nextPageTokens;
      }
    }
    var exprs = config2.outputToken;
    if (typeof exprs === "string")
      exprs = [exprs];
    AWS$o.util.arrayEach.call(this, exprs, function(expr) {
      var output = jmespath$1.search(this.data, expr);
      if (output) {
        this.nextPageTokens = this.nextPageTokens || [];
        this.nextPageTokens.push(output);
      }
    });
    return this.nextPageTokens;
  }
});
var AWS$n = core;
var inherit$7 = AWS$n.util.inherit;
var jmespath = jmespath$3;
function CHECK_ACCEPTORS(resp) {
  var waiter = resp.request._waiter;
  var acceptors = waiter.config.acceptors;
  var acceptorMatched = false;
  var state = "retry";
  acceptors.forEach(function(acceptor) {
    if (!acceptorMatched) {
      var matcher = waiter.matchers[acceptor.matcher];
      if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {
        acceptorMatched = true;
        state = acceptor.state;
      }
    }
  });
  if (!acceptorMatched && resp.error)
    state = "failure";
  if (state === "success") {
    waiter.setSuccess(resp);
  } else {
    waiter.setError(resp, state === "retry");
  }
}
AWS$n.ResourceWaiter = inherit$7({
  constructor: function constructor(service, state) {
    this.service = service;
    this.state = state;
    this.loadWaiterConfig(this.state);
  },
  service: null,
  state: null,
  config: null,
  matchers: {
    path: function(resp, expected, argument) {
      try {
        var result = jmespath.search(resp.data, argument);
      } catch (err) {
        return false;
      }
      return jmespath.strictDeepEqual(result, expected);
    },
    pathAll: function(resp, expected, argument) {
      try {
        var results = jmespath.search(resp.data, argument);
      } catch (err) {
        return false;
      }
      if (!Array.isArray(results))
        results = [results];
      var numResults = results.length;
      if (!numResults)
        return false;
      for (var ind = 0; ind < numResults; ind++) {
        if (!jmespath.strictDeepEqual(results[ind], expected)) {
          return false;
        }
      }
      return true;
    },
    pathAny: function(resp, expected, argument) {
      try {
        var results = jmespath.search(resp.data, argument);
      } catch (err) {
        return false;
      }
      if (!Array.isArray(results))
        results = [results];
      var numResults = results.length;
      for (var ind = 0; ind < numResults; ind++) {
        if (jmespath.strictDeepEqual(results[ind], expected)) {
          return true;
        }
      }
      return false;
    },
    status: function(resp, expected) {
      var statusCode = resp.httpResponse.statusCode;
      return typeof statusCode === "number" && statusCode === expected;
    },
    error: function(resp, expected) {
      if (typeof expected === "string" && resp.error) {
        return expected === resp.error.code;
      }
      return expected === !!resp.error;
    }
  },
  listeners: new AWS$n.SequentialExecutor().addNamedListeners(function(add) {
    add("RETRY_CHECK", "retry", function(resp) {
      var waiter = resp.request._waiter;
      if (resp.error && resp.error.code === "ResourceNotReady") {
        resp.error.retryDelay = (waiter.config.delay || 0) * 1e3;
      }
    });
    add("CHECK_OUTPUT", "extractData", CHECK_ACCEPTORS);
    add("CHECK_ERROR", "extractError", CHECK_ACCEPTORS);
  }),
  wait: function wait(params, callback) {
    if (typeof params === "function") {
      callback = params;
      params = void 0;
    }
    if (params && params.$waiter) {
      params = AWS$n.util.copy(params);
      if (typeof params.$waiter.delay === "number") {
        this.config.delay = params.$waiter.delay;
      }
      if (typeof params.$waiter.maxAttempts === "number") {
        this.config.maxAttempts = params.$waiter.maxAttempts;
      }
      delete params.$waiter;
    }
    var request = this.service.makeRequest(this.config.operation, params);
    request._waiter = this;
    request.response.maxRetries = this.config.maxAttempts;
    request.addListeners(this.listeners);
    if (callback)
      request.send(callback);
    return request;
  },
  setSuccess: function setSuccess(resp) {
    resp.error = null;
    resp.data = resp.data || {};
    resp.request.removeAllListeners("extractData");
  },
  setError: function setError(resp, retryable) {
    resp.data = null;
    resp.error = AWS$n.util.error(resp.error || new Error(), {
      code: "ResourceNotReady",
      message: "Resource is not in the state " + this.state,
      retryable
    });
  },
  loadWaiterConfig: function loadWaiterConfig(state) {
    if (!this.service.api.waiters[state]) {
      throw new AWS$n.util.error(new Error(), {
        code: "StateNotFoundError",
        message: "State " + state + " not found."
      });
    }
    this.config = AWS$n.util.copy(this.service.api.waiters[state]);
  }
});
var AWS$m = core;
var inherit$6 = AWS$m.util.inherit;
AWS$m.Signers.V2 = inherit$6(AWS$m.Signers.RequestSigner, {
  addAuthorization: function addAuthorization(credentials, date) {
    if (!date)
      date = AWS$m.util.date.getDate();
    var r2 = this.request;
    r2.params.Timestamp = AWS$m.util.date.iso8601(date);
    r2.params.SignatureVersion = "2";
    r2.params.SignatureMethod = "HmacSHA256";
    r2.params.AWSAccessKeyId = credentials.accessKeyId;
    if (credentials.sessionToken) {
      r2.params.SecurityToken = credentials.sessionToken;
    }
    delete r2.params.Signature;
    r2.params.Signature = this.signature(credentials);
    r2.body = AWS$m.util.queryParamsToString(r2.params);
    r2.headers["Content-Length"] = r2.body.length;
  },
  signature: function signature(credentials) {
    return AWS$m.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), "base64");
  },
  stringToSign: function stringToSign() {
    var parts = [];
    parts.push(this.request.method);
    parts.push(this.request.endpoint.host.toLowerCase());
    parts.push(this.request.pathname());
    parts.push(AWS$m.util.queryParamsToString(this.request.params));
    return parts.join("\n");
  }
});
AWS$m.Signers.V2;
var AWS$l = core;
var inherit$5 = AWS$l.util.inherit;
AWS$l.Signers.V3 = inherit$5(AWS$l.Signers.RequestSigner, {
  addAuthorization: function addAuthorization2(credentials, date) {
    var datetime = AWS$l.util.date.rfc822(date);
    this.request.headers["X-Amz-Date"] = datetime;
    if (credentials.sessionToken) {
      this.request.headers["x-amz-security-token"] = credentials.sessionToken;
    }
    this.request.headers["X-Amzn-Authorization"] = this.authorization(credentials, datetime);
  },
  authorization: function authorization(credentials) {
    return "AWS3 AWSAccessKeyId=" + credentials.accessKeyId + ",Algorithm=HmacSHA256,SignedHeaders=" + this.signedHeaders() + ",Signature=" + this.signature(credentials);
  },
  signedHeaders: function signedHeaders() {
    var headers = [];
    AWS$l.util.arrayEach(this.headersToSign(), function iterator(h2) {
      headers.push(h2.toLowerCase());
    });
    return headers.sort().join(";");
  },
  canonicalHeaders: function canonicalHeaders() {
    var headers = this.request.headers;
    var parts = [];
    AWS$l.util.arrayEach(this.headersToSign(), function iterator(h2) {
      parts.push(h2.toLowerCase().trim() + ":" + String(headers[h2]).trim());
    });
    return parts.sort().join("\n") + "\n";
  },
  headersToSign: function headersToSign() {
    var headers = [];
    AWS$l.util.each(this.request.headers, function iterator(k2) {
      if (k2 === "Host" || k2 === "Content-Encoding" || k2.match(/^X-Amz/i)) {
        headers.push(k2);
      }
    });
    return headers;
  },
  signature: function signature2(credentials) {
    return AWS$l.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), "base64");
  },
  stringToSign: function stringToSign2() {
    var parts = [];
    parts.push(this.request.method);
    parts.push("/");
    parts.push("");
    parts.push(this.canonicalHeaders());
    parts.push(this.request.body);
    return AWS$l.util.crypto.sha256(parts.join("\n"));
  }
});
AWS$l.Signers.V3;
var AWS$k = core;
var inherit$4 = AWS$k.util.inherit;
AWS$k.Signers.V3Https = inherit$4(AWS$k.Signers.V3, {
  authorization: function authorization2(credentials) {
    return "AWS3-HTTPS AWSAccessKeyId=" + credentials.accessKeyId + ",Algorithm=HmacSHA256,Signature=" + this.signature(credentials);
  },
  stringToSign: function stringToSign3() {
    return this.request.headers["X-Amz-Date"];
  }
});
AWS$k.Signers.V3Https;
var AWS$j = core;
var cachedSecret = {};
var cacheQueue = [];
var maxCacheEntries = 50;
var v4Identifier = "aws4_request";
var v4_credentials = {
  createScope: function createScope(date, region, serviceName) {
    return [
      date.substr(0, 8),
      region,
      serviceName,
      v4Identifier
    ].join("/");
  },
  getSigningKey: function getSigningKey(credentials, date, region, service, shouldCache) {
    var credsIdentifier = AWS$j.util.crypto.hmac(credentials.secretAccessKey, credentials.accessKeyId, "base64");
    var cacheKey = [credsIdentifier, date, region, service].join("_");
    shouldCache = shouldCache !== false;
    if (shouldCache && cacheKey in cachedSecret) {
      return cachedSecret[cacheKey];
    }
    var kDate = AWS$j.util.crypto.hmac("AWS4" + credentials.secretAccessKey, date, "buffer");
    var kRegion = AWS$j.util.crypto.hmac(kDate, region, "buffer");
    var kService = AWS$j.util.crypto.hmac(kRegion, service, "buffer");
    var signingKey = AWS$j.util.crypto.hmac(kService, v4Identifier, "buffer");
    if (shouldCache) {
      cachedSecret[cacheKey] = signingKey;
      cacheQueue.push(cacheKey);
      if (cacheQueue.length > maxCacheEntries) {
        delete cachedSecret[cacheQueue.shift()];
      }
    }
    return signingKey;
  },
  emptyCache: function emptyCache() {
    cachedSecret = {};
    cacheQueue = [];
  }
};
var AWS$i = core;
var v4Credentials = v4_credentials;
var inherit$3 = AWS$i.util.inherit;
var expiresHeader$1 = "presigned-expires";
AWS$i.Signers.V4 = inherit$3(AWS$i.Signers.RequestSigner, {
  constructor: function V4(request, serviceName, options) {
    AWS$i.Signers.RequestSigner.call(this, request);
    this.serviceName = serviceName;
    options = options || {};
    this.signatureCache = typeof options.signatureCache === "boolean" ? options.signatureCache : true;
    this.operation = options.operation;
    this.signatureVersion = options.signatureVersion;
  },
  algorithm: "AWS4-HMAC-SHA256",
  addAuthorization: function addAuthorization3(credentials, date) {
    var datetime = AWS$i.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, "");
    if (this.isPresigned()) {
      this.updateForPresigned(credentials, datetime);
    } else {
      this.addHeaders(credentials, datetime);
    }
    this.request.headers["Authorization"] = this.authorization(credentials, datetime);
  },
  addHeaders: function addHeaders(credentials, datetime) {
    this.request.headers["X-Amz-Date"] = datetime;
    if (credentials.sessionToken) {
      this.request.headers["x-amz-security-token"] = credentials.sessionToken;
    }
  },
  updateForPresigned: function updateForPresigned(credentials, datetime) {
    var credString = this.credentialString(datetime);
    var qs = {
      "X-Amz-Date": datetime,
      "X-Amz-Algorithm": this.algorithm,
      "X-Amz-Credential": credentials.accessKeyId + "/" + credString,
      "X-Amz-Expires": this.request.headers[expiresHeader$1],
      "X-Amz-SignedHeaders": this.signedHeaders()
    };
    if (credentials.sessionToken) {
      qs["X-Amz-Security-Token"] = credentials.sessionToken;
    }
    if (this.request.headers["Content-Type"]) {
      qs["Content-Type"] = this.request.headers["Content-Type"];
    }
    if (this.request.headers["Content-MD5"]) {
      qs["Content-MD5"] = this.request.headers["Content-MD5"];
    }
    if (this.request.headers["Cache-Control"]) {
      qs["Cache-Control"] = this.request.headers["Cache-Control"];
    }
    AWS$i.util.each.call(this, this.request.headers, function(key, value) {
      if (key === expiresHeader$1)
        return;
      if (this.isSignableHeader(key)) {
        var lowerKey = key.toLowerCase();
        if (lowerKey.indexOf("x-amz-meta-") === 0) {
          qs[lowerKey] = value;
        } else if (lowerKey.indexOf("x-amz-") === 0) {
          qs[key] = value;
        }
      }
    });
    var sep = this.request.path.indexOf("?") >= 0 ? "&" : "?";
    this.request.path += sep + AWS$i.util.queryParamsToString(qs);
  },
  authorization: function authorization3(credentials, datetime) {
    var parts = [];
    var credString = this.credentialString(datetime);
    parts.push(this.algorithm + " Credential=" + credentials.accessKeyId + "/" + credString);
    parts.push("SignedHeaders=" + this.signedHeaders());
    parts.push("Signature=" + this.signature(credentials, datetime));
    return parts.join(", ");
  },
  signature: function signature3(credentials, datetime) {
    var signingKey = v4Credentials.getSigningKey(credentials, datetime.substr(0, 8), this.request.region, this.serviceName, this.signatureCache);
    return AWS$i.util.crypto.hmac(signingKey, this.stringToSign(datetime), "hex");
  },
  stringToSign: function stringToSign4(datetime) {
    var parts = [];
    parts.push("AWS4-HMAC-SHA256");
    parts.push(datetime);
    parts.push(this.credentialString(datetime));
    parts.push(this.hexEncodedHash(this.canonicalString()));
    return parts.join("\n");
  },
  canonicalString: function canonicalString() {
    var parts = [], pathname2 = this.request.pathname();
    if (this.serviceName !== "s3" && this.signatureVersion !== "s3v4")
      pathname2 = AWS$i.util.uriEscapePath(pathname2);
    parts.push(this.request.method);
    parts.push(pathname2);
    parts.push(this.request.search());
    parts.push(this.canonicalHeaders() + "\n");
    parts.push(this.signedHeaders());
    parts.push(this.hexEncodedBodyHash());
    return parts.join("\n");
  },
  canonicalHeaders: function canonicalHeaders2() {
    var headers = [];
    AWS$i.util.each.call(this, this.request.headers, function(key, item) {
      headers.push([key, item]);
    });
    headers.sort(function(a2, b2) {
      return a2[0].toLowerCase() < b2[0].toLowerCase() ? -1 : 1;
    });
    var parts = [];
    AWS$i.util.arrayEach.call(this, headers, function(item) {
      var key = item[0].toLowerCase();
      if (this.isSignableHeader(key)) {
        var value = item[1];
        if (typeof value === "undefined" || value === null || typeof value.toString !== "function") {
          throw AWS$i.util.error(new Error("Header " + key + " contains invalid value"), {
            code: "InvalidHeader"
          });
        }
        parts.push(key + ":" + this.canonicalHeaderValues(value.toString()));
      }
    });
    return parts.join("\n");
  },
  canonicalHeaderValues: function canonicalHeaderValues(values) {
    return values.replace(/\s+/g, " ").replace(/^\s+|\s+$/g, "");
  },
  signedHeaders: function signedHeaders2() {
    var keys = [];
    AWS$i.util.each.call(this, this.request.headers, function(key) {
      key = key.toLowerCase();
      if (this.isSignableHeader(key))
        keys.push(key);
    });
    return keys.sort().join(";");
  },
  credentialString: function credentialString(datetime) {
    return v4Credentials.createScope(datetime.substr(0, 8), this.request.region, this.serviceName);
  },
  hexEncodedHash: function hash(string2) {
    return AWS$i.util.crypto.sha256(string2, "hex");
  },
  hexEncodedBodyHash: function hexEncodedBodyHash() {
    var request = this.request;
    if (this.isPresigned() && ["s3", "s3-object-lambda"].indexOf(this.serviceName) > -1 && !request.body) {
      return "UNSIGNED-PAYLOAD";
    } else if (request.headers["X-Amz-Content-Sha256"]) {
      return request.headers["X-Amz-Content-Sha256"];
    } else {
      return this.hexEncodedHash(this.request.body || "");
    }
  },
  unsignableHeaders: [
    "authorization",
    "content-type",
    "content-length",
    "user-agent",
    expiresHeader$1,
    "expect",
    "x-amzn-trace-id"
  ],
  isSignableHeader: function isSignableHeader(key) {
    if (key.toLowerCase().indexOf("x-amz-") === 0)
      return true;
    return this.unsignableHeaders.indexOf(key) < 0;
  },
  isPresigned: function isPresigned2() {
    return this.request.headers[expiresHeader$1] ? true : false;
  }
});
AWS$i.Signers.V4;
var AWS$h = core;
var inherit$2 = AWS$h.util.inherit;
AWS$h.Signers.S3 = inherit$2(AWS$h.Signers.RequestSigner, {
  subResources: {
    "acl": 1,
    "accelerate": 1,
    "analytics": 1,
    "cors": 1,
    "lifecycle": 1,
    "delete": 1,
    "inventory": 1,
    "location": 1,
    "logging": 1,
    "metrics": 1,
    "notification": 1,
    "partNumber": 1,
    "policy": 1,
    "requestPayment": 1,
    "replication": 1,
    "restore": 1,
    "tagging": 1,
    "torrent": 1,
    "uploadId": 1,
    "uploads": 1,
    "versionId": 1,
    "versioning": 1,
    "versions": 1,
    "website": 1
  },
  responseHeaders: {
    "response-content-type": 1,
    "response-content-language": 1,
    "response-expires": 1,
    "response-cache-control": 1,
    "response-content-disposition": 1,
    "response-content-encoding": 1
  },
  addAuthorization: function addAuthorization4(credentials, date) {
    if (!this.request.headers["presigned-expires"]) {
      this.request.headers["X-Amz-Date"] = AWS$h.util.date.rfc822(date);
    }
    if (credentials.sessionToken) {
      this.request.headers["x-amz-security-token"] = credentials.sessionToken;
    }
    var signature4 = this.sign(credentials.secretAccessKey, this.stringToSign());
    var auth = "AWS " + credentials.accessKeyId + ":" + signature4;
    this.request.headers["Authorization"] = auth;
  },
  stringToSign: function stringToSign5() {
    var r2 = this.request;
    var parts = [];
    parts.push(r2.method);
    parts.push(r2.headers["Content-MD5"] || "");
    parts.push(r2.headers["Content-Type"] || "");
    parts.push(r2.headers["presigned-expires"] || "");
    var headers = this.canonicalizedAmzHeaders();
    if (headers)
      parts.push(headers);
    parts.push(this.canonicalizedResource());
    return parts.join("\n");
  },
  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {
    var amzHeaders = [];
    AWS$h.util.each(this.request.headers, function(name) {
      if (name.match(/^x-amz-/i))
        amzHeaders.push(name);
    });
    amzHeaders.sort(function(a2, b2) {
      return a2.toLowerCase() < b2.toLowerCase() ? -1 : 1;
    });
    var parts = [];
    AWS$h.util.arrayEach.call(this, amzHeaders, function(name) {
      parts.push(name.toLowerCase() + ":" + String(this.request.headers[name]));
    });
    return parts.join("\n");
  },
  canonicalizedResource: function canonicalizedResource() {
    var r2 = this.request;
    var parts = r2.path.split("?");
    var path = parts[0];
    var querystring2 = parts[1];
    var resource = "";
    if (r2.virtualHostedBucket)
      resource += "/" + r2.virtualHostedBucket;
    resource += path;
    if (querystring2) {
      var resources = [];
      AWS$h.util.arrayEach.call(this, querystring2.split("&"), function(param) {
        var name = param.split("=")[0];
        var value = param.split("=")[1];
        if (this.subResources[name] || this.responseHeaders[name]) {
          var subresource = { name };
          if (value !== void 0) {
            if (this.subResources[name]) {
              subresource.value = value;
            } else {
              subresource.value = decodeURIComponent(value);
            }
          }
          resources.push(subresource);
        }
      });
      resources.sort(function(a2, b2) {
        return a2.name < b2.name ? -1 : 1;
      });
      if (resources.length) {
        querystring2 = [];
        AWS$h.util.arrayEach(resources, function(res) {
          if (res.value === void 0) {
            querystring2.push(res.name);
          } else {
            querystring2.push(res.name + "=" + res.value);
          }
        });
        resource += "?" + querystring2.join("&");
      }
    }
    return resource;
  },
  sign: function sign(secret, string2) {
    return AWS$h.util.crypto.hmac(secret, string2, "base64", "sha1");
  }
});
AWS$h.Signers.S3;
var AWS$g = core;
var inherit$1 = AWS$g.util.inherit;
var expiresHeader = "presigned-expires";
function signedUrlBuilder(request) {
  var expires = request.httpRequest.headers[expiresHeader];
  var signerClass = request.service.getSignerClass(request);
  delete request.httpRequest.headers["User-Agent"];
  delete request.httpRequest.headers["X-Amz-User-Agent"];
  if (signerClass === AWS$g.Signers.V4) {
    if (expires > 604800) {
      var message = "Presigning does not support expiry time greater than a week with SigV4 signing.";
      throw AWS$g.util.error(new Error(), {
        code: "InvalidExpiryTime",
        message,
        retryable: false
      });
    }
    request.httpRequest.headers[expiresHeader] = expires;
  } else if (signerClass === AWS$g.Signers.S3) {
    var now3 = request.service ? request.service.getSkewCorrectedDate() : AWS$g.util.date.getDate();
    request.httpRequest.headers[expiresHeader] = parseInt(AWS$g.util.date.unixTimestamp(now3) + expires, 10).toString();
  } else {
    throw AWS$g.util.error(new Error(), {
      message: "Presigning only supports S3 or SigV4 signing.",
      code: "UnsupportedSigner",
      retryable: false
    });
  }
}
function signedUrlSigner(request) {
  var endpoint = request.httpRequest.endpoint;
  var parsedUrl = AWS$g.util.urlParse(request.httpRequest.path);
  var queryParams = {};
  if (parsedUrl.search) {
    queryParams = AWS$g.util.queryStringParse(parsedUrl.search.substr(1));
  }
  var auth = request.httpRequest.headers["Authorization"].split(" ");
  if (auth[0] === "AWS") {
    auth = auth[1].split(":");
    queryParams["Signature"] = auth.pop();
    queryParams["AWSAccessKeyId"] = auth.join(":");
    AWS$g.util.each(request.httpRequest.headers, function(key, value) {
      if (key === expiresHeader)
        key = "Expires";
      if (key.indexOf("x-amz-meta-") === 0) {
        delete queryParams[key];
        key = key.toLowerCase();
      }
      queryParams[key] = value;
    });
    delete request.httpRequest.headers[expiresHeader];
    delete queryParams["Authorization"];
    delete queryParams["Host"];
  } else if (auth[0] === "AWS4-HMAC-SHA256") {
    auth.shift();
    var rest2 = auth.join(" ");
    var signature4 = rest2.match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];
    queryParams["X-Amz-Signature"] = signature4;
    delete queryParams["Expires"];
  }
  endpoint.pathname = parsedUrl.pathname;
  endpoint.search = AWS$g.util.queryParamsToString(queryParams);
}
AWS$g.Signers.Presign = inherit$1({
  sign: function sign2(request, expireTime, callback) {
    request.httpRequest.headers[expiresHeader] = expireTime || 3600;
    request.on("build", signedUrlBuilder);
    request.on("sign", signedUrlSigner);
    request.removeListener("afterBuild", AWS$g.EventListeners.Core.SET_CONTENT_LENGTH);
    request.removeListener("afterBuild", AWS$g.EventListeners.Core.COMPUTE_SHA256);
    request.emit("beforePresign", [request]);
    if (callback) {
      request.build(function() {
        if (this.response.error)
          callback(this.response.error);
        else {
          callback(null, AWS$g.util.urlFormat(request.httpRequest.endpoint));
        }
      });
    } else {
      request.build();
      if (request.response.error)
        throw request.response.error;
      return AWS$g.util.urlFormat(request.httpRequest.endpoint);
    }
  }
});
AWS$g.Signers.Presign;
var AWS$f = core;
var inherit = AWS$f.util.inherit;
AWS$f.Signers.RequestSigner = inherit({
  constructor: function RequestSigner(request) {
    this.request = request;
  },
  setServiceClientId: function setServiceClientId(id) {
    this.serviceClientId = id;
  },
  getServiceClientId: function getServiceClientId() {
    return this.serviceClientId;
  }
});
AWS$f.Signers.RequestSigner.getVersion = function getVersion(version2) {
  switch (version2) {
    case "v2":
      return AWS$f.Signers.V2;
    case "v3":
      return AWS$f.Signers.V3;
    case "s3v4":
      return AWS$f.Signers.V4;
    case "v4":
      return AWS$f.Signers.V4;
    case "s3":
      return AWS$f.Signers.S3;
    case "v3https":
      return AWS$f.Signers.V3Https;
  }
  throw new Error("Unknown signing version " + version2);
};
var AWS$e = core;
AWS$e.ParamValidator = AWS$e.util.inherit({
  constructor: function ParamValidator(validation) {
    if (validation === true || validation === void 0) {
      validation = { "min": true };
    }
    this.validation = validation;
  },
  validate: function validate(shape2, params, context) {
    this.errors = [];
    this.validateMember(shape2, params || {}, context || "params");
    if (this.errors.length > 1) {
      var msg = this.errors.join("\n* ");
      msg = "There were " + this.errors.length + " validation errors:\n* " + msg;
      throw AWS$e.util.error(new Error(msg), { code: "MultipleValidationErrors", errors: this.errors });
    } else if (this.errors.length === 1) {
      throw this.errors[0];
    } else {
      return true;
    }
  },
  fail: function fail(code2, message) {
    this.errors.push(AWS$e.util.error(new Error(message), { code: code2 }));
  },
  validateStructure: function validateStructure(shape2, params, context) {
    if (shape2.isDocument)
      return true;
    this.validateType(params, context, ["object"], "structure");
    var paramName;
    for (var i = 0; shape2.required && i < shape2.required.length; i++) {
      paramName = shape2.required[i];
      var value = params[paramName];
      if (value === void 0 || value === null) {
        this.fail("MissingRequiredParameter", "Missing required key '" + paramName + "' in " + context);
      }
    }
    for (paramName in params) {
      if (!Object.prototype.hasOwnProperty.call(params, paramName))
        continue;
      var paramValue = params[paramName], memberShape = shape2.members[paramName];
      if (memberShape !== void 0) {
        var memberContext = [context, paramName].join(".");
        this.validateMember(memberShape, paramValue, memberContext);
      } else if (paramValue !== void 0 && paramValue !== null) {
        this.fail("UnexpectedParameter", "Unexpected key '" + paramName + "' found in " + context);
      }
    }
    return true;
  },
  validateMember: function validateMember(shape2, param, context) {
    switch (shape2.type) {
      case "structure":
        return this.validateStructure(shape2, param, context);
      case "list":
        return this.validateList(shape2, param, context);
      case "map":
        return this.validateMap(shape2, param, context);
      default:
        return this.validateScalar(shape2, param, context);
    }
  },
  validateList: function validateList(shape2, params, context) {
    if (this.validateType(params, context, [Array])) {
      this.validateRange(shape2, params.length, context, "list member count");
      for (var i = 0; i < params.length; i++) {
        this.validateMember(shape2.member, params[i], context + "[" + i + "]");
      }
    }
  },
  validateMap: function validateMap(shape2, params, context) {
    if (this.validateType(params, context, ["object"], "map")) {
      var mapCount = 0;
      for (var param in params) {
        if (!Object.prototype.hasOwnProperty.call(params, param))
          continue;
        this.validateMember(shape2.key, param, context + "[key='" + param + "']");
        this.validateMember(shape2.value, params[param], context + "['" + param + "']");
        mapCount++;
      }
      this.validateRange(shape2, mapCount, context, "map member count");
    }
  },
  validateScalar: function validateScalar(shape2, value, context) {
    switch (shape2.type) {
      case null:
      case void 0:
      case "string":
        return this.validateString(shape2, value, context);
      case "base64":
      case "binary":
        return this.validatePayload(value, context);
      case "integer":
      case "float":
        return this.validateNumber(shape2, value, context);
      case "boolean":
        return this.validateType(value, context, ["boolean"]);
      case "timestamp":
        return this.validateType(value, context, [
          Date,
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/,
          "number"
        ], "Date object, ISO-8601 string, or a UNIX timestamp");
      default:
        return this.fail("UnkownType", "Unhandled type " + shape2.type + " for " + context);
    }
  },
  validateString: function validateString(shape2, value, context) {
    var validTypes = ["string"];
    if (shape2.isJsonValue) {
      validTypes = validTypes.concat(["number", "object", "boolean"]);
    }
    if (value !== null && this.validateType(value, context, validTypes)) {
      this.validateEnum(shape2, value, context);
      this.validateRange(shape2, value.length, context, "string length");
      this.validatePattern(shape2, value, context);
      this.validateUri(shape2, value, context);
    }
  },
  validateUri: function validateUri(shape2, value, context) {
    if (shape2["location"] === "uri") {
      if (value.length === 0) {
        this.fail("UriParameterError", 'Expected uri parameter to have length >= 1, but found "' + value + '" for ' + context);
      }
    }
  },
  validatePattern: function validatePattern(shape2, value, context) {
    if (this.validation["pattern"] && shape2["pattern"] !== void 0) {
      if (!new RegExp(shape2["pattern"]).test(value)) {
        this.fail("PatternMatchError", 'Provided value "' + value + '" does not match regex pattern /' + shape2["pattern"] + "/ for " + context);
      }
    }
  },
  validateRange: function validateRange(shape2, value, context, descriptor) {
    if (this.validation["min"]) {
      if (shape2["min"] !== void 0 && value < shape2["min"]) {
        this.fail("MinRangeError", "Expected " + descriptor + " >= " + shape2["min"] + ", but found " + value + " for " + context);
      }
    }
    if (this.validation["max"]) {
      if (shape2["max"] !== void 0 && value > shape2["max"]) {
        this.fail("MaxRangeError", "Expected " + descriptor + " <= " + shape2["max"] + ", but found " + value + " for " + context);
      }
    }
  },
  validateEnum: function validateRange2(shape2, value, context) {
    if (this.validation["enum"] && shape2["enum"] !== void 0) {
      if (shape2["enum"].indexOf(value) === -1) {
        this.fail("EnumError", "Found string value of " + value + ", but expected " + shape2["enum"].join("|") + " for " + context);
      }
    }
  },
  validateType: function validateType(value, context, acceptedTypes, type) {
    if (value === null || value === void 0)
      return false;
    var foundInvalidType = false;
    for (var i = 0; i < acceptedTypes.length; i++) {
      if (typeof acceptedTypes[i] === "string") {
        if (typeof value === acceptedTypes[i])
          return true;
      } else if (acceptedTypes[i] instanceof RegExp) {
        if ((value || "").toString().match(acceptedTypes[i]))
          return true;
      } else {
        if (value instanceof acceptedTypes[i])
          return true;
        if (AWS$e.util.isType(value, acceptedTypes[i]))
          return true;
        if (!type && !foundInvalidType)
          acceptedTypes = acceptedTypes.slice();
        acceptedTypes[i] = AWS$e.util.typeName(acceptedTypes[i]);
      }
      foundInvalidType = true;
    }
    var acceptedType = type;
    if (!acceptedType) {
      acceptedType = acceptedTypes.join(", ").replace(/,([^,]+)$/, ", or$1");
    }
    var vowel = acceptedType.match(/^[aeiou]/i) ? "n" : "";
    this.fail("InvalidParameterType", "Expected " + context + " to be a" + vowel + " " + acceptedType);
    return false;
  },
  validateNumber: function validateNumber(shape2, value, context) {
    if (value === null || value === void 0)
      return;
    if (typeof value === "string") {
      var castedValue = parseFloat(value);
      if (castedValue.toString() === value)
        value = castedValue;
    }
    if (this.validateType(value, context, ["number"])) {
      this.validateRange(shape2, value, context, "numeric value");
    }
  },
  validatePayload: function validatePayload(value, context) {
    if (value === null || value === void 0)
      return;
    if (typeof value === "string")
      return;
    if (value && typeof value.byteLength === "number")
      return;
    if (AWS$e.util.isNode()) {
      var Stream = AWS$e.util.stream.Stream;
      if (AWS$e.util.Buffer.isBuffer(value) || value instanceof Stream)
        return;
    } else {
      if (typeof Blob !== void 0 && value instanceof Blob)
        return;
    }
    var types = ["Buffer", "Stream", "File", "Blob", "ArrayBuffer", "DataView"];
    if (value) {
      for (var i = 0; i < types.length; i++) {
        if (AWS$e.util.isType(value, types[i]))
          return;
        if (AWS$e.util.typeName(value.constructor) === types[i])
          return;
      }
    }
    this.fail("InvalidParameterType", "Expected " + context + " to be a string, Buffer, Stream, Blob, or typed array object");
  }
});
var AWS$d = { util: util_1 };
var core = AWS$d;
AWS$d.util.update(AWS$d, {
  VERSION: "2.1092.0",
  Signers: {},
  Protocol: {
    Json: json,
    Query: query,
    Rest: rest,
    RestJson: rest_json,
    RestXml: rest_xml
  },
  XML: {
    Builder: builder,
    Parser: null
  },
  JSON: {
    Builder: builder$1,
    Parser: parser
  },
  Model: {
    Api: api,
    Operation: operation,
    Shape: shape,
    Paginator: paginator,
    ResourceWaiter: resource_waiter
  },
  apiLoader: api_loader,
  EndpointCache: endpointCache.EndpointCache
});
AWS$d.events = new AWS$d.SequentialExecutor();
AWS$d.util.memoizedProperty(AWS$d, "endpointCache", function() {
  return new AWS$d.EndpointCache(AWS$d.config.endpointCacheSize);
}, true);
var rngBrowser = { exports: {} };
var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
if (getRandomValues) {
  var rnds8 = new Uint8Array(16);
  rngBrowser.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  var rnds = new Array(16);
  rngBrowser.exports = function mathRNG() {
    for (var i = 0, r2; i < 16; i++) {
      if ((i & 3) === 0)
        r2 = Math.random() * 4294967296;
      rnds[i] = r2 >>> ((i & 3) << 3) & 255;
    }
    return rnds;
  };
}
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 256).toString(16).substr(1);
}
function bytesToUuid$2(buf, offset2) {
  var i = offset2 || 0;
  var bth = byteToHex;
  return [
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]],
    "-",
    bth[buf[i++]],
    bth[buf[i++]],
    "-",
    bth[buf[i++]],
    bth[buf[i++]],
    "-",
    bth[buf[i++]],
    bth[buf[i++]],
    "-",
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]]
  ].join("");
}
var bytesToUuid_1 = bytesToUuid$2;
var rng$1 = rngBrowser.exports;
var bytesToUuid$1 = bytesToUuid_1;
var _nodeId;
var _clockseq;
var _lastMSecs = 0;
var _lastNSecs = 0;
function v1$1(options, buf, offset2) {
  var i = buf && offset2 || 0;
  var b2 = buf || [];
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    var seedBytes = rng$1();
    if (node == null) {
      node = _nodeId = [
        seedBytes[0] | 1,
        seedBytes[1],
        seedBytes[2],
        seedBytes[3],
        seedBytes[4],
        seedBytes[5]
      ];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
  var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b2[i++] = tl >>> 24 & 255;
  b2[i++] = tl >>> 16 & 255;
  b2[i++] = tl >>> 8 & 255;
  b2[i++] = tl & 255;
  var tmh = msecs / 4294967296 * 1e4 & 268435455;
  b2[i++] = tmh >>> 8 & 255;
  b2[i++] = tmh & 255;
  b2[i++] = tmh >>> 24 & 15 | 16;
  b2[i++] = tmh >>> 16 & 255;
  b2[i++] = clockseq >>> 8 | 128;
  b2[i++] = clockseq & 255;
  for (var n2 = 0; n2 < 6; ++n2) {
    b2[i + n2] = node[n2];
  }
  return buf ? buf : bytesToUuid$1(b2);
}
var v1_1 = v1$1;
var rng = rngBrowser.exports;
var bytesToUuid = bytesToUuid_1;
function v4$1(options, buf, offset2) {
  var i = buf && offset2 || 0;
  if (typeof options == "string") {
    buf = options === "binary" ? new Array(16) : null;
    options = null;
  }
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    for (var ii2 = 0; ii2 < 16; ++ii2) {
      buf[i + ii2] = rnds[ii2];
    }
  }
  return buf || bytesToUuid(rnds);
}
var v4_1 = v4$1;
var v1 = v1_1;
var v4 = v4_1;
var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;
var uuid_1 = uuid;
var AWS$c;
var util$4 = {
  environment: "nodejs",
  engine: function engine() {
    if (util$4.isBrowser() && typeof navigator !== "undefined") {
      return navigator.userAgent;
    } else {
      var engine2 = process.platform + "/" + process.version;
      if ({}.AWS_EXECUTION_ENV) {
        engine2 += " exec-env/" + {}.AWS_EXECUTION_ENV;
      }
      return engine2;
    }
  },
  userAgent: function userAgent2() {
    var name = util$4.environment;
    var agent = "aws-sdk-" + name + "/" + core.VERSION;
    if (name === "nodejs")
      agent += " " + util$4.engine();
    return agent;
  },
  uriEscape: function uriEscape(string2) {
    var output = encodeURIComponent(string2);
    output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);
    output = output.replace(/[*]/g, function(ch) {
      return "%" + ch.charCodeAt(0).toString(16).toUpperCase();
    });
    return output;
  },
  uriEscapePath: function uriEscapePath(string2) {
    var parts = [];
    util$4.arrayEach(string2.split("/"), function(part) {
      parts.push(util$4.uriEscape(part));
    });
    return parts.join("/");
  },
  urlParse: function urlParse(url2) {
    return util$4.url.parse(url2);
  },
  urlFormat: function urlFormat(url2) {
    return util$4.url.format(url2);
  },
  queryStringParse: function queryStringParse(qs) {
    return util$4.querystring.parse(qs);
  },
  queryParamsToString: function queryParamsToString(params) {
    var items = [];
    var escape2 = util$4.uriEscape;
    var sortedKeys = Object.keys(params).sort();
    util$4.arrayEach(sortedKeys, function(name) {
      var value = params[name];
      var ename = escape2(name);
      var result = ename + "=";
      if (Array.isArray(value)) {
        var vals = [];
        util$4.arrayEach(value, function(item) {
          vals.push(escape2(item));
        });
        result = ename + "=" + vals.sort().join("&" + ename + "=");
      } else if (value !== void 0 && value !== null) {
        result = ename + "=" + escape2(value);
      }
      items.push(result);
    });
    return items.join("&");
  },
  readFileSync: function readFileSync(path) {
    if (util$4.isBrowser())
      return null;
    return require$$1$2.readFileSync(path, "utf-8");
  },
  base64: {
    encode: function encode64(string2) {
      if (typeof string2 === "number") {
        throw util$4.error(new Error("Cannot base64 encode number " + string2));
      }
      if (string2 === null || typeof string2 === "undefined") {
        return string2;
      }
      var buf = util$4.buffer.toBuffer(string2);
      return buf.toString("base64");
    },
    decode: function decode64(string2) {
      if (typeof string2 === "number") {
        throw util$4.error(new Error("Cannot base64 decode number " + string2));
      }
      if (string2 === null || typeof string2 === "undefined") {
        return string2;
      }
      return util$4.buffer.toBuffer(string2, "base64");
    }
  },
  buffer: {
    toBuffer: function(data, encoding) {
      return typeof util$4.Buffer.from === "function" && util$4.Buffer.from !== Uint8Array.from ? util$4.Buffer.from(data, encoding) : new util$4.Buffer(data, encoding);
    },
    alloc: function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new Error("size passed to alloc must be a number.");
      }
      if (typeof util$4.Buffer.alloc === "function") {
        return util$4.Buffer.alloc(size, fill, encoding);
      } else {
        var buf = new util$4.Buffer(size);
        if (fill !== void 0 && typeof buf.fill === "function") {
          buf.fill(fill, void 0, void 0, encoding);
        }
        return buf;
      }
    },
    toStream: function toStream(buffer2) {
      if (!util$4.Buffer.isBuffer(buffer2))
        buffer2 = util$4.buffer.toBuffer(buffer2);
      var readable = new util$4.stream.Readable();
      var pos = 0;
      readable._read = function(size) {
        if (pos >= buffer2.length)
          return readable.push(null);
        var end = pos + size;
        if (end > buffer2.length)
          end = buffer2.length;
        readable.push(buffer2.slice(pos, end));
        pos = end;
      };
      return readable;
    },
    concat: function(buffers) {
      var length = 0, offset2 = 0, buffer2 = null, i;
      for (i = 0; i < buffers.length; i++) {
        length += buffers[i].length;
      }
      buffer2 = util$4.buffer.alloc(length);
      for (i = 0; i < buffers.length; i++) {
        buffers[i].copy(buffer2, offset2);
        offset2 += buffers[i].length;
      }
      return buffer2;
    }
  },
  string: {
    byteLength: function byteLength2(string2) {
      if (string2 === null || string2 === void 0)
        return 0;
      if (typeof string2 === "string")
        string2 = util$4.buffer.toBuffer(string2);
      if (typeof string2.byteLength === "number") {
        return string2.byteLength;
      } else if (typeof string2.length === "number") {
        return string2.length;
      } else if (typeof string2.size === "number") {
        return string2.size;
      } else if (typeof string2.path === "string") {
        return require$$1$2.lstatSync(string2.path).size;
      } else {
        throw util$4.error(new Error("Cannot determine length of " + string2), { object: string2 });
      }
    },
    upperFirst: function upperFirst(string2) {
      return string2[0].toUpperCase() + string2.substr(1);
    },
    lowerFirst: function lowerFirst(string2) {
      return string2[0].toLowerCase() + string2.substr(1);
    }
  },
  ini: {
    parse: function string(ini) {
      var currentSection, map = {};
      util$4.arrayEach(ini.split(/\r?\n/), function(line) {
        line = line.split(/(^|\s)[;#]/)[0];
        var section = line.match(/^\s*\[([^\[\]]+)\]\s*$/);
        if (section) {
          currentSection = section[1];
          if (currentSection === "__proto__" || currentSection.split(/\s/)[1] === "__proto__") {
            throw util$4.error(new Error("Cannot load profile name '" + currentSection + "' from shared ini file."));
          }
        } else if (currentSection) {
          var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
          if (item) {
            map[currentSection] = map[currentSection] || {};
            map[currentSection][item[1]] = item[2];
          }
        }
      });
      return map;
    }
  },
  fn: {
    noop: function() {
    },
    callback: function(err) {
      if (err)
        throw err;
    },
    makeAsync: function makeAsync(fn2, expectedArgs) {
      if (expectedArgs && expectedArgs <= fn2.length) {
        return fn2;
      }
      return function() {
        var args = Array.prototype.slice.call(arguments, 0);
        var callback = args.pop();
        var result = fn2.apply(null, args);
        callback(result);
      };
    }
  },
  date: {
    getDate: function getDate() {
      if (!AWS$c)
        AWS$c = core;
      if (AWS$c.config.systemClockOffset) {
        return new Date(new Date().getTime() + AWS$c.config.systemClockOffset);
      } else {
        return new Date();
      }
    },
    iso8601: function iso8601(date) {
      if (date === void 0) {
        date = util$4.date.getDate();
      }
      return date.toISOString().replace(/\.\d{3}Z$/, "Z");
    },
    rfc822: function rfc822(date) {
      if (date === void 0) {
        date = util$4.date.getDate();
      }
      return date.toUTCString();
    },
    unixTimestamp: function unixTimestamp(date) {
      if (date === void 0) {
        date = util$4.date.getDate();
      }
      return date.getTime() / 1e3;
    },
    from: function format(date) {
      if (typeof date === "number") {
        return new Date(date * 1e3);
      } else {
        return new Date(date);
      }
    },
    format: function format2(date, formatter) {
      if (!formatter)
        formatter = "iso8601";
      return util$4.date[formatter](util$4.date.from(date));
    },
    parseTimestamp: function parseTimestamp(value) {
      if (typeof value === "number") {
        return new Date(value * 1e3);
      } else if (value.match(/^\d+$/)) {
        return new Date(value * 1e3);
      } else if (value.match(/^\d{4}/)) {
        return new Date(value);
      } else if (value.match(/^\w{3},/)) {
        return new Date(value);
      } else {
        throw util$4.error(new Error("unhandled timestamp format: " + value), { code: "TimestampParserError" });
      }
    }
  },
  crypto: {
    crc32Table: [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ],
    crc32: function crc32(data) {
      var tbl = util$4.crypto.crc32Table;
      var crc = 0 ^ -1;
      if (typeof data === "string") {
        data = util$4.buffer.toBuffer(data);
      }
      for (var i = 0; i < data.length; i++) {
        var code2 = data.readUInt8(i);
        crc = crc >>> 8 ^ tbl[(crc ^ code2) & 255];
      }
      return (crc ^ -1) >>> 0;
    },
    hmac: function hmac2(key, string2, digest, fn2) {
      if (!digest)
        digest = "binary";
      if (digest === "buffer") {
        digest = void 0;
      }
      if (!fn2)
        fn2 = "sha256";
      if (typeof string2 === "string")
        string2 = util$4.buffer.toBuffer(string2);
      return util$4.crypto.lib.createHmac(fn2, key).update(string2).digest(digest);
    },
    md5: function md5(data, digest, callback) {
      return util$4.crypto.hash("md5", data, digest, callback);
    },
    sha256: function sha2562(data, digest, callback) {
      return util$4.crypto.hash("sha256", data, digest, callback);
    },
    hash: function(algorithm, data, digest, callback) {
      var hash2 = util$4.crypto.createHash(algorithm);
      if (!digest) {
        digest = "binary";
      }
      if (digest === "buffer") {
        digest = void 0;
      }
      if (typeof data === "string")
        data = util$4.buffer.toBuffer(data);
      var sliceFn = util$4.arraySliceFn(data);
      var isBuffer = util$4.Buffer.isBuffer(data);
      if (util$4.isBrowser() && typeof ArrayBuffer !== "undefined" && data && data.buffer instanceof ArrayBuffer)
        isBuffer = true;
      if (callback && typeof data === "object" && typeof data.on === "function" && !isBuffer) {
        data.on("data", function(chunk) {
          hash2.update(chunk);
        });
        data.on("error", function(err) {
          callback(err);
        });
        data.on("end", function() {
          callback(null, hash2.digest(digest));
        });
      } else if (callback && sliceFn && !isBuffer && typeof FileReader !== "undefined") {
        var index = 0, size = 1024 * 512;
        var reader = new FileReader();
        reader.onerror = function() {
          callback(new Error("Failed to read data."));
        };
        reader.onload = function() {
          var buf = new util$4.Buffer(new Uint8Array(reader.result));
          hash2.update(buf);
          index += buf.length;
          reader._continueReading();
        };
        reader._continueReading = function() {
          if (index >= data.size) {
            callback(null, hash2.digest(digest));
            return;
          }
          var back = index + size;
          if (back > data.size)
            back = data.size;
          reader.readAsArrayBuffer(sliceFn.call(data, index, back));
        };
        reader._continueReading();
      } else {
        if (util$4.isBrowser() && typeof data === "object" && !isBuffer) {
          data = new util$4.Buffer(new Uint8Array(data));
        }
        var out = hash2.update(data).digest(digest);
        if (callback)
          callback(null, out);
        return out;
      }
    },
    toHex: function toHex(data) {
      var out = [];
      for (var i = 0; i < data.length; i++) {
        out.push(("0" + data.charCodeAt(i).toString(16)).substr(-2, 2));
      }
      return out.join("");
    },
    createHash: function createHash(algorithm) {
      return util$4.crypto.lib.createHash(algorithm);
    }
  },
  abort: {},
  each: function each(object, iterFunction) {
    for (var key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        var ret = iterFunction.call(this, key, object[key]);
        if (ret === util$4.abort)
          break;
      }
    }
  },
  arrayEach: function arrayEach(array, iterFunction) {
    for (var idx in array) {
      if (Object.prototype.hasOwnProperty.call(array, idx)) {
        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));
        if (ret === util$4.abort)
          break;
      }
    }
  },
  update: function update2(obj1, obj2) {
    util$4.each(obj2, function iterator(key, item) {
      obj1[key] = item;
    });
    return obj1;
  },
  merge: function merge(obj1, obj2) {
    return util$4.update(util$4.copy(obj1), obj2);
  },
  copy: function copy(object) {
    if (object === null || object === void 0)
      return object;
    var dupe = {};
    for (var key in object) {
      dupe[key] = object[key];
    }
    return dupe;
  },
  isEmpty: function isEmpty(obj) {
    for (var prop in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
        return false;
      }
    }
    return true;
  },
  arraySliceFn: function arraySliceFn(obj) {
    var fn2 = obj.slice || obj.webkitSlice || obj.mozSlice;
    return typeof fn2 === "function" ? fn2 : null;
  },
  isType: function isType(obj, type) {
    if (typeof type === "function")
      type = util$4.typeName(type);
    return Object.prototype.toString.call(obj) === "[object " + type + "]";
  },
  typeName: function typeName(type) {
    if (Object.prototype.hasOwnProperty.call(type, "name"))
      return type.name;
    var str = type.toString();
    var match2 = str.match(/^\s*function (.+)\(/);
    return match2 ? match2[1] : str;
  },
  error: function error(err, options) {
    var originalError = null;
    if (typeof err.message === "string" && err.message !== "") {
      if (typeof options === "string" || options && options.message) {
        originalError = util$4.copy(err);
        originalError.message = err.message;
      }
    }
    err.message = err.message || null;
    if (typeof options === "string") {
      err.message = options;
    } else if (typeof options === "object" && options !== null) {
      util$4.update(err, options);
      if (options.message)
        err.message = options.message;
      if (options.code || options.name)
        err.code = options.code || options.name;
      if (options.stack)
        err.stack = options.stack;
    }
    if (typeof Object.defineProperty === "function") {
      Object.defineProperty(err, "name", { writable: true, enumerable: false });
      Object.defineProperty(err, "message", { enumerable: true });
    }
    err.name = String(options && options.name || err.name || err.code || "Error");
    err.time = new Date();
    if (originalError)
      err.originalError = originalError;
    return err;
  },
  inherit: function inherit2(klass, features) {
    var newObject = null;
    if (features === void 0) {
      features = klass;
      klass = Object;
      newObject = {};
    } else {
      var ctor = function ConstructorWrapper() {
      };
      ctor.prototype = klass.prototype;
      newObject = new ctor();
    }
    if (features.constructor === Object) {
      features.constructor = function() {
        if (klass !== Object) {
          return klass.apply(this, arguments);
        }
      };
    }
    features.constructor.prototype = newObject;
    util$4.update(features.constructor.prototype, features);
    features.constructor.__super__ = klass;
    return features.constructor;
  },
  mixin: function mixin() {
    var klass = arguments[0];
    for (var i = 1; i < arguments.length; i++) {
      for (var prop in arguments[i].prototype) {
        var fn2 = arguments[i].prototype[prop];
        if (prop !== "constructor") {
          klass.prototype[prop] = fn2;
        }
      }
    }
    return klass;
  },
  hideProperties: function hideProperties(obj, props) {
    if (typeof Object.defineProperty !== "function")
      return;
    util$4.arrayEach(props, function(key) {
      Object.defineProperty(obj, key, {
        enumerable: false,
        writable: true,
        configurable: true
      });
    });
  },
  property: function property2(obj, name, value, enumerable, isValue) {
    var opts = {
      configurable: true,
      enumerable: enumerable !== void 0 ? enumerable : true
    };
    if (typeof value === "function" && !isValue) {
      opts.get = value;
    } else {
      opts.value = value;
      opts.writable = true;
    }
    Object.defineProperty(obj, name, opts);
  },
  memoizedProperty: function memoizedProperty2(obj, name, get5, enumerable) {
    var cachedValue = null;
    util$4.property(obj, name, function() {
      if (cachedValue === null) {
        cachedValue = get5();
      }
      return cachedValue;
    }, enumerable);
  },
  hoistPayloadMember: function hoistPayloadMember(resp) {
    var req = resp.request;
    var operationName = req.operation;
    var operation2 = req.service.api.operations[operationName];
    var output = operation2.output;
    if (output.payload && !operation2.hasEventOutput) {
      var payloadMember = output.members[output.payload];
      var responsePayload = resp.data[output.payload];
      if (payloadMember.type === "structure") {
        util$4.each(responsePayload, function(key, value) {
          util$4.property(resp.data, key, value, false);
        });
      }
    }
  },
  computeSha256: function computeSha256(body, done) {
    if (util$4.isNode()) {
      var Stream = util$4.stream.Stream;
      var fs = require$$1$2;
      if (typeof Stream === "function" && body instanceof Stream) {
        if (typeof body.path === "string") {
          var settings = {};
          if (typeof body.start === "number") {
            settings.start = body.start;
          }
          if (typeof body.end === "number") {
            settings.end = body.end;
          }
          body = fs.createReadStream(body.path, settings);
        } else {
          return done(new Error("Non-file stream objects are not supported with SigV4"));
        }
      }
    }
    util$4.crypto.sha256(body, "hex", function(err, sha) {
      if (err)
        done(err);
      else
        done(null, sha);
    });
  },
  isClockSkewed: function isClockSkewed2(serverTime) {
    if (serverTime) {
      util$4.property(AWS$c.config, "isClockSkewed", Math.abs(new Date().getTime() - serverTime) >= 3e5, false);
      return AWS$c.config.isClockSkewed;
    }
  },
  applyClockOffset: function applyClockOffset2(serverTime) {
    if (serverTime)
      AWS$c.config.systemClockOffset = serverTime - new Date().getTime();
  },
  extractRequestId: function extractRequestId(resp) {
    var requestId = resp.httpResponse.headers["x-amz-request-id"] || resp.httpResponse.headers["x-amzn-requestid"];
    if (!requestId && resp.data && resp.data.ResponseMetadata) {
      requestId = resp.data.ResponseMetadata.RequestId;
    }
    if (requestId) {
      resp.requestId = requestId;
    }
    if (resp.error) {
      resp.error.requestId = requestId;
    }
  },
  addPromises: function addPromises(constructors, PromiseDependency) {
    var deletePromises = false;
    if (PromiseDependency === void 0 && AWS$c && AWS$c.config) {
      PromiseDependency = AWS$c.config.getPromisesDependency();
    }
    if (PromiseDependency === void 0 && typeof Promise !== "undefined") {
      PromiseDependency = Promise;
    }
    if (typeof PromiseDependency !== "function")
      deletePromises = true;
    if (!Array.isArray(constructors))
      constructors = [constructors];
    for (var ind = 0; ind < constructors.length; ind++) {
      var constructor2 = constructors[ind];
      if (deletePromises) {
        if (constructor2.deletePromisesFromClass) {
          constructor2.deletePromisesFromClass();
        }
      } else if (constructor2.addPromisesToClass) {
        constructor2.addPromisesToClass(PromiseDependency);
      }
    }
  },
  promisifyMethod: function promisifyMethod(methodName, PromiseDependency) {
    return function promise() {
      var self2 = this;
      var args = Array.prototype.slice.call(arguments);
      return new PromiseDependency(function(resolve3, reject) {
        args.push(function(err, data) {
          if (err) {
            reject(err);
          } else {
            resolve3(data);
          }
        });
        self2[methodName].apply(self2, args);
      });
    };
  },
  isDualstackAvailable: function isDualstackAvailable(service) {
    if (!service)
      return false;
    var metadata2 = require$$2$2;
    if (typeof service !== "string")
      service = service.serviceIdentifier;
    if (typeof service !== "string" || !metadata2.hasOwnProperty(service))
      return false;
    return !!metadata2[service].dualstackAvailable;
  },
  calculateRetryDelay: function calculateRetryDelay(retryCount, retryDelayOptions, err) {
    if (!retryDelayOptions)
      retryDelayOptions = {};
    var customBackoff = retryDelayOptions.customBackoff || null;
    if (typeof customBackoff === "function") {
      return customBackoff(retryCount, err);
    }
    var base = typeof retryDelayOptions.base === "number" ? retryDelayOptions.base : 100;
    var delay = Math.random() * (Math.pow(2, retryCount) * base);
    return delay;
  },
  handleRequestWithRetries: function handleRequestWithRetries(httpRequest, options, cb) {
    if (!options)
      options = {};
    var http = AWS$c.HttpClient.getInstance();
    var httpOptions = options.httpOptions || {};
    var retryCount = 0;
    var errCallback = function(err) {
      var maxRetries = options.maxRetries || 0;
      if (err && err.code === "TimeoutError")
        err.retryable = true;
      if (err && err.retryable && retryCount < maxRetries) {
        var delay = util$4.calculateRetryDelay(retryCount, options.retryDelayOptions, err);
        if (delay >= 0) {
          retryCount++;
          setTimeout(sendRequest, delay + (err.retryAfter || 0));
          return;
        }
      }
      cb(err);
    };
    var sendRequest = function() {
      var data = "";
      http.handleRequest(httpRequest, httpOptions, function(httpResponse) {
        httpResponse.on("data", function(chunk) {
          data += chunk.toString();
        });
        httpResponse.on("end", function() {
          var statusCode = httpResponse.statusCode;
          if (statusCode < 300) {
            cb(null, data);
          } else {
            var retryAfter = parseInt(httpResponse.headers["retry-after"], 10) * 1e3 || 0;
            var err = util$4.error(new Error(), {
              statusCode,
              retryable: statusCode >= 500 || statusCode === 429
            });
            if (retryAfter && err.retryable)
              err.retryAfter = retryAfter;
            errCallback(err);
          }
        });
      }, errCallback);
    };
    AWS$c.util.defer(sendRequest);
  },
  uuid: {
    v4: function uuidV4() {
      return uuid_1.v4();
    }
  },
  convertPayloadToString: function convertPayloadToString(resp) {
    var req = resp.request;
    var operation2 = req.operation;
    var rules2 = req.service.api.operations[operation2].output || {};
    if (rules2.payload && resp.data[rules2.payload]) {
      resp.data[rules2.payload] = resp.data[rules2.payload].toString();
    }
  },
  defer: function defer(callback) {
    if (typeof process === "object" && typeof process.nextTick === "function") {
      process.nextTick(callback);
    } else if (typeof setImmediate === "function") {
      setImmediate(callback);
    } else {
      setTimeout(callback, 0);
    }
  },
  getRequestPayloadShape: function getRequestPayloadShape(req) {
    var operations2 = req.service.api.operations;
    if (!operations2)
      return void 0;
    var operation2 = (operations2 || {})[req.operation];
    if (!operation2 || !operation2.input || !operation2.input.payload)
      return void 0;
    return operation2.input.members[operation2.input.payload];
  },
  getProfilesFromSharedConfig: function getProfilesFromSharedConfig(iniLoader, filename) {
    var profiles = {};
    var profilesFromConfig = {};
    if (process.env[util$4.configOptInEnv]) {
      var profilesFromConfig = iniLoader.loadFrom({
        isConfig: true,
        filename: process.env[util$4.sharedConfigFileEnv]
      });
    }
    var profilesFromCreds = {};
    try {
      var profilesFromCreds = iniLoader.loadFrom({
        filename: filename || process.env[util$4.configOptInEnv] && process.env[util$4.sharedCredentialsFileEnv]
      });
    } catch (error2) {
      if (!process.env[util$4.configOptInEnv])
        throw error2;
    }
    for (var i = 0, profileNames = Object.keys(profilesFromConfig); i < profileNames.length; i++) {
      profiles[profileNames[i]] = objectAssign(profiles[profileNames[i]] || {}, profilesFromConfig[profileNames[i]]);
    }
    for (var i = 0, profileNames = Object.keys(profilesFromCreds); i < profileNames.length; i++) {
      profiles[profileNames[i]] = objectAssign(profiles[profileNames[i]] || {}, profilesFromCreds[profileNames[i]]);
    }
    return profiles;
    function objectAssign(target, source) {
      for (var i2 = 0, keys = Object.keys(source); i2 < keys.length; i2++) {
        target[keys[i2]] = source[keys[i2]];
      }
      return target;
    }
  },
  ARN: {
    validate: function validateARN(str) {
      return str && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
    },
    parse: function parseARN(arn) {
      var matched = arn.split(":");
      return {
        partition: matched[1],
        service: matched[2],
        region: matched[3],
        accountId: matched[4],
        resource: matched.slice(5).join(":")
      };
    },
    build: function buildARN(arnObject) {
      if (arnObject.service === void 0 || arnObject.region === void 0 || arnObject.accountId === void 0 || arnObject.resource === void 0)
        throw util$4.error(new Error("Input ARN object is invalid"));
      return "arn:" + (arnObject.partition || "aws") + ":" + arnObject.service + ":" + arnObject.region + ":" + arnObject.accountId + ":" + arnObject.resource;
    }
  },
  defaultProfile: "default",
  configOptInEnv: "AWS_SDK_LOAD_CONFIG",
  sharedCredentialsFileEnv: "AWS_SHARED_CREDENTIALS_FILE",
  sharedConfigFileEnv: "AWS_CONFIG_FILE",
  imdsDisabledEnv: "AWS_EC2_METADATA_DISABLED"
};
var util_1 = util$4;
var browserCryptoLib = { exports: {} };
var browserHmac = { exports: {} };
var browserHashUtils = { exports: {} };
(function(module, exports) {
  var Buffer2 = buffer.Buffer;
  if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "undefined") {
    ArrayBuffer.isView = function(arg) {
      return viewStrings.indexOf(Object.prototype.toString.call(arg)) > -1;
    };
  }
  var viewStrings = [
    "[object Int8Array]",
    "[object Uint8Array]",
    "[object Uint8ClampedArray]",
    "[object Int16Array]",
    "[object Uint16Array]",
    "[object Int32Array]",
    "[object Uint32Array]",
    "[object Float32Array]",
    "[object Float64Array]",
    "[object DataView]"
  ];
  function isEmptyData(data) {
    if (typeof data === "string") {
      return data.length === 0;
    }
    return data.byteLength === 0;
  }
  function convertToBuffer(data) {
    if (typeof data === "string") {
      data = new Buffer2(data, "utf8");
    }
    if (ArrayBuffer.isView(data)) {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
  }
  module.exports = {
    isEmptyData,
    convertToBuffer
  };
})(browserHashUtils);
(function(module, exports) {
  var hashUtils = browserHashUtils.exports;
  function Hmac(hashCtor, secret) {
    this.hash = new hashCtor();
    this.outer = new hashCtor();
    var inner = bufferFromSecret(hashCtor, secret);
    var outer = new Uint8Array(hashCtor.BLOCK_SIZE);
    outer.set(inner);
    for (var i = 0; i < hashCtor.BLOCK_SIZE; i++) {
      inner[i] ^= 54;
      outer[i] ^= 92;
    }
    this.hash.update(inner);
    this.outer.update(outer);
    for (var i = 0; i < inner.byteLength; i++) {
      inner[i] = 0;
    }
  }
  module.exports = Hmac;
  Hmac.prototype.update = function(toHash) {
    if (hashUtils.isEmptyData(toHash) || this.error) {
      return this;
    }
    try {
      this.hash.update(hashUtils.convertToBuffer(toHash));
    } catch (e2) {
      this.error = e2;
    }
    return this;
  };
  Hmac.prototype.digest = function(encoding) {
    if (!this.outer.finished) {
      this.outer.update(this.hash.digest());
    }
    return this.outer.digest(encoding);
  };
  function bufferFromSecret(hashCtor, secret) {
    var input = hashUtils.convertToBuffer(secret);
    if (input.byteLength > hashCtor.BLOCK_SIZE) {
      var bufferHash = new hashCtor();
      bufferHash.update(input);
      input = bufferHash.digest();
    }
    var buffer2 = new Uint8Array(hashCtor.BLOCK_SIZE);
    buffer2.set(input);
    return buffer2;
  }
})(browserHmac);
var browserMd5 = { exports: {} };
(function(module, exports) {
  var hashUtils = browserHashUtils.exports;
  var Buffer2 = buffer.Buffer;
  var BLOCK_SIZE = 64;
  var DIGEST_LENGTH = 16;
  function Md5() {
    this.state = [
      1732584193,
      4023233417,
      2562383102,
      271733878
    ];
    this.buffer = new DataView(new ArrayBuffer(BLOCK_SIZE));
    this.bufferLength = 0;
    this.bytesHashed = 0;
    this.finished = false;
  }
  module.exports = Md5;
  Md5.BLOCK_SIZE = BLOCK_SIZE;
  Md5.prototype.update = function(sourceData) {
    if (hashUtils.isEmptyData(sourceData)) {
      return this;
    } else if (this.finished) {
      throw new Error("Attempted to update an already finished hash.");
    }
    var data = hashUtils.convertToBuffer(sourceData);
    var position = 0;
    var byteLength3 = data.byteLength;
    this.bytesHashed += byteLength3;
    while (byteLength3 > 0) {
      this.buffer.setUint8(this.bufferLength++, data[position++]);
      byteLength3--;
      if (this.bufferLength === BLOCK_SIZE) {
        this.hashBuffer();
        this.bufferLength = 0;
      }
    }
    return this;
  };
  Md5.prototype.digest = function(encoding) {
    if (!this.finished) {
      var _a2 = this, buffer2 = _a2.buffer, undecoratedLength = _a2.bufferLength, bytesHashed = _a2.bytesHashed;
      var bitsHashed = bytesHashed * 8;
      buffer2.setUint8(this.bufferLength++, 128);
      if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
        for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
          buffer2.setUint8(i, 0);
        }
        this.hashBuffer();
        this.bufferLength = 0;
      }
      for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
        buffer2.setUint8(i, 0);
      }
      buffer2.setUint32(BLOCK_SIZE - 8, bitsHashed >>> 0, true);
      buffer2.setUint32(BLOCK_SIZE - 4, Math.floor(bitsHashed / 4294967296), true);
      this.hashBuffer();
      this.finished = true;
    }
    var out = new DataView(new ArrayBuffer(DIGEST_LENGTH));
    for (var i = 0; i < 4; i++) {
      out.setUint32(i * 4, this.state[i], true);
    }
    var buff = new Buffer2(out.buffer, out.byteOffset, out.byteLength);
    return encoding ? buff.toString(encoding) : buff;
  };
  Md5.prototype.hashBuffer = function() {
    var _a2 = this, buffer2 = _a2.buffer, state = _a2.state;
    var a2 = state[0], b2 = state[1], c2 = state[2], d2 = state[3];
    a2 = ff(a2, b2, c2, d2, buffer2.getUint32(0, true), 7, 3614090360);
    d2 = ff(d2, a2, b2, c2, buffer2.getUint32(4, true), 12, 3905402710);
    c2 = ff(c2, d2, a2, b2, buffer2.getUint32(8, true), 17, 606105819);
    b2 = ff(b2, c2, d2, a2, buffer2.getUint32(12, true), 22, 3250441966);
    a2 = ff(a2, b2, c2, d2, buffer2.getUint32(16, true), 7, 4118548399);
    d2 = ff(d2, a2, b2, c2, buffer2.getUint32(20, true), 12, 1200080426);
    c2 = ff(c2, d2, a2, b2, buffer2.getUint32(24, true), 17, 2821735955);
    b2 = ff(b2, c2, d2, a2, buffer2.getUint32(28, true), 22, 4249261313);
    a2 = ff(a2, b2, c2, d2, buffer2.getUint32(32, true), 7, 1770035416);
    d2 = ff(d2, a2, b2, c2, buffer2.getUint32(36, true), 12, 2336552879);
    c2 = ff(c2, d2, a2, b2, buffer2.getUint32(40, true), 17, 4294925233);
    b2 = ff(b2, c2, d2, a2, buffer2.getUint32(44, true), 22, 2304563134);
    a2 = ff(a2, b2, c2, d2, buffer2.getUint32(48, true), 7, 1804603682);
    d2 = ff(d2, a2, b2, c2, buffer2.getUint32(52, true), 12, 4254626195);
    c2 = ff(c2, d2, a2, b2, buffer2.getUint32(56, true), 17, 2792965006);
    b2 = ff(b2, c2, d2, a2, buffer2.getUint32(60, true), 22, 1236535329);
    a2 = gg(a2, b2, c2, d2, buffer2.getUint32(4, true), 5, 4129170786);
    d2 = gg(d2, a2, b2, c2, buffer2.getUint32(24, true), 9, 3225465664);
    c2 = gg(c2, d2, a2, b2, buffer2.getUint32(44, true), 14, 643717713);
    b2 = gg(b2, c2, d2, a2, buffer2.getUint32(0, true), 20, 3921069994);
    a2 = gg(a2, b2, c2, d2, buffer2.getUint32(20, true), 5, 3593408605);
    d2 = gg(d2, a2, b2, c2, buffer2.getUint32(40, true), 9, 38016083);
    c2 = gg(c2, d2, a2, b2, buffer2.getUint32(60, true), 14, 3634488961);
    b2 = gg(b2, c2, d2, a2, buffer2.getUint32(16, true), 20, 3889429448);
    a2 = gg(a2, b2, c2, d2, buffer2.getUint32(36, true), 5, 568446438);
    d2 = gg(d2, a2, b2, c2, buffer2.getUint32(56, true), 9, 3275163606);
    c2 = gg(c2, d2, a2, b2, buffer2.getUint32(12, true), 14, 4107603335);
    b2 = gg(b2, c2, d2, a2, buffer2.getUint32(32, true), 20, 1163531501);
    a2 = gg(a2, b2, c2, d2, buffer2.getUint32(52, true), 5, 2850285829);
    d2 = gg(d2, a2, b2, c2, buffer2.getUint32(8, true), 9, 4243563512);
    c2 = gg(c2, d2, a2, b2, buffer2.getUint32(28, true), 14, 1735328473);
    b2 = gg(b2, c2, d2, a2, buffer2.getUint32(48, true), 20, 2368359562);
    a2 = hh(a2, b2, c2, d2, buffer2.getUint32(20, true), 4, 4294588738);
    d2 = hh(d2, a2, b2, c2, buffer2.getUint32(32, true), 11, 2272392833);
    c2 = hh(c2, d2, a2, b2, buffer2.getUint32(44, true), 16, 1839030562);
    b2 = hh(b2, c2, d2, a2, buffer2.getUint32(56, true), 23, 4259657740);
    a2 = hh(a2, b2, c2, d2, buffer2.getUint32(4, true), 4, 2763975236);
    d2 = hh(d2, a2, b2, c2, buffer2.getUint32(16, true), 11, 1272893353);
    c2 = hh(c2, d2, a2, b2, buffer2.getUint32(28, true), 16, 4139469664);
    b2 = hh(b2, c2, d2, a2, buffer2.getUint32(40, true), 23, 3200236656);
    a2 = hh(a2, b2, c2, d2, buffer2.getUint32(52, true), 4, 681279174);
    d2 = hh(d2, a2, b2, c2, buffer2.getUint32(0, true), 11, 3936430074);
    c2 = hh(c2, d2, a2, b2, buffer2.getUint32(12, true), 16, 3572445317);
    b2 = hh(b2, c2, d2, a2, buffer2.getUint32(24, true), 23, 76029189);
    a2 = hh(a2, b2, c2, d2, buffer2.getUint32(36, true), 4, 3654602809);
    d2 = hh(d2, a2, b2, c2, buffer2.getUint32(48, true), 11, 3873151461);
    c2 = hh(c2, d2, a2, b2, buffer2.getUint32(60, true), 16, 530742520);
    b2 = hh(b2, c2, d2, a2, buffer2.getUint32(8, true), 23, 3299628645);
    a2 = ii2(a2, b2, c2, d2, buffer2.getUint32(0, true), 6, 4096336452);
    d2 = ii2(d2, a2, b2, c2, buffer2.getUint32(28, true), 10, 1126891415);
    c2 = ii2(c2, d2, a2, b2, buffer2.getUint32(56, true), 15, 2878612391);
    b2 = ii2(b2, c2, d2, a2, buffer2.getUint32(20, true), 21, 4237533241);
    a2 = ii2(a2, b2, c2, d2, buffer2.getUint32(48, true), 6, 1700485571);
    d2 = ii2(d2, a2, b2, c2, buffer2.getUint32(12, true), 10, 2399980690);
    c2 = ii2(c2, d2, a2, b2, buffer2.getUint32(40, true), 15, 4293915773);
    b2 = ii2(b2, c2, d2, a2, buffer2.getUint32(4, true), 21, 2240044497);
    a2 = ii2(a2, b2, c2, d2, buffer2.getUint32(32, true), 6, 1873313359);
    d2 = ii2(d2, a2, b2, c2, buffer2.getUint32(60, true), 10, 4264355552);
    c2 = ii2(c2, d2, a2, b2, buffer2.getUint32(24, true), 15, 2734768916);
    b2 = ii2(b2, c2, d2, a2, buffer2.getUint32(52, true), 21, 1309151649);
    a2 = ii2(a2, b2, c2, d2, buffer2.getUint32(16, true), 6, 4149444226);
    d2 = ii2(d2, a2, b2, c2, buffer2.getUint32(44, true), 10, 3174756917);
    c2 = ii2(c2, d2, a2, b2, buffer2.getUint32(8, true), 15, 718787259);
    b2 = ii2(b2, c2, d2, a2, buffer2.getUint32(36, true), 21, 3951481745);
    state[0] = a2 + state[0] & 4294967295;
    state[1] = b2 + state[1] & 4294967295;
    state[2] = c2 + state[2] & 4294967295;
    state[3] = d2 + state[3] & 4294967295;
  };
  function cmn(q2, a2, b2, x2, s2, t2) {
    a2 = (a2 + q2 & 4294967295) + (x2 + t2 & 4294967295) & 4294967295;
    return (a2 << s2 | a2 >>> 32 - s2) + b2 & 4294967295;
  }
  function ff(a2, b2, c2, d2, x2, s2, t2) {
    return cmn(b2 & c2 | ~b2 & d2, a2, b2, x2, s2, t2);
  }
  function gg(a2, b2, c2, d2, x2, s2, t2) {
    return cmn(b2 & d2 | c2 & ~d2, a2, b2, x2, s2, t2);
  }
  function hh(a2, b2, c2, d2, x2, s2, t2) {
    return cmn(b2 ^ c2 ^ d2, a2, b2, x2, s2, t2);
  }
  function ii2(a2, b2, c2, d2, x2, s2, t2) {
    return cmn(c2 ^ (b2 | ~d2), a2, b2, x2, s2, t2);
  }
})(browserMd5);
var browserSha1 = { exports: {} };
(function(module, exports) {
  var Buffer2 = buffer.Buffer;
  var hashUtils = browserHashUtils.exports;
  var BLOCK_SIZE = 64;
  var DIGEST_LENGTH = 20;
  function Sha1() {
    this.h0 = 1732584193;
    this.h1 = 4023233417;
    this.h2 = 2562383102;
    this.h3 = 271733878;
    this.h4 = 3285377520;
    this.block = new Uint32Array(80);
    this.offset = 0;
    this.shift = 24;
    this.totalLength = 0;
  }
  module.exports = Sha1;
  Sha1.BLOCK_SIZE = BLOCK_SIZE;
  Sha1.prototype.update = function(data) {
    if (this.finished) {
      throw new Error("Attempted to update an already finished hash.");
    }
    if (hashUtils.isEmptyData(data)) {
      return this;
    }
    data = hashUtils.convertToBuffer(data);
    var length = data.length;
    this.totalLength += length * 8;
    for (var i = 0; i < length; i++) {
      this.write(data[i]);
    }
    return this;
  };
  Sha1.prototype.write = function write(byte) {
    this.block[this.offset] |= (byte & 255) << this.shift;
    if (this.shift) {
      this.shift -= 8;
    } else {
      this.offset++;
      this.shift = 24;
    }
    if (this.offset === 16)
      this.processBlock();
  };
  Sha1.prototype.digest = function(encoding) {
    this.write(128);
    if (this.offset > 14 || this.offset === 14 && this.shift < 24) {
      this.processBlock();
    }
    this.offset = 14;
    this.shift = 24;
    this.write(0);
    this.write(0);
    this.write(this.totalLength > 1099511627775 ? this.totalLength / 1099511627776 : 0);
    this.write(this.totalLength > 4294967295 ? this.totalLength / 4294967296 : 0);
    for (var s2 = 24; s2 >= 0; s2 -= 8) {
      this.write(this.totalLength >> s2);
    }
    var out = new Buffer2(DIGEST_LENGTH);
    var outView = new DataView(out.buffer);
    outView.setUint32(0, this.h0, false);
    outView.setUint32(4, this.h1, false);
    outView.setUint32(8, this.h2, false);
    outView.setUint32(12, this.h3, false);
    outView.setUint32(16, this.h4, false);
    return encoding ? out.toString(encoding) : out;
  };
  Sha1.prototype.processBlock = function processBlock() {
    for (var i = 16; i < 80; i++) {
      var w2 = this.block[i - 3] ^ this.block[i - 8] ^ this.block[i - 14] ^ this.block[i - 16];
      this.block[i] = w2 << 1 | w2 >>> 31;
    }
    var a2 = this.h0;
    var b2 = this.h1;
    var c2 = this.h2;
    var d2 = this.h3;
    var e2 = this.h4;
    var f2, k2;
    for (i = 0; i < 80; i++) {
      if (i < 20) {
        f2 = d2 ^ b2 & (c2 ^ d2);
        k2 = 1518500249;
      } else if (i < 40) {
        f2 = b2 ^ c2 ^ d2;
        k2 = 1859775393;
      } else if (i < 60) {
        f2 = b2 & c2 | d2 & (b2 | c2);
        k2 = 2400959708;
      } else {
        f2 = b2 ^ c2 ^ d2;
        k2 = 3395469782;
      }
      var temp = (a2 << 5 | a2 >>> 27) + f2 + e2 + k2 + (this.block[i] | 0);
      e2 = d2;
      d2 = c2;
      c2 = b2 << 30 | b2 >>> 2;
      b2 = a2;
      a2 = temp;
    }
    this.h0 = this.h0 + a2 | 0;
    this.h1 = this.h1 + b2 | 0;
    this.h2 = this.h2 + c2 | 0;
    this.h3 = this.h3 + d2 | 0;
    this.h4 = this.h4 + e2 | 0;
    this.offset = 0;
    for (i = 0; i < 16; i++) {
      this.block[i] = 0;
    }
  };
})(browserSha1);
var browserSha256 = { exports: {} };
(function(module, exports) {
  var Buffer2 = buffer.Buffer;
  var hashUtils = browserHashUtils.exports;
  var BLOCK_SIZE = 64;
  var DIGEST_LENGTH = 32;
  var KEY = new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  function Sha256() {
    this.state = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    this.temp = new Int32Array(64);
    this.buffer = new Uint8Array(64);
    this.bufferLength = 0;
    this.bytesHashed = 0;
    this.finished = false;
  }
  module.exports = Sha256;
  Sha256.BLOCK_SIZE = BLOCK_SIZE;
  Sha256.prototype.update = function(data) {
    if (this.finished) {
      throw new Error("Attempted to update an already finished hash.");
    }
    if (hashUtils.isEmptyData(data)) {
      return this;
    }
    data = hashUtils.convertToBuffer(data);
    var position = 0;
    var byteLength3 = data.byteLength;
    this.bytesHashed += byteLength3;
    if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {
      throw new Error("Cannot hash more than 2^53 - 1 bits");
    }
    while (byteLength3 > 0) {
      this.buffer[this.bufferLength++] = data[position++];
      byteLength3--;
      if (this.bufferLength === BLOCK_SIZE) {
        this.hashBuffer();
        this.bufferLength = 0;
      }
    }
    return this;
  };
  Sha256.prototype.digest = function(encoding) {
    if (!this.finished) {
      var bitsHashed = this.bytesHashed * 8;
      var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
      var undecoratedLength = this.bufferLength;
      bufferView.setUint8(this.bufferLength++, 128);
      if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
        for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
          bufferView.setUint8(i, 0);
        }
        this.hashBuffer();
        this.bufferLength = 0;
      }
      for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
        bufferView.setUint8(i, 0);
      }
      bufferView.setUint32(BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
      bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);
      this.hashBuffer();
      this.finished = true;
    }
    var out = new Buffer2(DIGEST_LENGTH);
    for (var i = 0; i < 8; i++) {
      out[i * 4] = this.state[i] >>> 24 & 255;
      out[i * 4 + 1] = this.state[i] >>> 16 & 255;
      out[i * 4 + 2] = this.state[i] >>> 8 & 255;
      out[i * 4 + 3] = this.state[i] >>> 0 & 255;
    }
    return encoding ? out.toString(encoding) : out;
  };
  Sha256.prototype.hashBuffer = function() {
    var _a2 = this, buffer2 = _a2.buffer, state = _a2.state;
    var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
    for (var i = 0; i < BLOCK_SIZE; i++) {
      if (i < 16) {
        this.temp[i] = (buffer2[i * 4] & 255) << 24 | (buffer2[i * 4 + 1] & 255) << 16 | (buffer2[i * 4 + 2] & 255) << 8 | buffer2[i * 4 + 3] & 255;
      } else {
        var u2 = this.temp[i - 2];
        var t1_1 = (u2 >>> 17 | u2 << 15) ^ (u2 >>> 19 | u2 << 13) ^ u2 >>> 10;
        u2 = this.temp[i - 15];
        var t2_1 = (u2 >>> 7 | u2 << 25) ^ (u2 >>> 18 | u2 << 14) ^ u2 >>> 3;
        this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
      }
      var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (KEY[i] + this.temp[i] | 0) | 0) | 0;
      var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
      state7 = state6;
      state6 = state5;
      state5 = state4;
      state4 = state3 + t1 | 0;
      state3 = state2;
      state2 = state1;
      state1 = state0;
      state0 = t1 + t2 | 0;
    }
    state[0] += state0;
    state[1] += state1;
    state[2] += state2;
    state[3] += state3;
    state[4] += state4;
    state[5] += state5;
    state[6] += state6;
    state[7] += state7;
  };
})(browserSha256);
(function(module, exports) {
  var Hmac = browserHmac.exports;
  var Md5 = browserMd5.exports;
  var Sha1 = browserSha1.exports;
  var Sha256 = browserSha256.exports;
  module.exports = {
    createHash: function createHash2(alg) {
      alg = alg.toLowerCase();
      if (alg === "md5") {
        return new Md5();
      } else if (alg === "sha256") {
        return new Sha256();
      } else if (alg === "sha1") {
        return new Sha1();
      }
      throw new Error("Hash algorithm " + alg + " is not supported in the browser SDK");
    },
    createHmac: function createHmac(alg, key) {
      alg = alg.toLowerCase();
      if (alg === "md5") {
        return new Hmac(Md5, key);
      } else if (alg === "sha256") {
        return new Hmac(Sha256, key);
      } else if (alg === "sha1") {
        return new Hmac(Sha1, key);
      }
      throw new Error("HMAC algorithm " + alg + " is not supported in the browser SDK");
    },
    createSign: function() {
      throw new Error("createSign is not implemented in the browser");
    }
  };
})(browserCryptoLib);
var url = {};
var punycode$1 = { exports: {} };
/*! https://mths.be/punycode v1.3.2 by @mathias */
(function(module, exports) {
  (function(root) {
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
      root = freeGlobal;
    }
    var punycode2, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
      "overflow": "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
    function error2(type) {
      throw RangeError(errors[type]);
    }
    function map(array, fn2) {
      var length = array.length;
      var result = [];
      while (length--) {
        result[length] = fn2(array[length]);
      }
      return result;
    }
    function mapDomain(string2, fn2) {
      var parts = string2.split("@");
      var result = "";
      if (parts.length > 1) {
        result = parts[0] + "@";
        string2 = parts[1];
      }
      string2 = string2.replace(regexSeparators, ".");
      var labels = string2.split(".");
      var encoded = map(labels, fn2).join(".");
      return result + encoded;
    }
    function ucs2decode(string2) {
      var output = [], counter = 0, length = string2.length, value, extra;
      while (counter < length) {
        value = string2.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
          extra = string2.charCodeAt(counter++);
          if ((extra & 64512) == 56320) {
            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }
    function ucs2encode(array) {
      return map(array, function(value) {
        var output = "";
        if (value > 65535) {
          value -= 65536;
          output += stringFromCharCode(value >>> 10 & 1023 | 55296);
          value = 56320 | value & 1023;
        }
        output += stringFromCharCode(value);
        return output;
      }).join("");
    }
    function basicToDigit(codePoint) {
      if (codePoint - 48 < 10) {
        return codePoint - 22;
      }
      if (codePoint - 65 < 26) {
        return codePoint - 65;
      }
      if (codePoint - 97 < 26) {
        return codePoint - 97;
      }
      return base;
    }
    function digitToBasic(digit, flag) {
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    function adapt(delta, numPoints, firstTime) {
      var k2 = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (; delta > baseMinusTMin * tMax >> 1; k2 += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k2 + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    function decode2(input) {
      var output = [], inputLength = input.length, out, i = 0, n2 = initialN, bias = initialBias, basic, j2, index, oldi, w2, k2, digit, t2, baseMinusT;
      basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }
      for (j2 = 0; j2 < basic; ++j2) {
        if (input.charCodeAt(j2) >= 128) {
          error2("not-basic");
        }
        output.push(input.charCodeAt(j2));
      }
      for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
        for (oldi = i, w2 = 1, k2 = base; ; k2 += base) {
          if (index >= inputLength) {
            error2("invalid-input");
          }
          digit = basicToDigit(input.charCodeAt(index++));
          if (digit >= base || digit > floor((maxInt - i) / w2)) {
            error2("overflow");
          }
          i += digit * w2;
          t2 = k2 <= bias ? tMin : k2 >= bias + tMax ? tMax : k2 - bias;
          if (digit < t2) {
            break;
          }
          baseMinusT = base - t2;
          if (w2 > floor(maxInt / baseMinusT)) {
            error2("overflow");
          }
          w2 *= baseMinusT;
        }
        out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);
        if (floor(i / out) > maxInt - n2) {
          error2("overflow");
        }
        n2 += floor(i / out);
        i %= out;
        output.splice(i++, 0, n2);
      }
      return ucs2encode(output);
    }
    function encode2(input) {
      var n2, delta, handledCPCount, basicLength, bias, j2, m2, q2, k2, t2, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
      input = ucs2decode(input);
      inputLength = input.length;
      n2 = initialN;
      delta = 0;
      bias = initialBias;
      for (j2 = 0; j2 < inputLength; ++j2) {
        currentValue = input[j2];
        if (currentValue < 128) {
          output.push(stringFromCharCode(currentValue));
        }
      }
      handledCPCount = basicLength = output.length;
      if (basicLength) {
        output.push(delimiter);
      }
      while (handledCPCount < inputLength) {
        for (m2 = maxInt, j2 = 0; j2 < inputLength; ++j2) {
          currentValue = input[j2];
          if (currentValue >= n2 && currentValue < m2) {
            m2 = currentValue;
          }
        }
        handledCPCountPlusOne = handledCPCount + 1;
        if (m2 - n2 > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error2("overflow");
        }
        delta += (m2 - n2) * handledCPCountPlusOne;
        n2 = m2;
        for (j2 = 0; j2 < inputLength; ++j2) {
          currentValue = input[j2];
          if (currentValue < n2 && ++delta > maxInt) {
            error2("overflow");
          }
          if (currentValue == n2) {
            for (q2 = delta, k2 = base; ; k2 += base) {
              t2 = k2 <= bias ? tMin : k2 >= bias + tMax ? tMax : k2 - bias;
              if (q2 < t2) {
                break;
              }
              qMinusT = q2 - t2;
              baseMinusT = base - t2;
              output.push(stringFromCharCode(digitToBasic(t2 + qMinusT % baseMinusT, 0)));
              q2 = floor(qMinusT / baseMinusT);
            }
            output.push(stringFromCharCode(digitToBasic(q2, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
        ++delta;
        ++n2;
      }
      return output.join("");
    }
    function toUnicode(input) {
      return mapDomain(input, function(string2) {
        return regexPunycode.test(string2) ? decode2(string2.slice(4).toLowerCase()) : string2;
      });
    }
    function toASCII(input) {
      return mapDomain(input, function(string2) {
        return regexNonASCII.test(string2) ? "xn--" + encode2(string2) : string2;
      });
    }
    punycode2 = {
      "version": "1.3.2",
      "ucs2": {
        "decode": ucs2decode,
        "encode": ucs2encode
      },
      "decode": decode2,
      "encode": encode2,
      "toASCII": toASCII,
      "toUnicode": toUnicode
    };
    if (freeExports && freeModule) {
      if (module.exports == freeExports) {
        freeModule.exports = punycode2;
      } else {
        for (key in punycode2) {
          punycode2.hasOwnProperty(key) && (freeExports[key] = punycode2[key]);
        }
      }
    } else {
      root.punycode = punycode2;
    }
  })(commonjsGlobal);
})(punycode$1, punycode$1.exports);
var querystring$1 = {};
function hasOwnProperty$1(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
var decode = function(qs, sep, eq, options) {
  sep = sep || "&";
  eq = eq || "=";
  var obj = {};
  if (typeof qs !== "string" || qs.length === 0) {
    return obj;
  }
  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1e3;
  if (options && typeof options.maxKeys === "number") {
    maxKeys = options.maxKeys;
  }
  var len = qs.length;
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }
  for (var i = 0; i < len; ++i) {
    var x2 = qs[i].replace(regexp, "%20"), idx = x2.indexOf(eq), kstr, vstr, k2, v2;
    if (idx >= 0) {
      kstr = x2.substr(0, idx);
      vstr = x2.substr(idx + 1);
    } else {
      kstr = x2;
      vstr = "";
    }
    k2 = decodeURIComponent(kstr);
    v2 = decodeURIComponent(vstr);
    if (!hasOwnProperty$1(obj, k2)) {
      obj[k2] = v2;
    } else if (Array.isArray(obj[k2])) {
      obj[k2].push(v2);
    } else {
      obj[k2] = [obj[k2], v2];
    }
  }
  return obj;
};
var stringifyPrimitive = function(v2) {
  switch (typeof v2) {
    case "string":
      return v2;
    case "boolean":
      return v2 ? "true" : "false";
    case "number":
      return isFinite(v2) ? v2 : "";
    default:
      return "";
  }
};
var encode = function(obj, sep, eq, name) {
  sep = sep || "&";
  eq = eq || "=";
  if (obj === null) {
    obj = void 0;
  }
  if (typeof obj === "object") {
    return Object.keys(obj).map(function(k2) {
      var ks = encodeURIComponent(stringifyPrimitive(k2)) + eq;
      if (Array.isArray(obj[k2])) {
        return obj[k2].map(function(v2) {
          return ks + encodeURIComponent(stringifyPrimitive(v2));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k2]));
      }
    }).join(sep);
  }
  if (!name)
    return "";
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};
querystring$1.decode = querystring$1.parse = decode;
querystring$1.encode = querystring$1.stringify = encode;
var punycode = punycode$1.exports;
url.parse = urlParse2;
url.resolve = urlResolve;
url.resolveObject = urlResolveObject;
url.format = urlFormat2;
url.Url = Url;
function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}
var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"], unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims), autoEscape = ["'"].concat(unwise), nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape), hostEndingChars = ["/", "?", "#"], hostnameMaxLen = 255, hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/, unsafeProtocol = {
  "javascript": true,
  "javascript:": true
}, hostlessProtocol = {
  "javascript": true,
  "javascript:": true
}, slashedProtocol = {
  "http": true,
  "https": true,
  "ftp": true,
  "gopher": true,
  "file": true,
  "http:": true,
  "https:": true,
  "ftp:": true,
  "gopher:": true,
  "file:": true
}, querystring = querystring$1;
function urlParse2(url2, parseQueryString, slashesDenoteHost) {
  if (url2 && isObject$1(url2) && url2 instanceof Url)
    return url2;
  var u2 = new Url();
  u2.parse(url2, parseQueryString, slashesDenoteHost);
  return u2;
}
Url.prototype.parse = function(url2, parseQueryString, slashesDenoteHost) {
  if (!isString(url2)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url2);
  }
  var rest2 = url2;
  rest2 = rest2.trim();
  var proto = protocolPattern.exec(rest2);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest2 = rest2.substr(proto.length);
  }
  if (slashesDenoteHost || proto || rest2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest2.substr(0, 2) === "//";
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest2 = rest2.substr(2);
      this.slashes = true;
    }
  }
  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest2.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    var auth, atSign;
    if (hostEnd === -1) {
      atSign = rest2.lastIndexOf("@");
    } else {
      atSign = rest2.lastIndexOf("@", hostEnd);
    }
    if (atSign !== -1) {
      auth = rest2.slice(0, atSign);
      rest2 = rest2.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest2.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    if (hostEnd === -1)
      hostEnd = rest2.length;
    this.host = rest2.slice(0, hostEnd);
    rest2 = rest2.slice(hostEnd);
    this.parseHost();
    this.hostname = this.hostname || "";
    var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l2 = hostparts.length; i < l2; i++) {
        var part = hostparts[i];
        if (!part)
          continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = "";
          for (var j2 = 0, k2 = part.length; j2 < k2; j2++) {
            if (part.charCodeAt(j2) > 127) {
              newpart += "x";
            } else {
              newpart += part[j2];
            }
          }
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest2 = "/" + notHost.join(".") + rest2;
            }
            this.hostname = validParts.join(".");
            break;
          }
        }
      }
    }
    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = "";
    } else {
      this.hostname = this.hostname.toLowerCase();
    }
    if (!ipv6Hostname) {
      var domainArray = this.hostname.split(".");
      var newOut = [];
      for (var i = 0; i < domainArray.length; ++i) {
        var s2 = domainArray[i];
        newOut.push(s2.match(/[^A-Za-z0-9_-]/) ? "xn--" + punycode.encode(s2) : s2);
      }
      this.hostname = newOut.join(".");
    }
    var p2 = this.port ? ":" + this.port : "";
    var h2 = this.hostname || "";
    this.host = h2 + p2;
    this.href += this.host;
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest2[0] !== "/") {
        rest2 = "/" + rest2;
      }
    }
  }
  if (!unsafeProtocol[lowerProto]) {
    for (var i = 0, l2 = autoEscape.length; i < l2; i++) {
      var ae2 = autoEscape[i];
      var esc = encodeURIComponent(ae2);
      if (esc === ae2) {
        esc = escape(ae2);
      }
      rest2 = rest2.split(ae2).join(esc);
    }
  }
  var hash2 = rest2.indexOf("#");
  if (hash2 !== -1) {
    this.hash = rest2.substr(hash2);
    rest2 = rest2.slice(0, hash2);
  }
  var qm = rest2.indexOf("?");
  if (qm !== -1) {
    this.search = rest2.substr(qm);
    this.query = rest2.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest2 = rest2.slice(0, qm);
  } else if (parseQueryString) {
    this.search = "";
    this.query = {};
  }
  if (rest2)
    this.pathname = rest2;
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = "/";
  }
  if (this.pathname || this.search) {
    var p2 = this.pathname || "";
    var s2 = this.search || "";
    this.path = p2 + s2;
  }
  this.href = this.format();
  return this;
};
function urlFormat2(obj) {
  if (isString(obj))
    obj = urlParse2(obj);
  if (!(obj instanceof Url))
    return Url.prototype.format.call(obj);
  return obj.format();
}
Url.prototype.format = function() {
  var auth = this.auth || "";
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ":");
    auth += "@";
  }
  var protocol = this.protocol || "", pathname2 = this.pathname || "", hash2 = this.hash || "", host = false, query2 = "";
  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
    if (this.port) {
      host += ":" + this.port;
    }
  }
  if (this.query && isObject$1(this.query) && Object.keys(this.query).length) {
    query2 = querystring.stringify(this.query);
  }
  var search2 = this.search || query2 && "?" + query2 || "";
  if (protocol && protocol.substr(-1) !== ":")
    protocol += ":";
  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = "//" + (host || "");
    if (pathname2 && pathname2.charAt(0) !== "/")
      pathname2 = "/" + pathname2;
  } else if (!host) {
    host = "";
  }
  if (hash2 && hash2.charAt(0) !== "#")
    hash2 = "#" + hash2;
  if (search2 && search2.charAt(0) !== "?")
    search2 = "?" + search2;
  pathname2 = pathname2.replace(/[?#]/g, function(match2) {
    return encodeURIComponent(match2);
  });
  search2 = search2.replace("#", "%23");
  return protocol + host + pathname2 + search2 + hash2;
};
function urlResolve(source, relative) {
  return urlParse2(source, false, true).resolve(relative);
}
Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse2(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
  if (!source)
    return relative;
  return urlParse2(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function(relative) {
  if (isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }
  var result = new Url();
  Object.keys(this).forEach(function(k2) {
    result[k2] = this[k2];
  }, this);
  result.hash = relative.hash;
  if (relative.href === "") {
    result.href = result.format();
    return result;
  }
  if (relative.slashes && !relative.protocol) {
    Object.keys(relative).forEach(function(k2) {
      if (k2 !== "protocol")
        result[k2] = relative[k2];
    });
    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = "/";
    }
    result.href = result.format();
    return result;
  }
  if (relative.protocol && relative.protocol !== result.protocol) {
    if (!slashedProtocol[relative.protocol]) {
      Object.keys(relative).forEach(function(k2) {
        result[k2] = relative[k2];
      });
      result.href = result.format();
      return result;
    }
    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || "").split("/");
      while (relPath.length && !(relative.host = relPath.shift()))
        ;
      if (!relative.host)
        relative.host = "";
      if (!relative.hostname)
        relative.hostname = "";
      if (relPath[0] !== "")
        relPath.unshift("");
      if (relPath.length < 2)
        relPath.unshift("");
      result.pathname = relPath.join("/");
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || "";
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    if (result.pathname || result.search) {
      var p2 = result.pathname || "";
      var s2 = result.search || "";
      result.path = p2 + s2;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }
  var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
  if (psychotic) {
    result.hostname = "";
    result.port = null;
    if (result.host) {
      if (srcPath[0] === "")
        srcPath[0] = result.host;
      else
        srcPath.unshift(result.host);
    }
    result.host = "";
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === "")
          relPath[0] = relative.host;
        else
          relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
  }
  if (isRelAbs) {
    result.host = relative.host || relative.host === "" ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
  } else if (relPath.length) {
    if (!srcPath)
      srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!isNullOrUndefined(relative.search)) {
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
    }
    result.href = result.format();
    return result;
  }
  if (!srcPath.length) {
    result.pathname = null;
    if (result.search) {
      result.path = "/" + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host) && (last === "." || last === "..") || last === "";
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == ".") {
      srcPath.splice(i, 1);
    } else if (last === "..") {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift("..");
    }
  }
  if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
    srcPath.unshift("");
  }
  if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
    srcPath.push("");
  }
  var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
    var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }
  mustEndAbs = mustEndAbs || result.host && srcPath.length;
  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift("");
  }
  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join("/");
  }
  if (!isNull(result.pathname) || !isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};
Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ":") {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host)
    this.hostname = host;
};
function isString(arg) {
  return typeof arg === "string";
}
function isObject$1(arg) {
  return typeof arg === "object" && arg !== null;
}
function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return arg == null;
}
var browserClock = {
  now: function now2() {
    if (typeof performance !== "undefined" && typeof performance.now === "function") {
      return performance.now();
    }
    return Date.now();
  }
};
function eventMessageChunker$1(buffer2) {
  var messages = [];
  var offset2 = 0;
  while (offset2 < buffer2.length) {
    var totalLength = buffer2.readInt32BE(offset2);
    var message = buffer2.slice(offset2, totalLength + offset2);
    offset2 += totalLength;
    messages.push(message);
  }
  return messages;
}
var eventMessageChunker_1 = {
  eventMessageChunker: eventMessageChunker$1
};
var util$3 = core.util;
var toBuffer$1 = util$3.buffer.toBuffer;
function Int64$1(bytes) {
  if (bytes.length !== 8) {
    throw new Error("Int64 buffers must be exactly 8 bytes");
  }
  if (!util$3.Buffer.isBuffer(bytes))
    bytes = toBuffer$1(bytes);
  this.bytes = bytes;
}
Int64$1.fromNumber = function(number) {
  if (number > 9223372036854776e3 || number < -9223372036854776e3) {
    throw new Error(number + " is too large (or, if negative, too small) to represent as an Int64");
  }
  var bytes = new Uint8Array(8);
  for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
    bytes[i] = remaining;
  }
  if (number < 0) {
    negate(bytes);
  }
  return new Int64$1(bytes);
};
Int64$1.prototype.valueOf = function() {
  var bytes = this.bytes.slice(0);
  var negative = bytes[0] & 128;
  if (negative) {
    negate(bytes);
  }
  return parseInt(bytes.toString("hex"), 16) * (negative ? -1 : 1);
};
Int64$1.prototype.toString = function() {
  return String(this.valueOf());
};
function negate(bytes) {
  for (var i = 0; i < 8; i++) {
    bytes[i] ^= 255;
  }
  for (var i = 7; i > -1; i--) {
    bytes[i]++;
    if (bytes[i] !== 0) {
      break;
    }
  }
}
var int64 = {
  Int64: Int64$1
};
var util$2 = core.util;
var toBuffer = util$2.buffer.toBuffer;
var PRELUDE_MEMBER_LENGTH = 4;
var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
var CHECKSUM_LENGTH = 4;
var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
function splitMessage$1(message) {
  if (!util$2.Buffer.isBuffer(message))
    message = toBuffer(message);
  if (message.length < MINIMUM_MESSAGE_LENGTH) {
    throw new Error("Provided message too short to accommodate event stream message overhead");
  }
  if (message.length !== message.readUInt32BE(0)) {
    throw new Error("Reported message length does not match received message length");
  }
  var expectedPreludeChecksum = message.readUInt32BE(PRELUDE_LENGTH);
  if (expectedPreludeChecksum !== util$2.crypto.crc32(message.slice(0, PRELUDE_LENGTH))) {
    throw new Error("The prelude checksum specified in the message (" + expectedPreludeChecksum + ") does not match the calculated CRC32 checksum.");
  }
  var expectedMessageChecksum = message.readUInt32BE(message.length - CHECKSUM_LENGTH);
  if (expectedMessageChecksum !== util$2.crypto.crc32(message.slice(0, message.length - CHECKSUM_LENGTH))) {
    throw new Error("The message checksum did not match the expected value of " + expectedMessageChecksum);
  }
  var headersStart = PRELUDE_LENGTH + CHECKSUM_LENGTH;
  var headersEnd = headersStart + message.readUInt32BE(PRELUDE_MEMBER_LENGTH);
  return {
    headers: message.slice(headersStart, headersEnd),
    body: message.slice(headersEnd, message.length - CHECKSUM_LENGTH)
  };
}
var splitMessage_1 = {
  splitMessage: splitMessage$1
};
var Int64 = int64.Int64;
var splitMessage = splitMessage_1.splitMessage;
var BOOLEAN_TAG = "boolean";
var BYTE_TAG = "byte";
var SHORT_TAG = "short";
var INT_TAG = "integer";
var LONG_TAG = "long";
var BINARY_TAG = "binary";
var STRING_TAG = "string";
var TIMESTAMP_TAG = "timestamp";
var UUID_TAG = "uuid";
function parseHeaders(headers) {
  var out = {};
  var position = 0;
  while (position < headers.length) {
    var nameLength = headers.readUInt8(position++);
    var name = headers.slice(position, position + nameLength).toString();
    position += nameLength;
    switch (headers.readUInt8(position++)) {
      case 0:
        out[name] = {
          type: BOOLEAN_TAG,
          value: true
        };
        break;
      case 1:
        out[name] = {
          type: BOOLEAN_TAG,
          value: false
        };
        break;
      case 2:
        out[name] = {
          type: BYTE_TAG,
          value: headers.readInt8(position++)
        };
        break;
      case 3:
        out[name] = {
          type: SHORT_TAG,
          value: headers.readInt16BE(position)
        };
        position += 2;
        break;
      case 4:
        out[name] = {
          type: INT_TAG,
          value: headers.readInt32BE(position)
        };
        position += 4;
        break;
      case 5:
        out[name] = {
          type: LONG_TAG,
          value: new Int64(headers.slice(position, position + 8))
        };
        position += 8;
        break;
      case 6:
        var binaryLength = headers.readUInt16BE(position);
        position += 2;
        out[name] = {
          type: BINARY_TAG,
          value: headers.slice(position, position + binaryLength)
        };
        position += binaryLength;
        break;
      case 7:
        var stringLength = headers.readUInt16BE(position);
        position += 2;
        out[name] = {
          type: STRING_TAG,
          value: headers.slice(position, position + stringLength).toString()
        };
        position += stringLength;
        break;
      case 8:
        out[name] = {
          type: TIMESTAMP_TAG,
          value: new Date(new Int64(headers.slice(position, position + 8)).valueOf())
        };
        position += 8;
        break;
      case 9:
        var uuidChars = headers.slice(position, position + 16).toString("hex");
        position += 16;
        out[name] = {
          type: UUID_TAG,
          value: uuidChars.substr(0, 8) + "-" + uuidChars.substr(8, 4) + "-" + uuidChars.substr(12, 4) + "-" + uuidChars.substr(16, 4) + "-" + uuidChars.substr(20)
        };
        break;
      default:
        throw new Error("Unrecognized header type tag");
    }
  }
  return out;
}
function parseMessage$1(message) {
  var parsed = splitMessage(message);
  return { headers: parseHeaders(parsed.headers), body: parsed.body };
}
var parseMessage_1 = {
  parseMessage: parseMessage$1
};
var parseMessage = parseMessage_1.parseMessage;
function parseEvent$1(parser2, message, shape2) {
  var parsedMessage = parseMessage(message);
  var messageType = parsedMessage.headers[":message-type"];
  if (messageType) {
    if (messageType.value === "error") {
      throw parseError(parsedMessage);
    } else if (messageType.value !== "event") {
      return;
    }
  }
  var eventType = parsedMessage.headers[":event-type"];
  var eventModel = shape2.members[eventType.value];
  if (!eventModel) {
    return;
  }
  var result = {};
  var eventPayloadMemberName = eventModel.eventPayloadMemberName;
  if (eventPayloadMemberName) {
    var payloadShape = eventModel.members[eventPayloadMemberName];
    if (payloadShape.type === "binary") {
      result[eventPayloadMemberName] = parsedMessage.body;
    } else {
      result[eventPayloadMemberName] = parser2.parse(parsedMessage.body.toString(), payloadShape);
    }
  }
  var eventHeaderNames = eventModel.eventHeaderMemberNames;
  for (var i = 0; i < eventHeaderNames.length; i++) {
    var name = eventHeaderNames[i];
    if (parsedMessage.headers[name]) {
      result[name] = eventModel.members[name].toType(parsedMessage.headers[name].value);
    }
  }
  var output = {};
  output[eventType.value] = result;
  return output;
}
function parseError(message) {
  var errorCode = message.headers[":error-code"];
  var errorMessage = message.headers[":error-message"];
  var error2 = new Error(errorMessage.value || errorMessage);
  error2.code = error2.name = errorCode.value || errorCode;
  return error2;
}
var parseEvent_1 = {
  parseEvent: parseEvent$1
};
var eventMessageChunker = eventMessageChunker_1.eventMessageChunker;
var parseEvent = parseEvent_1.parseEvent;
function createEventStream(body, parser2, model) {
  var eventMessages = eventMessageChunker(body);
  var events2 = [];
  for (var i = 0; i < eventMessages.length; i++) {
    events2.push(parseEvent(parser2, eventMessages[i], model));
  }
  return events2;
}
var bufferedCreateEventStream = {
  createEventStream
};
var AWS$b = core;
function validateRegionalEndpointsFlagValue(configValue, errorOptions) {
  if (typeof configValue !== "string")
    return void 0;
  else if (["legacy", "regional"].indexOf(configValue.toLowerCase()) >= 0) {
    return configValue.toLowerCase();
  } else {
    throw AWS$b.util.error(new Error(), errorOptions);
  }
}
function resolveRegionalEndpointsFlag$1(originalConfig, options) {
  originalConfig = originalConfig || {};
  var resolved;
  if (originalConfig[options.clientConfig]) {
    resolved = validateRegionalEndpointsFlagValue(originalConfig[options.clientConfig], {
      code: "InvalidConfiguration",
      message: 'invalid "' + options.clientConfig + '" configuration. Expect "legacy"  or "regional". Got "' + originalConfig[options.clientConfig] + '".'
    });
    if (resolved)
      return resolved;
  }
  if (!AWS$b.util.isNode())
    return resolved;
  if (Object.prototype.hasOwnProperty.call(process.env, options.env)) {
    var envFlag = process.env[options.env];
    resolved = validateRegionalEndpointsFlagValue(envFlag, {
      code: "InvalidEnvironmentalVariable",
      message: "invalid " + options.env + ' environmental variable. Expect "legacy"  or "regional". Got "' + process.env[options.env] + '".'
    });
    if (resolved)
      return resolved;
  }
  var profile = {};
  try {
    var profiles = AWS$b.util.getProfilesFromSharedConfig(AWS$b.util.iniLoader);
    profile = profiles[{}.AWS_PROFILE || AWS$b.util.defaultProfile];
  } catch (e2) {
  }
  if (profile && Object.prototype.hasOwnProperty.call(profile, options.sharedConfig)) {
    var fileFlag = profile[options.sharedConfig];
    resolved = validateRegionalEndpointsFlagValue(fileFlag, {
      code: "InvalidConfiguration",
      message: "invalid " + options.sharedConfig + ' profile config. Expect "legacy"  or "regional". Got "' + profile[options.sharedConfig] + '".'
    });
    if (resolved)
      return resolved;
  }
  return resolved;
}
var config_regional_endpoint = resolveRegionalEndpointsFlag$1;
var AWS$a = core;
var resolveRegionalEndpointsFlag = config_regional_endpoint;
var ENV_REGIONAL_ENDPOINT_ENABLED = "AWS_STS_REGIONAL_ENDPOINTS";
var CONFIG_REGIONAL_ENDPOINT_ENABLED = "sts_regional_endpoints";
AWS$a.util.update(AWS$a.STS.prototype, {
  credentialsFrom: function credentialsFrom(data, credentials) {
    if (!data)
      return null;
    if (!credentials)
      credentials = new AWS$a.TemporaryCredentials();
    credentials.expired = false;
    credentials.accessKeyId = data.Credentials.AccessKeyId;
    credentials.secretAccessKey = data.Credentials.SecretAccessKey;
    credentials.sessionToken = data.Credentials.SessionToken;
    credentials.expireTime = data.Credentials.Expiration;
    return credentials;
  },
  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {
    return this.makeUnauthenticatedRequest("assumeRoleWithWebIdentity", params, callback);
  },
  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {
    return this.makeUnauthenticatedRequest("assumeRoleWithSAML", params, callback);
  },
  setupRequestListeners: function setupRequestListeners2(request) {
    request.addListener("validate", this.optInRegionalEndpoint, true);
  },
  optInRegionalEndpoint: function optInRegionalEndpoint(req) {
    var service = req.service;
    var config2 = service.config;
    config2.stsRegionalEndpoints = resolveRegionalEndpointsFlag(service._originalConfig, {
      env: ENV_REGIONAL_ENDPOINT_ENABLED,
      sharedConfig: CONFIG_REGIONAL_ENDPOINT_ENABLED,
      clientConfig: "stsRegionalEndpoints"
    });
    if (config2.stsRegionalEndpoints === "regional" && service.isGlobalEndpoint) {
      if (!config2.region) {
        throw AWS$a.util.error(new Error(), { code: "ConfigError", message: "Missing region in config" });
      }
      var insertPoint = config2.endpoint.indexOf(".amazonaws.com");
      var regionalEndpoint = config2.endpoint.substring(0, insertPoint) + "." + config2.region + config2.endpoint.substring(insertPoint);
      req.httpRequest.updateEndpoint(regionalEndpoint);
      req.httpRequest.region = config2.region;
    }
  }
});
const version$1 = "2.0";
const metadata$1 = {
  apiVersion: "2011-06-15",
  endpointPrefix: "sts",
  globalEndpoint: "sts.amazonaws.com",
  protocol: "query",
  serviceAbbreviation: "AWS STS",
  serviceFullName: "AWS Security Token Service",
  serviceId: "STS",
  signatureVersion: "v4",
  uid: "sts-2011-06-15",
  xmlNamespace: "https://sts.amazonaws.com/doc/2011-06-15/"
};
const operations$1 = {
  AssumeRole: {
    input: {
      type: "structure",
      required: [
        "RoleArn",
        "RoleSessionName"
      ],
      members: {
        RoleArn: {},
        RoleSessionName: {},
        PolicyArns: {
          shape: "S4"
        },
        Policy: {},
        DurationSeconds: {
          type: "integer"
        },
        Tags: {
          shape: "S8"
        },
        TransitiveTagKeys: {
          type: "list",
          member: {}
        },
        ExternalId: {},
        SerialNumber: {},
        TokenCode: {},
        SourceIdentity: {}
      }
    },
    output: {
      resultWrapper: "AssumeRoleResult",
      type: "structure",
      members: {
        Credentials: {
          shape: "Si"
        },
        AssumedRoleUser: {
          shape: "Sn"
        },
        PackedPolicySize: {
          type: "integer"
        },
        SourceIdentity: {}
      }
    }
  },
  AssumeRoleWithSAML: {
    input: {
      type: "structure",
      required: [
        "RoleArn",
        "PrincipalArn",
        "SAMLAssertion"
      ],
      members: {
        RoleArn: {},
        PrincipalArn: {},
        SAMLAssertion: {},
        PolicyArns: {
          shape: "S4"
        },
        Policy: {},
        DurationSeconds: {
          type: "integer"
        }
      }
    },
    output: {
      resultWrapper: "AssumeRoleWithSAMLResult",
      type: "structure",
      members: {
        Credentials: {
          shape: "Si"
        },
        AssumedRoleUser: {
          shape: "Sn"
        },
        PackedPolicySize: {
          type: "integer"
        },
        Subject: {},
        SubjectType: {},
        Issuer: {},
        Audience: {},
        NameQualifier: {},
        SourceIdentity: {}
      }
    }
  },
  AssumeRoleWithWebIdentity: {
    input: {
      type: "structure",
      required: [
        "RoleArn",
        "RoleSessionName",
        "WebIdentityToken"
      ],
      members: {
        RoleArn: {},
        RoleSessionName: {},
        WebIdentityToken: {},
        ProviderId: {},
        PolicyArns: {
          shape: "S4"
        },
        Policy: {},
        DurationSeconds: {
          type: "integer"
        }
      }
    },
    output: {
      resultWrapper: "AssumeRoleWithWebIdentityResult",
      type: "structure",
      members: {
        Credentials: {
          shape: "Si"
        },
        SubjectFromWebIdentityToken: {},
        AssumedRoleUser: {
          shape: "Sn"
        },
        PackedPolicySize: {
          type: "integer"
        },
        Provider: {},
        Audience: {},
        SourceIdentity: {}
      }
    }
  },
  DecodeAuthorizationMessage: {
    input: {
      type: "structure",
      required: [
        "EncodedMessage"
      ],
      members: {
        EncodedMessage: {}
      }
    },
    output: {
      resultWrapper: "DecodeAuthorizationMessageResult",
      type: "structure",
      members: {
        DecodedMessage: {}
      }
    }
  },
  GetAccessKeyInfo: {
    input: {
      type: "structure",
      required: [
        "AccessKeyId"
      ],
      members: {
        AccessKeyId: {}
      }
    },
    output: {
      resultWrapper: "GetAccessKeyInfoResult",
      type: "structure",
      members: {
        Account: {}
      }
    }
  },
  GetCallerIdentity: {
    input: {
      type: "structure",
      members: {}
    },
    output: {
      resultWrapper: "GetCallerIdentityResult",
      type: "structure",
      members: {
        UserId: {},
        Account: {},
        Arn: {}
      }
    }
  },
  GetFederationToken: {
    input: {
      type: "structure",
      required: [
        "Name"
      ],
      members: {
        Name: {},
        Policy: {},
        PolicyArns: {
          shape: "S4"
        },
        DurationSeconds: {
          type: "integer"
        },
        Tags: {
          shape: "S8"
        }
      }
    },
    output: {
      resultWrapper: "GetFederationTokenResult",
      type: "structure",
      members: {
        Credentials: {
          shape: "Si"
        },
        FederatedUser: {
          type: "structure",
          required: [
            "FederatedUserId",
            "Arn"
          ],
          members: {
            FederatedUserId: {},
            Arn: {}
          }
        },
        PackedPolicySize: {
          type: "integer"
        }
      }
    }
  },
  GetSessionToken: {
    input: {
      type: "structure",
      members: {
        DurationSeconds: {
          type: "integer"
        },
        SerialNumber: {},
        TokenCode: {}
      }
    },
    output: {
      resultWrapper: "GetSessionTokenResult",
      type: "structure",
      members: {
        Credentials: {
          shape: "Si"
        }
      }
    }
  }
};
const shapes$1 = {
  S4: {
    type: "list",
    member: {
      type: "structure",
      members: {
        arn: {}
      }
    }
  },
  S8: {
    type: "list",
    member: {
      type: "structure",
      required: [
        "Key",
        "Value"
      ],
      members: {
        Key: {},
        Value: {}
      }
    }
  },
  Si: {
    type: "structure",
    required: [
      "AccessKeyId",
      "SecretAccessKey",
      "SessionToken",
      "Expiration"
    ],
    members: {
      AccessKeyId: {},
      SecretAccessKey: {},
      SessionToken: {},
      Expiration: {
        type: "timestamp"
      }
    }
  },
  Sn: {
    type: "structure",
    required: [
      "AssumedRoleId",
      "Arn"
    ],
    members: {
      AssumedRoleId: {},
      Arn: {}
    }
  }
};
var require$$1$1 = {
  version: version$1,
  metadata: metadata$1,
  operations: operations$1,
  shapes: shapes$1
};
const pagination$1 = {};
var require$$2$1 = {
  pagination: pagination$1
};
var AWS$9 = core;
var Service$1 = AWS$9.Service;
var apiLoader$1 = AWS$9.apiLoader;
apiLoader$1.services["sts"] = {};
AWS$9.STS = Service$1.defineService("sts", ["2011-06-15"]);
Object.defineProperty(apiLoader$1.services["sts"], "2011-06-15", {
  get: function get3() {
    var model = require$$1$1;
    model.paginators = require$$2$1.pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});
var sts = AWS$9.STS;
var AWS$8 = core;
var STS$4 = sts;
AWS$8.TemporaryCredentials = AWS$8.util.inherit(AWS$8.Credentials, {
  constructor: function TemporaryCredentials(params, masterCredentials) {
    AWS$8.Credentials.call(this);
    this.loadMasterCredentials(masterCredentials);
    this.expired = true;
    this.params = params || {};
    if (this.params.RoleArn) {
      this.params.RoleSessionName = this.params.RoleSessionName || "temporary-credentials";
    }
  },
  refresh: function refresh2(callback) {
    this.coalesceRefresh(callback || AWS$8.util.fn.callback);
  },
  load: function load2(callback) {
    var self2 = this;
    self2.createClients();
    self2.masterCredentials.get(function() {
      self2.service.config.credentials = self2.masterCredentials;
      var operation2 = self2.params.RoleArn ? self2.service.assumeRole : self2.service.getSessionToken;
      operation2.call(self2.service, function(err, data) {
        if (!err) {
          self2.service.credentialsFrom(data, self2);
        }
        callback(err);
      });
    });
  },
  loadMasterCredentials: function loadMasterCredentials(masterCredentials) {
    this.masterCredentials = masterCredentials || AWS$8.config.credentials;
    while (this.masterCredentials.masterCredentials) {
      this.masterCredentials = this.masterCredentials.masterCredentials;
    }
    if (typeof this.masterCredentials.get !== "function") {
      this.masterCredentials = new AWS$8.Credentials(this.masterCredentials);
    }
  },
  createClients: function() {
    this.service = this.service || new STS$4({ params: this.params });
  }
});
var AWS$7 = core;
var STS$3 = sts;
AWS$7.ChainableTemporaryCredentials = AWS$7.util.inherit(AWS$7.Credentials, {
  constructor: function ChainableTemporaryCredentials(options) {
    AWS$7.Credentials.call(this);
    options = options || {};
    this.errorCode = "ChainableTemporaryCredentialsProviderFailure";
    this.expired = true;
    this.tokenCodeFn = null;
    var params = AWS$7.util.copy(options.params) || {};
    if (params.RoleArn) {
      params.RoleSessionName = params.RoleSessionName || "temporary-credentials";
    }
    if (params.SerialNumber) {
      if (!options.tokenCodeFn || typeof options.tokenCodeFn !== "function") {
        throw new AWS$7.util.error(new Error("tokenCodeFn must be a function when params.SerialNumber is given"), { code: this.errorCode });
      } else {
        this.tokenCodeFn = options.tokenCodeFn;
      }
    }
    var config2 = AWS$7.util.merge({
      params,
      credentials: options.masterCredentials || AWS$7.config.credentials
    }, options.stsConfig || {});
    this.service = new STS$3(config2);
  },
  refresh: function refresh3(callback) {
    this.coalesceRefresh(callback || AWS$7.util.fn.callback);
  },
  load: function load3(callback) {
    var self2 = this;
    var operation2 = self2.service.config.params.RoleArn ? "assumeRole" : "getSessionToken";
    this.getTokenCode(function(err, tokenCode) {
      var params = {};
      if (err) {
        callback(err);
        return;
      }
      if (tokenCode) {
        params.TokenCode = tokenCode;
      }
      self2.service[operation2](params, function(err2, data) {
        if (!err2) {
          self2.service.credentialsFrom(data, self2);
        }
        callback(err2);
      });
    });
  },
  getTokenCode: function getTokenCode(callback) {
    var self2 = this;
    if (this.tokenCodeFn) {
      this.tokenCodeFn(this.service.config.params.SerialNumber, function(err, token) {
        if (err) {
          var message = err;
          if (err instanceof Error) {
            message = err.message;
          }
          callback(AWS$7.util.error(new Error("Error fetching MFA token: " + message), { code: self2.errorCode }));
          return;
        }
        callback(null, token);
      });
    } else {
      callback(null);
    }
  }
});
var AWS$6 = core;
var STS$2 = sts;
AWS$6.WebIdentityCredentials = AWS$6.util.inherit(AWS$6.Credentials, {
  constructor: function WebIdentityCredentials(params, clientConfig) {
    AWS$6.Credentials.call(this);
    this.expired = true;
    this.params = params;
    this.params.RoleSessionName = this.params.RoleSessionName || "web-identity";
    this.data = null;
    this._clientConfig = AWS$6.util.copy(clientConfig || {});
  },
  refresh: function refresh4(callback) {
    this.coalesceRefresh(callback || AWS$6.util.fn.callback);
  },
  load: function load4(callback) {
    var self2 = this;
    self2.createClients();
    self2.service.assumeRoleWithWebIdentity(function(err, data) {
      self2.data = null;
      if (!err) {
        self2.data = data;
        self2.service.credentialsFrom(data, self2);
      }
      callback(err);
    });
  },
  createClients: function() {
    if (!this.service) {
      var stsConfig = AWS$6.util.merge({}, this._clientConfig);
      stsConfig.params = this.params;
      this.service = new STS$2(stsConfig);
    }
  }
});
const version = "2.0";
const metadata = {
  apiVersion: "2014-06-30",
  endpointPrefix: "cognito-identity",
  jsonVersion: "1.1",
  protocol: "json",
  serviceFullName: "Amazon Cognito Identity",
  serviceId: "Cognito Identity",
  signatureVersion: "v4",
  targetPrefix: "AWSCognitoIdentityService",
  uid: "cognito-identity-2014-06-30"
};
const operations = {
  CreateIdentityPool: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolName",
        "AllowUnauthenticatedIdentities"
      ],
      members: {
        IdentityPoolName: {},
        AllowUnauthenticatedIdentities: {
          type: "boolean"
        },
        AllowClassicFlow: {
          type: "boolean"
        },
        SupportedLoginProviders: {
          shape: "S5"
        },
        DeveloperProviderName: {},
        OpenIdConnectProviderARNs: {
          shape: "S9"
        },
        CognitoIdentityProviders: {
          shape: "Sb"
        },
        SamlProviderARNs: {
          shape: "Sg"
        },
        IdentityPoolTags: {
          shape: "Sh"
        }
      }
    },
    output: {
      shape: "Sk"
    }
  },
  DeleteIdentities: {
    input: {
      type: "structure",
      required: [
        "IdentityIdsToDelete"
      ],
      members: {
        IdentityIdsToDelete: {
          type: "list",
          member: {}
        }
      }
    },
    output: {
      type: "structure",
      members: {
        UnprocessedIdentityIds: {
          type: "list",
          member: {
            type: "structure",
            members: {
              IdentityId: {},
              ErrorCode: {}
            }
          }
        }
      }
    }
  },
  DeleteIdentityPool: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolId"
      ],
      members: {
        IdentityPoolId: {}
      }
    }
  },
  DescribeIdentity: {
    input: {
      type: "structure",
      required: [
        "IdentityId"
      ],
      members: {
        IdentityId: {}
      }
    },
    output: {
      shape: "Sv"
    }
  },
  DescribeIdentityPool: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolId"
      ],
      members: {
        IdentityPoolId: {}
      }
    },
    output: {
      shape: "Sk"
    }
  },
  GetCredentialsForIdentity: {
    input: {
      type: "structure",
      required: [
        "IdentityId"
      ],
      members: {
        IdentityId: {},
        Logins: {
          shape: "S10"
        },
        CustomRoleArn: {}
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityId: {},
        Credentials: {
          type: "structure",
          members: {
            AccessKeyId: {},
            SecretKey: {},
            SessionToken: {},
            Expiration: {
              type: "timestamp"
            }
          }
        }
      }
    },
    authtype: "none"
  },
  GetId: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolId"
      ],
      members: {
        AccountId: {},
        IdentityPoolId: {},
        Logins: {
          shape: "S10"
        }
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityId: {}
      }
    },
    authtype: "none"
  },
  GetIdentityPoolRoles: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolId"
      ],
      members: {
        IdentityPoolId: {}
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityPoolId: {},
        Roles: {
          shape: "S1c"
        },
        RoleMappings: {
          shape: "S1e"
        }
      }
    }
  },
  GetOpenIdToken: {
    input: {
      type: "structure",
      required: [
        "IdentityId"
      ],
      members: {
        IdentityId: {},
        Logins: {
          shape: "S10"
        }
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityId: {},
        Token: {}
      }
    },
    authtype: "none"
  },
  GetOpenIdTokenForDeveloperIdentity: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolId",
        "Logins"
      ],
      members: {
        IdentityPoolId: {},
        IdentityId: {},
        Logins: {
          shape: "S10"
        },
        PrincipalTags: {
          shape: "S1s"
        },
        TokenDuration: {
          type: "long"
        }
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityId: {},
        Token: {}
      }
    }
  },
  GetPrincipalTagAttributeMap: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolId",
        "IdentityProviderName"
      ],
      members: {
        IdentityPoolId: {},
        IdentityProviderName: {}
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityPoolId: {},
        IdentityProviderName: {},
        UseDefaults: {
          type: "boolean"
        },
        PrincipalTags: {
          shape: "S1s"
        }
      }
    }
  },
  ListIdentities: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolId",
        "MaxResults"
      ],
      members: {
        IdentityPoolId: {},
        MaxResults: {
          type: "integer"
        },
        NextToken: {},
        HideDisabled: {
          type: "boolean"
        }
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityPoolId: {},
        Identities: {
          type: "list",
          member: {
            shape: "Sv"
          }
        },
        NextToken: {}
      }
    }
  },
  ListIdentityPools: {
    input: {
      type: "structure",
      required: [
        "MaxResults"
      ],
      members: {
        MaxResults: {
          type: "integer"
        },
        NextToken: {}
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityPools: {
          type: "list",
          member: {
            type: "structure",
            members: {
              IdentityPoolId: {},
              IdentityPoolName: {}
            }
          }
        },
        NextToken: {}
      }
    }
  },
  ListTagsForResource: {
    input: {
      type: "structure",
      required: [
        "ResourceArn"
      ],
      members: {
        ResourceArn: {}
      }
    },
    output: {
      type: "structure",
      members: {
        Tags: {
          shape: "Sh"
        }
      }
    }
  },
  LookupDeveloperIdentity: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolId"
      ],
      members: {
        IdentityPoolId: {},
        IdentityId: {},
        DeveloperUserIdentifier: {},
        MaxResults: {
          type: "integer"
        },
        NextToken: {}
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityId: {},
        DeveloperUserIdentifierList: {
          type: "list",
          member: {}
        },
        NextToken: {}
      }
    }
  },
  MergeDeveloperIdentities: {
    input: {
      type: "structure",
      required: [
        "SourceUserIdentifier",
        "DestinationUserIdentifier",
        "DeveloperProviderName",
        "IdentityPoolId"
      ],
      members: {
        SourceUserIdentifier: {},
        DestinationUserIdentifier: {},
        DeveloperProviderName: {},
        IdentityPoolId: {}
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityId: {}
      }
    }
  },
  SetIdentityPoolRoles: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolId",
        "Roles"
      ],
      members: {
        IdentityPoolId: {},
        Roles: {
          shape: "S1c"
        },
        RoleMappings: {
          shape: "S1e"
        }
      }
    }
  },
  SetPrincipalTagAttributeMap: {
    input: {
      type: "structure",
      required: [
        "IdentityPoolId",
        "IdentityProviderName"
      ],
      members: {
        IdentityPoolId: {},
        IdentityProviderName: {},
        UseDefaults: {
          type: "boolean"
        },
        PrincipalTags: {
          shape: "S1s"
        }
      }
    },
    output: {
      type: "structure",
      members: {
        IdentityPoolId: {},
        IdentityProviderName: {},
        UseDefaults: {
          type: "boolean"
        },
        PrincipalTags: {
          shape: "S1s"
        }
      }
    }
  },
  TagResource: {
    input: {
      type: "structure",
      required: [
        "ResourceArn",
        "Tags"
      ],
      members: {
        ResourceArn: {},
        Tags: {
          shape: "Sh"
        }
      }
    },
    output: {
      type: "structure",
      members: {}
    }
  },
  UnlinkDeveloperIdentity: {
    input: {
      type: "structure",
      required: [
        "IdentityId",
        "IdentityPoolId",
        "DeveloperProviderName",
        "DeveloperUserIdentifier"
      ],
      members: {
        IdentityId: {},
        IdentityPoolId: {},
        DeveloperProviderName: {},
        DeveloperUserIdentifier: {}
      }
    }
  },
  UnlinkIdentity: {
    input: {
      type: "structure",
      required: [
        "IdentityId",
        "Logins",
        "LoginsToRemove"
      ],
      members: {
        IdentityId: {},
        Logins: {
          shape: "S10"
        },
        LoginsToRemove: {
          shape: "Sw"
        }
      }
    },
    authtype: "none"
  },
  UntagResource: {
    input: {
      type: "structure",
      required: [
        "ResourceArn",
        "TagKeys"
      ],
      members: {
        ResourceArn: {},
        TagKeys: {
          type: "list",
          member: {}
        }
      }
    },
    output: {
      type: "structure",
      members: {}
    }
  },
  UpdateIdentityPool: {
    input: {
      shape: "Sk"
    },
    output: {
      shape: "Sk"
    }
  }
};
const shapes = {
  S5: {
    type: "map",
    key: {},
    value: {}
  },
  S9: {
    type: "list",
    member: {}
  },
  Sb: {
    type: "list",
    member: {
      type: "structure",
      members: {
        ProviderName: {},
        ClientId: {},
        ServerSideTokenCheck: {
          type: "boolean"
        }
      }
    }
  },
  Sg: {
    type: "list",
    member: {}
  },
  Sh: {
    type: "map",
    key: {},
    value: {}
  },
  Sk: {
    type: "structure",
    required: [
      "IdentityPoolId",
      "IdentityPoolName",
      "AllowUnauthenticatedIdentities"
    ],
    members: {
      IdentityPoolId: {},
      IdentityPoolName: {},
      AllowUnauthenticatedIdentities: {
        type: "boolean"
      },
      AllowClassicFlow: {
        type: "boolean"
      },
      SupportedLoginProviders: {
        shape: "S5"
      },
      DeveloperProviderName: {},
      OpenIdConnectProviderARNs: {
        shape: "S9"
      },
      CognitoIdentityProviders: {
        shape: "Sb"
      },
      SamlProviderARNs: {
        shape: "Sg"
      },
      IdentityPoolTags: {
        shape: "Sh"
      }
    }
  },
  Sv: {
    type: "structure",
    members: {
      IdentityId: {},
      Logins: {
        shape: "Sw"
      },
      CreationDate: {
        type: "timestamp"
      },
      LastModifiedDate: {
        type: "timestamp"
      }
    }
  },
  Sw: {
    type: "list",
    member: {}
  },
  S10: {
    type: "map",
    key: {},
    value: {}
  },
  S1c: {
    type: "map",
    key: {},
    value: {}
  },
  S1e: {
    type: "map",
    key: {},
    value: {
      type: "structure",
      required: [
        "Type"
      ],
      members: {
        Type: {},
        AmbiguousRoleResolution: {},
        RulesConfiguration: {
          type: "structure",
          required: [
            "Rules"
          ],
          members: {
            Rules: {
              type: "list",
              member: {
                type: "structure",
                required: [
                  "Claim",
                  "MatchType",
                  "Value",
                  "RoleARN"
                ],
                members: {
                  Claim: {},
                  MatchType: {},
                  Value: {},
                  RoleARN: {}
                }
              }
            }
          }
        }
      }
    }
  },
  S1s: {
    type: "map",
    key: {},
    value: {}
  }
};
var require$$1 = {
  version,
  metadata,
  operations,
  shapes
};
const pagination = {
  ListIdentityPools: {
    input_token: "NextToken",
    limit_key: "MaxResults",
    output_token: "NextToken",
    result_key: "IdentityPools"
  }
};
var require$$2 = {
  pagination
};
var AWS$5 = core;
var Service2 = AWS$5.Service;
var apiLoader = AWS$5.apiLoader;
apiLoader.services["cognitoidentity"] = {};
AWS$5.CognitoIdentity = Service2.defineService("cognitoidentity", ["2014-06-30"]);
Object.defineProperty(apiLoader.services["cognitoidentity"], "2014-06-30", {
  get: function get4() {
    var model = require$$1;
    model.paginators = require$$2.pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});
var cognitoidentity = AWS$5.CognitoIdentity;
var AWS$4 = core;
var CognitoIdentity = cognitoidentity;
var STS$1 = sts;
AWS$4.CognitoIdentityCredentials = AWS$4.util.inherit(AWS$4.Credentials, {
  localStorageKey: {
    id: "aws.cognito.identity-id.",
    providers: "aws.cognito.identity-providers."
  },
  constructor: function CognitoIdentityCredentials(params, clientConfig) {
    AWS$4.Credentials.call(this);
    this.expired = true;
    this.params = params;
    this.data = null;
    this._identityId = null;
    this._clientConfig = AWS$4.util.copy(clientConfig || {});
    this.loadCachedId();
    var self2 = this;
    Object.defineProperty(this, "identityId", {
      get: function() {
        self2.loadCachedId();
        return self2._identityId || self2.params.IdentityId;
      },
      set: function(identityId) {
        self2._identityId = identityId;
      }
    });
  },
  refresh: function refresh5(callback) {
    this.coalesceRefresh(callback || AWS$4.util.fn.callback);
  },
  load: function load5(callback) {
    var self2 = this;
    self2.createClients();
    self2.data = null;
    self2._identityId = null;
    self2.getId(function(err) {
      if (!err) {
        if (!self2.params.RoleArn) {
          self2.getCredentialsForIdentity(callback);
        } else {
          self2.getCredentialsFromSTS(callback);
        }
      } else {
        self2.clearIdOnNotAuthorized(err);
        callback(err);
      }
    });
  },
  clearCachedId: function clearCache() {
    this._identityId = null;
    delete this.params.IdentityId;
    var poolId = this.params.IdentityPoolId;
    var loginId = this.params.LoginId || "";
    delete this.storage[this.localStorageKey.id + poolId + loginId];
    delete this.storage[this.localStorageKey.providers + poolId + loginId];
  },
  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {
    var self2 = this;
    if (err.code == "NotAuthorizedException") {
      self2.clearCachedId();
    }
  },
  getId: function getId(callback) {
    var self2 = this;
    if (typeof self2.params.IdentityId === "string") {
      return callback(null, self2.params.IdentityId);
    }
    self2.cognito.getId(function(err, data) {
      if (!err && data.IdentityId) {
        self2.params.IdentityId = data.IdentityId;
        callback(null, data.IdentityId);
      } else {
        callback(err);
      }
    });
  },
  loadCredentials: function loadCredentials(data, credentials) {
    if (!data || !credentials)
      return;
    credentials.expired = false;
    credentials.accessKeyId = data.Credentials.AccessKeyId;
    credentials.secretAccessKey = data.Credentials.SecretKey;
    credentials.sessionToken = data.Credentials.SessionToken;
    credentials.expireTime = data.Credentials.Expiration;
  },
  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {
    var self2 = this;
    self2.cognito.getCredentialsForIdentity(function(err, data) {
      if (!err) {
        self2.cacheId(data);
        self2.data = data;
        self2.loadCredentials(self2.data, self2);
      } else {
        self2.clearIdOnNotAuthorized(err);
      }
      callback(err);
    });
  },
  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {
    var self2 = this;
    self2.cognito.getOpenIdToken(function(err, data) {
      if (!err) {
        self2.cacheId(data);
        self2.params.WebIdentityToken = data.Token;
        self2.webIdentityCredentials.refresh(function(webErr) {
          if (!webErr) {
            self2.data = self2.webIdentityCredentials.data;
            self2.sts.credentialsFrom(self2.data, self2);
          }
          callback(webErr);
        });
      } else {
        self2.clearIdOnNotAuthorized(err);
        callback(err);
      }
    });
  },
  loadCachedId: function loadCachedId() {
    var self2 = this;
    if (AWS$4.util.isBrowser() && !self2.params.IdentityId) {
      var id = self2.getStorage("id");
      if (id && self2.params.Logins) {
        var actualProviders = Object.keys(self2.params.Logins);
        var cachedProviders = (self2.getStorage("providers") || "").split(",");
        var intersect = cachedProviders.filter(function(n2) {
          return actualProviders.indexOf(n2) !== -1;
        });
        if (intersect.length !== 0) {
          self2.params.IdentityId = id;
        }
      } else if (id) {
        self2.params.IdentityId = id;
      }
    }
  },
  createClients: function() {
    var clientConfig = this._clientConfig;
    this.webIdentityCredentials = this.webIdentityCredentials || new AWS$4.WebIdentityCredentials(this.params, clientConfig);
    if (!this.cognito) {
      var cognitoConfig = AWS$4.util.merge({}, clientConfig);
      cognitoConfig.params = this.params;
      this.cognito = new CognitoIdentity(cognitoConfig);
    }
    this.sts = this.sts || new STS$1(clientConfig);
  },
  cacheId: function cacheId(data) {
    this._identityId = data.IdentityId;
    this.params.IdentityId = this._identityId;
    if (AWS$4.util.isBrowser()) {
      this.setStorage("id", data.IdentityId);
      if (this.params.Logins) {
        this.setStorage("providers", Object.keys(this.params.Logins).join(","));
      }
    }
  },
  getStorage: function getStorage(key) {
    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || "")];
  },
  setStorage: function setStorage(key, val) {
    try {
      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || "")] = val;
    } catch (_2) {
    }
  },
  storage: function() {
    try {
      var storage = AWS$4.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === "object" ? window.localStorage : {};
      storage["aws.test-storage"] = "foobar";
      delete storage["aws.test-storage"];
      return storage;
    } catch (_2) {
      return {};
    }
  }()
});
var AWS$3 = core;
var STS = sts;
AWS$3.SAMLCredentials = AWS$3.util.inherit(AWS$3.Credentials, {
  constructor: function SAMLCredentials(params) {
    AWS$3.Credentials.call(this);
    this.expired = true;
    this.params = params;
  },
  refresh: function refresh6(callback) {
    this.coalesceRefresh(callback || AWS$3.util.fn.callback);
  },
  load: function load6(callback) {
    var self2 = this;
    self2.createClients();
    self2.service.assumeRoleWithSAML(function(err, data) {
      if (!err) {
        self2.service.credentialsFrom(data, self2);
      }
      callback(err);
    });
  },
  createClients: function() {
    this.service = this.service || new STS({ params: this.params });
  }
});
var util$1 = util_1;
var Shape = shape;
function DomXmlParser() {
}
DomXmlParser.prototype.parse = function(xml, shape2) {
  if (xml.replace(/^\s+/, "") === "")
    return {};
  var result, error2;
  try {
    if (window.DOMParser) {
      try {
        var parser2 = new DOMParser();
        result = parser2.parseFromString(xml, "text/xml");
      } catch (syntaxError) {
        throw util$1.error(new Error("Parse error in document"), {
          originalError: syntaxError,
          code: "XMLParserError",
          retryable: true
        });
      }
      if (result.documentElement === null) {
        throw util$1.error(new Error("Cannot parse empty document."), {
          code: "XMLParserError",
          retryable: true
        });
      }
      var isError = result.getElementsByTagName("parsererror")[0];
      if (isError && (isError.parentNode === result || isError.parentNode.nodeName === "body" || isError.parentNode.parentNode === result || isError.parentNode.parentNode.nodeName === "body")) {
        var errorElement = isError.getElementsByTagName("div")[0] || isError;
        throw util$1.error(new Error(errorElement.textContent || "Parser error in document"), {
          code: "XMLParserError",
          retryable: true
        });
      }
    } else if (window.ActiveXObject) {
      result = new window.ActiveXObject("Microsoft.XMLDOM");
      result.async = false;
      if (!result.loadXML(xml)) {
        throw util$1.error(new Error("Parse error in document"), {
          code: "XMLParserError",
          retryable: true
        });
      }
    } else {
      throw new Error("Cannot load XML parser");
    }
  } catch (e2) {
    error2 = e2;
  }
  if (result && result.documentElement && !error2) {
    var data = parseXml(result.documentElement, shape2);
    var metadata2 = getElementByTagName(result.documentElement, "ResponseMetadata");
    if (metadata2) {
      data.ResponseMetadata = parseXml(metadata2, {});
    }
    return data;
  } else if (error2) {
    throw util$1.error(error2 || new Error(), { code: "XMLParserError", retryable: true });
  } else {
    return {};
  }
};
function getElementByTagName(xml, tag) {
  var elements = xml.getElementsByTagName(tag);
  for (var i = 0, iLen = elements.length; i < iLen; i++) {
    if (elements[i].parentNode === xml) {
      return elements[i];
    }
  }
}
function parseXml(xml, shape2) {
  if (!shape2)
    shape2 = {};
  switch (shape2.type) {
    case "structure":
      return parseStructure(xml, shape2);
    case "map":
      return parseMap(xml, shape2);
    case "list":
      return parseList(xml, shape2);
    case void 0:
    case null:
      return parseUnknown(xml);
    default:
      return parseScalar(xml, shape2);
  }
}
function parseStructure(xml, shape2) {
  var data = {};
  if (xml === null)
    return data;
  util$1.each(shape2.members, function(memberName, memberShape) {
    if (memberShape.isXmlAttribute) {
      if (Object.prototype.hasOwnProperty.call(xml.attributes, memberShape.name)) {
        var value = xml.attributes[memberShape.name].value;
        data[memberName] = parseXml({ textContent: value }, memberShape);
      }
    } else {
      var xmlChild = memberShape.flattened ? xml : getElementByTagName(xml, memberShape.name);
      if (xmlChild) {
        data[memberName] = parseXml(xmlChild, memberShape);
      } else if (!memberShape.flattened && memberShape.type === "list" && !shape2.api.xmlNoDefaultLists) {
        data[memberName] = memberShape.defaultValue;
      }
    }
  });
  return data;
}
function parseMap(xml, shape2) {
  var data = {};
  var xmlKey = shape2.key.name || "key";
  var xmlValue = shape2.value.name || "value";
  var tagName = shape2.flattened ? shape2.name : "entry";
  var child = xml.firstElementChild;
  while (child) {
    if (child.nodeName === tagName) {
      var key = getElementByTagName(child, xmlKey).textContent;
      var value = getElementByTagName(child, xmlValue);
      data[key] = parseXml(value, shape2.value);
    }
    child = child.nextElementSibling;
  }
  return data;
}
function parseList(xml, shape2) {
  var data = [];
  var tagName = shape2.flattened ? shape2.name : shape2.member.name || "member";
  var child = xml.firstElementChild;
  while (child) {
    if (child.nodeName === tagName) {
      data.push(parseXml(child, shape2.member));
    }
    child = child.nextElementSibling;
  }
  return data;
}
function parseScalar(xml, shape2) {
  if (xml.getAttribute) {
    var encoding = xml.getAttribute("encoding");
    if (encoding === "base64") {
      shape2 = new Shape.create({ type: encoding });
    }
  }
  var text = xml.textContent;
  if (text === "")
    text = null;
  if (typeof shape2.toType === "function") {
    return shape2.toType(text);
  } else {
    return text;
  }
}
function parseUnknown(xml) {
  if (xml === void 0 || xml === null)
    return "";
  if (!xml.firstElementChild) {
    if (xml.parentNode.parentNode === null)
      return {};
    if (xml.childNodes.length === 0)
      return "";
    else
      return xml.textContent;
  }
  var shape2 = { type: "structure", members: {} };
  var child = xml.firstElementChild;
  while (child) {
    var tag = child.nodeName;
    if (Object.prototype.hasOwnProperty.call(shape2.members, tag)) {
      shape2.members[tag].type = "list";
    } else {
      shape2.members[tag] = { name: tag };
    }
    child = child.nextElementSibling;
  }
  return parseStructure(xml, shape2);
}
var browser_parser = DomXmlParser;
function EventEmitter$1() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || void 0;
}
var events = EventEmitter$1;
EventEmitter$1.EventEmitter = EventEmitter$1;
EventEmitter$1.prototype._events = void 0;
EventEmitter$1.prototype._maxListeners = void 0;
EventEmitter$1.defaultMaxListeners = 10;
EventEmitter$1.prototype.setMaxListeners = function(n2) {
  if (!isNumber(n2) || n2 < 0 || isNaN(n2))
    throw TypeError("n must be a positive number");
  this._maxListeners = n2;
  return this;
};
EventEmitter$1.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners2;
  if (!this._events)
    this._events = {};
  if (type === "error") {
    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er;
      } else {
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
        err.context = er;
        throw err;
      }
    }
  }
  handler = this._events[type];
  if (isUndefined(handler))
    return false;
  if (isFunction(handler)) {
    switch (arguments.length) {
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners2 = handler.slice();
    len = listeners2.length;
    for (i = 0; i < len; i++)
      listeners2[i].apply(this, args);
  }
  return true;
};
EventEmitter$1.prototype.addListener = function(type, listener) {
  var m2;
  if (!isFunction(listener))
    throw TypeError("listener must be a function");
  if (!this._events)
    this._events = {};
  if (this._events.newListener)
    this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener);
  if (!this._events[type])
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    this._events[type].push(listener);
  else
    this._events[type] = [this._events[type], listener];
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m2 = this._maxListeners;
    } else {
      m2 = EventEmitter$1.defaultMaxListeners;
    }
    if (m2 && m2 > 0 && this._events[type].length > m2) {
      this._events[type].warned = true;
      console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length);
      if (typeof console.trace === "function") {
        console.trace();
      }
    }
  }
  return this;
};
EventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;
EventEmitter$1.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError("listener must be a function");
  var fired = false;
  function g2() {
    this.removeListener(type, g2);
    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }
  g2.listener = listener;
  this.on(type, g2);
  return this;
};
EventEmitter$1.prototype.removeListener = function(type, listener) {
  var list, position, length, i;
  if (!isFunction(listener))
    throw TypeError("listener must be a function");
  if (!this._events || !this._events[type])
    return this;
  list = this._events[type];
  length = list.length;
  position = -1;
  if (list === listener || isFunction(list.listener) && list.listener === listener) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit("removeListener", type, listener);
  } else if (isObject(list)) {
    for (i = length; i-- > 0; ) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        position = i;
        break;
      }
    }
    if (position < 0)
      return this;
    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }
    if (this._events.removeListener)
      this.emit("removeListener", type, listener);
  }
  return this;
};
EventEmitter$1.prototype.removeAllListeners = function(type) {
  var key, listeners2;
  if (!this._events)
    return this;
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === "removeListener")
        continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners("removeListener");
    this._events = {};
    return this;
  }
  listeners2 = this._events[type];
  if (isFunction(listeners2)) {
    this.removeListener(type, listeners2);
  } else if (listeners2) {
    while (listeners2.length)
      this.removeListener(type, listeners2[listeners2.length - 1]);
  }
  delete this._events[type];
  return this;
};
EventEmitter$1.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};
EventEmitter$1.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];
    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};
EventEmitter$1.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};
function isFunction(arg) {
  return typeof arg === "function";
}
function isNumber(arg) {
  return typeof arg === "number";
}
function isObject(arg) {
  return typeof arg === "object" && arg !== null;
}
function isUndefined(arg) {
  return arg === void 0;
}
var AWS$2 = core;
var EventEmitter = events.EventEmitter;
AWS$2.XHRClient = AWS$2.util.inherit({
  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {
    var self2 = this;
    var endpoint = httpRequest.endpoint;
    var emitter = new EventEmitter();
    var href = endpoint.protocol + "//" + endpoint.hostname;
    if (endpoint.port !== 80 && endpoint.port !== 443) {
      href += ":" + endpoint.port;
    }
    href += httpRequest.path;
    var xhr = new XMLHttpRequest(), headersEmitted = false;
    httpRequest.stream = xhr;
    xhr.addEventListener("readystatechange", function() {
      try {
        if (xhr.status === 0)
          return;
      } catch (e2) {
        return;
      }
      if (this.readyState >= this.HEADERS_RECEIVED && !headersEmitted) {
        emitter.statusCode = xhr.status;
        emitter.headers = self2.parseHeaders(xhr.getAllResponseHeaders());
        emitter.emit("headers", emitter.statusCode, emitter.headers, xhr.statusText);
        headersEmitted = true;
      }
      if (this.readyState === this.DONE) {
        self2.finishRequest(xhr, emitter);
      }
    }, false);
    xhr.upload.addEventListener("progress", function(evt) {
      emitter.emit("sendProgress", evt);
    });
    xhr.addEventListener("progress", function(evt) {
      emitter.emit("receiveProgress", evt);
    }, false);
    xhr.addEventListener("timeout", function() {
      errCallback(AWS$2.util.error(new Error("Timeout"), { code: "TimeoutError" }));
    }, false);
    xhr.addEventListener("error", function() {
      errCallback(AWS$2.util.error(new Error("Network Failure"), {
        code: "NetworkingError"
      }));
    }, false);
    xhr.addEventListener("abort", function() {
      errCallback(AWS$2.util.error(new Error("Request aborted"), {
        code: "RequestAbortedError"
      }));
    }, false);
    callback(emitter);
    xhr.open(httpRequest.method, href, httpOptions.xhrAsync !== false);
    AWS$2.util.each(httpRequest.headers, function(key, value) {
      if (key !== "Content-Length" && key !== "User-Agent" && key !== "Host") {
        xhr.setRequestHeader(key, value);
      }
    });
    if (httpOptions.timeout && httpOptions.xhrAsync !== false) {
      xhr.timeout = httpOptions.timeout;
    }
    if (httpOptions.xhrWithCredentials) {
      xhr.withCredentials = true;
    }
    try {
      xhr.responseType = "arraybuffer";
    } catch (e2) {
    }
    try {
      if (httpRequest.body) {
        xhr.send(httpRequest.body);
      } else {
        xhr.send();
      }
    } catch (err) {
      if (httpRequest.body && typeof httpRequest.body.buffer === "object") {
        xhr.send(httpRequest.body.buffer);
      } else {
        throw err;
      }
    }
    return emitter;
  },
  parseHeaders: function parseHeaders2(rawHeaders) {
    var headers = {};
    AWS$2.util.arrayEach(rawHeaders.split(/\r?\n/), function(line) {
      var key = line.split(":", 1)[0];
      var value = line.substring(key.length + 2);
      if (key.length > 0)
        headers[key.toLowerCase()] = value;
    });
    return headers;
  },
  finishRequest: function finishRequest(xhr, emitter) {
    var buffer2;
    if (xhr.responseType === "arraybuffer" && xhr.response) {
      var ab = xhr.response;
      buffer2 = new AWS$2.util.Buffer(ab.byteLength);
      var view = new Uint8Array(ab);
      for (var i = 0; i < buffer2.length; ++i) {
        buffer2[i] = view[i];
      }
    }
    try {
      if (!buffer2 && typeof xhr.responseText === "string") {
        buffer2 = new AWS$2.util.Buffer(xhr.responseText);
      }
    } catch (e2) {
    }
    if (buffer2)
      emitter.emit("data", buffer2);
    emitter.emit("end");
  }
});
AWS$2.HttpClient.prototype = AWS$2.XHRClient.prototype;
AWS$2.HttpClient.streamsApiVersion = 1;
var util = util_1;
util.crypto.lib = browserCryptoLib.exports;
util.Buffer = buffer.Buffer;
util.url = url;
util.querystring = querystring$1;
util.realClock = browserClock;
util.environment = "js";
util.createEventStream = bufferedCreateEventStream.createEventStream;
util.isBrowser = function() {
  return true;
};
util.isNode = function() {
  return false;
};
var AWS$1 = core;
AWS$1.XML.Parser = browser_parser;
(function(module) {
  var AWS2 = core;
  if (typeof window !== "undefined")
    window.AWS = AWS2;
  module.exports = AWS2;
  if (typeof self !== "undefined")
    self.AWS = AWS2;
})(browser);
const initialState$7 = {
  inProgress: false
};
const slice$8 = createSlice({
  initialState: initialState$7,
  name: "details",
  reducers: {
    setError: (state, action) => {
      state.error = action.payload;
    },
    setInProgress: (state, action) => {
      state.inProgress = action.payload;
    },
    setUserAttributes: (state, action) => {
      state.attributes = action.payload;
    },
    setUserDetails: (state, action) => {
      const { analytics, info, communication, preferences } = action.payload;
      state.communication = communication;
      state.info = info;
      state.analytics = analytics;
      state.preferences = preferences;
    },
    setUserPreferences: (state, action) => {
      state.preferences = action.payload;
    }
  }
});
const { setUserAttributes } = slice$8.actions;
var details = slice$8.reducer;
const logger = new p$1();
const initialState$6 = {
  inProgress: false
};
const slice$7 = createSlice({
  initialState: initialState$6,
  name: "login",
  reducers: {
    setLoginFailure: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.success = false;
      state.error = action.payload;
      state.inProgress = false;
    },
    setLoginInProgress: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.error = void 0;
      state.success = void 0;
      state.inProgress = action.payload;
    },
    setLoginSuccess: (state) => {
      state.lastUpdated = DateTime.now().toISO();
      state.error = void 0;
      state.success = true;
      state.inProgress = false;
    }
  }
});
var login = slice$7.reducer;
const { setLoginFailure, setLoginInProgress, setLoginSuccess } = slice$7.actions;
const login$1 = ({
  username,
  password
}) => async (dispatch, getState) => {
  try {
    dispatch(setLoginInProgress(true));
    if (!username) {
      const err = new qa$1(`"username" property is required.`, {
        form: {
          field: "username",
          problem: FormValidationProblem.Required
        }
      });
      dispatch(setLoginFailure(err.toJSON()));
      return;
    }
    if (!password) {
      const err = new qa$1(`"password" property is required.`, {
        form: {
          field: "password",
          problem: FormValidationProblem.Required
        }
      });
      dispatch(setLoginFailure(err.toJSON()));
      return;
    }
    const problems = Si(username, {
      [Condition.IsEmailAddress]: true
    });
    if (problems.length > 0) {
      const err = new Ha$1(`"username" value is not valid email.`, {
        form: {
          field: "username",
          problem: FormValidationProblem.NotValidEmail
        }
      });
      dispatch(setLoginFailure(err.toJSON()));
      return;
    }
    const config2 = getState().app.config;
    browser.exports.config.update({
      region: config2.aws.region
    });
    const authenticationData = {
      Password: password,
      Username: username
    };
    const authenticationDetails = new AuthenticationDetails(authenticationData);
    const poolData = {
      ClientId: config2.aws.cognito.userPoolClientId,
      UserPoolId: config2.aws.cognito.userPoolId
    };
    const userPool = new CognitoUserPool(poolData);
    const userData = {
      Pool: userPool,
      Username: username
    };
    const cognitoUser = new CognitoUser(userData);
    cognitoUser.authenticateUser(authenticationDetails, {
      onFailure: (err) => {
        const exception = new d("Error encountered while logging user in", {
          cause: err
        });
        dispatch(setLoginFailure(exception.toJSON()));
      },
      onSuccess: (result) => {
        const accessToken = result.getAccessToken().getJwtToken();
        const credentials = new browser.exports.CognitoIdentityCredentials({
          IdentityPoolId: config2.aws.cognito.identityPoolId,
          Logins: {
            [`cognito-idp.${config2.aws.region}.amazonaws.com/${config2.aws.cognito.userPoolId}`]: result.getIdToken().getJwtToken()
          }
        });
        browser.exports.config.credentials = credentials;
        browser.exports.config.credentials.refresh((err) => {
          if (err) {
            const exception = new d("Error encountered while refreshing credentials", {
              cause: err
            });
            dispatch(setLoginFailure(exception.toJSON()));
          } else {
            cognitoUser.getUserAttributes((err2, attributes) => {
              if (err2) {
                const exception = new d("Error encountered while getting user attributes", {
                  cause: err2
                });
                logger.exception(exception.toJSON());
                dispatch(setLoginFailure(exception.toJSON()));
              } else if (attributes) {
                let attrs = {};
                for (const attr of Object.entries(attributes)) {
                  attrs = __spreadValues({
                    [attr[1].Name]: attr[1].Value
                  }, attrs);
                }
                dispatch(setUserAttributes(attrs));
                dispatch(setLoggedIn({
                  accessToken
                }));
                dispatch(setLoginSuccess());
              }
            });
          }
        });
      }
    });
  } catch (error2) {
    const exception = error2 instanceof d ? error2 : new aa$1("An unknown error occurred while logging a user in.", {
      cause: error2
    });
    dispatch(setLoginFailure(exception.toJSON()));
  }
};
const refreshSession = () => async (dispatch, getState) => {
  try {
    dispatch(setLoginInProgress(true));
    const config2 = getState().app.config;
    browser.exports.config.update({
      region: config2.aws.region
    });
    const poolData = {
      ClientId: config2.aws.cognito.userPoolClientId,
      UserPoolId: config2.aws.cognito.userPoolId
    };
    console.log("poolData", poolData);
    const userPool = new CognitoUserPool(poolData);
    const cognitoUser = userPool.getCurrentUser();
    console.log("cognitoUser", cognitoUser);
    if (cognitoUser === null) {
      dispatch(setLoggedOut());
      dispatch(setLoginInProgress(false));
    } else {
      cognitoUser.getSession((err, session) => {
        if (err) {
          dispatch(setLoggedOut());
          dispatch(setLoginInProgress(false));
          return;
        }
        console.log("session", session);
        if (!session) {
          dispatch(setLoggedOut());
          dispatch(setLoginInProgress(false));
          return;
        }
        if (!session.isValid()) {
          dispatch(setLoggedOut());
          dispatch(setLoginInProgress(false));
        } else {
          const accessToken = session.getIdToken().getJwtToken();
          browser.exports.config.update({
            region: config2.aws.region
          });
          cognitoUser.refreshSession(session.getRefreshToken(), (err2, result) => {
            if (err2) {
              console.log("error in line 302", err2);
            }
            console.log("result", result);
          });
          const credentials = new browser.exports.CognitoIdentityCredentials({
            IdentityPoolId: config2.aws.cognito.identityPoolId,
            Logins: {
              [`cognito-idp.${config2.aws.region}.amazonaws.com/${config2.aws.cognito.userPoolId}`]: session.getIdToken().getJwtToken()
            }
          });
          browser.exports.config.credentials = credentials;
          browser.exports.config.credentials.refresh((err2) => {
            if (err2) {
              const exception = new d("Error encountered while refreshing credentials", {
                cause: err2
              });
              logger.exception(exception.toJSON());
              dispatch(setLoggedOut());
              dispatch(setLoginInProgress(false));
            } else {
              cognitoUser.getUserAttributes((err22, attributes) => {
                if (err22) {
                  const exception = new d("Error encountered getting user attributes", {
                    cause: err2
                  });
                  logger.exception(exception.toJSON());
                  dispatch(setLoggedOut());
                  dispatch(setLoginInProgress(false));
                } else if (!attributes) {
                  dispatch(setLoggedOut());
                  dispatch(setLoginInProgress(false));
                } else {
                  let attrs = {};
                  for (const attr of Object.entries(attributes)) {
                    attrs = __spreadProps(__spreadValues({}, attrs), {
                      [attr[1].Name]: attr[1].Value
                    });
                  }
                  dispatch(setUserAttributes(attrs));
                  dispatch(setLoggedIn({
                    accessToken
                  }));
                  dispatch(setLoginSuccess());
                }
              });
            }
          });
        }
      });
    }
  } catch (error2) {
    const exception = new d("Error encountered getting user attributes", {
      cause: error2
    });
    logger.exception(exception.toJSON());
    dispatch(setLoginFailure(exception.toJSON()));
  }
};
const logout = () => async (dispatch, getState) => {
  const config2 = getState().app.config;
  const poolData = {
    ClientId: config2.aws.cognito.userPoolClientId,
    UserPoolId: config2.aws.cognito.userPoolId
  };
  const userPool = new CognitoUserPool(poolData);
  const cognitoUser = userPool.getCurrentUser();
  if (cognitoUser) {
    cognitoUser.signOut(() => {
      dispatch(setLoggedOut());
    });
  }
};
const initialState$5 = {
  inProgress: false
};
const slice$6 = createSlice({
  initialState: initialState$5,
  name: "signup",
  reducers: {
    setSignupFailure: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.error = action.payload;
      state.inProgress = false;
    },
    setSignupInProgress: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.inProgress = action.payload;
    },
    setSignupSuccess: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.inProgress = false;
      state.userId = action.payload.userId;
      state.success = true;
    }
  }
});
var signup = slice$6.reducer;
const { setSignupFailure, setSignupInProgress, setSignupSuccess } = slice$6.actions;
const signUp = ({
  firstName,
  lastName,
  password,
  username
}) => async (dispatch, getState) => {
  try {
    dispatch(setSignupInProgress(true));
    if (!username) {
      const err = new qa$1(`"username" property is required.`, {
        form: {
          field: "username",
          problem: FormValidationProblem.Required
        }
      });
      dispatch(setSignupFailure(err.toJSON()));
      return;
    }
    if (!password) {
      const err = new qa$1(`"password" property is required.`, {
        form: {
          field: "password",
          problem: FormValidationProblem.Required
        }
      });
      dispatch(setSignupFailure(err.toJSON()));
      return;
    }
    const problems = Si(username, {
      [Condition.IsEmailAddress]: true
    });
    if (problems.length > 0) {
      const err = new Ha$1(`"username" value is not valid email.`, {
        form: {
          field: "username",
          problem: FormValidationProblem.NotValidEmail
        }
      });
      dispatch(setSignupFailure(err.toJSON()));
      return;
    }
    const config2 = getState().app.config;
    const poolData = {
      ClientId: config2.aws.cognito.userPoolClientId,
      UserPoolId: config2.aws.cognito.userPoolId
    };
    const userPool = new CognitoUserPool(poolData);
    const attributeList = [
      new CognitoUserAttribute({
        Name: "email",
        Value: username
      }),
      new CognitoUserAttribute({
        Name: "given_name",
        Value: firstName
      }),
      new CognitoUserAttribute({
        Name: "family_name",
        Value: lastName
      })
    ];
    userPool.signUp(username, password, attributeList, [], (err, result) => {
      if (err) {
        console.log("err", err);
        const exception = new d("Failure when signing user up", {
          cause: err
        });
        dispatch(setSignupFailure(exception.toJSON()));
        return;
      }
      if (!result) {
        const exception = new d("Unknown error occurred", {});
        dispatch(setSignupFailure(exception.toJSON()));
        return;
      }
      const cognitoUser = result == null ? void 0 : result.user;
      const userSub = result.userSub;
      if (userSub) {
        dispatch(setSignupInProgress(false));
        dispatch(setSignupSuccess({ userId: userSub }));
      }
    });
  } catch (error2) {
    if (error2.name === p$2.name) {
      dispatch(setSignupFailure(error2.toJSON()));
      return;
    }
    throw error2;
  }
};
const initialState$4 = {
  inProgress: false
};
const slice$5 = createSlice({
  initialState: initialState$4,
  name: "usernameAvailability",
  reducers: {
    setCheckUsernameAvailabilityFailure: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.error = action.payload;
    },
    setCheckUsernameAvailabilityInProgress: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.inProgress = action.payload;
    },
    setCheckUsernameAvailabilitySuccess: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.available = action.payload;
    }
  }
});
var usernameAvailability = slice$5.reducer;
const {
  setCheckUsernameAvailabilityFailure,
  setCheckUsernameAvailabilityInProgress,
  setCheckUsernameAvailabilitySuccess
} = slice$5.actions;
const checkUsernameAvailability = ({ username }) => async (dispatch) => {
  try {
    dispatch(setCheckUsernameAvailabilityInProgress(true));
    dispatch(setCheckUsernameAvailabilityInProgress(false));
  } catch (error2) {
    const exception = error2 instanceof d ? error2 : new G$1("An exception occurred while checking username availability", {
      cause: error2,
      origin: {
        file: "src/state/user/authentication/username-availability.ts"
      }
    });
    dispatch(setCheckUsernameAvailabilityFailure(exception.toJSON()));
  }
};
const initialState$3 = {
  error: void 0,
  inProgress: false,
  lastUpdated: void 0,
  success: void 0
};
const slice$4 = createSlice({
  initialState: initialState$3,
  name: "resend",
  reducers: {
    setVerificationCodeResendFailure: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.inProgress = false;
      state.success = false;
      state.error = action.payload;
    },
    setVerificationCodeResendInProgress: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.error = void 0;
      state.success = void 0;
      state.inProgress = action.payload;
    },
    setVerificationCodeResendSuccess: (state) => {
      state.lastUpdated = DateTime.now().toISO();
      state.error = void 0;
      state.inProgress = false;
      state.success = true;
    }
  }
});
var resend = slice$4.reducer;
const {
  setVerificationCodeResendFailure,
  setVerificationCodeResendInProgress,
  setVerificationCodeResendSuccess
} = slice$4.actions;
const resendVerificationCode = ({ userId }) => async (dispatch, getState) => {
  try {
    dispatch(setVerificationCodeResendInProgress(true));
    const config2 = getState().app.config;
    const poolData = {
      ClientId: config2.aws.cognito.userPoolClientId,
      UserPoolId: config2.aws.cognito.userPoolId
    };
    const userPool = new CognitoUserPool(poolData);
    const userData = {
      Pool: userPool,
      Username: userId
    };
    const cognitoUser = new CognitoUser(userData);
    cognitoUser.resendConfirmationCode((err, result) => {
      if (err) {
        const exception = new d("Failure resending verification code", {
          cause: err
        });
        dispatch(setVerificationCodeResendFailure(exception.toJSON()));
        return;
      }
      console.log("resendConfirmationCode result", result);
      dispatch(setVerificationCodeResendSuccess());
    });
  } catch (err) {
    const exception = new d("Failure resending verification code", {
      cause: err
    });
    dispatch(setVerificationCodeResendFailure(exception.toJSON()));
  }
};
const initialState$2 = {
  delivery: void 0,
  error: void 0,
  inProgress: false,
  lastUpdated: void 0,
  status: void 0,
  success: void 0
};
const slice$3 = createSlice({
  initialState: initialState$2,
  name: "status",
  reducers: {
    setVerificationStatusLookupFailure: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.success = false;
      state.inProgress = false;
      state.error = action.payload;
    },
    setVerificationStatusLookupInProgress: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.error = void 0;
      state.success = void 0;
      state.inProgress = action.payload;
    },
    setVerificationStatusLookupSuccess: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.error = void 0;
      state.status = action.payload.status;
      state.delivery = action.payload.delivery;
      state.inProgress = false;
      state.success = true;
    }
  }
});
var status = slice$3.reducer;
const {
  setVerificationStatusLookupFailure,
  setVerificationStatusLookupInProgress,
  setVerificationStatusLookupSuccess
} = slice$3.actions;
const getVerificationDetails = ({ userId }) => async (dispatch, getState) => {
  try {
    dispatch(setVerificationStatusLookupInProgress(true));
    dispatch(setVerificationStatusLookupInProgress(false));
  } catch (error2) {
    const exception = error2 instanceof d ? error2 : new d(error2.message, {
      cause: error2
    });
    dispatch(setVerificationStatusLookupFailure(exception.toJSON()));
    dispatch(setVerificationStatusLookupInProgress(false));
  }
};
const initialState$1 = {
  error: void 0,
  inProgress: false,
  lastUpdated: void 0,
  success: void 0
};
const slice$2 = createSlice({
  initialState: initialState$1,
  name: "verify",
  reducers: {
    setVerificationCodeVerifyFailure: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.error = action.payload;
      state.inProgress = false;
    },
    setVerificationCodeVerifyInProgress: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.inProgress = action.payload;
    },
    setVerificationCodeVerifySuccess: (state) => {
      state.lastUpdated = DateTime.now().toISO();
      state.error = void 0;
      state.success = true;
      state.inProgress = false;
    }
  }
});
var verify = slice$2.reducer;
const {
  setVerificationCodeVerifyFailure,
  setVerificationCodeVerifyInProgress,
  setVerificationCodeVerifySuccess
} = slice$2.actions;
const verifyCode = ({ code: code2, userId }) => async (dispatch, getState) => {
  dispatch(setVerificationCodeVerifyInProgress(true));
  const config2 = getState().app.config;
  const poolData = {
    ClientId: config2.aws.cognito.userPoolClientId,
    UserPoolId: config2.aws.cognito.userPoolId
  };
  const userPool = new CognitoUserPool(poolData);
  const userData = {
    Pool: userPool,
    Username: userId
  };
  const cognitoUser = new CognitoUser(userData);
  cognitoUser.confirmRegistration(code2, true, (err, result) => {
    if (err) {
      const exception = new d("Failure confirming verification code", {
        cause: err
      });
      dispatch(setVerificationCodeVerifyFailure(exception.toJSON()));
      return;
    }
    dispatch(setVerificationCodeVerifySuccess());
  });
};
var code = combineReducers({ resend, status, verify });
var verification = combineReducers({
  code
});
const initialState = {
  initialized: false,
  lastUpdated: void 0,
  loggedIn: false
};
const slice$1 = createSlice({
  initialState,
  name: "authentication",
  reducers: {
    setLoggedIn: (state, action) => {
      state.lastUpdated = DateTime.now().toISO();
      state.tokens = action.payload;
      state.loggedIn = true;
    },
    setLoggedOut: (state) => {
      state.lastUpdated = DateTime.now().toISO();
      state.tokens = void 0;
      state.loggedIn = false;
    }
  }
});
const { setLoggedIn, setLoggedOut } = slice$1.actions;
var authentication = combineReducers({
  state: slice$1.reducer,
  login,
  signup,
  usernameAvailability,
  verification
});
var user = combineReducers({
  authentication,
  details
});
const createRootReducer = ({
  models,
  reducers
}) => {
  return combineReducers(__spreadProps(__spreadValues({}, reducers), {
    app,
    models: createModelsReducer(models),
    ui: ui$1,
    user
  }));
};
const useAppDispatch = () => useDispatch();
const useAppSelector = useSelector;
const paymentMethodsAdapter = createEntityAdapter({
  selectId: (paymentMethod) => paymentMethod.id
});
paymentMethodsAdapter.getSelectors((state) => state.getState().paymentMethods);
const slice = createSlice({
  initialState: paymentMethodsAdapter.getInitialState({
    in_progress: false,
    initialized: false
  }),
  name: "payment_methods",
  reducers: {
    deletePaymentMethod: (state, action) => paymentMethodsAdapter.removeOne(state, action.payload),
    setError: (state, action) => {
      state.error = action.payload;
    },
    setInProgress: (state, action) => {
      state.in_progress = action.payload;
    },
    setPaymentMethods: (state, action) => {
      paymentMethodsAdapter.addMany(state, action.payload);
    }
  }
});
const getPaymentMethods = () => async (dispatch) => {
  dispatch(slice.actions.setInProgress(true));
  dispatch(slice.actions.setInProgress(true));
};
const deletePaymentMethod = (id) => async (dispatch) => {
  dispatch(slice.actions.setInProgress(true));
  dispatch(slice.actions.deletePaymentMethod(id));
  dispatch(slice.actions.setInProgress(false));
};
const subscriptionsAdapter = createEntityAdapter({
  selectId: (subscription) => subscription.id
});
subscriptionsAdapter.getSelectors((state) => state.getState().subscriptions);
const subscriptionsSlice = createSlice({
  initialState: subscriptionsAdapter.getInitialState({
    in_progress: false,
    initialized: false
  }),
  name: "subscriptions",
  reducers: {
    setError: (state, action) => {
      state.error = action.payload;
    },
    setInProgress: (state, action) => {
      state.in_progress = action.payload;
    },
    setSubscriptions: (state, action) => subscriptionsAdapter.setAll(state, action.payload)
  }
});
const getSubscriptions = () => async (dispatch) => {
  dispatch(subscriptionsSlice.actions.setInProgress(true));
  dispatch(subscriptionsSlice.actions.setInProgress(true));
};
const environment = s$3();
const history = createBrowserHistory();
const createStore = ({
  models,
  reducers,
  middleware = []
}) => configureStore({
  devTools: environment.type === EnvironmentType.Development || environment.type === EnvironmentType.NonProduction,
  middleware: (getDefaultMiddleware2) => [...getDefaultMiddleware2(), ...createMiddleware(history, middleware)],
  reducer: createRootReducer({
    models,
    reducers
  })
});
const renderReduxWebApp = async ({
  actions,
  authentication: authentication2 = false,
  container,
  config: config2,
  httpClient,
  routes: routes2,
  store
}) => {
  var _a2, _b, _c, _d;
  await store.dispatch(setConfig(config2));
  if ((_b = (_a2 = config2 == null ? void 0 : config2.ui) == null ? void 0 : _a2.themes) == null ? void 0 : _b.custom) {
    await store.dispatch(addThemes(config2.ui.themes.custom));
  }
  if ((_d = (_c = config2 == null ? void 0 : config2.ui) == null ? void 0 : _c.themes) == null ? void 0 : _d.default) {
    await store.dispatch(setTheme(config2.ui.themes.default));
  }
  await store.dispatch(setRoutes(routes2.map((_e2) => {
    var _f = _e2, {
      component
    } = _f, route = __objRest(_f, [
      "component"
    ]);
    return __spreadValues({}, route);
  })));
  if (authentication2) {
    await store.dispatch(refreshSession());
  }
  return ReactDOM.render(/* @__PURE__ */ jsx(StrictMode, {
    children: /* @__PURE__ */ jsx(Provider, {
      store,
      children: /* @__PURE__ */ jsx(BrowserRouter, {
        children: /* @__PURE__ */ jsx(Routes, {
          children: /* @__PURE__ */ jsx(Route, {
            path: "/",
            element: container,
            children: routes2.map((route, k2) => {
              if (route.role === PageRole.Index) {
                return /* @__PURE__ */ jsx(Route, {
                  index: true,
                  element: /* @__PURE__ */ jsx(route.component, {
                    actions,
                    httpClient
                  })
                }, k2);
              }
              if (route.path) {
                return /* @__PURE__ */ jsx(Route, {
                  element: /* @__PURE__ */ jsx(route.component, {
                    actions,
                    httpClient
                  }),
                  path: route.path
                }, k2);
              }
              return /* @__PURE__ */ jsx(Route, {
                element: /* @__PURE__ */ jsx(route.component, {
                  actions,
                  httpClient
                })
              }, k2);
            })
          })
        })
      })
    })
  }), document.querySelector("#root"));
};
export { addThemes, addToastNotification, checkUsernameAvailability, closeModal, createStore, deletePaymentMethod, getPaymentMethods, getSubscriptions, getVerificationDetails, hideModelPanel, history, login$1 as login, logout, refreshSession, renderReduxWebApp, resendVerificationCode, setTheme, showModal, showModelPanel, signUp, createStore as store, useAppDispatch as useDispatch, useAppSelector as useSelector, verifyCode };
//# sourceMappingURL=index.js.map
